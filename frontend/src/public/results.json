{"took":37,"timed_out":false,"_shards":{"total":5,"successful":5,"failed":0},"hits":{"total":9680,"max_score":0.0,"hits":[{"_index":"codesearch","_type":"code","_id":"e97bf27cd41142ac87058e6ecb95c9e6f8b5c867","_score":0.0,"_source":{"filename":"subprojects/plugins/src/integTest/groovy/org/gradle/api/plugins/BuildSrcPluginIntegrationTest.groovy","content":"/*\n * Copyright 2012 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.gradle.api.plugins\n\nimport org.gradle.integtests.fixtures.AbstractIntegrationSpec\nimport spock.lang.Issue\n\nclass BuildSrcPluginIntegrationTest extends AbstractIntegrationSpec {\n\n    @Issue(\"GRADLE-2001\")\n    def \"can use plugin from buildSrc that changes\"() {\n        given:\n        executer.requireIsolatedDaemons() // make sure we get the same daemon both times\n\n        buildFile << \"apply plugin: 'test-plugin'\"\n\n        file(\"buildSrc/settings.gradle\") << \"include 'testplugin'\"\n\n        file(\"buildSrc/build.gradle\") << \"\"\"\n            apply plugin: \"groovy\"\n            dependencies {\n                runtime project(\":testplugin\")\n            }\n        \"\"\"\n\n        file(\"buildSrc/testplugin/build.gradle\") << \"\"\"\n            apply plugin: \"groovy\"\n\n            dependencies {\n                compile localGroovy()\n                compile gradleApi()\n            }\n        \"\"\"\n\n        def pluginSource = file(\"buildSrc/testplugin/src/main/groovy/testplugin/TestPlugin.groovy\") << \"\"\"\n            package testplugin\n            import org.gradle.api.Plugin\n\n            class TestPlugin implements Plugin {\n                void apply(project) {\n                    project.task(\"echo\").doFirst {\n                        println \"hello\"\n                    }\n                }\n            }\n        \"\"\"\n\n\n        file(\"buildSrc/testplugin/src/main/resources/META-INF/gradle-plugins/test-plugin.properties\") << \"\"\"\n            implementation-class=testplugin.TestPlugin\n        \"\"\"\n\n        when:\n        succeeds \"echo\"\n\n        then:\n        output.contains \"hello\"\n\n        when:\n        pluginSource.write \"\"\"\n            package testplugin\n            import org.gradle.api.Plugin\n\n            class TestPlugin implements Plugin {\n                void apply(project) {\n                    project.task(\"echo\").doFirst {\n                        println \"hello again\"\n                    }\n                }\n            }\n        \"\"\"\n\n        and:\n        succeeds \"echo\"\n\n        then:\n        output.contains \"hello again\"\n    }\n\n    def \"build src plugin cannot access Gradle implementation dependencies\"() {\n        when:\n        requireGradleDistribution()\n        file(\"buildSrc/src/main/groovy/pkg/BuildSrcPlugin.groovy\") << \"\"\"\n            package pkg\n            import ${com.google.common.collect.ImmutableList.name}\n            class BuildSrcPlugin {\n\n            }\n        \"\"\"\n\n        then:\n        fails \"t\"\n        failure.assertHasDescription(\"Execution failed for task ':compileGroovy'.\")\n    }\n\n    def \"use of buildSrc does not expose Gradle runtime dependencies to build script\"() {\n        when:\n        requireGradleDistribution()\n        file(\"buildSrc/src/main/groovy/pkg/BuildSrcPlugin.groovy\") << \"\"\"\n            package pkg\n            class BuildSrcPlugin {\n\n            }\n        \"\"\"\n\n        buildFile << \"\"\"\n            import ${com.google.common.collect.ImmutableList.name}\n        \"\"\"\n\n        then:\n        fails \"t\"\n        failure.assertHasDescription(\"Could not compile build file '$buildFile.canonicalPath'.\")\n    }\n\n}\n","repository":"https://github.com/gradle/gradle.git","language":"textfile","tokens":[]},"highlight":{"content":[") {\n                    project.task(\"echo\").doFirst {\n                        println \"<em>hello</em>"," \"<em>hello</em>\"\n\n        when:\n        pluginSource.write \"\"\"\n            package testplugin\n            import","(project) {\n                    project.task(\"echo\").doFirst {\n                        println \"<em>hello</em>",":\n        succeeds \"echo\"\n\n        then:\n        output.contains \"<em>hello</em> again\"\n    }\n\n    def \"build src plugin"]}},{"_index":"codesearch","_type":"code","_id":"eace6a3b8fd7a23ffba906993f52cae79d7487e8","_score":0.0,"_source":{"filename":"deeplearning4j-scaleout/dl4j-streaming/src/test/java/org/deeplearning4j/streaming/routes/Dl4jServingRouteTest.java","content":"package org.deeplearning4j.streaming.routes;\n\nimport kafka.serializer.StringEncoder;\nimport org.apache.camel.*;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.kafka.KafkaConstants;\nimport org.apache.camel.model.ProcessorDefinition;\nimport org.apache.camel.test.junit4.CamelTestSupport;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.net.util.Base64;\nimport org.deeplearning4j.datasets.iterator.impl.IrisDataSetIterator;\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.layers.DenseLayer;\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.deeplearning4j.optimize.listeners.ScoreIterationListener;\nimport org.deeplearning4j.streaming.embedded.EmbeddedKafkaCluster;\nimport org.deeplearning4j.streaming.embedded.EmbeddedZookeeper;\nimport org.deeplearning4j.streaming.embedded.TestUtils;\nimport org.deeplearning4j.util.ModelSerializer;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport org.nd4j.linalg.dataset.DataSet;\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator;\nimport org.nd4j.linalg.factory.Nd4j;\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.util.UUID;\n\n\n/**\n * Created by agibsonccc on 6/12/16.\n */\npublic class Dl4jServingRouteTest extends CamelTestSupport {\n    private static EmbeddedZookeeper zookeeper;\n    private static EmbeddedKafkaCluster kafkaCluster;\n    private static int zkPort;\n    public final static String LOCALHOST = \"localhost\";\n    private File dir = new File(\"tmpdir\");\n    private DataSet next;\n    private static String topicName = \"predict\";\n\n    @BeforeClass\n    public static void init() throws Exception {\n        zkPort = TestUtils.getAvailablePort();\n        zookeeper = new EmbeddedZookeeper(zkPort);\n        zookeeper.startup();\n        kafkaCluster = new EmbeddedKafkaCluster(LOCALHOST + \":\" + zkPort);\n        kafkaCluster.startup();\n        kafkaCluster.createTopics(topicName);\n    }\n\n    @AfterClass\n    public static void after2() {\n        kafkaCluster.shutdown();\n        zookeeper.shutdown();\n    }\n\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        DataSetIterator iter = new IrisDataSetIterator(150, 150);\n        next = iter.next();\n        next.normalizeZeroMeanZeroUnitVariance();\n\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                final String kafkaUri = String.format(\"kafka:%s?topic=%s&groupId=dl4j-serving&zookeeperHost=%s&zookeeperPort=%d&serializerClass=%s&keySerializerClass=%s\",\n                        kafkaCluster.getBrokerList(),\n                        topicName,\n                        \"localhost\",\n                        zookeeper.getPort(),\n                        StringEncoder.class.getName(),\n                        StringEncoder.class.getName());\n                from(\"direct:start\")\n                        .process(new Processor() {\n                            @Override\n                            public void process(Exchange exchange) throws Exception {\n                                final INDArray arr = next.getFeatureMatrix();\n                                ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                                DataOutputStream dos = new DataOutputStream(bos);\n                                Nd4j.write(arr, dos);\n                                byte[] bytes = bos.toByteArray();\n                                String base64 = Base64.encodeBase64String(bytes);\n                                exchange.getIn().setBody(base64, String.class);\n                                exchange.getIn().setHeader(KafkaConstants.KEY,UUID.randomUUID().toString());\n                                exchange.getIn().setHeader(KafkaConstants.PARTITION_KEY,\"1\");\n                            }\n                        }).to(kafkaUri);\n            }\n        };\n    }\n\n\n    @Override\n    public boolean isUseDebugger() {\n        // must enable debugger\n        return true;\n    }\n\n\n    @Override\n    protected void debugBefore(Exchange exchange, Processor processor,\n                               ProcessorDefinition<?> definition, String id, String shortName) {\n        // this method is invoked before we are about to enter the given processor\n        // from your Java editor you can just add a breakpoint in the code line below\n        log.info(\"Before \" + definition + \" with body \" + exchange.getIn().getBody());\n    }\n\n    @After\n    public void after() throws Exception {\n        FileUtils.deleteDirectory(dir);\n    }\n\n    @Test\n    public void testServingRoute() throws Exception {\n        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()\n                .optimizationAlgo(OptimizationAlgorithm.LINE_GRADIENT_DESCENT)\n                .iterations(5)\n                .seed(123)\n                .list()\n                .layer(0, new DenseLayer.Builder().nIn(4).nOut(3).weightInit(WeightInit.XAVIER).activation(\"tanh\").build())\n                .layer(1, new DenseLayer.Builder().nIn(3).nOut(2).weightInit(WeightInit.XAVIER).activation(\"tanh\").build())\n                .layer(2, new org.deeplearning4j.nn.conf.layers.OutputLayer.Builder(LossFunctions.LossFunction.MCXENT)\n                        .weightInit(WeightInit.XAVIER)\n                        .activation(\"softmax\")\n                        .nIn(2).nOut(3).build())\n                .backprop(true).pretrain(false).build();\n\n\n        MultiLayerNetwork network = new MultiLayerNetwork(conf);\n        network.init();\n        network.setListeners(new ScoreIterationListener(1));\n\n\n        network.fit(next);\n        String outputPath = \"networktest.zip\";\n        dir.mkdirs();\n        File tmp = new File(dir, \"tmp.txt\");\n        tmp.deleteOnExit();\n\n        ModelSerializer.writeModel(network, outputPath, false);\n        final boolean computationGraph = false;\n        final String uri = String.format(\"file://%s?fileName=tmp.txt\", dir.getAbsolutePath());\n        context.addRoutes(DL4jServeRouteBuilder.builder()\n                .computationGraph(computationGraph).zooKeeperPort(zookeeper.getPort())\n                .kafkaBroker(kafkaCluster.getBrokerList()).consumingTopic(topicName)\n                .modelUri(outputPath).outputUri(uri).finalProcessor(new Processor() {\n                    @Override\n                    public void process(Exchange exchange) throws Exception {\n                        exchange.getIn().setBody(exchange.getIn().getBody().toString());\n\n                    }\n                }).build());\n        context.startAllRoutes();\n\n        Endpoint endpoint = context.getRoutes().get(1).getConsumer().getEndpoint();\n        ConsumerTemplate consumerTemplate = context.createConsumerTemplate();\n        ProducerTemplate producerTemplate = context.createProducerTemplate();\n        producerTemplate.sendBody(\"direct:start\",\"hello\");\n        consumerTemplate.receiveBody(endpoint,3000,String.class);\n        String contents = FileUtils.readFileToString(new File(dir,\"tmp.txt\"));\n        assertNotEquals(\"\",contents);\n    }\n\n}\n","repository":"https://github.com/deeplearning4j/deeplearning4j.git","language":"java","tokens":[{"text":"org","line":1,"char":8,"type":"package"},{"text":"deeplearning4j","line":1,"char":12,"type":"package"},{"text":"streaming","line":1,"char":27,"type":"package"},{"text":"routes","line":1,"char":37,"type":"package"},{"text":"kafka","line":3,"char":53,"type":"import"},{"text":"serializer","line":3,"char":59,"type":"import"},{"text":"StringEncoder","line":3,"char":70,"type":"import"},{"text":"org","line":4,"char":92,"type":"import"},{"text":"apache","line":4,"char":96,"type":"import"},{"text":"camel","line":4,"char":103,"type":"import"},{"text":"org","line":5,"char":119,"type":"import"},{"text":"apache","line":5,"char":123,"type":"import"},{"text":"camel","line":5,"char":130,"type":"import"},{"text":"builder","line":5,"char":136,"type":"import"},{"text":"RouteBuilder","line":5,"char":144,"type":"import"},{"text":"org","line":6,"char":165,"type":"import"},{"text":"apache","line":6,"char":169,"type":"import"},{"text":"camel","line":6,"char":176,"type":"import"},{"text":"component","line":6,"char":182,"type":"import"},{"text":"kafka","line":6,"char":192,"type":"import"},{"text":"KafkaConstants","line":6,"char":198,"type":"import"},{"text":"org","line":7,"char":221,"type":"import"},{"text":"apache","line":7,"char":225,"type":"import"},{"text":"camel","line":7,"char":232,"type":"import"},{"text":"model","line":7,"char":238,"type":"import"},{"text":"ProcessorDefinition","line":7,"char":244,"type":"import"},{"text":"org","line":8,"char":272,"type":"import"},{"text":"apache","line":8,"char":276,"type":"import"},{"text":"camel","line":8,"char":283,"type":"import"},{"text":"test","line":8,"char":289,"type":"import"},{"text":"junit4","line":8,"char":294,"type":"import"},{"text":"CamelTestSupport","line":8,"char":301,"type":"import"},{"text":"org","line":9,"char":326,"type":"import"},{"text":"apache","line":9,"char":330,"type":"import"},{"text":"commons","line":9,"char":337,"type":"import"},{"text":"io","line":9,"char":345,"type":"import"},{"text":"FileUtils","line":9,"char":348,"type":"import"},{"text":"org","line":10,"char":366,"type":"import"},{"text":"apache","line":10,"char":370,"type":"import"},{"text":"commons","line":10,"char":377,"type":"import"},{"text":"net","line":10,"char":385,"type":"import"},{"text":"util","line":10,"char":389,"type":"import"},{"text":"Base64","line":10,"char":394,"type":"import"},{"text":"org","line":11,"char":409,"type":"import"},{"text":"deeplearning4j","line":11,"char":413,"type":"import"},{"text":"datasets","line":11,"char":428,"type":"import"},{"text":"iterator","line":11,"char":437,"type":"import"},{"text":"impl","line":11,"char":446,"type":"import"},{"text":"IrisDataSetIterator","line":11,"char":451,"type":"import"},{"text":"org","line":12,"char":479,"type":"import"},{"text":"deeplearning4j","line":12,"char":483,"type":"import"},{"text":"nn","line":12,"char":498,"type":"import"},{"text":"api","line":12,"char":501,"type":"import"},{"text":"OptimizationAlgorithm","line":12,"char":505,"type":"import"},{"text":"org","line":13,"char":535,"type":"import"},{"text":"deeplearning4j","line":13,"char":539,"type":"import"},{"text":"nn","line":13,"char":554,"type":"import"},{"text":"conf","line":13,"char":557,"type":"import"},{"text":"MultiLayerConfiguration","line":13,"char":562,"type":"import"},{"text":"org","line":14,"char":594,"type":"import"},{"text":"deeplearning4j","line":14,"char":598,"type":"import"},{"text":"nn","line":14,"char":613,"type":"import"},{"text":"conf","line":14,"char":616,"type":"import"},{"text":"NeuralNetConfiguration","line":14,"char":621,"type":"import"},{"text":"org","line":15,"char":652,"type":"import"},{"text":"deeplearning4j","line":15,"char":656,"type":"import"},{"text":"nn","line":15,"char":671,"type":"import"},{"text":"conf","line":15,"char":674,"type":"import"},{"text":"layers","line":15,"char":679,"type":"import"},{"text":"DenseLayer","line":15,"char":686,"type":"import"},{"text":"org","line":16,"char":705,"type":"import"},{"text":"deeplearning4j","line":16,"char":709,"type":"import"},{"text":"nn","line":16,"char":724,"type":"import"},{"text":"multilayer","line":16,"char":727,"type":"import"},{"text":"MultiLayerNetwork","line":16,"char":738,"type":"import"},{"text":"org","line":17,"char":764,"type":"import"},{"text":"deeplearning4j","line":17,"char":768,"type":"import"},{"text":"nn","line":17,"char":783,"type":"import"},{"text":"weights","line":17,"char":786,"type":"import"},{"text":"WeightInit","line":17,"char":794,"type":"import"},{"text":"org","line":18,"char":813,"type":"import"},{"text":"deeplearning4j","line":18,"char":817,"type":"import"},{"text":"optimize","line":18,"char":832,"type":"import"},{"text":"listeners","line":18,"char":841,"type":"import"},{"text":"ScoreIterationListener","line":18,"char":851,"type":"import"},{"text":"org","line":19,"char":882,"type":"import"},{"text":"deeplearning4j","line":19,"char":886,"type":"import"},{"text":"streaming","line":19,"char":901,"type":"import"},{"text":"embedded","line":19,"char":911,"type":"import"},{"text":"EmbeddedKafkaCluster","line":19,"char":920,"type":"import"},{"text":"org","line":20,"char":949,"type":"import"},{"text":"deeplearning4j","line":20,"char":953,"type":"import"},{"text":"streaming","line":20,"char":968,"type":"import"},{"text":"embedded","line":20,"char":978,"type":"import"},{"text":"EmbeddedZookeeper","line":20,"char":987,"type":"import"},{"text":"org","line":21,"char":1013,"type":"import"},{"text":"deeplearning4j","line":21,"char":1017,"type":"import"},{"text":"streaming","line":21,"char":1032,"type":"import"},{"text":"embedded","line":21,"char":1042,"type":"import"},{"text":"TestUtils","line":21,"char":1051,"type":"import"},{"text":"org","line":22,"char":1069,"type":"import"},{"text":"deeplearning4j","line":22,"char":1073,"type":"import"},{"text":"util","line":22,"char":1088,"type":"import"},{"text":"ModelSerializer","line":22,"char":1093,"type":"import"},{"text":"org","line":23,"char":1117,"type":"import"},{"text":"junit","line":23,"char":1121,"type":"import"},{"text":"After","line":23,"char":1127,"type":"import"},{"text":"org","line":24,"char":1141,"type":"import"},{"text":"junit","line":24,"char":1145,"type":"import"},{"text":"AfterClass","line":24,"char":1151,"type":"import"},{"text":"org","line":25,"char":1170,"type":"import"},{"text":"junit","line":25,"char":1174,"type":"import"},{"text":"BeforeClass","line":25,"char":1180,"type":"import"},{"text":"org","line":26,"char":1200,"type":"import"},{"text":"junit","line":26,"char":1204,"type":"import"},{"text":"Test","line":26,"char":1210,"type":"import"},{"text":"org","line":27,"char":1223,"type":"import"},{"text":"nd4j","line":27,"char":1227,"type":"import"},{"text":"linalg","line":27,"char":1232,"type":"import"},{"text":"api","line":27,"char":1239,"type":"import"},{"text":"ndarray","line":27,"char":1243,"type":"import"},{"text":"INDArray","line":27,"char":1251,"type":"import"},{"text":"org","line":28,"char":1268,"type":"import"},{"text":"nd4j","line":28,"char":1272,"type":"import"},{"text":"linalg","line":28,"char":1277,"type":"import"},{"text":"dataset","line":28,"char":1284,"type":"import"},{"text":"DataSet","line":28,"char":1292,"type":"import"},{"text":"org","line":29,"char":1308,"type":"import"},{"text":"nd4j","line":29,"char":1312,"type":"import"},{"text":"linalg","line":29,"char":1317,"type":"import"},{"text":"dataset","line":29,"char":1324,"type":"import"},{"text":"api","line":29,"char":1332,"type":"import"},{"text":"iterator","line":29,"char":1336,"type":"import"},{"text":"DataSetIterator","line":29,"char":1345,"type":"import"},{"text":"org","line":30,"char":1369,"type":"import"},{"text":"nd4j","line":30,"char":1373,"type":"import"},{"text":"linalg","line":30,"char":1378,"type":"import"},{"text":"factory","line":30,"char":1385,"type":"import"},{"text":"Nd4j","line":30,"char":1393,"type":"import"},{"text":"org","line":31,"char":1406,"type":"import"},{"text":"nd4j","line":31,"char":1410,"type":"import"},{"text":"linalg","line":31,"char":1415,"type":"import"},{"text":"lossfunctions","line":31,"char":1422,"type":"import"},{"text":"LossFunctions","line":31,"char":1436,"type":"import"},{"text":"java","line":33,"char":1459,"type":"import"},{"text":"io","line":33,"char":1464,"type":"import"},{"text":"ByteArrayOutputStream","line":33,"char":1467,"type":"import"},{"text":"java","line":34,"char":1497,"type":"import"},{"text":"io","line":34,"char":1502,"type":"import"},{"text":"DataOutputStream","line":34,"char":1505,"type":"import"},{"text":"java","line":35,"char":1530,"type":"import"},{"text":"io","line":35,"char":1535,"type":"import"},{"text":"File","line":35,"char":1538,"type":"import"},{"text":"java","line":36,"char":1551,"type":"import"},{"text":"util","line":36,"char":1556,"type":"import"},{"text":"UUID","line":36,"char":1561,"type":"import"},{"text":"Dl4jServingRouteTest","line":42,"char":1627,"type":"class"},{"text":"zookeeper","line":43,"char":1712,"type":"variable"},{"text":"kafkaCluster","line":44,"char":1763,"type":"variable"},{"text":"zkPort","line":45,"char":1800,"type":"variable"},{"text":"LOCALHOST","line":46,"char":1839,"type":"variable"},{"text":"dir","line":47,"char":1881,"type":"variable"},{"text":"next","line":48,"char":1927,"type":"variable"},{"text":"topicName","line":49,"char":1959,"type":"variable"},{"text":"iter","line":69,"char":2561,"type":"variable"},{"text":"kafkaUri","line":76,"char":2824,"type":"variable"},{"text":"exchange","line":86,"char":3431,"type":"variable"},{"text":"arr","line":87,"char":3507,"type":"variable"},{"text":"bos","line":88,"char":3592,"type":"variable"},{"text":"dos","line":89,"char":3676,"type":"variable"},{"text":"bytes","line":91,"char":3802,"type":"variable"},{"text":"base64","line":92,"char":3868,"type":"variable"},{"text":"exchange","line":111,"char":4464,"type":"variable"},{"text":"processor","line":111,"char":4484,"type":"variable"},{"text":"definition","line":112,"char":4549,"type":"variable"},{"text":"id","line":112,"char":4568,"type":"variable"},{"text":"shortName","line":112,"char":4579,"type":"variable"},{"text":"conf","line":125,"char":5052,"type":"variable"},{"text":"network","line":139,"char":5860,"type":"variable"},{"text":"outputPath","line":145,"char":6028,"type":"variable"},{"text":"tmp","line":147,"char":6095,"type":"variable"},{"text":"computationGraph","line":151,"char":6242,"type":"variable"},{"text":"uri","line":152,"char":6289,"type":"variable"},{"text":"exchange","line":158,"char":6758,"type":"variable"},{"text":"endpoint","line":165,"char":6980,"type":"variable"},{"text":"consumerTemplate","line":166,"char":7072,"type":"variable"},{"text":"producerTemplate","line":167,"char":7150,"type":"variable"},{"text":"contents","line":170,"char":7343,"type":"variable"},{"text":"BeforeClass","line":51,"char":1988,"type":"annotation"},{"text":"AfterClass","line":61,"char":2341,"type":"annotation"},{"text":"Override","line":67,"char":2461,"type":"annotation"},{"text":"Override","line":74,"char":2731,"type":"annotation"},{"text":"Override","line":85,"char":3365,"type":"annotation"},{"text":"Override","line":103,"char":4303,"type":"annotation"},{"text":"Override","line":110,"char":4415,"type":"annotation"},{"text":"After","line":118,"char":4860,"type":"annotation"},{"text":"Test","line":123,"char":4961,"type":"annotation"},{"text":"Override","line":157,"char":6700,"type":"annotation"},{"text":"init","line":52,"char":2023,"type":"method"},{"text":"after2","line":62,"char":2375,"type":"method"},{"text":"createRouteBuilder","line":68,"char":2497,"type":"method"},{"text":"configure","line":75,"char":2764,"type":"method"},{"text":"process","line":86,"char":3414,"type":"method"},{"text":"isUseDebugger","line":104,"char":4331,"type":"method"},{"text":"debugBefore","line":111,"char":4443,"type":"method"},{"text":"after","line":119,"char":4882,"type":"method"},{"text":"testServingRoute","line":124,"char":4982,"type":"method"},{"text":"process","line":158,"char":6741,"type":"method"},{"text":"CamelTestSupport","line":42,"char":1656,"type":"identifier"},{"text":"EmbeddedZookeeper","line":43,"char":1694,"type":"identifier"},{"text":"EmbeddedKafkaCluster","line":44,"char":1742,"type":"identifier"},{"text":"String","line":46,"char":1832,"type":"identifier"},{"text":"File","line":47,"char":1876,"type":"identifier"},{"text":"File","line":47,"char":1891,"type":"identifier"},{"text":"DataSet","line":48,"char":1919,"type":"identifier"},{"text":"String","line":49,"char":1952,"type":"identifier"},{"text":"Exception","line":52,"char":2037,"type":"identifier"},{"text":"zkPort","line":53,"char":2057,"type":"identifier"},{"text":"TestUtils","line":53,"char":2066,"type":"identifier"},{"text":"getAvailablePort","line":53,"char":2076,"type":"identifier"},{"text":"zookeeper","line":54,"char":2104,"type":"identifier"},{"text":"EmbeddedZookeeper","line":54,"char":2120,"type":"identifier"},{"text":"zkPort","line":54,"char":2138,"type":"identifier"},{"text":"zookeeper","line":55,"char":2155,"type":"identifier"},{"text":"startup","line":55,"char":2165,"type":"identifier"},{"text":"kafkaCluster","line":56,"char":2184,"type":"identifier"},{"text":"EmbeddedKafkaCluster","line":56,"char":2203,"type":"identifier"},{"text":"LOCALHOST","line":56,"char":2224,"type":"identifier"},{"text":"zkPort","line":56,"char":2242,"type":"identifier"},{"text":"kafkaCluster","line":57,"char":2259,"type":"identifier"},{"text":"startup","line":57,"char":2272,"type":"identifier"},{"text":"kafkaCluster","line":58,"char":2291,"type":"identifier"},{"text":"createTopics","line":58,"char":2304,"type":"identifier"},{"text":"topicName","line":58,"char":2317,"type":"identifier"},{"text":"kafkaCluster","line":63,"char":2394,"type":"identifier"},{"text":"shutdown","line":63,"char":2407,"type":"identifier"},{"text":"zookeeper","line":64,"char":2427,"type":"identifier"},{"text":"shutdown","line":64,"char":2437,"type":"identifier"},{"text":"RouteBuilder","line":68,"char":2484,"type":"identifier"},{"text":"Exception","line":68,"char":2525,"type":"identifier"},{"text":"DataSetIterator","line":69,"char":2545,"type":"identifier"},{"text":"IrisDataSetIterator","line":69,"char":2572,"type":"identifier"},{"text":"next","line":70,"char":2611,"type":"identifier"},{"text":"iter","line":70,"char":2618,"type":"identifier"},{"text":"next","line":70,"char":2623,"type":"identifier"},{"text":"next","line":71,"char":2639,"type":"identifier"},{"text":"normalizeZeroMeanZeroUnitVariance","line":71,"char":2644,"type":"identifier"},{"text":"RouteBuilder","line":73,"char":2701,"type":"identifier"},{"text":"Exception","line":75,"char":2783,"type":"identifier"},{"text":"String","line":76,"char":2817,"type":"identifier"},{"text":"String","line":76,"char":2835,"type":"identifier"},{"text":"format","line":76,"char":2842,"type":"identifier"},{"text":"kafkaCluster","line":77,"char":2990,"type":"identifier"},{"text":"getBrokerList","line":77,"char":3003,"type":"identifier"},{"text":"topicName","line":78,"char":3044,"type":"identifier"},{"text":"zookeeper","line":80,"char":3116,"type":"identifier"},{"text":"getPort","line":80,"char":3126,"type":"identifier"},{"text":"StringEncoder","line":81,"char":3161,"type":"identifier"},{"text":"getName","line":81,"char":3181,"type":"identifier"},{"text":"StringEncoder","line":82,"char":3216,"type":"identifier"},{"text":"getName","line":82,"char":3236,"type":"identifier"},{"text":"from","line":83,"char":3264,"type":"identifier"},{"text":"process","line":84,"char":3310,"type":"identifier"},{"text":"Processor","line":84,"char":3322,"type":"identifier"},{"text":"Exchange","line":86,"char":3422,"type":"identifier"},{"text":"Exception","line":86,"char":3448,"type":"identifier"},{"text":"INDArray","line":87,"char":3498,"type":"identifier"},{"text":"next","line":87,"char":3513,"type":"identifier"},{"text":"getFeatureMatrix","line":87,"char":3518,"type":"identifier"},{"text":"ByteArrayOutputStream","line":88,"char":3570,"type":"identifier"},{"text":"ByteArrayOutputStream","line":88,"char":3602,"type":"identifier"},{"text":"DataOutputStream","line":89,"char":3659,"type":"identifier"},{"text":"DataOutputStream","line":89,"char":3686,"type":"identifier"},{"text":"bos","line":89,"char":3703,"type":"identifier"},{"text":"Nd4j","line":90,"char":3741,"type":"identifier"},{"text":"write","line":90,"char":3746,"type":"identifier"},{"text":"arr","line":90,"char":3752,"type":"identifier"},{"text":"dos","line":90,"char":3757,"type":"identifier"},{"text":"bos","line":91,"char":3810,"type":"identifier"},{"text":"toByteArray","line":91,"char":3814,"type":"identifier"},{"text":"String","line":92,"char":3861,"type":"identifier"},{"text":"Base64","line":92,"char":3877,"type":"identifier"},{"text":"encodeBase64String","line":92,"char":3884,"type":"identifier"},{"text":"bytes","line":92,"char":3903,"type":"identifier"},{"text":"exchange","line":93,"char":3943,"type":"identifier"},{"text":"getIn","line":93,"char":3952,"type":"identifier"},{"text":"setBody","line":93,"char":3960,"type":"identifier"},{"text":"base64","line":93,"char":3968,"type":"identifier"},{"text":"String","line":93,"char":3976,"type":"identifier"},{"text":"exchange","line":94,"char":4023,"type":"identifier"},{"text":"getIn","line":94,"char":4032,"type":"identifier"},{"text":"setHeader","line":94,"char":4040,"type":"identifier"},{"text":"KafkaConstants","line":94,"char":4050,"type":"identifier"},{"text":"KEY","line":94,"char":4065,"type":"identifier"},{"text":"UUID","line":94,"char":4069,"type":"identifier"},{"text":"randomUUID","line":94,"char":4074,"type":"identifier"},{"text":"toString","line":94,"char":4087,"type":"identifier"},{"text":"exchange","line":95,"char":4132,"type":"identifier"},{"text":"getIn","line":95,"char":4141,"type":"identifier"},{"text":"setHeader","line":95,"char":4149,"type":"identifier"},{"text":"KafkaConstants","line":95,"char":4159,"type":"identifier"},{"text":"PARTITION_KEY","line":95,"char":4174,"type":"identifier"},{"text":"to","line":97,"char":4251,"type":"identifier"},{"text":"kafkaUri","line":97,"char":4254,"type":"identifier"},{"text":"Exchange","line":111,"char":4455,"type":"identifier"},{"text":"Processor","line":111,"char":4474,"type":"identifier"},{"text":"ProcessorDefinition","line":112,"char":4526,"type":"identifier"},{"text":"String","line":112,"char":4561,"type":"identifier"},{"text":"String","line":112,"char":4572,"type":"identifier"},{"text":"log","line":115,"char":4769,"type":"identifier"},{"text":"info","line":115,"char":4773,"type":"identifier"},{"text":"definition","line":115,"char":4790,"type":"identifier"},{"text":"exchange","line":115,"char":4819,"type":"identifier"},{"text":"getIn","line":115,"char":4828,"type":"identifier"},{"text":"getBody","line":115,"char":4836,"type":"identifier"},{"text":"Exception","line":119,"char":4897,"type":"identifier"},{"text":"FileUtils","line":120,"char":4917,"type":"identifier"},{"text":"deleteDirectory","line":120,"char":4927,"type":"identifier"},{"text":"dir","line":120,"char":4943,"type":"identifier"},{"text":"Exception","line":124,"char":5008,"type":"identifier"},{"text":"MultiLayerConfiguration","line":125,"char":5028,"type":"identifier"},{"text":"NeuralNetConfiguration","line":125,"char":5063,"type":"identifier"},{"text":"Builder","line":125,"char":5086,"type":"identifier"},{"text":"optimizationAlgo","line":126,"char":5113,"type":"identifier"},{"text":"OptimizationAlgorithm","line":126,"char":5130,"type":"identifier"},{"text":"LINE_GRADIENT_DESCENT","line":126,"char":5152,"type":"identifier"},{"text":"iterations","line":127,"char":5192,"type":"identifier"},{"text":"seed","line":128,"char":5223,"type":"identifier"},{"text":"list","line":129,"char":5250,"type":"identifier"},{"text":"layer","line":130,"char":5274,"type":"identifier"},{"text":"DenseLayer","line":130,"char":5287,"type":"identifier"},{"text":"Builder","line":130,"char":5298,"type":"identifier"},{"text":"nIn","line":130,"char":5308,"type":"identifier"},{"text":"nOut","line":130,"char":5315,"type":"identifier"},{"text":"weightInit","line":130,"char":5323,"type":"identifier"},{"text":"WeightInit","line":130,"char":5334,"type":"identifier"},{"text":"XAVIER","line":130,"char":5345,"type":"identifier"},{"text":"activation","line":130,"char":5353,"type":"identifier"},{"text":"build","line":130,"char":5372,"type":"identifier"},{"text":"layer","line":131,"char":5398,"type":"identifier"},{"text":"DenseLayer","line":131,"char":5411,"type":"identifier"},{"text":"Builder","line":131,"char":5422,"type":"identifier"},{"text":"nIn","line":131,"char":5432,"type":"identifier"},{"text":"nOut","line":131,"char":5439,"type":"identifier"},{"text":"weightInit","line":131,"char":5447,"type":"identifier"},{"text":"WeightInit","line":131,"char":5458,"type":"identifier"},{"text":"XAVIER","line":131,"char":5469,"type":"identifier"},{"text":"activation","line":131,"char":5477,"type":"identifier"},{"text":"build","line":131,"char":5496,"type":"identifier"},{"text":"layer","line":132,"char":5522,"type":"identifier"},{"text":"org","line":132,"char":5535,"type":"identifier"},{"text":"deeplearning4j","line":132,"char":5539,"type":"identifier"},{"text":"nn","line":132,"char":5554,"type":"identifier"},{"text":"conf","line":132,"char":5557,"type":"identifier"},{"text":"layers","line":132,"char":5562,"type":"identifier"},{"text":"OutputLayer","line":132,"char":5569,"type":"identifier"},{"text":"Builder","line":132,"char":5581,"type":"identifier"},{"text":"LossFunctions","line":132,"char":5589,"type":"identifier"},{"text":"LossFunction","line":132,"char":5603,"type":"identifier"},{"text":"MCXENT","line":132,"char":5616,"type":"identifier"},{"text":"weightInit","line":133,"char":5649,"type":"identifier"},{"text":"WeightInit","line":133,"char":5660,"type":"identifier"},{"text":"XAVIER","line":133,"char":5671,"type":"identifier"},{"text":"activation","line":134,"char":5704,"type":"identifier"},{"text":"nIn","line":135,"char":5751,"type":"identifier"},{"text":"nOut","line":135,"char":5758,"type":"identifier"},{"text":"build","line":135,"char":5766,"type":"identifier"},{"text":"backprop","line":136,"char":5792,"type":"identifier"},{"text":"pretrain","line":136,"char":5807,"type":"identifier"},{"text":"build","line":136,"char":5823,"type":"identifier"},{"text":"MultiLayerNetwork","line":139,"char":5842,"type":"identifier"},{"text":"MultiLayerNetwork","line":139,"char":5874,"type":"identifier"},{"text":"conf","line":139,"char":5892,"type":"identifier"},{"text":"network","line":140,"char":5907,"type":"identifier"},{"text":"init","line":140,"char":5915,"type":"identifier"},{"text":"network","line":141,"char":5931,"type":"identifier"},{"text":"setListeners","line":141,"char":5939,"type":"identifier"},{"text":"ScoreIterationListener","line":141,"char":5956,"type":"identifier"},{"text":"network","line":144,"char":5994,"type":"identifier"},{"text":"fit","line":144,"char":6002,"type":"identifier"},{"text":"next","line":144,"char":6006,"type":"identifier"},{"text":"String","line":145,"char":6021,"type":"identifier"},{"text":"dir","line":146,"char":6068,"type":"identifier"},{"text":"mkdirs","line":146,"char":6072,"type":"identifier"},{"text":"File","line":147,"char":6090,"type":"identifier"},{"text":"File","line":147,"char":6105,"type":"identifier"},{"text":"dir","line":147,"char":6110,"type":"identifier"},{"text":"tmp","line":148,"char":6135,"type":"identifier"},{"text":"deleteOnExit","line":148,"char":6139,"type":"identifier"},{"text":"ModelSerializer","line":150,"char":6164,"type":"identifier"},{"text":"writeModel","line":150,"char":6180,"type":"identifier"},{"text":"network","line":150,"char":6191,"type":"identifier"},{"text":"outputPath","line":150,"char":6200,"type":"identifier"},{"text":"String","line":152,"char":6282,"type":"identifier"},{"text":"String","line":152,"char":6295,"type":"identifier"},{"text":"format","line":152,"char":6302,"type":"identifier"},{"text":"dir","line":152,"char":6339,"type":"identifier"},{"text":"getAbsolutePath","line":152,"char":6343,"type":"identifier"},{"text":"context","line":153,"char":6371,"type":"identifier"},{"text":"addRoutes","line":153,"char":6379,"type":"identifier"},{"text":"DL4jServeRouteBuilder","line":153,"char":6389,"type":"identifier"},{"text":"builder","line":153,"char":6411,"type":"identifier"},{"text":"computationGraph","line":154,"char":6438,"type":"identifier"},{"text":"computationGraph","line":154,"char":6455,"type":"identifier"},{"text":"zooKeeperPort","line":154,"char":6473,"type":"identifier"},{"text":"zookeeper","line":154,"char":6487,"type":"identifier"},{"text":"getPort","line":154,"char":6497,"type":"identifier"},{"text":"kafkaBroker","line":155,"char":6525,"type":"identifier"},{"text":"kafkaCluster","line":155,"char":6537,"type":"identifier"},{"text":"getBrokerList","line":155,"char":6550,"type":"identifier"},{"text":"consumingTopic","line":155,"char":6567,"type":"identifier"},{"text":"topicName","line":155,"char":6582,"type":"identifier"},{"text":"modelUri","line":156,"char":6610,"type":"identifier"},{"text":"outputPath","line":156,"char":6619,"type":"identifier"},{"text":"outputUri","line":156,"char":6631,"type":"identifier"},{"text":"uri","line":156,"char":6641,"type":"identifier"},{"text":"finalProcessor","line":156,"char":6646,"type":"identifier"},{"text":"Processor","line":156,"char":6665,"type":"identifier"},{"text":"Exchange","line":158,"char":6749,"type":"identifier"},{"text":"Exception","line":158,"char":6775,"type":"identifier"},{"text":"exchange","line":159,"char":6811,"type":"identifier"},{"text":"getIn","line":159,"char":6820,"type":"identifier"},{"text":"setBody","line":159,"char":6828,"type":"identifier"},{"text":"exchange","line":159,"char":6836,"type":"identifier"},{"text":"getIn","line":159,"char":6845,"type":"identifier"},{"text":"getBody","line":159,"char":6853,"type":"identifier"},{"text":"toString","line":159,"char":6863,"type":"identifier"},{"text":"build","line":162,"char":6918,"type":"identifier"},{"text":"context","line":163,"char":6936,"type":"identifier"},{"text":"startAllRoutes","line":163,"char":6944,"type":"identifier"},{"text":"Endpoint","line":165,"char":6971,"type":"identifier"},{"text":"context","line":165,"char":6991,"type":"identifier"},{"text":"getRoutes","line":165,"char":6999,"type":"identifier"},{"text":"get","line":165,"char":7011,"type":"identifier"},{"text":"getConsumer","line":165,"char":7018,"type":"identifier"},{"text":"getEndpoint","line":165,"char":7032,"type":"identifier"},{"text":"ConsumerTemplate","line":166,"char":7055,"type":"identifier"},{"text":"context","line":166,"char":7091,"type":"identifier"},{"text":"createConsumerTemplate","line":166,"char":7099,"type":"identifier"},{"text":"ProducerTemplate","line":167,"char":7133,"type":"identifier"},{"text":"context","line":167,"char":7169,"type":"identifier"},{"text":"createProducerTemplate","line":167,"char":7177,"type":"identifier"},{"text":"producerTemplate","line":168,"char":7211,"type":"identifier"},{"text":"sendBody","line":168,"char":7228,"type":"identifier"},{"text":"consumerTemplate","line":169,"char":7270,"type":"identifier"},{"text":"receiveBody","line":169,"char":7287,"type":"identifier"},{"text":"endpoint","line":169,"char":7299,"type":"identifier"},{"text":"String","line":169,"char":7313,"type":"identifier"},{"text":"String","line":170,"char":7336,"type":"identifier"},{"text":"FileUtils","line":170,"char":7354,"type":"identifier"},{"text":"readFileToString","line":170,"char":7364,"type":"identifier"},{"text":"File","line":170,"char":7385,"type":"identifier"},{"text":"dir","line":170,"char":7390,"type":"identifier"},{"text":"assertNotEquals","line":171,"char":7415,"type":"identifier"},{"text":"contents","line":171,"char":7434,"type":"identifier"}]},"highlight":{"content":["();\n        producerTemplate.sendBody(\"direct:start\",\"<em>hello</em>\");\n        consumerTemplate.receiveBody"]}},{"_index":"codesearch","_type":"code","_id":"c198c8044740ea6b7aef4c84e6ce8f886be15ebb","_score":0.0,"_source":{"filename":"server/test/unit/com/thoughtworks/go/server/websocket/AgentRemoteHandlerTest.java","content":"/*\n * Copyright 2016 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.thoughtworks.go.server.websocket;\n\nimport com.thoughtworks.go.domain.*;\nimport com.thoughtworks.go.helper.AgentInstanceMother;\nimport com.thoughtworks.go.remote.AgentIdentifier;\nimport com.thoughtworks.go.remote.AgentInstruction;\nimport com.thoughtworks.go.remote.BuildRepositoryRemote;\nimport com.thoughtworks.go.server.service.AgentRuntimeInfo;\nimport com.thoughtworks.go.server.service.AgentService;\nimport com.thoughtworks.go.server.service.JobInstanceService;\nimport com.thoughtworks.go.websocket.Action;\nimport com.thoughtworks.go.websocket.Message;\nimport com.thoughtworks.go.websocket.MessageEncoding;\nimport com.thoughtworks.go.websocket.Report;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.*;\n\npublic class AgentRemoteHandlerTest {\n    private AgentRemoteHandler handler;\n    private BuildRepositoryRemote remote;\n    private AgentService agentService;\n    private AgentStub agent = new AgentStub();\n\n    @Before\n    public void setUp() {\n        remote = mock(BuildRepositoryRemote.class);\n        agentService = mock(AgentService.class);\n        handler = new AgentRemoteHandler(remote, agentService, mock(JobInstanceService.class));\n    }\n\n    @Test\n    public void registerConnectedAgentsByPing() {\n        AgentInstance instance = AgentInstanceMother.idle();\n        AgentRuntimeInfo info = new AgentRuntimeInfo(instance.getAgentIdentifier(), AgentRuntimeStatus.Idle, null, \"cookie\", false);\n        when(remote.ping(info)).thenReturn(new AgentInstruction(false));\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        verify(remote).ping(info);\n        assertEquals(1, handler.connectedAgents().size());\n        assertEquals(agent, handler.connectedAgents().get(instance.getUuid()));\n        assertTrue(agent.messages.isEmpty());\n    }\n\n    @Test\n    public void shouldCancelJobIfAgentRuntimeStatusIsCanceledOnSeverSideWhenClientPingsServer() {\n        AgentRuntimeInfo info = new AgentRuntimeInfo(new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\"), AgentRuntimeStatus.Idle, null, null, false);\n        info.setCookie(\"cookie\");\n\n        when(remote.ping(info)).thenReturn(new AgentInstruction(true));\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        verify(remote).ping(info);\n        assertEquals(1, handler.connectedAgents().size());\n        assertEquals(agent, handler.connectedAgents().get(\"uuid\"));\n\n        assertEquals(1, agent.messages.size());\n        assertEquals(agent.messages.get(0).getAction(), Action.cancelBuild);\n    }\n\n    @Test\n    public void shouldCancelBuildIfAgentRuntimeStatusIsCanceledOnSeverSideWhenClientWithBuildCommandSupportPingsServer() {\n        AgentRuntimeInfo info = new AgentRuntimeInfo(new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\"), AgentRuntimeStatus.Idle, null, null, true);\n        info.setCookie(\"cookie\");\n\n        when(remote.ping(info)).thenReturn(new AgentInstruction(true));\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        verify(remote).ping(info);\n        assertEquals(1, handler.connectedAgents().size());\n        assertEquals(agent, handler.connectedAgents().get(\"uuid\"));\n\n        assertEquals(1, agent.messages.size());\n        assertEquals(agent.messages.get(0).getAction(), Action.cancelBuild);\n    }\n\n    @Test\n    public void shouldSetCookieIfNoCookieFoundWhenAgentPingsServer() {\n        AgentIdentifier identifier = new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\");\n        AgentRuntimeInfo info = new AgentRuntimeInfo(identifier, AgentRuntimeStatus.Idle, null, null, false);\n\n        when(remote.getCookie(identifier, info.getLocation())).thenReturn(\"new cookie\");\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        verify(remote).ping(withCookie(info, \"new cookie\"));\n        assertEquals(1, agent.messages.size());\n        assertEquals(agent.messages.get(0).getAction(), Action.setCookie);\n        assertEquals(MessageEncoding.decodeData(agent.messages.get(0).getData(), String.class), \"new cookie\");\n    }\n\n    @Test\n    public void shouldSetCookieAndCancelJobWhenPingServerWithoutCookieAndServerSideRuntimeStatusIsCanceled() {\n        AgentIdentifier identifier = new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\");\n        AgentRuntimeInfo info = new AgentRuntimeInfo(identifier, AgentRuntimeStatus.Idle, null, null, false);\n\n        when(remote.getCookie(identifier, info.getLocation())).thenReturn(\"new cookie\");\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(true));\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        verify(remote).ping(withCookie(info, \"new cookie\"));\n        assertEquals(2, agent.messages.size());\n        assertEquals(agent.messages.get(0).getAction(), Action.setCookie);\n        assertEquals(MessageEncoding.decodeData(agent.messages.get(0).getData(), String.class), \"new cookie\");\n        assertEquals(agent.messages.get(1).getAction(), Action.cancelBuild);\n    }\n\n    private AgentRuntimeInfo withCookie(AgentRuntimeInfo info, String cookie) {\n        AgentRuntimeInfo newInfo = MessageEncoding.decodeData(MessageEncoding.encodeData(info), AgentRuntimeInfo.class);\n        newInfo.setCookie(cookie);\n        return newInfo;\n    }\n\n    @Test\n    public void reportCurrentStatus() {\n        AgentRuntimeInfo info = new AgentRuntimeInfo(new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\"), AgentRuntimeStatus.Idle, null, null, false);\n\n        JobIdentifier jobIdentifier = new JobIdentifier();\n        handler.process(agent, new Message(Action.reportCurrentStatus, MessageEncoding.encodeData(new Report(info, jobIdentifier, JobState.Preparing))));\n\n        verify(remote).reportCurrentStatus(info, jobIdentifier, JobState.Preparing);\n    }\n\n    @Test\n    public void reportCompleting() {\n        AgentRuntimeInfo info = new AgentRuntimeInfo(new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\"), AgentRuntimeStatus.Idle, null, null, false);\n\n        JobIdentifier jobIdentifier = new JobIdentifier();\n        handler.process(agent, new Message(Action.reportCompleting, MessageEncoding.encodeData(new Report(info, jobIdentifier, JobResult.Passed))));\n\n        verify(remote).reportCompleting(info, jobIdentifier, JobResult.Passed);\n    }\n\n    @Test\n    public void reportCompleted() {\n        AgentRuntimeInfo info = new AgentRuntimeInfo(new AgentIdentifier(\"HostName\", \"ipAddress\", \"uuid\"), AgentRuntimeStatus.Idle, null, null, false);\n\n        JobIdentifier jobIdentifier = new JobIdentifier();\n        handler.process(agent, new Message(Action.reportCompleted, MessageEncoding.encodeData(new Report(info, jobIdentifier, JobResult.Passed))));\n\n        verify(remote).reportCompleted(info, jobIdentifier, JobResult.Passed);\n    }\n\n    @Test\n    public void shouldNotRaiseErrorIfRemovedAgentDidNotRegistered() {\n        handler.remove(agent);\n    }\n\n    @Test\n    public void removeRegisteredAgent() {\n        AgentInstance instance = AgentInstanceMother.idle();\n        AgentRuntimeInfo info = new AgentRuntimeInfo(instance.getAgentIdentifier(), AgentRuntimeStatus.Idle, null, null, false);\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n        when(remote.getCookie(instance.getAgentIdentifier(), info.getLocation())).thenReturn(\"new cookie\");\n        when(agentService.findAgent(instance.getUuid())).thenReturn(instance);\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        handler.remove(agent);\n        assertEquals(0, handler.connectedAgents().size());\n        assertEquals(AgentStatus.LostContact, instance.getStatus());\n    }\n\n    @Test\n    public void sendCancelMessage() {\n        AgentInstance instance = AgentInstanceMother.idle();\n        AgentRuntimeInfo info = new AgentRuntimeInfo(instance.getAgentIdentifier(), AgentRuntimeStatus.Idle, null, null, false);\n        when(agentService.findAgentAndRefreshStatus(instance.getUuid())).thenReturn(instance);\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n        when(remote.getCookie(instance.getAgentIdentifier(), info.getLocation())).thenReturn(\"new cookie\");\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n\n        agent.messages.clear();\n        handler.sendCancelMessage(instance.getAgentIdentifier().getUuid());\n        assertEquals(1, agent.messages.size());\n    }\n\n    @Test\n    public void sendCancelMessageShouldNotErrorOutWhenGivenUUIDIsUnknown() {\n        handler.sendCancelMessage(null);\n        handler.sendCancelMessage(\"hello\");\n    }\n\n    @Test\n    public void shouldNotSetDupCookieForSameAgent() {\n        AgentInstance instance = AgentInstanceMother.idle();\n        AgentRuntimeInfo info = new AgentRuntimeInfo(instance.getAgentIdentifier(), AgentRuntimeStatus.Idle, null, null, false);\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n        when(remote.getCookie(instance.getAgentIdentifier(), info.getLocation())).thenReturn(\"cookie\");\n        when(agentService.findAgent(instance.getUuid())).thenReturn(instance);\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n        info.setCookie(null);\n\n        reset(remote);\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n        when(remote.getCookie(instance.getAgentIdentifier(), info.getLocation())).thenReturn(\"new cookie\");\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n        verify(remote).ping(withCookie(info, \"cookie\"));\n\n        info.setCookie(null);\n        handler.remove(agent);\n\n        reset(remote);\n        when(remote.ping(any(AgentRuntimeInfo.class))).thenReturn(new AgentInstruction(false));\n        when(remote.getCookie(instance.getAgentIdentifier(), info.getLocation())).thenReturn(\"new cookie\");\n\n        handler.process(agent, new Message(Action.ping, MessageEncoding.encodeData(info)));\n        verify(remote).ping(withCookie(info, \"new cookie\"));\n    }\n\n    @Test\n    public void shouldSendBackAnAcknowledgementMessageIfMessageHasAcknowledgementId() {\n        AgentInstance instance = AgentInstanceMother.idle();\n        AgentRuntimeInfo info = new AgentRuntimeInfo(instance.getAgentIdentifier(), AgentRuntimeStatus.Idle, null, null, false);\n        info.setCookie(\"cookie\");\n        agent.setIgnoreAcknowledgements(false);\n        when(remote.ping(info)).thenReturn(new AgentInstruction(false));\n        when(agentService.findAgent(instance.getUuid())).thenReturn(instance);\n\n        Message msg = new Message(Action.ping, MessageEncoding.encodeData(info));\n        handler.process(agent, msg);\n        assertEquals(1, agent.messages.size());\n        assertEquals(Action.acknowledge, agent.messages.get(0).getAction());\n        assertEquals(msg.getAcknowledgementId(), MessageEncoding.decodeData(agent.messages.get(0).getData(), String.class));\n    }\n}\n","repository":"https://github.com/gocd/gocd.git","language":"java","tokens":[{"text":"com","line":17,"char":611,"type":"package"},{"text":"thoughtworks","line":17,"char":615,"type":"package"},{"text":"go","line":17,"char":628,"type":"package"},{"text":"server","line":17,"char":631,"type":"package"},{"text":"websocket","line":17,"char":638,"type":"package"},{"text":"com","line":19,"char":657,"type":"import"},{"text":"thoughtworks","line":19,"char":661,"type":"import"},{"text":"go","line":19,"char":674,"type":"import"},{"text":"domain","line":19,"char":677,"type":"import"},{"text":"com","line":20,"char":694,"type":"import"},{"text":"thoughtworks","line":20,"char":698,"type":"import"},{"text":"go","line":20,"char":711,"type":"import"},{"text":"helper","line":20,"char":714,"type":"import"},{"text":"AgentInstanceMother","line":20,"char":721,"type":"import"},{"text":"com","line":21,"char":749,"type":"import"},{"text":"thoughtworks","line":21,"char":753,"type":"import"},{"text":"go","line":21,"char":766,"type":"import"},{"text":"remote","line":21,"char":769,"type":"import"},{"text":"AgentIdentifier","line":21,"char":776,"type":"import"},{"text":"com","line":22,"char":800,"type":"import"},{"text":"thoughtworks","line":22,"char":804,"type":"import"},{"text":"go","line":22,"char":817,"type":"import"},{"text":"remote","line":22,"char":820,"type":"import"},{"text":"AgentInstruction","line":22,"char":827,"type":"import"},{"text":"com","line":23,"char":852,"type":"import"},{"text":"thoughtworks","line":23,"char":856,"type":"import"},{"text":"go","line":23,"char":869,"type":"import"},{"text":"remote","line":23,"char":872,"type":"import"},{"text":"BuildRepositoryRemote","line":23,"char":879,"type":"import"},{"text":"com","line":24,"char":909,"type":"import"},{"text":"thoughtworks","line":24,"char":913,"type":"import"},{"text":"go","line":24,"char":926,"type":"import"},{"text":"server","line":24,"char":929,"type":"import"},{"text":"service","line":24,"char":936,"type":"import"},{"text":"AgentRuntimeInfo","line":24,"char":944,"type":"import"},{"text":"com","line":25,"char":969,"type":"import"},{"text":"thoughtworks","line":25,"char":973,"type":"import"},{"text":"go","line":25,"char":986,"type":"import"},{"text":"server","line":25,"char":989,"type":"import"},{"text":"service","line":25,"char":996,"type":"import"},{"text":"AgentService","line":25,"char":1004,"type":"import"},{"text":"com","line":26,"char":1025,"type":"import"},{"text":"thoughtworks","line":26,"char":1029,"type":"import"},{"text":"go","line":26,"char":1042,"type":"import"},{"text":"server","line":26,"char":1045,"type":"import"},{"text":"service","line":26,"char":1052,"type":"import"},{"text":"JobInstanceService","line":26,"char":1060,"type":"import"},{"text":"com","line":27,"char":1087,"type":"import"},{"text":"thoughtworks","line":27,"char":1091,"type":"import"},{"text":"go","line":27,"char":1104,"type":"import"},{"text":"websocket","line":27,"char":1107,"type":"import"},{"text":"Action","line":27,"char":1117,"type":"import"},{"text":"com","line":28,"char":1132,"type":"import"},{"text":"thoughtworks","line":28,"char":1136,"type":"import"},{"text":"go","line":28,"char":1149,"type":"import"},{"text":"websocket","line":28,"char":1152,"type":"import"},{"text":"Message","line":28,"char":1162,"type":"import"},{"text":"com","line":29,"char":1178,"type":"import"},{"text":"thoughtworks","line":29,"char":1182,"type":"import"},{"text":"go","line":29,"char":1195,"type":"import"},{"text":"websocket","line":29,"char":1198,"type":"import"},{"text":"MessageEncoding","line":29,"char":1208,"type":"import"},{"text":"com","line":30,"char":1232,"type":"import"},{"text":"thoughtworks","line":30,"char":1236,"type":"import"},{"text":"go","line":30,"char":1249,"type":"import"},{"text":"websocket","line":30,"char":1252,"type":"import"},{"text":"Report","line":30,"char":1262,"type":"import"},{"text":"org","line":31,"char":1277,"type":"import"},{"text":"junit","line":31,"char":1281,"type":"import"},{"text":"Before","line":31,"char":1287,"type":"import"},{"text":"org","line":32,"char":1302,"type":"import"},{"text":"junit","line":32,"char":1306,"type":"import"},{"text":"Test","line":32,"char":1312,"type":"import"},{"text":"org","line":34,"char":1333,"type":"import"},{"text":"junit","line":34,"char":1337,"type":"import"},{"text":"Assert","line":34,"char":1343,"type":"import"},{"text":"assertEquals","line":34,"char":1350,"type":"import"},{"text":"org","line":35,"char":1378,"type":"import"},{"text":"junit","line":35,"char":1382,"type":"import"},{"text":"Assert","line":35,"char":1388,"type":"import"},{"text":"assertTrue","line":35,"char":1395,"type":"import"},{"text":"org","line":36,"char":1421,"type":"import"},{"text":"mockito","line":36,"char":1425,"type":"import"},{"text":"Mockito","line":36,"char":1433,"type":"import"},{"text":"AgentRemoteHandlerTest","line":38,"char":1458,"type":"class"},{"text":"handler","line":39,"char":1514,"type":"variable"},{"text":"remote","line":40,"char":1557,"type":"variable"},{"text":"agentService","line":41,"char":1590,"type":"variable"},{"text":"agent","line":42,"char":1626,"type":"variable"},{"text":"instance","line":53,"char":1976,"type":"variable"},{"text":"info","line":54,"char":2040,"type":"variable"},{"text":"info","line":67,"char":2675,"type":"variable"},{"text":"info","line":84,"char":3456,"type":"variable"},{"text":"identifier","line":101,"char":4183,"type":"variable"},{"text":"info","line":102,"char":4275,"type":"variable"},{"text":"identifier","line":117,"char":5087,"type":"variable"},{"text":"info","line":118,"char":5179,"type":"variable"},{"text":"info","line":132,"char":5979,"type":"variable"},{"text":"cookie","line":132,"char":5992,"type":"variable"},{"text":"newInfo","line":133,"char":6027,"type":"variable"},{"text":"info","line":140,"char":6264,"type":"variable"},{"text":"jobIdentifier","line":142,"char":6414,"type":"variable"},{"text":"info","line":150,"char":6770,"type":"variable"},{"text":"jobIdentifier","line":152,"char":6920,"type":"variable"},{"text":"info","line":160,"char":7265,"type":"variable"},{"text":"jobIdentifier","line":162,"char":7415,"type":"variable"},{"text":"instance","line":175,"char":7879,"type":"variable"},{"text":"info","line":176,"char":7943,"type":"variable"},{"text":"instance","line":190,"char":8660,"type":"variable"},{"text":"info","line":191,"char":8724,"type":"variable"},{"text":"instance","line":210,"char":9648,"type":"variable"},{"text":"info","line":211,"char":9712,"type":"variable"},{"text":"instance","line":239,"char":11167,"type":"variable"},{"text":"info","line":240,"char":11231,"type":"variable"},{"text":"msg","line":246,"char":11586,"type":"variable"},{"text":"Before","line":44,"char":1657,"type":"annotation"},{"text":"Test","line":51,"char":1899,"type":"annotation"},{"text":"Test","line":65,"char":2547,"type":"annotation"},{"text":"Test","line":82,"char":3303,"type":"annotation"},{"text":"Test","line":99,"char":4083,"type":"annotation"},{"text":"Test","line":115,"char":4947,"type":"annotation"},{"text":"Test","line":138,"char":6194,"type":"annotation"},{"text":"Test","line":148,"char":6703,"type":"annotation"},{"text":"Test","line":158,"char":7199,"type":"annotation"},{"text":"Test","line":168,"char":7692,"type":"annotation"},{"text":"Test","line":173,"char":7810,"type":"annotation"},{"text":"Test","line":188,"char":8595,"type":"annotation"},{"text":"Test","line":202,"char":9388,"type":"annotation"},{"text":"Test","line":208,"char":9567,"type":"annotation"},{"text":"Test","line":237,"char":11052,"type":"annotation"},{"text":"setUp","line":45,"char":1680,"type":"method"},{"text":"registerConnectedAgentsByPing","line":52,"char":1920,"type":"method"},{"text":"shouldCancelJobIfAgentRuntimeStatusIsCanceledOnSeverSideWhenClientPingsServer","line":66,"char":2568,"type":"method"},{"text":"shouldCancelBuildIfAgentRuntimeStatusIsCanceledOnSeverSideWhenClientWithBuildCommandSupportPingsServer","line":83,"char":3324,"type":"method"},{"text":"shouldSetCookieIfNoCookieFoundWhenAgentPingsServer","line":100,"char":4104,"type":"method"},{"text":"shouldSetCookieAndCancelJobWhenPingServerWithoutCookieAndServerSideRuntimeStatusIsCanceled","line":116,"char":4968,"type":"method"},{"text":"withCookie","line":132,"char":5951,"type":"method"},{"text":"reportCurrentStatus","line":139,"char":6215,"type":"method"},{"text":"reportCompleting","line":149,"char":6724,"type":"method"},{"text":"reportCompleted","line":159,"char":7220,"type":"method"},{"text":"shouldNotRaiseErrorIfRemovedAgentDidNotRegistered","line":169,"char":7713,"type":"method"},{"text":"removeRegisteredAgent","line":174,"char":7831,"type":"method"},{"text":"sendCancelMessage","line":189,"char":8616,"type":"method"},{"text":"sendCancelMessageShouldNotErrorOutWhenGivenUUIDIsUnknown","line":203,"char":9409,"type":"method"},{"text":"shouldNotSetDupCookieForSameAgent","line":209,"char":9588,"type":"method"},{"text":"shouldSendBackAnAcknowledgementMessageIfMessageHasAcknowledgementId","line":238,"char":11073,"type":"method"},{"text":"AgentRemoteHandler","line":39,"char":1495,"type":"identifier"},{"text":"BuildRepositoryRemote","line":40,"char":1535,"type":"identifier"},{"text":"AgentService","line":41,"char":1577,"type":"identifier"},{"text":"AgentStub","line":42,"char":1616,"type":"identifier"},{"text":"AgentStub","line":42,"char":1638,"type":"identifier"},{"text":"remote","line":46,"char":1698,"type":"identifier"},{"text":"mock","line":46,"char":1707,"type":"identifier"},{"text":"BuildRepositoryRemote","line":46,"char":1712,"type":"identifier"},{"text":"agentService","line":47,"char":1750,"type":"identifier"},{"text":"mock","line":47,"char":1765,"type":"identifier"},{"text":"AgentService","line":47,"char":1770,"type":"identifier"},{"text":"handler","line":48,"char":1799,"type":"identifier"},{"text":"AgentRemoteHandler","line":48,"char":1813,"type":"identifier"},{"text":"remote","line":48,"char":1832,"type":"identifier"},{"text":"agentService","line":48,"char":1840,"type":"identifier"},{"text":"mock","line":48,"char":1854,"type":"identifier"},{"text":"JobInstanceService","line":48,"char":1859,"type":"identifier"},{"text":"AgentInstance","line":53,"char":1962,"type":"identifier"},{"text":"AgentInstanceMother","line":53,"char":1987,"type":"identifier"},{"text":"idle","line":53,"char":2007,"type":"identifier"},{"text":"AgentRuntimeInfo","line":54,"char":2023,"type":"identifier"},{"text":"AgentRuntimeInfo","line":54,"char":2051,"type":"identifier"},{"text":"instance","line":54,"char":2068,"type":"identifier"},{"text":"getAgentIdentifier","line":54,"char":2077,"type":"identifier"},{"text":"AgentRuntimeStatus","line":54,"char":2099,"type":"identifier"},{"text":"Idle","line":54,"char":2118,"type":"identifier"},{"text":"when","line":55,"char":2156,"type":"identifier"},{"text":"remote","line":55,"char":2161,"type":"identifier"},{"text":"ping","line":55,"char":2168,"type":"identifier"},{"text":"info","line":55,"char":2173,"type":"identifier"},{"text":"thenReturn","line":55,"char":2180,"type":"identifier"},{"text":"AgentInstruction","line":55,"char":2195,"type":"identifier"},{"text":"handler","line":57,"char":2230,"type":"identifier"},{"text":"process","line":57,"char":2238,"type":"identifier"},{"text":"agent","line":57,"char":2246,"type":"identifier"},{"text":"Message","line":57,"char":2257,"type":"identifier"},{"text":"Action","line":57,"char":2265,"type":"identifier"},{"text":"ping","line":57,"char":2272,"type":"identifier"},{"text":"MessageEncoding","line":57,"char":2278,"type":"identifier"},{"text":"encodeData","line":57,"char":2294,"type":"identifier"},{"text":"info","line":57,"char":2305,"type":"identifier"},{"text":"verify","line":59,"char":2323,"type":"identifier"},{"text":"remote","line":59,"char":2330,"type":"identifier"},{"text":"ping","line":59,"char":2338,"type":"identifier"},{"text":"info","line":59,"char":2343,"type":"identifier"},{"text":"assertEquals","line":60,"char":2358,"type":"identifier"},{"text":"handler","line":60,"char":2374,"type":"identifier"},{"text":"connectedAgents","line":60,"char":2382,"type":"identifier"},{"text":"size","line":60,"char":2400,"type":"identifier"},{"text":"assertEquals","line":61,"char":2417,"type":"identifier"},{"text":"agent","line":61,"char":2430,"type":"identifier"},{"text":"handler","line":61,"char":2437,"type":"identifier"},{"text":"connectedAgents","line":61,"char":2445,"type":"identifier"},{"text":"get","line":61,"char":2463,"type":"identifier"},{"text":"instance","line":61,"char":2467,"type":"identifier"},{"text":"getUuid","line":61,"char":2476,"type":"identifier"},{"text":"assertTrue","line":62,"char":2497,"type":"identifier"},{"text":"agent","line":62,"char":2508,"type":"identifier"},{"text":"messages","line":62,"char":2514,"type":"identifier"},{"text":"isEmpty","line":62,"char":2523,"type":"identifier"},{"text":"AgentRuntimeInfo","line":67,"char":2658,"type":"identifier"},{"text":"AgentRuntimeInfo","line":67,"char":2686,"type":"identifier"},{"text":"AgentIdentifier","line":67,"char":2707,"type":"identifier"},{"text":"AgentRuntimeStatus","line":67,"char":2757,"type":"identifier"},{"text":"Idle","line":67,"char":2776,"type":"identifier"},{"text":"info","line":68,"char":2810,"type":"identifier"},{"text":"setCookie","line":68,"char":2815,"type":"identifier"},{"text":"when","line":70,"char":2845,"type":"identifier"},{"text":"remote","line":70,"char":2850,"type":"identifier"},{"text":"ping","line":70,"char":2857,"type":"identifier"},{"text":"info","line":70,"char":2862,"type":"identifier"},{"text":"thenReturn","line":70,"char":2869,"type":"identifier"},{"text":"AgentInstruction","line":70,"char":2884,"type":"identifier"},{"text":"handler","line":72,"char":2918,"type":"identifier"},{"text":"process","line":72,"char":2926,"type":"identifier"},{"text":"agent","line":72,"char":2934,"type":"identifier"},{"text":"Message","line":72,"char":2945,"type":"identifier"},{"text":"Action","line":72,"char":2953,"type":"identifier"},{"text":"ping","line":72,"char":2960,"type":"identifier"},{"text":"MessageEncoding","line":72,"char":2966,"type":"identifier"},{"text":"encodeData","line":72,"char":2982,"type":"identifier"},{"text":"info","line":72,"char":2993,"type":"identifier"},{"text":"verify","line":74,"char":3011,"type":"identifier"},{"text":"remote","line":74,"char":3018,"type":"identifier"},{"text":"ping","line":74,"char":3026,"type":"identifier"},{"text":"info","line":74,"char":3031,"type":"identifier"},{"text":"assertEquals","line":75,"char":3046,"type":"identifier"},{"text":"handler","line":75,"char":3062,"type":"identifier"},{"text":"connectedAgents","line":75,"char":3070,"type":"identifier"},{"text":"size","line":75,"char":3088,"type":"identifier"},{"text":"assertEquals","line":76,"char":3105,"type":"identifier"},{"text":"agent","line":76,"char":3118,"type":"identifier"},{"text":"handler","line":76,"char":3125,"type":"identifier"},{"text":"connectedAgents","line":76,"char":3133,"type":"identifier"},{"text":"get","line":76,"char":3151,"type":"identifier"},{"text":"assertEquals","line":78,"char":3174,"type":"identifier"},{"text":"agent","line":78,"char":3190,"type":"identifier"},{"text":"messages","line":78,"char":3196,"type":"identifier"},{"text":"size","line":78,"char":3205,"type":"identifier"},{"text":"assertEquals","line":79,"char":3222,"type":"identifier"},{"text":"agent","line":79,"char":3235,"type":"identifier"},{"text":"messages","line":79,"char":3241,"type":"identifier"},{"text":"get","line":79,"char":3250,"type":"identifier"},{"text":"getAction","line":79,"char":3257,"type":"identifier"},{"text":"Action","line":79,"char":3270,"type":"identifier"},{"text":"cancelBuild","line":79,"char":3277,"type":"identifier"},{"text":"AgentRuntimeInfo","line":84,"char":3439,"type":"identifier"},{"text":"AgentRuntimeInfo","line":84,"char":3467,"type":"identifier"},{"text":"AgentIdentifier","line":84,"char":3488,"type":"identifier"},{"text":"AgentRuntimeStatus","line":84,"char":3538,"type":"identifier"},{"text":"Idle","line":84,"char":3557,"type":"identifier"},{"text":"info","line":85,"char":3590,"type":"identifier"},{"text":"setCookie","line":85,"char":3595,"type":"identifier"},{"text":"when","line":87,"char":3625,"type":"identifier"},{"text":"remote","line":87,"char":3630,"type":"identifier"},{"text":"ping","line":87,"char":3637,"type":"identifier"},{"text":"info","line":87,"char":3642,"type":"identifier"},{"text":"thenReturn","line":87,"char":3649,"type":"identifier"},{"text":"AgentInstruction","line":87,"char":3664,"type":"identifier"},{"text":"handler","line":89,"char":3698,"type":"identifier"},{"text":"process","line":89,"char":3706,"type":"identifier"},{"text":"agent","line":89,"char":3714,"type":"identifier"},{"text":"Message","line":89,"char":3725,"type":"identifier"},{"text":"Action","line":89,"char":3733,"type":"identifier"},{"text":"ping","line":89,"char":3740,"type":"identifier"},{"text":"MessageEncoding","line":89,"char":3746,"type":"identifier"},{"text":"encodeData","line":89,"char":3762,"type":"identifier"},{"text":"info","line":89,"char":3773,"type":"identifier"},{"text":"verify","line":91,"char":3791,"type":"identifier"},{"text":"remote","line":91,"char":3798,"type":"identifier"},{"text":"ping","line":91,"char":3806,"type":"identifier"},{"text":"info","line":91,"char":3811,"type":"identifier"},{"text":"assertEquals","line":92,"char":3826,"type":"identifier"},{"text":"handler","line":92,"char":3842,"type":"identifier"},{"text":"connectedAgents","line":92,"char":3850,"type":"identifier"},{"text":"size","line":92,"char":3868,"type":"identifier"},{"text":"assertEquals","line":93,"char":3885,"type":"identifier"},{"text":"agent","line":93,"char":3898,"type":"identifier"},{"text":"handler","line":93,"char":3905,"type":"identifier"},{"text":"connectedAgents","line":93,"char":3913,"type":"identifier"},{"text":"get","line":93,"char":3931,"type":"identifier"},{"text":"assertEquals","line":95,"char":3954,"type":"identifier"},{"text":"agent","line":95,"char":3970,"type":"identifier"},{"text":"messages","line":95,"char":3976,"type":"identifier"},{"text":"size","line":95,"char":3985,"type":"identifier"},{"text":"assertEquals","line":96,"char":4002,"type":"identifier"},{"text":"agent","line":96,"char":4015,"type":"identifier"},{"text":"messages","line":96,"char":4021,"type":"identifier"},{"text":"get","line":96,"char":4030,"type":"identifier"},{"text":"getAction","line":96,"char":4037,"type":"identifier"},{"text":"Action","line":96,"char":4050,"type":"identifier"},{"text":"cancelBuild","line":96,"char":4057,"type":"identifier"},{"text":"AgentIdentifier","line":101,"char":4167,"type":"identifier"},{"text":"AgentIdentifier","line":101,"char":4200,"type":"identifier"},{"text":"AgentRuntimeInfo","line":102,"char":4258,"type":"identifier"},{"text":"AgentRuntimeInfo","line":102,"char":4286,"type":"identifier"},{"text":"identifier","line":102,"char":4303,"type":"identifier"},{"text":"AgentRuntimeStatus","line":102,"char":4315,"type":"identifier"},{"text":"Idle","line":102,"char":4334,"type":"identifier"},{"text":"when","line":104,"char":4369,"type":"identifier"},{"text":"remote","line":104,"char":4374,"type":"identifier"},{"text":"getCookie","line":104,"char":4381,"type":"identifier"},{"text":"identifier","line":104,"char":4391,"type":"identifier"},{"text":"info","line":104,"char":4403,"type":"identifier"},{"text":"getLocation","line":104,"char":4408,"type":"identifier"},{"text":"thenReturn","line":104,"char":4424,"type":"identifier"},{"text":"when","line":105,"char":4458,"type":"identifier"},{"text":"remote","line":105,"char":4463,"type":"identifier"},{"text":"ping","line":105,"char":4470,"type":"identifier"},{"text":"any","line":105,"char":4475,"type":"identifier"},{"text":"AgentRuntimeInfo","line":105,"char":4479,"type":"identifier"},{"text":"thenReturn","line":105,"char":4505,"type":"identifier"},{"text":"AgentInstruction","line":105,"char":4520,"type":"identifier"},{"text":"handler","line":107,"char":4555,"type":"identifier"},{"text":"process","line":107,"char":4563,"type":"identifier"},{"text":"agent","line":107,"char":4571,"type":"identifier"},{"text":"Message","line":107,"char":4582,"type":"identifier"},{"text":"Action","line":107,"char":4590,"type":"identifier"},{"text":"ping","line":107,"char":4597,"type":"identifier"},{"text":"MessageEncoding","line":107,"char":4603,"type":"identifier"},{"text":"encodeData","line":107,"char":4619,"type":"identifier"},{"text":"info","line":107,"char":4630,"type":"identifier"},{"text":"verify","line":109,"char":4648,"type":"identifier"},{"text":"remote","line":109,"char":4655,"type":"identifier"},{"text":"ping","line":109,"char":4663,"type":"identifier"},{"text":"withCookie","line":109,"char":4668,"type":"identifier"},{"text":"info","line":109,"char":4679,"type":"identifier"},{"text":"assertEquals","line":110,"char":4709,"type":"identifier"},{"text":"agent","line":110,"char":4725,"type":"identifier"},{"text":"messages","line":110,"char":4731,"type":"identifier"},{"text":"size","line":110,"char":4740,"type":"identifier"},{"text":"assertEquals","line":111,"char":4757,"type":"identifier"},{"text":"agent","line":111,"char":4770,"type":"identifier"},{"text":"messages","line":111,"char":4776,"type":"identifier"},{"text":"get","line":111,"char":4785,"type":"identifier"},{"text":"getAction","line":111,"char":4792,"type":"identifier"},{"text":"Action","line":111,"char":4805,"type":"identifier"},{"text":"setCookie","line":111,"char":4812,"type":"identifier"},{"text":"assertEquals","line":112,"char":4832,"type":"identifier"},{"text":"MessageEncoding","line":112,"char":4845,"type":"identifier"},{"text":"decodeData","line":112,"char":4861,"type":"identifier"},{"text":"agent","line":112,"char":4872,"type":"identifier"},{"text":"messages","line":112,"char":4878,"type":"identifier"},{"text":"get","line":112,"char":4887,"type":"identifier"},{"text":"getData","line":112,"char":4894,"type":"identifier"},{"text":"String","line":112,"char":4905,"type":"identifier"},{"text":"AgentIdentifier","line":117,"char":5071,"type":"identifier"},{"text":"AgentIdentifier","line":117,"char":5104,"type":"identifier"},{"text":"AgentRuntimeInfo","line":118,"char":5162,"type":"identifier"},{"text":"AgentRuntimeInfo","line":118,"char":5190,"type":"identifier"},{"text":"identifier","line":118,"char":5207,"type":"identifier"},{"text":"AgentRuntimeStatus","line":118,"char":5219,"type":"identifier"},{"text":"Idle","line":118,"char":5238,"type":"identifier"},{"text":"when","line":120,"char":5273,"type":"identifier"},{"text":"remote","line":120,"char":5278,"type":"identifier"},{"text":"getCookie","line":120,"char":5285,"type":"identifier"},{"text":"identifier","line":120,"char":5295,"type":"identifier"},{"text":"info","line":120,"char":5307,"type":"identifier"},{"text":"getLocation","line":120,"char":5312,"type":"identifier"},{"text":"thenReturn","line":120,"char":5328,"type":"identifier"},{"text":"when","line":121,"char":5362,"type":"identifier"},{"text":"remote","line":121,"char":5367,"type":"identifier"},{"text":"ping","line":121,"char":5374,"type":"identifier"},{"text":"any","line":121,"char":5379,"type":"identifier"},{"text":"AgentRuntimeInfo","line":121,"char":5383,"type":"identifier"},{"text":"thenReturn","line":121,"char":5409,"type":"identifier"},{"text":"AgentInstruction","line":121,"char":5424,"type":"identifier"},{"text":"handler","line":123,"char":5458,"type":"identifier"},{"text":"process","line":123,"char":5466,"type":"identifier"},{"text":"agent","line":123,"char":5474,"type":"identifier"},{"text":"Message","line":123,"char":5485,"type":"identifier"},{"text":"Action","line":123,"char":5493,"type":"identifier"},{"text":"ping","line":123,"char":5500,"type":"identifier"},{"text":"MessageEncoding","line":123,"char":5506,"type":"identifier"},{"text":"encodeData","line":123,"char":5522,"type":"identifier"},{"text":"info","line":123,"char":5533,"type":"identifier"},{"text":"verify","line":125,"char":5551,"type":"identifier"},{"text":"remote","line":125,"char":5558,"type":"identifier"},{"text":"ping","line":125,"char":5566,"type":"identifier"},{"text":"withCookie","line":125,"char":5571,"type":"identifier"},{"text":"info","line":125,"char":5582,"type":"identifier"},{"text":"assertEquals","line":126,"char":5612,"type":"identifier"},{"text":"agent","line":126,"char":5628,"type":"identifier"},{"text":"messages","line":126,"char":5634,"type":"identifier"},{"text":"size","line":126,"char":5643,"type":"identifier"},{"text":"assertEquals","line":127,"char":5660,"type":"identifier"},{"text":"agent","line":127,"char":5673,"type":"identifier"},{"text":"messages","line":127,"char":5679,"type":"identifier"},{"text":"get","line":127,"char":5688,"type":"identifier"},{"text":"getAction","line":127,"char":5695,"type":"identifier"},{"text":"Action","line":127,"char":5708,"type":"identifier"},{"text":"setCookie","line":127,"char":5715,"type":"identifier"},{"text":"assertEquals","line":128,"char":5735,"type":"identifier"},{"text":"MessageEncoding","line":128,"char":5748,"type":"identifier"},{"text":"decodeData","line":128,"char":5764,"type":"identifier"},{"text":"agent","line":128,"char":5775,"type":"identifier"},{"text":"messages","line":128,"char":5781,"type":"identifier"},{"text":"get","line":128,"char":5790,"type":"identifier"},{"text":"getData","line":128,"char":5797,"type":"identifier"},{"text":"String","line":128,"char":5808,"type":"identifier"},{"text":"assertEquals","line":129,"char":5846,"type":"identifier"},{"text":"agent","line":129,"char":5859,"type":"identifier"},{"text":"messages","line":129,"char":5865,"type":"identifier"},{"text":"get","line":129,"char":5874,"type":"identifier"},{"text":"getAction","line":129,"char":5881,"type":"identifier"},{"text":"Action","line":129,"char":5894,"type":"identifier"},{"text":"cancelBuild","line":129,"char":5901,"type":"identifier"},{"text":"AgentRuntimeInfo","line":132,"char":5934,"type":"identifier"},{"text":"AgentRuntimeInfo","line":132,"char":5962,"type":"identifier"},{"text":"String","line":132,"char":5985,"type":"identifier"},{"text":"AgentRuntimeInfo","line":133,"char":6010,"type":"identifier"},{"text":"MessageEncoding","line":133,"char":6037,"type":"identifier"},{"text":"decodeData","line":133,"char":6053,"type":"identifier"},{"text":"MessageEncoding","line":133,"char":6064,"type":"identifier"},{"text":"encodeData","line":133,"char":6080,"type":"identifier"},{"text":"info","line":133,"char":6091,"type":"identifier"},{"text":"AgentRuntimeInfo","line":133,"char":6098,"type":"identifier"},{"text":"newInfo","line":134,"char":6131,"type":"identifier"},{"text":"setCookie","line":134,"char":6139,"type":"identifier"},{"text":"cookie","line":134,"char":6149,"type":"identifier"},{"text":"newInfo","line":135,"char":6173,"type":"identifier"},{"text":"AgentRuntimeInfo","line":140,"char":6247,"type":"identifier"},{"text":"AgentRuntimeInfo","line":140,"char":6275,"type":"identifier"},{"text":"AgentIdentifier","line":140,"char":6296,"type":"identifier"},{"text":"AgentRuntimeStatus","line":140,"char":6346,"type":"identifier"},{"text":"Idle","line":140,"char":6365,"type":"identifier"},{"text":"JobIdentifier","line":142,"char":6400,"type":"identifier"},{"text":"JobIdentifier","line":142,"char":6434,"type":"identifier"},{"text":"handler","line":143,"char":6459,"type":"identifier"},{"text":"process","line":143,"char":6467,"type":"identifier"},{"text":"agent","line":143,"char":6475,"type":"identifier"},{"text":"Message","line":143,"char":6486,"type":"identifier"},{"text":"Action","line":143,"char":6494,"type":"identifier"},{"text":"reportCurrentStatus","line":143,"char":6501,"type":"identifier"},{"text":"MessageEncoding","line":143,"char":6522,"type":"identifier"},{"text":"encodeData","line":143,"char":6538,"type":"identifier"},{"text":"Report","line":143,"char":6553,"type":"identifier"},{"text":"info","line":143,"char":6560,"type":"identifier"},{"text":"jobIdentifier","line":143,"char":6566,"type":"identifier"},{"text":"JobState","line":143,"char":6581,"type":"identifier"},{"text":"Preparing","line":143,"char":6590,"type":"identifier"},{"text":"verify","line":145,"char":6614,"type":"identifier"},{"text":"remote","line":145,"char":6621,"type":"identifier"},{"text":"reportCurrentStatus","line":145,"char":6629,"type":"identifier"},{"text":"info","line":145,"char":6649,"type":"identifier"},{"text":"jobIdentifier","line":145,"char":6655,"type":"identifier"},{"text":"JobState","line":145,"char":6670,"type":"identifier"},{"text":"Preparing","line":145,"char":6679,"type":"identifier"},{"text":"AgentRuntimeInfo","line":150,"char":6753,"type":"identifier"},{"text":"AgentRuntimeInfo","line":150,"char":6781,"type":"identifier"},{"text":"AgentIdentifier","line":150,"char":6802,"type":"identifier"},{"text":"AgentRuntimeStatus","line":150,"char":6852,"type":"identifier"},{"text":"Idle","line":150,"char":6871,"type":"identifier"},{"text":"JobIdentifier","line":152,"char":6906,"type":"identifier"},{"text":"JobIdentifier","line":152,"char":6940,"type":"identifier"},{"text":"handler","line":153,"char":6965,"type":"identifier"},{"text":"process","line":153,"char":6973,"type":"identifier"},{"text":"agent","line":153,"char":6981,"type":"identifier"},{"text":"Message","line":153,"char":6992,"type":"identifier"},{"text":"Action","line":153,"char":7000,"type":"identifier"},{"text":"reportCompleting","line":153,"char":7007,"type":"identifier"},{"text":"MessageEncoding","line":153,"char":7025,"type":"identifier"},{"text":"encodeData","line":153,"char":7041,"type":"identifier"},{"text":"Report","line":153,"char":7056,"type":"identifier"},{"text":"info","line":153,"char":7063,"type":"identifier"},{"text":"jobIdentifier","line":153,"char":7069,"type":"identifier"},{"text":"JobResult","line":153,"char":7084,"type":"identifier"},{"text":"Passed","line":153,"char":7094,"type":"identifier"},{"text":"verify","line":155,"char":7115,"type":"identifier"},{"text":"remote","line":155,"char":7122,"type":"identifier"},{"text":"reportCompleting","line":155,"char":7130,"type":"identifier"},{"text":"info","line":155,"char":7147,"type":"identifier"},{"text":"jobIdentifier","line":155,"char":7153,"type":"identifier"},{"text":"JobResult","line":155,"char":7168,"type":"identifier"},{"text":"Passed","line":155,"char":7178,"type":"identifier"},{"text":"AgentRuntimeInfo","line":160,"char":7248,"type":"identifier"},{"text":"AgentRuntimeInfo","line":160,"char":7276,"type":"identifier"},{"text":"AgentIdentifier","line":160,"char":7297,"type":"identifier"},{"text":"AgentRuntimeStatus","line":160,"char":7347,"type":"identifier"},{"text":"Idle","line":160,"char":7366,"type":"identifier"},{"text":"JobIdentifier","line":162,"char":7401,"type":"identifier"},{"text":"JobIdentifier","line":162,"char":7435,"type":"identifier"},{"text":"handler","line":163,"char":7460,"type":"identifier"},{"text":"process","line":163,"char":7468,"type":"identifier"},{"text":"agent","line":163,"char":7476,"type":"identifier"},{"text":"Message","line":163,"char":7487,"type":"identifier"},{"text":"Action","line":163,"char":7495,"type":"identifier"},{"text":"reportCompleted","line":163,"char":7502,"type":"identifier"},{"text":"MessageEncoding","line":163,"char":7519,"type":"identifier"},{"text":"encodeData","line":163,"char":7535,"type":"identifier"},{"text":"Report","line":163,"char":7550,"type":"identifier"},{"text":"info","line":163,"char":7557,"type":"identifier"},{"text":"jobIdentifier","line":163,"char":7563,"type":"identifier"},{"text":"JobResult","line":163,"char":7578,"type":"identifier"},{"text":"Passed","line":163,"char":7588,"type":"identifier"},{"text":"verify","line":165,"char":7609,"type":"identifier"},{"text":"remote","line":165,"char":7616,"type":"identifier"},{"text":"reportCompleted","line":165,"char":7624,"type":"identifier"},{"text":"info","line":165,"char":7640,"type":"identifier"},{"text":"jobIdentifier","line":165,"char":7646,"type":"identifier"},{"text":"JobResult","line":165,"char":7661,"type":"identifier"},{"text":"Passed","line":165,"char":7671,"type":"identifier"},{"text":"handler","line":170,"char":7775,"type":"identifier"},{"text":"remove","line":170,"char":7783,"type":"identifier"},{"text":"agent","line":170,"char":7790,"type":"identifier"},{"text":"AgentInstance","line":175,"char":7865,"type":"identifier"},{"text":"AgentInstanceMother","line":175,"char":7890,"type":"identifier"},{"text":"idle","line":175,"char":7910,"type":"identifier"},{"text":"AgentRuntimeInfo","line":176,"char":7926,"type":"identifier"},{"text":"AgentRuntimeInfo","line":176,"char":7954,"type":"identifier"},{"text":"instance","line":176,"char":7971,"type":"identifier"},{"text":"getAgentIdentifier","line":176,"char":7980,"type":"identifier"},{"text":"AgentRuntimeStatus","line":176,"char":8002,"type":"identifier"},{"text":"Idle","line":176,"char":8021,"type":"identifier"},{"text":"when","line":177,"char":8055,"type":"identifier"},{"text":"remote","line":177,"char":8060,"type":"identifier"},{"text":"ping","line":177,"char":8067,"type":"identifier"},{"text":"any","line":177,"char":8072,"type":"identifier"},{"text":"AgentRuntimeInfo","line":177,"char":8076,"type":"identifier"},{"text":"thenReturn","line":177,"char":8102,"type":"identifier"},{"text":"AgentInstruction","line":177,"char":8117,"type":"identifier"},{"text":"when","line":178,"char":8151,"type":"identifier"},{"text":"remote","line":178,"char":8156,"type":"identifier"},{"text":"getCookie","line":178,"char":8163,"type":"identifier"},{"text":"instance","line":178,"char":8173,"type":"identifier"},{"text":"getAgentIdentifier","line":178,"char":8182,"type":"identifier"},{"text":"info","line":178,"char":8204,"type":"identifier"},{"text":"getLocation","line":178,"char":8209,"type":"identifier"},{"text":"thenReturn","line":178,"char":8225,"type":"identifier"},{"text":"when","line":179,"char":8259,"type":"identifier"},{"text":"agentService","line":179,"char":8264,"type":"identifier"},{"text":"findAgent","line":179,"char":8277,"type":"identifier"},{"text":"instance","line":179,"char":8287,"type":"identifier"},{"text":"getUuid","line":179,"char":8296,"type":"identifier"},{"text":"thenReturn","line":179,"char":8308,"type":"identifier"},{"text":"instance","line":179,"char":8319,"type":"identifier"},{"text":"handler","line":181,"char":8339,"type":"identifier"},{"text":"process","line":181,"char":8347,"type":"identifier"},{"text":"agent","line":181,"char":8355,"type":"identifier"},{"text":"Message","line":181,"char":8366,"type":"identifier"},{"text":"Action","line":181,"char":8374,"type":"identifier"},{"text":"ping","line":181,"char":8381,"type":"identifier"},{"text":"MessageEncoding","line":181,"char":8387,"type":"identifier"},{"text":"encodeData","line":181,"char":8403,"type":"identifier"},{"text":"info","line":181,"char":8414,"type":"identifier"},{"text":"handler","line":183,"char":8432,"type":"identifier"},{"text":"remove","line":183,"char":8440,"type":"identifier"},{"text":"agent","line":183,"char":8447,"type":"identifier"},{"text":"assertEquals","line":184,"char":8463,"type":"identifier"},{"text":"handler","line":184,"char":8479,"type":"identifier"},{"text":"connectedAgents","line":184,"char":8487,"type":"identifier"},{"text":"size","line":184,"char":8505,"type":"identifier"},{"text":"assertEquals","line":185,"char":8522,"type":"identifier"},{"text":"AgentStatus","line":185,"char":8535,"type":"identifier"},{"text":"LostContact","line":185,"char":8547,"type":"identifier"},{"text":"instance","line":185,"char":8560,"type":"identifier"},{"text":"getStatus","line":185,"char":8569,"type":"identifier"},{"text":"AgentInstance","line":190,"char":8646,"type":"identifier"},{"text":"AgentInstanceMother","line":190,"char":8671,"type":"identifier"},{"text":"idle","line":190,"char":8691,"type":"identifier"},{"text":"AgentRuntimeInfo","line":191,"char":8707,"type":"identifier"},{"text":"AgentRuntimeInfo","line":191,"char":8735,"type":"identifier"},{"text":"instance","line":191,"char":8752,"type":"identifier"},{"text":"getAgentIdentifier","line":191,"char":8761,"type":"identifier"},{"text":"AgentRuntimeStatus","line":191,"char":8783,"type":"identifier"},{"text":"Idle","line":191,"char":8802,"type":"identifier"},{"text":"when","line":192,"char":8836,"type":"identifier"},{"text":"agentService","line":192,"char":8841,"type":"identifier"},{"text":"findAgentAndRefreshStatus","line":192,"char":8854,"type":"identifier"},{"text":"instance","line":192,"char":8880,"type":"identifier"},{"text":"getUuid","line":192,"char":8889,"type":"identifier"},{"text":"thenReturn","line":192,"char":8901,"type":"identifier"},{"text":"instance","line":192,"char":8912,"type":"identifier"},{"text":"when","line":193,"char":8931,"type":"identifier"},{"text":"remote","line":193,"char":8936,"type":"identifier"},{"text":"ping","line":193,"char":8943,"type":"identifier"},{"text":"any","line":193,"char":8948,"type":"identifier"},{"text":"AgentRuntimeInfo","line":193,"char":8952,"type":"identifier"},{"text":"thenReturn","line":193,"char":8978,"type":"identifier"},{"text":"AgentInstruction","line":193,"char":8993,"type":"identifier"},{"text":"when","line":194,"char":9027,"type":"identifier"},{"text":"remote","line":194,"char":9032,"type":"identifier"},{"text":"getCookie","line":194,"char":9039,"type":"identifier"},{"text":"instance","line":194,"char":9049,"type":"identifier"},{"text":"getAgentIdentifier","line":194,"char":9058,"type":"identifier"},{"text":"info","line":194,"char":9080,"type":"identifier"},{"text":"getLocation","line":194,"char":9085,"type":"identifier"},{"text":"thenReturn","line":194,"char":9101,"type":"identifier"},{"text":"handler","line":195,"char":9135,"type":"identifier"},{"text":"process","line":195,"char":9143,"type":"identifier"},{"text":"agent","line":195,"char":9151,"type":"identifier"},{"text":"Message","line":195,"char":9162,"type":"identifier"},{"text":"Action","line":195,"char":9170,"type":"identifier"},{"text":"ping","line":195,"char":9177,"type":"identifier"},{"text":"MessageEncoding","line":195,"char":9183,"type":"identifier"},{"text":"encodeData","line":195,"char":9199,"type":"identifier"},{"text":"info","line":195,"char":9210,"type":"identifier"},{"text":"agent","line":197,"char":9228,"type":"identifier"},{"text":"messages","line":197,"char":9234,"type":"identifier"},{"text":"clear","line":197,"char":9243,"type":"identifier"},{"text":"handler","line":198,"char":9260,"type":"identifier"},{"text":"sendCancelMessage","line":198,"char":9268,"type":"identifier"},{"text":"instance","line":198,"char":9286,"type":"identifier"},{"text":"getAgentIdentifier","line":198,"char":9295,"type":"identifier"},{"text":"getUuid","line":198,"char":9316,"type":"identifier"},{"text":"assertEquals","line":199,"char":9336,"type":"identifier"},{"text":"agent","line":199,"char":9352,"type":"identifier"},{"text":"messages","line":199,"char":9358,"type":"identifier"},{"text":"size","line":199,"char":9367,"type":"identifier"},{"text":"handler","line":204,"char":9478,"type":"identifier"},{"text":"sendCancelMessage","line":204,"char":9486,"type":"identifier"},{"text":"handler","line":205,"char":9519,"type":"identifier"},{"text":"sendCancelMessage","line":205,"char":9527,"type":"identifier"},{"text":"AgentInstance","line":210,"char":9634,"type":"identifier"},{"text":"AgentInstanceMother","line":210,"char":9659,"type":"identifier"},{"text":"idle","line":210,"char":9679,"type":"identifier"},{"text":"AgentRuntimeInfo","line":211,"char":9695,"type":"identifier"},{"text":"AgentRuntimeInfo","line":211,"char":9723,"type":"identifier"},{"text":"instance","line":211,"char":9740,"type":"identifier"},{"text":"getAgentIdentifier","line":211,"char":9749,"type":"identifier"},{"text":"AgentRuntimeStatus","line":211,"char":9771,"type":"identifier"},{"text":"Idle","line":211,"char":9790,"type":"identifier"},{"text":"when","line":212,"char":9824,"type":"identifier"},{"text":"remote","line":212,"char":9829,"type":"identifier"},{"text":"ping","line":212,"char":9836,"type":"identifier"},{"text":"any","line":212,"char":9841,"type":"identifier"},{"text":"AgentRuntimeInfo","line":212,"char":9845,"type":"identifier"},{"text":"thenReturn","line":212,"char":9871,"type":"identifier"},{"text":"AgentInstruction","line":212,"char":9886,"type":"identifier"},{"text":"when","line":213,"char":9920,"type":"identifier"},{"text":"remote","line":213,"char":9925,"type":"identifier"},{"text":"getCookie","line":213,"char":9932,"type":"identifier"},{"text":"instance","line":213,"char":9942,"type":"identifier"},{"text":"getAgentIdentifier","line":213,"char":9951,"type":"identifier"},{"text":"info","line":213,"char":9973,"type":"identifier"},{"text":"getLocation","line":213,"char":9978,"type":"identifier"},{"text":"thenReturn","line":213,"char":9994,"type":"identifier"},{"text":"when","line":214,"char":10024,"type":"identifier"},{"text":"agentService","line":214,"char":10029,"type":"identifier"},{"text":"findAgent","line":214,"char":10042,"type":"identifier"},{"text":"instance","line":214,"char":10052,"type":"identifier"},{"text":"getUuid","line":214,"char":10061,"type":"identifier"},{"text":"thenReturn","line":214,"char":10073,"type":"identifier"},{"text":"instance","line":214,"char":10084,"type":"identifier"},{"text":"handler","line":216,"char":10104,"type":"identifier"},{"text":"process","line":216,"char":10112,"type":"identifier"},{"text":"agent","line":216,"char":10120,"type":"identifier"},{"text":"Message","line":216,"char":10131,"type":"identifier"},{"text":"Action","line":216,"char":10139,"type":"identifier"},{"text":"ping","line":216,"char":10146,"type":"identifier"},{"text":"MessageEncoding","line":216,"char":10152,"type":"identifier"},{"text":"encodeData","line":216,"char":10168,"type":"identifier"},{"text":"info","line":216,"char":10179,"type":"identifier"},{"text":"info","line":217,"char":10196,"type":"identifier"},{"text":"setCookie","line":217,"char":10201,"type":"identifier"},{"text":"reset","line":219,"char":10227,"type":"identifier"},{"text":"remote","line":219,"char":10233,"type":"identifier"},{"text":"when","line":220,"char":10250,"type":"identifier"},{"text":"remote","line":220,"char":10255,"type":"identifier"},{"text":"ping","line":220,"char":10262,"type":"identifier"},{"text":"any","line":220,"char":10267,"type":"identifier"},{"text":"AgentRuntimeInfo","line":220,"char":10271,"type":"identifier"},{"text":"thenReturn","line":220,"char":10297,"type":"identifier"},{"text":"AgentInstruction","line":220,"char":10312,"type":"identifier"},{"text":"when","line":221,"char":10346,"type":"identifier"},{"text":"remote","line":221,"char":10351,"type":"identifier"},{"text":"getCookie","line":221,"char":10358,"type":"identifier"},{"text":"instance","line":221,"char":10368,"type":"identifier"},{"text":"getAgentIdentifier","line":221,"char":10377,"type":"identifier"},{"text":"info","line":221,"char":10399,"type":"identifier"},{"text":"getLocation","line":221,"char":10404,"type":"identifier"},{"text":"thenReturn","line":221,"char":10420,"type":"identifier"},{"text":"handler","line":223,"char":10455,"type":"identifier"},{"text":"process","line":223,"char":10463,"type":"identifier"},{"text":"agent","line":223,"char":10471,"type":"identifier"},{"text":"Message","line":223,"char":10482,"type":"identifier"},{"text":"Action","line":223,"char":10490,"type":"identifier"},{"text":"ping","line":223,"char":10497,"type":"identifier"},{"text":"MessageEncoding","line":223,"char":10503,"type":"identifier"},{"text":"encodeData","line":223,"char":10519,"type":"identifier"},{"text":"info","line":223,"char":10530,"type":"identifier"},{"text":"verify","line":224,"char":10547,"type":"identifier"},{"text":"remote","line":224,"char":10554,"type":"identifier"},{"text":"ping","line":224,"char":10562,"type":"identifier"},{"text":"withCookie","line":224,"char":10567,"type":"identifier"},{"text":"info","line":224,"char":10578,"type":"identifier"},{"text":"info","line":226,"char":10605,"type":"identifier"},{"text":"setCookie","line":226,"char":10610,"type":"identifier"},{"text":"handler","line":227,"char":10635,"type":"identifier"},{"text":"remove","line":227,"char":10643,"type":"identifier"},{"text":"agent","line":227,"char":10650,"type":"identifier"},{"text":"reset","line":229,"char":10667,"type":"identifier"},{"text":"remote","line":229,"char":10673,"type":"identifier"},{"text":"when","line":230,"char":10690,"type":"identifier"},{"text":"remote","line":230,"char":10695,"type":"identifier"},{"text":"ping","line":230,"char":10702,"type":"identifier"},{"text":"any","line":230,"char":10707,"type":"identifier"},{"text":"AgentRuntimeInfo","line":230,"char":10711,"type":"identifier"},{"text":"thenReturn","line":230,"char":10737,"type":"identifier"},{"text":"AgentInstruction","line":230,"char":10752,"type":"identifier"},{"text":"when","line":231,"char":10786,"type":"identifier"},{"text":"remote","line":231,"char":10791,"type":"identifier"},{"text":"getCookie","line":231,"char":10798,"type":"identifier"},{"text":"instance","line":231,"char":10808,"type":"identifier"},{"text":"getAgentIdentifier","line":231,"char":10817,"type":"identifier"},{"text":"info","line":231,"char":10839,"type":"identifier"},{"text":"getLocation","line":231,"char":10844,"type":"identifier"},{"text":"thenReturn","line":231,"char":10860,"type":"identifier"},{"text":"handler","line":233,"char":10895,"type":"identifier"},{"text":"process","line":233,"char":10903,"type":"identifier"},{"text":"agent","line":233,"char":10911,"type":"identifier"},{"text":"Message","line":233,"char":10922,"type":"identifier"},{"text":"Action","line":233,"char":10930,"type":"identifier"},{"text":"ping","line":233,"char":10937,"type":"identifier"},{"text":"MessageEncoding","line":233,"char":10943,"type":"identifier"},{"text":"encodeData","line":233,"char":10959,"type":"identifier"},{"text":"info","line":233,"char":10970,"type":"identifier"},{"text":"verify","line":234,"char":10987,"type":"identifier"},{"text":"remote","line":234,"char":10994,"type":"identifier"},{"text":"ping","line":234,"char":11002,"type":"identifier"},{"text":"withCookie","line":234,"char":11007,"type":"identifier"},{"text":"info","line":234,"char":11018,"type":"identifier"},{"text":"AgentInstance","line":239,"char":11153,"type":"identifier"},{"text":"AgentInstanceMother","line":239,"char":11178,"type":"identifier"},{"text":"idle","line":239,"char":11198,"type":"identifier"},{"text":"AgentRuntimeInfo","line":240,"char":11214,"type":"identifier"},{"text":"AgentRuntimeInfo","line":240,"char":11242,"type":"identifier"},{"text":"instance","line":240,"char":11259,"type":"identifier"},{"text":"getAgentIdentifier","line":240,"char":11268,"type":"identifier"},{"text":"AgentRuntimeStatus","line":240,"char":11290,"type":"identifier"},{"text":"Idle","line":240,"char":11309,"type":"identifier"},{"text":"info","line":241,"char":11343,"type":"identifier"},{"text":"setCookie","line":241,"char":11348,"type":"identifier"},{"text":"agent","line":242,"char":11377,"type":"identifier"},{"text":"setIgnoreAcknowledgements","line":242,"char":11383,"type":"identifier"},{"text":"when","line":243,"char":11425,"type":"identifier"},{"text":"remote","line":243,"char":11430,"type":"identifier"},{"text":"ping","line":243,"char":11437,"type":"identifier"},{"text":"info","line":243,"char":11442,"type":"identifier"},{"text":"thenReturn","line":243,"char":11449,"type":"identifier"},{"text":"AgentInstruction","line":243,"char":11464,"type":"identifier"},{"text":"when","line":244,"char":11498,"type":"identifier"},{"text":"agentService","line":244,"char":11503,"type":"identifier"},{"text":"findAgent","line":244,"char":11516,"type":"identifier"},{"text":"instance","line":244,"char":11526,"type":"identifier"},{"text":"getUuid","line":244,"char":11535,"type":"identifier"},{"text":"thenReturn","line":244,"char":11547,"type":"identifier"},{"text":"instance","line":244,"char":11558,"type":"identifier"},{"text":"Message","line":246,"char":11578,"type":"identifier"},{"text":"Message","line":246,"char":11596,"type":"identifier"},{"text":"Action","line":246,"char":11604,"type":"identifier"},{"text":"ping","line":246,"char":11611,"type":"identifier"},{"text":"MessageEncoding","line":246,"char":11617,"type":"identifier"},{"text":"encodeData","line":246,"char":11633,"type":"identifier"},{"text":"info","line":246,"char":11644,"type":"identifier"},{"text":"handler","line":247,"char":11660,"type":"identifier"},{"text":"process","line":247,"char":11668,"type":"identifier"},{"text":"agent","line":247,"char":11676,"type":"identifier"},{"text":"msg","line":247,"char":11683,"type":"identifier"},{"text":"assertEquals","line":248,"char":11697,"type":"identifier"},{"text":"agent","line":248,"char":11713,"type":"identifier"},{"text":"messages","line":248,"char":11719,"type":"identifier"},{"text":"size","line":248,"char":11728,"type":"identifier"},{"text":"assertEquals","line":249,"char":11745,"type":"identifier"},{"text":"Action","line":249,"char":11758,"type":"identifier"},{"text":"acknowledge","line":249,"char":11765,"type":"identifier"},{"text":"agent","line":249,"char":11778,"type":"identifier"},{"text":"messages","line":249,"char":11784,"type":"identifier"},{"text":"get","line":249,"char":11793,"type":"identifier"},{"text":"getAction","line":249,"char":11800,"type":"identifier"},{"text":"assertEquals","line":250,"char":11822,"type":"identifier"},{"text":"msg","line":250,"char":11835,"type":"identifier"},{"text":"getAcknowledgementId","line":250,"char":11839,"type":"identifier"},{"text":"MessageEncoding","line":250,"char":11863,"type":"identifier"},{"text":"decodeData","line":250,"char":11879,"type":"identifier"},{"text":"agent","line":250,"char":11890,"type":"identifier"},{"text":"messages","line":250,"char":11896,"type":"identifier"},{"text":"get","line":250,"char":11905,"type":"identifier"},{"text":"getData","line":250,"char":11912,"type":"identifier"},{"text":"String","line":250,"char":11923,"type":"identifier"}]},"highlight":{"content":["() {\n        handler.sendCancelMessage(null);\n        handler.sendCancelMessage(\"<em>hello</em>\");\n    }\n\n    @Test\n    public void"]}},{"_index":"codesearch","_type":"code","_id":"9dd91fe62dc21d1c50695fef93d0c7461873eefe","_score":0.0,"_source":{"filename":"etl/src/test/java/com/orientechnologies/orient/etl/extractor/OCSVExtractorTest.java","content":"package com.orientechnologies.orient.etl.extractor;\n\nimport com.orientechnologies.orient.core.id.ORecordId;\nimport com.orientechnologies.orient.core.record.impl.ODocument;\nimport com.orientechnologies.orient.etl.OETLBaseTest;\nimport com.orientechnologies.orient.etl.transformer.OCSVTransformer;\nimport org.junit.Test;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.junit.Assert.*;\n\n/**\n * Created by frank on 10/5/15.\n */\npublic class OCSVExtractorTest extends OETLBaseTest {\n\n  @Test\n  public void testOneObject() {\n    process(\"{source: { content: { value: 'name,surname\\nJay,Miner' } }, extractor : { csv: {} }, loader: { test: {} } }\");\n\n    assertEquals(1, getResult().size());\n    ODocument doc = getResult().get(0);\n    assertEquals(2, doc.fields());\n    assertEquals(\"Jay\", doc.field(\"name\"));\n    assertEquals(\"Miner\", doc.field(\"surname\"));\n  }\n\n  @Test\n  public void testEmpty() {\n    String cfgJson = \"{source: { content: { value: '' }  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    assertEquals(0, getResult().size());\n  }\n\n  @Test\n  public void testSmallSet() {\n    String content = \"name,surname,id\";\n    for (int i = 0; i < names.length; ++i)\n      content += \"\\n\" + names[i] + \",\" + surnames[i] + \",\" + i;\n    process(\"{source: { content: { value: '\" + content + \"' } }, extractor : { csv: {} },  loader: { test: {} } }\");\n\n    assertEquals(getResult().size(), names.length);\n\n    int i = 0;\n    for (ODocument doc : getResult()) {\n      assertEquals(3, doc.fields());\n      assertEquals(names[i], doc.field(\"name\"));\n      assertEquals(surnames[i], doc.field(\"surname\"));\n      assertEquals(i, doc.field(\"id\"));\n      i++;\n    }\n  }\n\n  @Test\n  public void testSkipFromTwoToFour() {\n    String content = \"name,surname,id\";\n    for (int i = 0; i < names.length; ++i)\n      content += \"\\n\" + names[i] + \",\" + surnames[i] + \",\" + i;\n    process(\"{source: { content: { value: '\" + content + \"' } }, \" + \"extractor : { csv: {skipFrom: 1, skipTo: 4} },  \"\n        + \"loader: { test: {} } }\");\n\n    assertThat(getResult()).hasSize(names.length - 4);\n  }\n\n  @Test\n  public void testDateTypeAutodetection() {\n    String cfgJson = \"{source: { content: { value: 'BirthDay\\n2008-04-30' }  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    Date birthday = doc.field(\"BirthDay\");\n    assertEquals(2008, birthday.getYear() + 1900);\n    assertEquals(4, birthday.getMonth() + 1);\n    assertEquals(30, birthday.getDate());\n  }\n\n  @Test\n  public void testDateTypeAutodetectionWithCustomDateFormat() {\n    String cfgJson = \"{source: { content: { value: 'BirthDay\\n30-04-2008' }  }, extractor : { csv: {dateFormat: \\\"dd-MM-yyyy\\\"} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    Date birthday = doc.field(\"BirthDay\");\n    assertEquals(2008, birthday.getYear() + 1900);\n    assertEquals(4, birthday.getMonth() + 1);\n    assertEquals(30, birthday.getDate());\n  }\n\n  @Test\n  public void testStringInDblQuotes() throws Exception {\n    String cfgJson = \"{source: { content: { value: 'text\\n\\\"Hello, quotes are here!\\\"' }  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    String text = doc.field(\"text\");\n    assertEquals(\"Hello, quotes are here!\", text);\n  }\n\n  @Test\n  public void testStringStartedFromDigit() throws Exception {\n    String cfgJson = \"{source: { content: { value: 'address\\n\\\"401 Congress Ave, Suite 2450\\\"' }  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    String address = doc.field(\"address\");\n    assertEquals(\"401 Congress Ave, Suite 2450\", address);\n  }\n\n  @Test\n  public void testFloat() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n10.78'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(10.78f, doc.field(\"firstNumber\"));\n  }\n\n  @Test\n  public void testFloatWithinQuotesAndDotAsDecimalSeparator() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n\\\"10.78\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(10.78f, doc.field(\"firstNumber\"));\n  }\n\n  @Test\n  public void testFloatWithinQuotesAndCommaAsDecimalSeparator() {\n    String cfgJson = \"{source: { content: { value: 'firstNumber\\n\\\"10,78\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(10.78f, doc.field(\"firstNumber\"));\n  }\n\n  @Test\n  public void testDouble() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n540282346638528870000000000000000000000.0'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(minDouble, (Double) doc.field(\"secondNumber\"));\n  }\n\n  @Test\n  public void testDoubleWithingQuotes() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n\\\"540282346638528870000000000000000000000.0\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(minDouble, (Double) doc.field(\"secondNumber\"));\n  }\n\n  @Test\n  public void testDoubleWithingQuotesAndCommaAsDecimalSeparator() {\n    Double minDouble = 540282346638528870000000000000000000000.0d;\n\n    String cfgJson = \"{source: { content: { value: 'secondNumber\\n\\\"540282346638528870000000000000000000000,0\\\"'}  }, extractor : { csv: {} }, loader: { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(minDouble, (Double) doc.field(\"secondNumber\"));\n  }\n\n  @Test\n  public void testInteger() {\n    String cfgJson = \"{source: { content: { value: 'number\\n100'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(100), (Integer) doc.field(\"number\"));\n  }\n\n  @Test\n  public void testIntegerWithingQuotes() {\n    String cfgJson = \"{source: { content: { value: 'number\\n\\\"100\\\"'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(100), (Integer) doc.field(\"number\"));\n  }\n\n  @Test\n  public void testLong() {\n    String cfgJson = \"{source: { content: { value: 'number\\n3000000000'} }, extractor : { csv: {} },  loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Long(3000000000L), (Long) doc.field(\"number\"));\n  }\n\n  @Test\n  public void testLongWithingQuotes() {\n    String cfgJson = \"{source: { content: { value: 'number\\n\\\"3000000000\\\"'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Long(3000000000L), (Long) doc.field(\"number\"));\n  }\n\n  @Test\n  public void testGetCellContentSingleQuoted() {\n    String singleQuotedString = \"\\\"aaa\\\"\";\n    String unQuotedString = \"aaa\";\n    OCSVTransformer ocsvTransformer = new OCSVTransformer();\n    assertEquals(unQuotedString, ocsvTransformer.getCellContent(singleQuotedString));\n  }\n\n  @Test\n  public void testIsFiniteFloat() {\n    OCSVExtractor ocsvExtractor = new OCSVExtractor();\n    assertFalse(ocsvExtractor.isFinite(Float.NaN));\n    assertFalse(ocsvExtractor.isFinite(Float.POSITIVE_INFINITY));\n    assertFalse(ocsvExtractor.isFinite(Float.NEGATIVE_INFINITY));\n    assertTrue(ocsvExtractor.isFinite(0f));\n  }\n\n  @Test\n  public void testNullCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,,Hello'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertNull(doc.field(\"postId\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void testNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,NULL,Hello'} }, extractor : { csv : {} },  loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertNull(doc.field(\"postId\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void testCustomNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,?,Hello'} }, extractor : { csv : {nullValue: \\\"?\\\"} },  loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertNull(doc.field(\"postId\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void testNullValueInCellEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv: {} },  loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.field(\"title\")).isNull();\n    // assertEquals(\"\", (String) doc.field(\"title\"));\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void testQuotedEmptyString() {\n    String cfgJson = \"{source: { content: { value: 'id,title,text\\n1,\\\"\\\",Hello'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertThat(doc.field(\"title\")).isNull();\n    assertEquals(\"Hello\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void testCRLFDelimiter() {\n    String cfgJson = \"{source: { content: { value: 'id,text,num\\r\\n1,my test text,1'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Integer>field(\"id\")).isEqualTo(1);\n    assertThat(doc.<String>field(\"text\")).isEqualTo(\"my test text\");\n    assertThat(doc.<Integer>field(\"num\")).isEqualTo(1);\n  }\n\n  @Test\n  public void testEndingLineBreak() {\n    String cfgJson = \"{source: { content: { value: 'id,text,num\\r\\n1,my test text,1\\r\\n'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertEquals(new Integer(1), (Integer) doc.field(\"id\"));\n    assertEquals(\"my test text\", (String) doc.field(\"text\"));\n    assertEquals(new Integer(1), (Integer) doc.field(\"num\"));\n  }\n\n  @Test\n  public void testEndingSpaceInFieldName() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,my test text,1\\r\\n'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer>field(\"id \")).isEqualTo(1);\n    assertThat(doc.field(\"text\")).isNull();\n    assertThat(doc.<String>field(\"text \")).isEqualTo(\"my test text\");\n    assertThat(doc.<Integer>field(\"num \")).isEqualTo(1);\n  }\n\n  @Test\n  public void testCRLFIWithinQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,\\\"my test\\r\\n text\\\",1\\r\\n'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertThat((Integer) doc.field(\"id \")).isEqualTo(1);\n    assertThat((String) doc.field(\"text \")).isEqualTo(\"my test\\r\\n text\");\n    assertThat((Integer) doc.field(\"num \")).isEqualTo(1);\n  }\n\n  @Test\n  public void testEscapingDoubleQuotes() {\n    String cfgJson = \"{source: { content: { value: 'id ,text ,num \\r\\n1,my test \\\"\\\" text,1\\r\\n'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer>field(\"id \")).isEqualTo(1);\n    assertThat(doc.<String>field(\"text \")).isEqualTo(\"my test \\\"\\\" text\");\n    assertThat(doc.<Integer>field(\"num \")).isEqualTo(1);\n  }\n\n  @Test\n  public void testNegativeInteger() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertThat(doc.<Integer>field(\"id\")).isEqualTo(-1);\n\n  }\n\n  @Test\n  public void testNegativeFloat() {\n    String cfgJson = \"{source: { content: { value: 'id\\r\\n-1.0'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertFalse(res.isEmpty());\n    ODocument doc = res.get(0);\n    assertThat(doc.<Float>field(\"id\")).isEqualTo(-1.0f);\n  }\n\n  @Test\n  public void testLinkType() {\n    String cfgJson = \"{source: { content: { value: 'id\\n#1:1'} }, extractor : { csv : {'columns':['id:LINK']} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.field(\"id\")).isEqualTo(new ORecordId(\"#1:1\"));\n  }\n\n  @Test\n  public void testBooleanType() {\n    String cfgJson = \"{source: { content: { value: 'fake\\ntrue'} }, extractor : { csv : {} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Boolean>field(\"fake\")).isTrue();\n\n  }\n\n  @Test\n  public void testColumsDefinitions() {\n    String cfgJson = \"{source: { content: { value: 'name,date,datetime\\nfrank,2008-04-30,2015-03-30 11:00'} }, extractor : { csv : { 'columns':['name:string','date:date','datetime:datetime']} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Date>field(\"date\")).isEqualTo(\"2008-04-30\");\n\n    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n\n    assertThat(df.format(doc.<Date>field(\"datetime\"))).isEqualTo(\"2015-03-30 11:00\");\n\n  }\n\n  @Test\n  public void testCsvParsingFormat  () {\n\n//    CSVFormat format = CSVFormat.valueOf(\"MySQL\");\n\n    String cfgJson = \"{source: { content: { value: 'name,date,datetime\\nfrank,2008-04-30,2015-03-30 11:00'} }, extractor : { csv : { \\\"predefinedFormat\\\": \\\"Default\\\",'columns':['name:string','date:date','datetime:datetime']} }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<Date>field(\"date\")).isEqualTo(\"2008-04-30\");\n\n    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n\n    assertThat(df.format(doc.<Date>field(\"datetime\"))).isEqualTo(\"2015-03-30 11:00\");\n\n  }\n\n  @Test\n  public void testMissingColumns() {\n    String cfgJson = \"{source: { content: { value: 'name,value,,\\nfrank,myvalue,,'} }, extractor : { csv : { \\\"ignoreMissingColumns\\\": true } }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<String>field(\"name\")).isEqualTo(\"frank\");\n    assertThat(doc.<String>field(\"value\")).isEqualTo(\"myvalue\");\n  }\n\n  @Test\n  public void testExcelFormat() {\n    String cfgJson = \"{source: { content: { value: 'name,value,,\\nfrank,myvalue,,'} }, extractor : { csv : { \\\"predefinedFormat\\\": \\\"Excel\\\" } }, loader : { test: {} } }\";\n    process(cfgJson);\n    List<ODocument> res = getResult();\n    assertThat(res).hasSize(1);\n    ODocument doc = res.get(0);\n\n    assertThat(doc.<String>field(\"name\")).isEqualTo(\"frank\");\n    assertThat(doc.<String>field(\"value\")).isEqualTo(\"myvalue\");\n  }\n\n}\n","repository":"https://github.com/orientechnologies/orientdb.git","language":"java","tokens":[{"text":"com","line":1,"char":8,"type":"package"},{"text":"orientechnologies","line":1,"char":12,"type":"package"},{"text":"orient","line":1,"char":30,"type":"package"},{"text":"etl","line":1,"char":37,"type":"package"},{"text":"extractor","line":1,"char":41,"type":"package"},{"text":"com","line":3,"char":60,"type":"import"},{"text":"orientechnologies","line":3,"char":64,"type":"import"},{"text":"orient","line":3,"char":82,"type":"import"},{"text":"core","line":3,"char":89,"type":"import"},{"text":"id","line":3,"char":94,"type":"import"},{"text":"ORecordId","line":3,"char":97,"type":"import"},{"text":"com","line":4,"char":115,"type":"import"},{"text":"orientechnologies","line":4,"char":119,"type":"import"},{"text":"orient","line":4,"char":137,"type":"import"},{"text":"core","line":4,"char":144,"type":"import"},{"text":"record","line":4,"char":149,"type":"import"},{"text":"impl","line":4,"char":156,"type":"import"},{"text":"ODocument","line":4,"char":161,"type":"import"},{"text":"com","line":5,"char":179,"type":"import"},{"text":"orientechnologies","line":5,"char":183,"type":"import"},{"text":"orient","line":5,"char":201,"type":"import"},{"text":"etl","line":5,"char":208,"type":"import"},{"text":"OETLBaseTest","line":5,"char":212,"type":"import"},{"text":"com","line":6,"char":233,"type":"import"},{"text":"orientechnologies","line":6,"char":237,"type":"import"},{"text":"orient","line":6,"char":255,"type":"import"},{"text":"etl","line":6,"char":262,"type":"import"},{"text":"transformer","line":6,"char":266,"type":"import"},{"text":"OCSVTransformer","line":6,"char":278,"type":"import"},{"text":"org","line":7,"char":302,"type":"import"},{"text":"junit","line":7,"char":306,"type":"import"},{"text":"Test","line":7,"char":312,"type":"import"},{"text":"java","line":9,"char":326,"type":"import"},{"text":"text","line":9,"char":331,"type":"import"},{"text":"DateFormat","line":9,"char":336,"type":"import"},{"text":"java","line":10,"char":355,"type":"import"},{"text":"text","line":10,"char":360,"type":"import"},{"text":"SimpleDateFormat","line":10,"char":365,"type":"import"},{"text":"java","line":11,"char":390,"type":"import"},{"text":"util","line":11,"char":395,"type":"import"},{"text":"Date","line":11,"char":400,"type":"import"},{"text":"java","line":12,"char":413,"type":"import"},{"text":"util","line":12,"char":418,"type":"import"},{"text":"List","line":12,"char":423,"type":"import"},{"text":"org","line":14,"char":444,"type":"import"},{"text":"assertj","line":14,"char":448,"type":"import"},{"text":"core","line":14,"char":456,"type":"import"},{"text":"api","line":14,"char":461,"type":"import"},{"text":"Assertions","line":14,"char":465,"type":"import"},{"text":"assertThat","line":14,"char":476,"type":"import"},{"text":"org","line":15,"char":502,"type":"import"},{"text":"junit","line":15,"char":506,"type":"import"},{"text":"Assert","line":15,"char":512,"type":"import"},{"text":"OCSVExtractorTest","line":20,"char":576,"type":"class"},{"text":"Test","line":22,"char":621,"type":"annotation"},{"text":"Test","line":33,"char":1000,"type":"annotation"},{"text":"Test","line":40,"char":1214,"type":"annotation"},{"text":"Test","line":59,"char":1829,"type":"annotation"},{"text":"Test","line":70,"char":2242,"type":"annotation"},{"text":"Test","line":82,"char":2704,"type":"annotation"},{"text":"Test","line":94,"char":3212,"type":"annotation"},{"text":"Test","line":105,"char":3638,"type":"annotation"},{"text":"Test","line":116,"char":4091,"type":"annotation"},{"text":"Test","line":126,"char":4436,"type":"annotation"},{"text":"Test","line":136,"char":4821,"type":"annotation"},{"text":"Test","line":146,"char":5208,"type":"annotation"},{"text":"Test","line":158,"char":5672,"type":"annotation"},{"text":"Test","line":170,"char":6153,"type":"annotation"},{"text":"Test","line":182,"char":6660,"type":"annotation"},{"text":"Test","line":192,"char":7016,"type":"annotation"},{"text":"Test","line":202,"char":7389,"type":"annotation"},{"text":"Test","line":212,"char":7751,"type":"annotation"},{"text":"Test","line":222,"char":8130,"type":"annotation"},{"text":"Test","line":230,"char":8417,"type":"annotation"},{"text":"Test","line":239,"char":8749,"type":"annotation"},{"text":"Test","line":250,"char":9173,"type":"annotation"},{"text":"Test","line":262,"char":9641,"type":"annotation"},{"text":"Test","line":274,"char":10128,"type":"annotation"},{"text":"Test","line":287,"char":10667,"type":"annotation"},{"text":"Test","line":299,"char":11143,"type":"annotation"},{"text":"Test","line":312,"char":11639,"type":"annotation"},{"text":"Test","line":324,"char":12145,"type":"annotation"},{"text":"Test","line":337,"char":12703,"type":"annotation"},{"text":"Test","line":349,"char":13227,"type":"annotation"},{"text":"Test","line":361,"char":13749,"type":"annotation"},{"text":"Test","line":372,"char":14100,"type":"annotation"},{"text":"Test","line":382,"char":14451,"type":"annotation"},{"text":"Test","line":393,"char":14826,"type":"annotation"},{"text":"Test","line":405,"char":15173,"type":"annotation"},{"text":"Test","line":421,"char":15789,"type":"annotation"},{"text":"Test","line":440,"char":16495,"type":"annotation"},{"text":"Test","line":452,"char":16969,"type":"annotation"},{"text":"testOneObject","line":23,"char":640,"type":"method"},{"text":"testEmpty","line":34,"char":1019,"type":"method"},{"text":"testSmallSet","line":41,"char":1233,"type":"method"},{"text":"testSkipFromTwoToFour","line":60,"char":1848,"type":"method"},{"text":"testDateTypeAutodetection","line":71,"char":2261,"type":"method"},{"text":"testDateTypeAutodetectionWithCustomDateFormat","line":83,"char":2723,"type":"method"},{"text":"testStringInDblQuotes","line":95,"char":3231,"type":"method"},{"text":"testStringStartedFromDigit","line":106,"char":3657,"type":"method"},{"text":"testFloat","line":117,"char":4110,"type":"method"},{"text":"testFloatWithinQuotesAndDotAsDecimalSeparator","line":127,"char":4455,"type":"method"},{"text":"testFloatWithinQuotesAndCommaAsDecimalSeparator","line":137,"char":4840,"type":"method"},{"text":"testDouble","line":147,"char":5227,"type":"method"},{"text":"testDoubleWithingQuotes","line":159,"char":5691,"type":"method"},{"text":"testDoubleWithingQuotesAndCommaAsDecimalSeparator","line":171,"char":6172,"type":"method"},{"text":"testInteger","line":183,"char":6679,"type":"method"},{"text":"testIntegerWithingQuotes","line":193,"char":7035,"type":"method"},{"text":"testLong","line":203,"char":7408,"type":"method"},{"text":"testLongWithingQuotes","line":213,"char":7770,"type":"method"},{"text":"testGetCellContentSingleQuoted","line":223,"char":8149,"type":"method"},{"text":"testIsFiniteFloat","line":231,"char":8436,"type":"method"},{"text":"testNullCell","line":240,"char":8768,"type":"method"},{"text":"testNullValueInCell","line":251,"char":9192,"type":"method"},{"text":"testCustomNullValueInCell","line":263,"char":9660,"type":"method"},{"text":"testNullValueInCellEmptyString","line":275,"char":10147,"type":"method"},{"text":"testQuotedEmptyString","line":288,"char":10686,"type":"method"},{"text":"testCRLFDelimiter","line":300,"char":11162,"type":"method"},{"text":"testEndingLineBreak","line":313,"char":11658,"type":"method"},{"text":"testEndingSpaceInFieldName","line":325,"char":12164,"type":"method"},{"text":"testCRLFIWithinQuotes","line":338,"char":12722,"type":"method"},{"text":"testEscapingDoubleQuotes","line":350,"char":13246,"type":"method"},{"text":"testNegativeInteger","line":362,"char":13768,"type":"method"},{"text":"testNegativeFloat","line":373,"char":14119,"type":"method"},{"text":"testLinkType","line":383,"char":14470,"type":"method"},{"text":"testBooleanType","line":394,"char":14845,"type":"method"},{"text":"testColumsDefinitions","line":406,"char":15192,"type":"method"},{"text":"testCsvParsingFormat","line":422,"char":15808,"type":"method"},{"text":"testMissingColumns","line":441,"char":16514,"type":"method"},{"text":"testExcelFormat","line":453,"char":16988,"type":"method"},{"text":"doc","line":27,"char":838,"type":"variable"},{"text":"cfgJson","line":35,"char":1044,"type":"variable"},{"text":"content","line":42,"char":1261,"type":"variable"},{"text":"i","line":43,"char":1303,"type":"variable"},{"text":"i","line":49,"char":1576,"type":"variable"},{"text":"doc","line":50,"char":1602,"type":"variable"},{"text":"content","line":61,"char":1885,"type":"variable"},{"text":"i","line":62,"char":1927,"type":"variable"},{"text":"cfgJson","line":72,"char":2302,"type":"variable"},{"text":"res","line":74,"char":2463,"type":"variable"},{"text":"doc","line":75,"char":2496,"type":"variable"},{"text":"birthday","line":76,"char":2523,"type":"variable"},{"text":"cfgJson","line":84,"char":2784,"type":"variable"},{"text":"res","line":86,"char":2971,"type":"variable"},{"text":"doc","line":87,"char":3004,"type":"variable"},{"text":"birthday","line":88,"char":3031,"type":"variable"},{"text":"cfgJson","line":96,"char":3285,"type":"variable"},{"text":"res","line":98,"char":3459,"type":"variable"},{"text":"doc","line":100,"char":3524,"type":"variable"},{"text":"text","line":101,"char":3553,"type":"variable"},{"text":"cfgJson","line":107,"char":3716,"type":"variable"},{"text":"res","line":109,"char":3898,"type":"variable"},{"text":"doc","line":111,"char":3963,"type":"variable"},{"text":"address","line":112,"char":3992,"type":"variable"},{"text":"cfgJson","line":118,"char":4135,"type":"variable"},{"text":"res","line":120,"char":4293,"type":"variable"},{"text":"doc","line":122,"char":4358,"type":"variable"},{"text":"cfgJson","line":128,"char":4516,"type":"variable"},{"text":"res","line":130,"char":4678,"type":"variable"},{"text":"doc","line":132,"char":4743,"type":"variable"},{"text":"cfgJson","line":138,"char":4903,"type":"variable"},{"text":"res","line":140,"char":5065,"type":"variable"},{"text":"doc","line":142,"char":5130,"type":"variable"},{"text":"minDouble","line":148,"char":5253,"type":"variable"},{"text":"cfgJson","line":150,"char":5321,"type":"variable"},{"text":"res","line":152,"char":5516,"type":"variable"},{"text":"doc","line":154,"char":5581,"type":"variable"},{"text":"minDouble","line":160,"char":5730,"type":"variable"},{"text":"cfgJson","line":162,"char":5798,"type":"variable"},{"text":"res","line":164,"char":5997,"type":"variable"},{"text":"doc","line":166,"char":6062,"type":"variable"},{"text":"minDouble","line":172,"char":6237,"type":"variable"},{"text":"cfgJson","line":174,"char":6305,"type":"variable"},{"text":"res","line":176,"char":6504,"type":"variable"},{"text":"doc","line":178,"char":6569,"type":"variable"},{"text":"cfgJson","line":184,"char":6706,"type":"variable"},{"text":"res","line":186,"char":6858,"type":"variable"},{"text":"doc","line":188,"char":6923,"type":"variable"},{"text":"cfgJson","line":194,"char":7075,"type":"variable"},{"text":"res","line":196,"char":7231,"type":"variable"},{"text":"doc","line":198,"char":7296,"type":"variable"},{"text":"cfgJson","line":204,"char":7432,"type":"variable"},{"text":"res","line":206,"char":7591,"type":"variable"},{"text":"doc","line":208,"char":7656,"type":"variable"},{"text":"cfgJson","line":214,"char":7807,"type":"variable"},{"text":"res","line":216,"char":7970,"type":"variable"},{"text":"doc","line":218,"char":8035,"type":"variable"},{"text":"singleQuotedString","line":224,"char":8195,"type":"variable"},{"text":"unQuotedString","line":225,"char":8238,"type":"variable"},{"text":"ocsvTransformer","line":226,"char":8282,"type":"variable"},{"text":"ocsvExtractor","line":232,"char":8476,"type":"variable"},{"text":"cfgJson","line":241,"char":8796,"type":"variable"},{"text":"res","line":243,"char":8961,"type":"variable"},{"text":"doc","line":244,"char":8994,"type":"variable"},{"text":"cfgJson","line":252,"char":9227,"type":"variable"},{"text":"res","line":254,"char":9397,"type":"variable"},{"text":"doc","line":256,"char":9462,"type":"variable"},{"text":"cfgJson","line":264,"char":9701,"type":"variable"},{"text":"res","line":266,"char":9884,"type":"variable"},{"text":"doc","line":268,"char":9949,"type":"variable"},{"text":"cfgJson","line":276,"char":10193,"type":"variable"},{"text":"res","line":278,"char":10361,"type":"variable"},{"text":"doc","line":280,"char":10426,"type":"variable"},{"text":"cfgJson","line":289,"char":10723,"type":"variable"},{"text":"res","line":291,"char":10891,"type":"variable"},{"text":"doc","line":293,"char":10956,"type":"variable"},{"text":"cfgJson","line":301,"char":11195,"type":"variable"},{"text":"res","line":303,"char":11367,"type":"variable"},{"text":"doc","line":305,"char":11432,"type":"variable"},{"text":"cfgJson","line":314,"char":11693,"type":"variable"},{"text":"res","line":316,"char":11869,"type":"variable"},{"text":"doc","line":318,"char":11934,"type":"variable"},{"text":"cfgJson","line":326,"char":12206,"type":"variable"},{"text":"res","line":328,"char":12385,"type":"variable"},{"text":"doc","line":330,"char":12450,"type":"variable"},{"text":"cfgJson","line":339,"char":12759,"type":"variable"},{"text":"res","line":341,"char":12946,"type":"variable"},{"text":"doc","line":343,"char":13011,"type":"variable"},{"text":"cfgJson","line":351,"char":13286,"type":"variable"},{"text":"res","line":353,"char":13470,"type":"variable"},{"text":"doc","line":355,"char":13535,"type":"variable"},{"text":"cfgJson","line":363,"char":13803,"type":"variable"},{"text":"res","line":365,"char":13952,"type":"variable"},{"text":"doc","line":367,"char":14017,"type":"variable"},{"text":"cfgJson","line":374,"char":14152,"type":"variable"},{"text":"res","line":376,"char":14303,"type":"variable"},{"text":"doc","line":378,"char":14368,"type":"variable"},{"text":"cfgJson","line":384,"char":14498,"type":"variable"},{"text":"res","line":386,"char":14668,"type":"variable"},{"text":"doc","line":388,"char":14733,"type":"variable"},{"text":"cfgJson","line":395,"char":14876,"type":"variable"},{"text":"res","line":397,"char":15027,"type":"variable"},{"text":"doc","line":399,"char":15092,"type":"variable"},{"text":"cfgJson","line":407,"char":15229,"type":"variable"},{"text":"res","line":409,"char":15481,"type":"variable"},{"text":"doc","line":411,"char":15546,"type":"variable"},{"text":"df","line":415,"char":15646,"type":"variable"},{"text":"cfgJson","line":426,"char":15901,"type":"variable"},{"text":"res","line":428,"char":16187,"type":"variable"},{"text":"doc","line":430,"char":16252,"type":"variable"},{"text":"df","line":434,"char":16352,"type":"variable"},{"text":"cfgJson","line":442,"char":16548,"type":"variable"},{"text":"res","line":444,"char":16750,"type":"variable"},{"text":"doc","line":446,"char":16815,"type":"variable"},{"text":"cfgJson","line":454,"char":17019,"type":"variable"},{"text":"res","line":456,"char":17222,"type":"variable"},{"text":"doc","line":458,"char":17287,"type":"variable"},{"text":"OETLBaseTest","line":20,"char":602,"type":"identifier"},{"text":"process","line":24,"char":662,"type":"identifier"},{"text":"assertEquals","line":26,"char":787,"type":"identifier"},{"text":"getResult","line":26,"char":803,"type":"identifier"},{"text":"size","line":26,"char":815,"type":"identifier"},{"text":"ODocument","line":27,"char":828,"type":"identifier"},{"text":"getResult","line":27,"char":844,"type":"identifier"},{"text":"get","line":27,"char":856,"type":"identifier"},{"text":"assertEquals","line":28,"char":868,"type":"identifier"},{"text":"doc","line":28,"char":884,"type":"identifier"},{"text":"fields","line":28,"char":888,"type":"identifier"},{"text":"assertEquals","line":29,"char":903,"type":"identifier"},{"text":"doc","line":29,"char":923,"type":"identifier"},{"text":"field","line":29,"char":927,"type":"identifier"},{"text":"assertEquals","line":30,"char":947,"type":"identifier"},{"text":"doc","line":30,"char":969,"type":"identifier"},{"text":"field","line":30,"char":973,"type":"identifier"},{"text":"String","line":35,"char":1037,"type":"identifier"},{"text":"process","line":36,"char":1147,"type":"identifier"},{"text":"cfgJson","line":36,"char":1155,"type":"identifier"},{"text":"assertEquals","line":37,"char":1169,"type":"identifier"},{"text":"getResult","line":37,"char":1185,"type":"identifier"},{"text":"size","line":37,"char":1197,"type":"identifier"},{"text":"String","line":42,"char":1254,"type":"identifier"},{"text":"i","line":43,"char":1310,"type":"identifier"},{"text":"names","line":43,"char":1314,"type":"identifier"},{"text":"length","line":43,"char":1320,"type":"identifier"},{"text":"i","line":43,"char":1330,"type":"identifier"},{"text":"content","line":44,"char":1339,"type":"identifier"},{"text":"names","line":44,"char":1357,"type":"identifier"},{"text":"i","line":44,"char":1363,"type":"identifier"},{"text":"surnames","line":44,"char":1374,"type":"identifier"},{"text":"i","line":44,"char":1383,"type":"identifier"},{"text":"i","line":44,"char":1394,"type":"identifier"},{"text":"process","line":45,"char":1401,"type":"identifier"},{"text":"content","line":45,"char":1444,"type":"identifier"},{"text":"assertEquals","line":47,"char":1519,"type":"identifier"},{"text":"getResult","line":47,"char":1532,"type":"identifier"},{"text":"size","line":47,"char":1544,"type":"identifier"},{"text":"names","line":47,"char":1552,"type":"identifier"},{"text":"length","line":47,"char":1558,"type":"identifier"},{"text":"ODocument","line":50,"char":1592,"type":"identifier"},{"text":"getResult","line":50,"char":1608,"type":"identifier"},{"text":"assertEquals","line":51,"char":1629,"type":"identifier"},{"text":"doc","line":51,"char":1645,"type":"identifier"},{"text":"fields","line":51,"char":1649,"type":"identifier"},{"text":"assertEquals","line":52,"char":1666,"type":"identifier"},{"text":"names","line":52,"char":1679,"type":"identifier"},{"text":"i","line":52,"char":1685,"type":"identifier"},{"text":"doc","line":52,"char":1689,"type":"identifier"},{"text":"field","line":52,"char":1693,"type":"identifier"},{"text":"assertEquals","line":53,"char":1715,"type":"identifier"},{"text":"surnames","line":53,"char":1728,"type":"identifier"},{"text":"i","line":53,"char":1737,"type":"identifier"},{"text":"doc","line":53,"char":1741,"type":"identifier"},{"text":"field","line":53,"char":1745,"type":"identifier"},{"text":"assertEquals","line":54,"char":1770,"type":"identifier"},{"text":"i","line":54,"char":1783,"type":"identifier"},{"text":"doc","line":54,"char":1786,"type":"identifier"},{"text":"field","line":54,"char":1790,"type":"identifier"},{"text":"i","line":55,"char":1810,"type":"identifier"},{"text":"String","line":61,"char":1878,"type":"identifier"},{"text":"i","line":62,"char":1934,"type":"identifier"},{"text":"names","line":62,"char":1938,"type":"identifier"},{"text":"length","line":62,"char":1944,"type":"identifier"},{"text":"i","line":62,"char":1954,"type":"identifier"},{"text":"content","line":63,"char":1963,"type":"identifier"},{"text":"names","line":63,"char":1981,"type":"identifier"},{"text":"i","line":63,"char":1987,"type":"identifier"},{"text":"surnames","line":63,"char":1998,"type":"identifier"},{"text":"i","line":63,"char":2007,"type":"identifier"},{"text":"i","line":63,"char":2018,"type":"identifier"},{"text":"process","line":64,"char":2025,"type":"identifier"},{"text":"content","line":64,"char":2068,"type":"identifier"},{"text":"assertThat","line":67,"char":2183,"type":"identifier"},{"text":"getResult","line":67,"char":2194,"type":"identifier"},{"text":"hasSize","line":67,"char":2207,"type":"identifier"},{"text":"names","line":67,"char":2215,"type":"identifier"},{"text":"length","line":67,"char":2221,"type":"identifier"},{"text":"String","line":72,"char":2295,"type":"identifier"},{"text":"process","line":73,"char":2425,"type":"identifier"},{"text":"cfgJson","line":73,"char":2433,"type":"identifier"},{"text":"List","line":74,"char":2447,"type":"identifier"},{"text":"ODocument","line":74,"char":2452,"type":"identifier"},{"text":"getResult","line":74,"char":2469,"type":"identifier"},{"text":"ODocument","line":75,"char":2486,"type":"identifier"},{"text":"res","line":75,"char":2502,"type":"identifier"},{"text":"get","line":75,"char":2506,"type":"identifier"},{"text":"Date","line":76,"char":2518,"type":"identifier"},{"text":"doc","line":76,"char":2534,"type":"identifier"},{"text":"field","line":76,"char":2538,"type":"identifier"},{"text":"assertEquals","line":77,"char":2561,"type":"identifier"},{"text":"birthday","line":77,"char":2580,"type":"identifier"},{"text":"getYear","line":77,"char":2589,"type":"identifier"},{"text":"assertEquals","line":78,"char":2612,"type":"identifier"},{"text":"birthday","line":78,"char":2628,"type":"identifier"},{"text":"getMonth","line":78,"char":2637,"type":"identifier"},{"text":"assertEquals","line":79,"char":2658,"type":"identifier"},{"text":"birthday","line":79,"char":2675,"type":"identifier"},{"text":"getDate","line":79,"char":2684,"type":"identifier"},{"text":"String","line":84,"char":2777,"type":"identifier"},{"text":"process","line":85,"char":2933,"type":"identifier"},{"text":"cfgJson","line":85,"char":2941,"type":"identifier"},{"text":"List","line":86,"char":2955,"type":"identifier"},{"text":"ODocument","line":86,"char":2960,"type":"identifier"},{"text":"getResult","line":86,"char":2977,"type":"identifier"},{"text":"ODocument","line":87,"char":2994,"type":"identifier"},{"text":"res","line":87,"char":3010,"type":"identifier"},{"text":"get","line":87,"char":3014,"type":"identifier"},{"text":"Date","line":88,"char":3026,"type":"identifier"},{"text":"doc","line":88,"char":3042,"type":"identifier"},{"text":"field","line":88,"char":3046,"type":"identifier"},{"text":"assertEquals","line":89,"char":3069,"type":"identifier"},{"text":"birthday","line":89,"char":3088,"type":"identifier"},{"text":"getYear","line":89,"char":3097,"type":"identifier"},{"text":"assertEquals","line":90,"char":3120,"type":"identifier"},{"text":"birthday","line":90,"char":3136,"type":"identifier"},{"text":"getMonth","line":90,"char":3145,"type":"identifier"},{"text":"assertEquals","line":91,"char":3166,"type":"identifier"},{"text":"birthday","line":91,"char":3183,"type":"identifier"},{"text":"getDate","line":91,"char":3192,"type":"identifier"},{"text":"Exception","line":95,"char":3262,"type":"identifier"},{"text":"String","line":96,"char":3278,"type":"identifier"},{"text":"process","line":97,"char":3421,"type":"identifier"},{"text":"cfgJson","line":97,"char":3429,"type":"identifier"},{"text":"List","line":98,"char":3443,"type":"identifier"},{"text":"ODocument","line":98,"char":3448,"type":"identifier"},{"text":"getResult","line":98,"char":3465,"type":"identifier"},{"text":"assertFalse","line":99,"char":3482,"type":"identifier"},{"text":"res","line":99,"char":3494,"type":"identifier"},{"text":"isEmpty","line":99,"char":3498,"type":"identifier"},{"text":"ODocument","line":100,"char":3514,"type":"identifier"},{"text":"res","line":100,"char":3530,"type":"identifier"},{"text":"get","line":100,"char":3534,"type":"identifier"},{"text":"String","line":101,"char":3546,"type":"identifier"},{"text":"doc","line":101,"char":3560,"type":"identifier"},{"text":"field","line":101,"char":3564,"type":"identifier"},{"text":"assertEquals","line":102,"char":3583,"type":"identifier"},{"text":"text","line":102,"char":3623,"type":"identifier"},{"text":"Exception","line":106,"char":3693,"type":"identifier"},{"text":"String","line":107,"char":3709,"type":"identifier"},{"text":"process","line":108,"char":3860,"type":"identifier"},{"text":"cfgJson","line":108,"char":3868,"type":"identifier"},{"text":"List","line":109,"char":3882,"type":"identifier"},{"text":"ODocument","line":109,"char":3887,"type":"identifier"},{"text":"getResult","line":109,"char":3904,"type":"identifier"},{"text":"assertFalse","line":110,"char":3921,"type":"identifier"},{"text":"res","line":110,"char":3933,"type":"identifier"},{"text":"isEmpty","line":110,"char":3937,"type":"identifier"},{"text":"ODocument","line":111,"char":3953,"type":"identifier"},{"text":"res","line":111,"char":3969,"type":"identifier"},{"text":"get","line":111,"char":3973,"type":"identifier"},{"text":"String","line":112,"char":3985,"type":"identifier"},{"text":"doc","line":112,"char":4002,"type":"identifier"},{"text":"field","line":112,"char":4006,"type":"identifier"},{"text":"assertEquals","line":113,"char":4028,"type":"identifier"},{"text":"address","line":113,"char":4073,"type":"identifier"},{"text":"String","line":118,"char":4128,"type":"identifier"},{"text":"process","line":119,"char":4255,"type":"identifier"},{"text":"cfgJson","line":119,"char":4263,"type":"identifier"},{"text":"List","line":120,"char":4277,"type":"identifier"},{"text":"ODocument","line":120,"char":4282,"type":"identifier"},{"text":"getResult","line":120,"char":4299,"type":"identifier"},{"text":"assertFalse","line":121,"char":4316,"type":"identifier"},{"text":"res","line":121,"char":4328,"type":"identifier"},{"text":"isEmpty","line":121,"char":4332,"type":"identifier"},{"text":"ODocument","line":122,"char":4348,"type":"identifier"},{"text":"res","line":122,"char":4364,"type":"identifier"},{"text":"get","line":122,"char":4368,"type":"identifier"},{"text":"assertEquals","line":123,"char":4380,"type":"identifier"},{"text":"doc","line":123,"char":4401,"type":"identifier"},{"text":"field","line":123,"char":4405,"type":"identifier"},{"text":"String","line":128,"char":4509,"type":"identifier"},{"text":"process","line":129,"char":4640,"type":"identifier"},{"text":"cfgJson","line":129,"char":4648,"type":"identifier"},{"text":"List","line":130,"char":4662,"type":"identifier"},{"text":"ODocument","line":130,"char":4667,"type":"identifier"},{"text":"getResult","line":130,"char":4684,"type":"identifier"},{"text":"assertFalse","line":131,"char":4701,"type":"identifier"},{"text":"res","line":131,"char":4713,"type":"identifier"},{"text":"isEmpty","line":131,"char":4717,"type":"identifier"},{"text":"ODocument","line":132,"char":4733,"type":"identifier"},{"text":"res","line":132,"char":4749,"type":"identifier"},{"text":"get","line":132,"char":4753,"type":"identifier"},{"text":"assertEquals","line":133,"char":4765,"type":"identifier"},{"text":"doc","line":133,"char":4786,"type":"identifier"},{"text":"field","line":133,"char":4790,"type":"identifier"},{"text":"String","line":138,"char":4896,"type":"identifier"},{"text":"process","line":139,"char":5027,"type":"identifier"},{"text":"cfgJson","line":139,"char":5035,"type":"identifier"},{"text":"List","line":140,"char":5049,"type":"identifier"},{"text":"ODocument","line":140,"char":5054,"type":"identifier"},{"text":"getResult","line":140,"char":5071,"type":"identifier"},{"text":"assertFalse","line":141,"char":5088,"type":"identifier"},{"text":"res","line":141,"char":5100,"type":"identifier"},{"text":"isEmpty","line":141,"char":5104,"type":"identifier"},{"text":"ODocument","line":142,"char":5120,"type":"identifier"},{"text":"res","line":142,"char":5136,"type":"identifier"},{"text":"get","line":142,"char":5140,"type":"identifier"},{"text":"assertEquals","line":143,"char":5152,"type":"identifier"},{"text":"doc","line":143,"char":5173,"type":"identifier"},{"text":"field","line":143,"char":5177,"type":"identifier"},{"text":"Double","line":148,"char":5246,"type":"identifier"},{"text":"String","line":150,"char":5314,"type":"identifier"},{"text":"process","line":151,"char":5478,"type":"identifier"},{"text":"cfgJson","line":151,"char":5486,"type":"identifier"},{"text":"List","line":152,"char":5500,"type":"identifier"},{"text":"ODocument","line":152,"char":5505,"type":"identifier"},{"text":"getResult","line":152,"char":5522,"type":"identifier"},{"text":"assertFalse","line":153,"char":5539,"type":"identifier"},{"text":"res","line":153,"char":5551,"type":"identifier"},{"text":"isEmpty","line":153,"char":5555,"type":"identifier"},{"text":"ODocument","line":154,"char":5571,"type":"identifier"},{"text":"res","line":154,"char":5587,"type":"identifier"},{"text":"get","line":154,"char":5591,"type":"identifier"},{"text":"assertEquals","line":155,"char":5603,"type":"identifier"},{"text":"minDouble","line":155,"char":5616,"type":"identifier"},{"text":"Double","line":155,"char":5628,"type":"identifier"},{"text":"doc","line":155,"char":5636,"type":"identifier"},{"text":"field","line":155,"char":5640,"type":"identifier"},{"text":"Double","line":160,"char":5723,"type":"identifier"},{"text":"String","line":162,"char":5791,"type":"identifier"},{"text":"process","line":163,"char":5959,"type":"identifier"},{"text":"cfgJson","line":163,"char":5967,"type":"identifier"},{"text":"List","line":164,"char":5981,"type":"identifier"},{"text":"ODocument","line":164,"char":5986,"type":"identifier"},{"text":"getResult","line":164,"char":6003,"type":"identifier"},{"text":"assertFalse","line":165,"char":6020,"type":"identifier"},{"text":"res","line":165,"char":6032,"type":"identifier"},{"text":"isEmpty","line":165,"char":6036,"type":"identifier"},{"text":"ODocument","line":166,"char":6052,"type":"identifier"},{"text":"res","line":166,"char":6068,"type":"identifier"},{"text":"get","line":166,"char":6072,"type":"identifier"},{"text":"assertEquals","line":167,"char":6084,"type":"identifier"},{"text":"minDouble","line":167,"char":6097,"type":"identifier"},{"text":"Double","line":167,"char":6109,"type":"identifier"},{"text":"doc","line":167,"char":6117,"type":"identifier"},{"text":"field","line":167,"char":6121,"type":"identifier"},{"text":"Double","line":172,"char":6230,"type":"identifier"},{"text":"String","line":174,"char":6298,"type":"identifier"},{"text":"process","line":175,"char":6466,"type":"identifier"},{"text":"cfgJson","line":175,"char":6474,"type":"identifier"},{"text":"List","line":176,"char":6488,"type":"identifier"},{"text":"ODocument","line":176,"char":6493,"type":"identifier"},{"text":"getResult","line":176,"char":6510,"type":"identifier"},{"text":"assertFalse","line":177,"char":6527,"type":"identifier"},{"text":"res","line":177,"char":6539,"type":"identifier"},{"text":"isEmpty","line":177,"char":6543,"type":"identifier"},{"text":"ODocument","line":178,"char":6559,"type":"identifier"},{"text":"res","line":178,"char":6575,"type":"identifier"},{"text":"get","line":178,"char":6579,"type":"identifier"},{"text":"assertEquals","line":179,"char":6591,"type":"identifier"},{"text":"minDouble","line":179,"char":6604,"type":"identifier"},{"text":"Double","line":179,"char":6616,"type":"identifier"},{"text":"doc","line":179,"char":6624,"type":"identifier"},{"text":"field","line":179,"char":6628,"type":"identifier"},{"text":"String","line":184,"char":6699,"type":"identifier"},{"text":"process","line":185,"char":6820,"type":"identifier"},{"text":"cfgJson","line":185,"char":6828,"type":"identifier"},{"text":"List","line":186,"char":6842,"type":"identifier"},{"text":"ODocument","line":186,"char":6847,"type":"identifier"},{"text":"getResult","line":186,"char":6864,"type":"identifier"},{"text":"assertFalse","line":187,"char":6881,"type":"identifier"},{"text":"res","line":187,"char":6893,"type":"identifier"},{"text":"isEmpty","line":187,"char":6897,"type":"identifier"},{"text":"ODocument","line":188,"char":6913,"type":"identifier"},{"text":"res","line":188,"char":6929,"type":"identifier"},{"text":"get","line":188,"char":6933,"type":"identifier"},{"text":"assertEquals","line":189,"char":6945,"type":"identifier"},{"text":"Integer","line":189,"char":6962,"type":"identifier"},{"text":"Integer","line":189,"char":6977,"type":"identifier"},{"text":"doc","line":189,"char":6986,"type":"identifier"},{"text":"field","line":189,"char":6990,"type":"identifier"},{"text":"String","line":194,"char":7068,"type":"identifier"},{"text":"process","line":195,"char":7193,"type":"identifier"},{"text":"cfgJson","line":195,"char":7201,"type":"identifier"},{"text":"List","line":196,"char":7215,"type":"identifier"},{"text":"ODocument","line":196,"char":7220,"type":"identifier"},{"text":"getResult","line":196,"char":7237,"type":"identifier"},{"text":"assertFalse","line":197,"char":7254,"type":"identifier"},{"text":"res","line":197,"char":7266,"type":"identifier"},{"text":"isEmpty","line":197,"char":7270,"type":"identifier"},{"text":"ODocument","line":198,"char":7286,"type":"identifier"},{"text":"res","line":198,"char":7302,"type":"identifier"},{"text":"get","line":198,"char":7306,"type":"identifier"},{"text":"assertEquals","line":199,"char":7318,"type":"identifier"},{"text":"Integer","line":199,"char":7335,"type":"identifier"},{"text":"Integer","line":199,"char":7350,"type":"identifier"},{"text":"doc","line":199,"char":7359,"type":"identifier"},{"text":"field","line":199,"char":7363,"type":"identifier"},{"text":"String","line":204,"char":7425,"type":"identifier"},{"text":"process","line":205,"char":7553,"type":"identifier"},{"text":"cfgJson","line":205,"char":7561,"type":"identifier"},{"text":"List","line":206,"char":7575,"type":"identifier"},{"text":"ODocument","line":206,"char":7580,"type":"identifier"},{"text":"getResult","line":206,"char":7597,"type":"identifier"},{"text":"assertFalse","line":207,"char":7614,"type":"identifier"},{"text":"res","line":207,"char":7626,"type":"identifier"},{"text":"isEmpty","line":207,"char":7630,"type":"identifier"},{"text":"ODocument","line":208,"char":7646,"type":"identifier"},{"text":"res","line":208,"char":7662,"type":"identifier"},{"text":"get","line":208,"char":7666,"type":"identifier"},{"text":"assertEquals","line":209,"char":7678,"type":"identifier"},{"text":"Long","line":209,"char":7695,"type":"identifier"},{"text":"Long","line":209,"char":7715,"type":"identifier"},{"text":"doc","line":209,"char":7721,"type":"identifier"},{"text":"field","line":209,"char":7725,"type":"identifier"},{"text":"String","line":214,"char":7800,"type":"identifier"},{"text":"process","line":215,"char":7932,"type":"identifier"},{"text":"cfgJson","line":215,"char":7940,"type":"identifier"},{"text":"List","line":216,"char":7954,"type":"identifier"},{"text":"ODocument","line":216,"char":7959,"type":"identifier"},{"text":"getResult","line":216,"char":7976,"type":"identifier"},{"text":"assertFalse","line":217,"char":7993,"type":"identifier"},{"text":"res","line":217,"char":8005,"type":"identifier"},{"text":"isEmpty","line":217,"char":8009,"type":"identifier"},{"text":"ODocument","line":218,"char":8025,"type":"identifier"},{"text":"res","line":218,"char":8041,"type":"identifier"},{"text":"get","line":218,"char":8045,"type":"identifier"},{"text":"assertEquals","line":219,"char":8057,"type":"identifier"},{"text":"Long","line":219,"char":8074,"type":"identifier"},{"text":"Long","line":219,"char":8094,"type":"identifier"},{"text":"doc","line":219,"char":8100,"type":"identifier"},{"text":"field","line":219,"char":8104,"type":"identifier"},{"text":"String","line":224,"char":8188,"type":"identifier"},{"text":"String","line":225,"char":8231,"type":"identifier"},{"text":"OCSVTransformer","line":226,"char":8266,"type":"identifier"},{"text":"OCSVTransformer","line":226,"char":8304,"type":"identifier"},{"text":"assertEquals","line":227,"char":8327,"type":"identifier"},{"text":"unQuotedString","line":227,"char":8340,"type":"identifier"},{"text":"ocsvTransformer","line":227,"char":8356,"type":"identifier"},{"text":"getCellContent","line":227,"char":8372,"type":"identifier"},{"text":"singleQuotedString","line":227,"char":8387,"type":"identifier"},{"text":"OCSVExtractor","line":232,"char":8462,"type":"identifier"},{"text":"OCSVExtractor","line":232,"char":8496,"type":"identifier"},{"text":"assertFalse","line":233,"char":8517,"type":"identifier"},{"text":"ocsvExtractor","line":233,"char":8529,"type":"identifier"},{"text":"isFinite","line":233,"char":8543,"type":"identifier"},{"text":"Float","line":233,"char":8552,"type":"identifier"},{"text":"NaN","line":233,"char":8558,"type":"identifier"},{"text":"assertFalse","line":234,"char":8569,"type":"identifier"},{"text":"ocsvExtractor","line":234,"char":8581,"type":"identifier"},{"text":"isFinite","line":234,"char":8595,"type":"identifier"},{"text":"Float","line":234,"char":8604,"type":"identifier"},{"text":"POSITIVE_INFINITY","line":234,"char":8610,"type":"identifier"},{"text":"assertFalse","line":235,"char":8635,"type":"identifier"},{"text":"ocsvExtractor","line":235,"char":8647,"type":"identifier"},{"text":"isFinite","line":235,"char":8661,"type":"identifier"},{"text":"Float","line":235,"char":8670,"type":"identifier"},{"text":"NEGATIVE_INFINITY","line":235,"char":8676,"type":"identifier"},{"text":"assertTrue","line":236,"char":8701,"type":"identifier"},{"text":"ocsvExtractor","line":236,"char":8712,"type":"identifier"},{"text":"isFinite","line":236,"char":8726,"type":"identifier"},{"text":"String","line":241,"char":8789,"type":"identifier"},{"text":"process","line":242,"char":8923,"type":"identifier"},{"text":"cfgJson","line":242,"char":8931,"type":"identifier"},{"text":"List","line":243,"char":8945,"type":"identifier"},{"text":"ODocument","line":243,"char":8950,"type":"identifier"},{"text":"getResult","line":243,"char":8967,"type":"identifier"},{"text":"ODocument","line":244,"char":8984,"type":"identifier"},{"text":"res","line":244,"char":9000,"type":"identifier"},{"text":"get","line":244,"char":9004,"type":"identifier"},{"text":"assertEquals","line":245,"char":9016,"type":"identifier"},{"text":"Integer","line":245,"char":9033,"type":"identifier"},{"text":"Integer","line":245,"char":9046,"type":"identifier"},{"text":"doc","line":245,"char":9055,"type":"identifier"},{"text":"field","line":245,"char":9059,"type":"identifier"},{"text":"assertNull","line":246,"char":9077,"type":"identifier"},{"text":"doc","line":246,"char":9088,"type":"identifier"},{"text":"field","line":246,"char":9092,"type":"identifier"},{"text":"assertEquals","line":247,"char":9114,"type":"identifier"},{"text":"String","line":247,"char":9137,"type":"identifier"},{"text":"doc","line":247,"char":9145,"type":"identifier"},{"text":"field","line":247,"char":9149,"type":"identifier"},{"text":"String","line":252,"char":9220,"type":"identifier"},{"text":"process","line":253,"char":9359,"type":"identifier"},{"text":"cfgJson","line":253,"char":9367,"type":"identifier"},{"text":"List","line":254,"char":9381,"type":"identifier"},{"text":"ODocument","line":254,"char":9386,"type":"identifier"},{"text":"getResult","line":254,"char":9403,"type":"identifier"},{"text":"assertFalse","line":255,"char":9420,"type":"identifier"},{"text":"res","line":255,"char":9432,"type":"identifier"},{"text":"isEmpty","line":255,"char":9436,"type":"identifier"},{"text":"ODocument","line":256,"char":9452,"type":"identifier"},{"text":"res","line":256,"char":9468,"type":"identifier"},{"text":"get","line":256,"char":9472,"type":"identifier"},{"text":"assertEquals","line":257,"char":9484,"type":"identifier"},{"text":"Integer","line":257,"char":9501,"type":"identifier"},{"text":"Integer","line":257,"char":9514,"type":"identifier"},{"text":"doc","line":257,"char":9523,"type":"identifier"},{"text":"field","line":257,"char":9527,"type":"identifier"},{"text":"assertNull","line":258,"char":9545,"type":"identifier"},{"text":"doc","line":258,"char":9556,"type":"identifier"},{"text":"field","line":258,"char":9560,"type":"identifier"},{"text":"assertEquals","line":259,"char":9582,"type":"identifier"},{"text":"String","line":259,"char":9605,"type":"identifier"},{"text":"doc","line":259,"char":9613,"type":"identifier"},{"text":"field","line":259,"char":9617,"type":"identifier"},{"text":"String","line":264,"char":9694,"type":"identifier"},{"text":"process","line":265,"char":9846,"type":"identifier"},{"text":"cfgJson","line":265,"char":9854,"type":"identifier"},{"text":"List","line":266,"char":9868,"type":"identifier"},{"text":"ODocument","line":266,"char":9873,"type":"identifier"},{"text":"getResult","line":266,"char":9890,"type":"identifier"},{"text":"assertFalse","line":267,"char":9907,"type":"identifier"},{"text":"res","line":267,"char":9919,"type":"identifier"},{"text":"isEmpty","line":267,"char":9923,"type":"identifier"},{"text":"ODocument","line":268,"char":9939,"type":"identifier"},{"text":"res","line":268,"char":9955,"type":"identifier"},{"text":"get","line":268,"char":9959,"type":"identifier"},{"text":"assertEquals","line":269,"char":9971,"type":"identifier"},{"text":"Integer","line":269,"char":9988,"type":"identifier"},{"text":"Integer","line":269,"char":10001,"type":"identifier"},{"text":"doc","line":269,"char":10010,"type":"identifier"},{"text":"field","line":269,"char":10014,"type":"identifier"},{"text":"assertNull","line":270,"char":10032,"type":"identifier"},{"text":"doc","line":270,"char":10043,"type":"identifier"},{"text":"field","line":270,"char":10047,"type":"identifier"},{"text":"assertEquals","line":271,"char":10069,"type":"identifier"},{"text":"String","line":271,"char":10092,"type":"identifier"},{"text":"doc","line":271,"char":10100,"type":"identifier"},{"text":"field","line":271,"char":10104,"type":"identifier"},{"text":"String","line":276,"char":10186,"type":"identifier"},{"text":"process","line":277,"char":10323,"type":"identifier"},{"text":"cfgJson","line":277,"char":10331,"type":"identifier"},{"text":"List","line":278,"char":10345,"type":"identifier"},{"text":"ODocument","line":278,"char":10350,"type":"identifier"},{"text":"getResult","line":278,"char":10367,"type":"identifier"},{"text":"assertFalse","line":279,"char":10384,"type":"identifier"},{"text":"res","line":279,"char":10396,"type":"identifier"},{"text":"isEmpty","line":279,"char":10400,"type":"identifier"},{"text":"ODocument","line":280,"char":10416,"type":"identifier"},{"text":"res","line":280,"char":10432,"type":"identifier"},{"text":"get","line":280,"char":10436,"type":"identifier"},{"text":"assertEquals","line":281,"char":10448,"type":"identifier"},{"text":"Integer","line":281,"char":10465,"type":"identifier"},{"text":"Integer","line":281,"char":10478,"type":"identifier"},{"text":"doc","line":281,"char":10487,"type":"identifier"},{"text":"field","line":281,"char":10491,"type":"identifier"},{"text":"assertThat","line":282,"char":10509,"type":"identifier"},{"text":"doc","line":282,"char":10520,"type":"identifier"},{"text":"field","line":282,"char":10524,"type":"identifier"},{"text":"isNull","line":282,"char":10540,"type":"identifier"},{"text":"assertEquals","line":284,"char":10608,"type":"identifier"},{"text":"String","line":284,"char":10631,"type":"identifier"},{"text":"doc","line":284,"char":10639,"type":"identifier"},{"text":"field","line":284,"char":10643,"type":"identifier"},{"text":"String","line":289,"char":10716,"type":"identifier"},{"text":"process","line":290,"char":10853,"type":"identifier"},{"text":"cfgJson","line":290,"char":10861,"type":"identifier"},{"text":"List","line":291,"char":10875,"type":"identifier"},{"text":"ODocument","line":291,"char":10880,"type":"identifier"},{"text":"getResult","line":291,"char":10897,"type":"identifier"},{"text":"assertFalse","line":292,"char":10914,"type":"identifier"},{"text":"res","line":292,"char":10926,"type":"identifier"},{"text":"isEmpty","line":292,"char":10930,"type":"identifier"},{"text":"ODocument","line":293,"char":10946,"type":"identifier"},{"text":"res","line":293,"char":10962,"type":"identifier"},{"text":"get","line":293,"char":10966,"type":"identifier"},{"text":"assertEquals","line":294,"char":10978,"type":"identifier"},{"text":"Integer","line":294,"char":10995,"type":"identifier"},{"text":"Integer","line":294,"char":11008,"type":"identifier"},{"text":"doc","line":294,"char":11017,"type":"identifier"},{"text":"field","line":294,"char":11021,"type":"identifier"},{"text":"assertThat","line":295,"char":11039,"type":"identifier"},{"text":"doc","line":295,"char":11050,"type":"identifier"},{"text":"field","line":295,"char":11054,"type":"identifier"},{"text":"isNull","line":295,"char":11070,"type":"identifier"},{"text":"assertEquals","line":296,"char":11084,"type":"identifier"},{"text":"String","line":296,"char":11107,"type":"identifier"},{"text":"doc","line":296,"char":11115,"type":"identifier"},{"text":"field","line":296,"char":11119,"type":"identifier"},{"text":"String","line":301,"char":11188,"type":"identifier"},{"text":"process","line":302,"char":11329,"type":"identifier"},{"text":"cfgJson","line":302,"char":11337,"type":"identifier"},{"text":"List","line":303,"char":11351,"type":"identifier"},{"text":"ODocument","line":303,"char":11356,"type":"identifier"},{"text":"getResult","line":303,"char":11373,"type":"identifier"},{"text":"assertFalse","line":304,"char":11390,"type":"identifier"},{"text":"res","line":304,"char":11402,"type":"identifier"},{"text":"isEmpty","line":304,"char":11406,"type":"identifier"},{"text":"ODocument","line":305,"char":11422,"type":"identifier"},{"text":"res","line":305,"char":11438,"type":"identifier"},{"text":"get","line":305,"char":11442,"type":"identifier"},{"text":"assertThat","line":307,"char":11455,"type":"identifier"},{"text":"doc","line":307,"char":11466,"type":"identifier"},{"text":"Integer","line":307,"char":11471,"type":"identifier"},{"text":"field","line":307,"char":11479,"type":"identifier"},{"text":"isEqualTo","line":307,"char":11492,"type":"identifier"},{"text":"assertThat","line":308,"char":11510,"type":"identifier"},{"text":"doc","line":308,"char":11521,"type":"identifier"},{"text":"String","line":308,"char":11526,"type":"identifier"},{"text":"field","line":308,"char":11533,"type":"identifier"},{"text":"isEqualTo","line":308,"char":11548,"type":"identifier"},{"text":"assertThat","line":309,"char":11579,"type":"identifier"},{"text":"doc","line":309,"char":11590,"type":"identifier"},{"text":"Integer","line":309,"char":11595,"type":"identifier"},{"text":"field","line":309,"char":11603,"type":"identifier"},{"text":"isEqualTo","line":309,"char":11617,"type":"identifier"},{"text":"String","line":314,"char":11686,"type":"identifier"},{"text":"process","line":315,"char":11831,"type":"identifier"},{"text":"cfgJson","line":315,"char":11839,"type":"identifier"},{"text":"List","line":316,"char":11853,"type":"identifier"},{"text":"ODocument","line":316,"char":11858,"type":"identifier"},{"text":"getResult","line":316,"char":11875,"type":"identifier"},{"text":"assertFalse","line":317,"char":11892,"type":"identifier"},{"text":"res","line":317,"char":11904,"type":"identifier"},{"text":"isEmpty","line":317,"char":11908,"type":"identifier"},{"text":"ODocument","line":318,"char":11924,"type":"identifier"},{"text":"res","line":318,"char":11940,"type":"identifier"},{"text":"get","line":318,"char":11944,"type":"identifier"},{"text":"assertEquals","line":319,"char":11956,"type":"identifier"},{"text":"Integer","line":319,"char":11973,"type":"identifier"},{"text":"Integer","line":319,"char":11986,"type":"identifier"},{"text":"doc","line":319,"char":11995,"type":"identifier"},{"text":"field","line":319,"char":11999,"type":"identifier"},{"text":"assertEquals","line":320,"char":12017,"type":"identifier"},{"text":"String","line":320,"char":12047,"type":"identifier"},{"text":"doc","line":320,"char":12055,"type":"identifier"},{"text":"field","line":320,"char":12059,"type":"identifier"},{"text":"assertEquals","line":321,"char":12079,"type":"identifier"},{"text":"Integer","line":321,"char":12096,"type":"identifier"},{"text":"Integer","line":321,"char":12109,"type":"identifier"},{"text":"doc","line":321,"char":12118,"type":"identifier"},{"text":"field","line":321,"char":12122,"type":"identifier"},{"text":"String","line":326,"char":12199,"type":"identifier"},{"text":"process","line":327,"char":12347,"type":"identifier"},{"text":"cfgJson","line":327,"char":12355,"type":"identifier"},{"text":"List","line":328,"char":12369,"type":"identifier"},{"text":"ODocument","line":328,"char":12374,"type":"identifier"},{"text":"getResult","line":328,"char":12391,"type":"identifier"},{"text":"assertFalse","line":329,"char":12408,"type":"identifier"},{"text":"res","line":329,"char":12420,"type":"identifier"},{"text":"isEmpty","line":329,"char":12424,"type":"identifier"},{"text":"ODocument","line":330,"char":12440,"type":"identifier"},{"text":"res","line":330,"char":12456,"type":"identifier"},{"text":"get","line":330,"char":12460,"type":"identifier"},{"text":"assertThat","line":331,"char":12472,"type":"identifier"},{"text":"doc","line":331,"char":12483,"type":"identifier"},{"text":"Integer","line":331,"char":12488,"type":"identifier"},{"text":"field","line":331,"char":12496,"type":"identifier"},{"text":"isEqualTo","line":331,"char":12510,"type":"identifier"},{"text":"assertThat","line":332,"char":12528,"type":"identifier"},{"text":"doc","line":332,"char":12539,"type":"identifier"},{"text":"field","line":332,"char":12543,"type":"identifier"},{"text":"isNull","line":332,"char":12558,"type":"identifier"},{"text":"assertThat","line":333,"char":12572,"type":"identifier"},{"text":"doc","line":333,"char":12583,"type":"identifier"},{"text":"String","line":333,"char":12588,"type":"identifier"},{"text":"field","line":333,"char":12595,"type":"identifier"},{"text":"isEqualTo","line":333,"char":12611,"type":"identifier"},{"text":"assertThat","line":334,"char":12642,"type":"identifier"},{"text":"doc","line":334,"char":12653,"type":"identifier"},{"text":"Integer","line":334,"char":12658,"type":"identifier"},{"text":"field","line":334,"char":12666,"type":"identifier"},{"text":"isEqualTo","line":334,"char":12681,"type":"identifier"},{"text":"String","line":339,"char":12752,"type":"identifier"},{"text":"process","line":340,"char":12908,"type":"identifier"},{"text":"cfgJson","line":340,"char":12916,"type":"identifier"},{"text":"List","line":341,"char":12930,"type":"identifier"},{"text":"ODocument","line":341,"char":12935,"type":"identifier"},{"text":"getResult","line":341,"char":12952,"type":"identifier"},{"text":"assertFalse","line":342,"char":12969,"type":"identifier"},{"text":"res","line":342,"char":12981,"type":"identifier"},{"text":"isEmpty","line":342,"char":12985,"type":"identifier"},{"text":"ODocument","line":343,"char":13001,"type":"identifier"},{"text":"res","line":343,"char":13017,"type":"identifier"},{"text":"get","line":343,"char":13021,"type":"identifier"},{"text":"assertThat","line":344,"char":13033,"type":"identifier"},{"text":"Integer","line":344,"char":13045,"type":"identifier"},{"text":"doc","line":344,"char":13054,"type":"identifier"},{"text":"field","line":344,"char":13058,"type":"identifier"},{"text":"isEqualTo","line":344,"char":13072,"type":"identifier"},{"text":"assertThat","line":345,"char":13090,"type":"identifier"},{"text":"String","line":345,"char":13102,"type":"identifier"},{"text":"doc","line":345,"char":13110,"type":"identifier"},{"text":"field","line":345,"char":13114,"type":"identifier"},{"text":"isEqualTo","line":345,"char":13130,"type":"identifier"},{"text":"assertThat","line":346,"char":13165,"type":"identifier"},{"text":"Integer","line":346,"char":13177,"type":"identifier"},{"text":"doc","line":346,"char":13186,"type":"identifier"},{"text":"field","line":346,"char":13190,"type":"identifier"},{"text":"isEqualTo","line":346,"char":13205,"type":"identifier"},{"text":"String","line":351,"char":13279,"type":"identifier"},{"text":"process","line":352,"char":13432,"type":"identifier"},{"text":"cfgJson","line":352,"char":13440,"type":"identifier"},{"text":"List","line":353,"char":13454,"type":"identifier"},{"text":"ODocument","line":353,"char":13459,"type":"identifier"},{"text":"getResult","line":353,"char":13476,"type":"identifier"},{"text":"assertFalse","line":354,"char":13493,"type":"identifier"},{"text":"res","line":354,"char":13505,"type":"identifier"},{"text":"isEmpty","line":354,"char":13509,"type":"identifier"},{"text":"ODocument","line":355,"char":13525,"type":"identifier"},{"text":"res","line":355,"char":13541,"type":"identifier"},{"text":"get","line":355,"char":13545,"type":"identifier"},{"text":"assertThat","line":356,"char":13557,"type":"identifier"},{"text":"doc","line":356,"char":13568,"type":"identifier"},{"text":"Integer","line":356,"char":13573,"type":"identifier"},{"text":"field","line":356,"char":13581,"type":"identifier"},{"text":"isEqualTo","line":356,"char":13595,"type":"identifier"},{"text":"assertThat","line":357,"char":13613,"type":"identifier"},{"text":"doc","line":357,"char":13624,"type":"identifier"},{"text":"String","line":357,"char":13629,"type":"identifier"},{"text":"field","line":357,"char":13636,"type":"identifier"},{"text":"isEqualTo","line":357,"char":13652,"type":"identifier"},{"text":"assertThat","line":358,"char":13688,"type":"identifier"},{"text":"doc","line":358,"char":13699,"type":"identifier"},{"text":"Integer","line":358,"char":13704,"type":"identifier"},{"text":"field","line":358,"char":13712,"type":"identifier"},{"text":"isEqualTo","line":358,"char":13727,"type":"identifier"},{"text":"String","line":363,"char":13796,"type":"identifier"},{"text":"process","line":364,"char":13914,"type":"identifier"},{"text":"cfgJson","line":364,"char":13922,"type":"identifier"},{"text":"List","line":365,"char":13936,"type":"identifier"},{"text":"ODocument","line":365,"char":13941,"type":"identifier"},{"text":"getResult","line":365,"char":13958,"type":"identifier"},{"text":"assertFalse","line":366,"char":13975,"type":"identifier"},{"text":"res","line":366,"char":13987,"type":"identifier"},{"text":"isEmpty","line":366,"char":13991,"type":"identifier"},{"text":"ODocument","line":367,"char":14007,"type":"identifier"},{"text":"res","line":367,"char":14023,"type":"identifier"},{"text":"get","line":367,"char":14027,"type":"identifier"},{"text":"assertThat","line":368,"char":14039,"type":"identifier"},{"text":"doc","line":368,"char":14050,"type":"identifier"},{"text":"Integer","line":368,"char":14055,"type":"identifier"},{"text":"field","line":368,"char":14063,"type":"identifier"},{"text":"isEqualTo","line":368,"char":14076,"type":"identifier"},{"text":"String","line":374,"char":14145,"type":"identifier"},{"text":"process","line":375,"char":14265,"type":"identifier"},{"text":"cfgJson","line":375,"char":14273,"type":"identifier"},{"text":"List","line":376,"char":14287,"type":"identifier"},{"text":"ODocument","line":376,"char":14292,"type":"identifier"},{"text":"getResult","line":376,"char":14309,"type":"identifier"},{"text":"assertFalse","line":377,"char":14326,"type":"identifier"},{"text":"res","line":377,"char":14338,"type":"identifier"},{"text":"isEmpty","line":377,"char":14342,"type":"identifier"},{"text":"ODocument","line":378,"char":14358,"type":"identifier"},{"text":"res","line":378,"char":14374,"type":"identifier"},{"text":"get","line":378,"char":14378,"type":"identifier"},{"text":"assertThat","line":379,"char":14390,"type":"identifier"},{"text":"doc","line":379,"char":14401,"type":"identifier"},{"text":"Float","line":379,"char":14406,"type":"identifier"},{"text":"field","line":379,"char":14412,"type":"identifier"},{"text":"isEqualTo","line":379,"char":14425,"type":"identifier"},{"text":"String","line":384,"char":14491,"type":"identifier"},{"text":"process","line":385,"char":14630,"type":"identifier"},{"text":"cfgJson","line":385,"char":14638,"type":"identifier"},{"text":"List","line":386,"char":14652,"type":"identifier"},{"text":"ODocument","line":386,"char":14657,"type":"identifier"},{"text":"getResult","line":386,"char":14674,"type":"identifier"},{"text":"assertThat","line":387,"char":14691,"type":"identifier"},{"text":"res","line":387,"char":14702,"type":"identifier"},{"text":"hasSize","line":387,"char":14707,"type":"identifier"},{"text":"ODocument","line":388,"char":14723,"type":"identifier"},{"text":"res","line":388,"char":14739,"type":"identifier"},{"text":"get","line":388,"char":14743,"type":"identifier"},{"text":"assertThat","line":390,"char":14756,"type":"identifier"},{"text":"doc","line":390,"char":14767,"type":"identifier"},{"text":"field","line":390,"char":14771,"type":"identifier"},{"text":"isEqualTo","line":390,"char":14784,"type":"identifier"},{"text":"ORecordId","line":390,"char":14798,"type":"identifier"},{"text":"String","line":395,"char":14869,"type":"identifier"},{"text":"process","line":396,"char":14989,"type":"identifier"},{"text":"cfgJson","line":396,"char":14997,"type":"identifier"},{"text":"List","line":397,"char":15011,"type":"identifier"},{"text":"ODocument","line":397,"char":15016,"type":"identifier"},{"text":"getResult","line":397,"char":15033,"type":"identifier"},{"text":"assertThat","line":398,"char":15050,"type":"identifier"},{"text":"res","line":398,"char":15061,"type":"identifier"},{"text":"hasSize","line":398,"char":15066,"type":"identifier"},{"text":"ODocument","line":399,"char":15082,"type":"identifier"},{"text":"res","line":399,"char":15098,"type":"identifier"},{"text":"get","line":399,"char":15102,"type":"identifier"},{"text":"assertThat","line":401,"char":15115,"type":"identifier"},{"text":"doc","line":401,"char":15126,"type":"identifier"},{"text":"Boolean","line":401,"char":15131,"type":"identifier"},{"text":"field","line":401,"char":15139,"type":"identifier"},{"text":"isTrue","line":401,"char":15154,"type":"identifier"},{"text":"String","line":407,"char":15222,"type":"identifier"},{"text":"process","line":408,"char":15443,"type":"identifier"},{"text":"cfgJson","line":408,"char":15451,"type":"identifier"},{"text":"List","line":409,"char":15465,"type":"identifier"},{"text":"ODocument","line":409,"char":15470,"type":"identifier"},{"text":"getResult","line":409,"char":15487,"type":"identifier"},{"text":"assertThat","line":410,"char":15504,"type":"identifier"},{"text":"res","line":410,"char":15515,"type":"identifier"},{"text":"hasSize","line":410,"char":15520,"type":"identifier"},{"text":"ODocument","line":411,"char":15536,"type":"identifier"},{"text":"res","line":411,"char":15552,"type":"identifier"},{"text":"get","line":411,"char":15556,"type":"identifier"},{"text":"assertThat","line":413,"char":15569,"type":"identifier"},{"text":"doc","line":413,"char":15580,"type":"identifier"},{"text":"Date","line":413,"char":15585,"type":"identifier"},{"text":"field","line":413,"char":15590,"type":"identifier"},{"text":"isEqualTo","line":413,"char":15605,"type":"identifier"},{"text":"DateFormat","line":415,"char":15635,"type":"identifier"},{"text":"SimpleDateFormat","line":415,"char":15655,"type":"identifier"},{"text":"assertThat","line":417,"char":15698,"type":"identifier"},{"text":"df","line":417,"char":15709,"type":"identifier"},{"text":"format","line":417,"char":15712,"type":"identifier"},{"text":"doc","line":417,"char":15719,"type":"identifier"},{"text":"Date","line":417,"char":15724,"type":"identifier"},{"text":"field","line":417,"char":15729,"type":"identifier"},{"text":"isEqualTo","line":417,"char":15749,"type":"identifier"},{"text":"String","line":426,"char":15894,"type":"identifier"},{"text":"process","line":427,"char":16149,"type":"identifier"},{"text":"cfgJson","line":427,"char":16157,"type":"identifier"},{"text":"List","line":428,"char":16171,"type":"identifier"},{"text":"ODocument","line":428,"char":16176,"type":"identifier"},{"text":"getResult","line":428,"char":16193,"type":"identifier"},{"text":"assertThat","line":429,"char":16210,"type":"identifier"},{"text":"res","line":429,"char":16221,"type":"identifier"},{"text":"hasSize","line":429,"char":16226,"type":"identifier"},{"text":"ODocument","line":430,"char":16242,"type":"identifier"},{"text":"res","line":430,"char":16258,"type":"identifier"},{"text":"get","line":430,"char":16262,"type":"identifier"},{"text":"assertThat","line":432,"char":16275,"type":"identifier"},{"text":"doc","line":432,"char":16286,"type":"identifier"},{"text":"Date","line":432,"char":16291,"type":"identifier"},{"text":"field","line":432,"char":16296,"type":"identifier"},{"text":"isEqualTo","line":432,"char":16311,"type":"identifier"},{"text":"DateFormat","line":434,"char":16341,"type":"identifier"},{"text":"SimpleDateFormat","line":434,"char":16361,"type":"identifier"},{"text":"assertThat","line":436,"char":16404,"type":"identifier"},{"text":"df","line":436,"char":16415,"type":"identifier"},{"text":"format","line":436,"char":16418,"type":"identifier"},{"text":"doc","line":436,"char":16425,"type":"identifier"},{"text":"Date","line":436,"char":16430,"type":"identifier"},{"text":"field","line":436,"char":16435,"type":"identifier"},{"text":"isEqualTo","line":436,"char":16455,"type":"identifier"},{"text":"String","line":442,"char":16541,"type":"identifier"},{"text":"process","line":443,"char":16712,"type":"identifier"},{"text":"cfgJson","line":443,"char":16720,"type":"identifier"},{"text":"List","line":444,"char":16734,"type":"identifier"},{"text":"ODocument","line":444,"char":16739,"type":"identifier"},{"text":"getResult","line":444,"char":16756,"type":"identifier"},{"text":"assertThat","line":445,"char":16773,"type":"identifier"},{"text":"res","line":445,"char":16784,"type":"identifier"},{"text":"hasSize","line":445,"char":16789,"type":"identifier"},{"text":"ODocument","line":446,"char":16805,"type":"identifier"},{"text":"res","line":446,"char":16821,"type":"identifier"},{"text":"get","line":446,"char":16825,"type":"identifier"},{"text":"assertThat","line":448,"char":16838,"type":"identifier"},{"text":"doc","line":448,"char":16849,"type":"identifier"},{"text":"String","line":448,"char":16854,"type":"identifier"},{"text":"field","line":448,"char":16861,"type":"identifier"},{"text":"isEqualTo","line":448,"char":16876,"type":"identifier"},{"text":"assertThat","line":449,"char":16900,"type":"identifier"},{"text":"doc","line":449,"char":16911,"type":"identifier"},{"text":"String","line":449,"char":16916,"type":"identifier"},{"text":"field","line":449,"char":16923,"type":"identifier"},{"text":"isEqualTo","line":449,"char":16939,"type":"identifier"},{"text":"String","line":454,"char":17012,"type":"identifier"},{"text":"process","line":455,"char":17184,"type":"identifier"},{"text":"cfgJson","line":455,"char":17192,"type":"identifier"},{"text":"List","line":456,"char":17206,"type":"identifier"},{"text":"ODocument","line":456,"char":17211,"type":"identifier"},{"text":"getResult","line":456,"char":17228,"type":"identifier"},{"text":"assertThat","line":457,"char":17245,"type":"identifier"},{"text":"res","line":457,"char":17256,"type":"identifier"},{"text":"hasSize","line":457,"char":17261,"type":"identifier"},{"text":"ODocument","line":458,"char":17277,"type":"identifier"},{"text":"res","line":458,"char":17293,"type":"identifier"},{"text":"get","line":458,"char":17297,"type":"identifier"},{"text":"assertThat","line":460,"char":17310,"type":"identifier"},{"text":"doc","line":460,"char":17321,"type":"identifier"},{"text":"String","line":460,"char":17326,"type":"identifier"},{"text":"field","line":460,"char":17333,"type":"identifier"},{"text":"isEqualTo","line":460,"char":17348,"type":"identifier"},{"text":"assertThat","line":461,"char":17372,"type":"identifier"},{"text":"doc","line":461,"char":17383,"type":"identifier"},{"text":"String","line":461,"char":17388,"type":"identifier"},{"text":"field","line":461,"char":17395,"type":"identifier"},{"text":"isEqualTo","line":461,"char":17411,"type":"identifier"}]},"highlight":{"content":[" = \"{source: { content: { value: 'text\\n\\\"<em>Hello</em>, quotes are here!\\\"' }  }, extractor : { csv: {} }, loader","(\"<em>Hello</em>, quotes are here!\", text);\n  }\n\n  @Test\n  public void testStringStartedFromDigit() throws"," cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,,<em>Hello</em>'} }, extractor : { csv : {} }, loader","(\"postId\"));\n    assertEquals(\"<em>Hello</em>\", (String) doc.field(\"text\"));\n  }\n\n  @Test\n  public void"," testNullValueInCell() {\n    String cfgJson = \"{source: { content: { value: 'id,postId,text\\n1,NULL,<em>Hello</em>"]}},{"_index":"codesearch","_type":"code","_id":"f3da2c11da303115d32dcf2f3b08b82372916c6f","_score":0.0,"_source":{"filename":"tests/src/test/java/com/orientechnologies/orient/test/database/auto/SQLInsertTest.java","content":"/*\r\n * Copyright 2010-2012 Luca Garulli (l.garulli--at--orientechnologies.com)\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\npackage com.orientechnologies.orient.test.database.auto;\r\n\r\nimport com.orientechnologies.orient.core.command.script.OCommandScript;\r\nimport com.orientechnologies.orient.core.db.record.OIdentifiable;\r\nimport com.orientechnologies.orient.core.id.ORID;\r\nimport com.orientechnologies.orient.core.id.ORecordId;\r\nimport com.orientechnologies.orient.core.iterator.ORecordIteratorCluster;\r\nimport com.orientechnologies.orient.core.metadata.schema.OClass;\r\nimport com.orientechnologies.orient.core.metadata.schema.OSchema;\r\nimport com.orientechnologies.orient.core.metadata.schema.OType;\r\nimport com.orientechnologies.orient.core.record.ORecord;\r\nimport com.orientechnologies.orient.core.record.impl.ODocument;\r\nimport com.orientechnologies.orient.core.sql.OCommandSQL;\r\nimport com.orientechnologies.orient.core.sql.query.OSQLSynchQuery;\r\nimport org.testng.Assert;\r\nimport org.testng.annotations.Optional;\r\nimport org.testng.annotations.Parameters;\r\nimport org.testng.annotations.Test;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.*;\r\n\r\n/**\r\n * If some of the tests start to fail then check cluster number in queries, e.g #7:1. It can be because the order of clusters could\r\n * be affected due to adding or removing cluster from storage.\r\n */\r\n@Test(groups = \"sql-insert\")\r\npublic class SQLInsertTest extends DocumentDBBaseTest {\r\n\r\n  @Parameters(value = \"url\")\r\n  public SQLInsertTest(@Optional String url) {\r\n    super(url);\r\n  }\r\n\r\n  @Test\r\n  public void insertOperator() {\r\n    if (!database.getMetadata().getSchema().existsClass(\"Account\"))\r\n      database.getMetadata().getSchema().createClass(\"Account\");\r\n\r\n    final int clId = database.addCluster(\"anotherdefault\");\r\n    final OClass profileClass = database.getMetadata().getSchema().getClass(\"Account\");\r\n    profileClass.addClusterId(clId);\r\n\r\n    if (!database.getMetadata().getSchema().existsClass(\"Address\"))\r\n      database.getMetadata().getSchema().createClass(\"Address\");\r\n\r\n    int addressId = database.getMetadata().getSchema().getClass(\"Address\").getDefaultClusterId();\r\n\r\n    List<Long> positions = getValidPositions(addressId);\r\n\r\n    if (!database.getMetadata().getSchema().existsClass(\"Profile\"))\r\n      database.getMetadata().getSchema().createClass(\"Profile\");\r\n\r\n    ODocument doc = (ODocument) database.command(\r\n        new OCommandSQL(\"insert into Profile (name, surname, salary, location, dummy) values ('Luca','Smith', 109.9, #\" + addressId\r\n            + \":\" + positions.get(3) + \", 'hooray')\")).execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.field(\"name\"), \"Luca\");\r\n    Assert.assertEquals(doc.field(\"surname\"), \"Smith\");\r\n    Assert.assertEquals(((Number) doc.field(\"salary\")).floatValue(), 109.9f);\r\n    Assert.assertEquals(doc.field(\"location\"), new ORecordId(addressId, positions.get(3)));\r\n    Assert.assertEquals(doc.field(\"dummy\"), \"hooray\");\r\n\r\n    doc = (ODocument) database.command(\r\n        new OCommandSQL(\"insert into Profile SET name = 'Luca', surname = 'Smith', salary = 109.9, location = #\" + addressId + \":\"\r\n            + positions.get(3) + \", dummy =  'hooray'\")).execute();\r\n\r\n    database.delete(doc);\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.field(\"name\"), \"Luca\");\r\n    Assert.assertEquals(doc.field(\"surname\"), \"Smith\");\r\n    Assert.assertEquals(((Number) doc.field(\"salary\")).floatValue(), 109.9f);\r\n    Assert.assertEquals(doc.field(\"location\", OType.LINK), new ORecordId(addressId, positions.get(3)));\r\n    Assert.assertEquals(doc.field(\"dummy\"), \"hooray\");\r\n  }\r\n\r\n  @Test\r\n  public void insertWithWildcards() {\r\n    int addressId = database.getMetadata().getSchema().getClass(\"Address\").getDefaultClusterId();\r\n\r\n    List<Long> positions = getValidPositions(addressId);\r\n\r\n    ODocument doc = (ODocument) database.command(\r\n        new OCommandSQL(\"insert into Profile (name, surname, salary, location, dummy) values (?,?,?,?,?)\")).execute(\"Marc\",\r\n        \"Smith\", 120.0, new ORecordId(addressId, positions.get(3)), \"hooray\");\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.field(\"name\"), \"Marc\");\r\n    Assert.assertEquals(doc.field(\"surname\"), \"Smith\");\r\n    Assert.assertEquals(((Number) doc.field(\"salary\")).floatValue(), 120.0f);\r\n    Assert.assertEquals(doc.field(\"location\"), new ORecordId(addressId, positions.get(3)));\r\n    Assert.assertEquals(doc.field(\"dummy\"), \"hooray\");\r\n\r\n    database.delete(doc);\r\n\r\n    doc = (ODocument) database.command(\r\n        new OCommandSQL(\"insert into Profile SET name = ?, surname = ?, salary = ?, location = ?, dummy = ?\")).execute(\"Marc\",\r\n        \"Smith\", 120.0, new ORecordId(addressId, positions.get(3)), \"hooray\");\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.field(\"name\"), \"Marc\");\r\n    Assert.assertEquals(doc.field(\"surname\"), \"Smith\");\r\n    Assert.assertEquals(((Number) doc.field(\"salary\")).floatValue(), 120.0f);\r\n    Assert.assertEquals(doc.field(\"location\", OType.LINK), new ORecordId(addressId, positions.get(3)));\r\n    Assert.assertEquals(doc.field(\"dummy\"), \"hooray\");\r\n  }\r\n\r\n  @Test\r\n  @SuppressWarnings(\"unchecked\")\r\n  public void insertMap() {\r\n    ODocument doc = (ODocument) database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"insert into cluster:default (equaledges, name, properties) values ('no', 'circle', {'round':'eeee', 'blaaa':'zigzag'} )\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n\r\n    doc = (ODocument) new ODocument(doc.getIdentity()).load();\r\n\r\n    Assert.assertEquals(doc.field(\"equaledges\"), \"no\");\r\n    Assert.assertEquals(doc.field(\"name\"), \"circle\");\r\n    Assert.assertTrue(doc.field(\"properties\") instanceof Map);\r\n\r\n    Map<Object, Object> entries = ((Map<Object, Object>) doc.field(\"properties\"));\r\n    Assert.assertEquals(entries.size(), 2);\r\n\r\n    Assert.assertEquals(entries.get(\"round\"), \"eeee\");\r\n    Assert.assertEquals(entries.get(\"blaaa\"), \"zigzag\");\r\n\r\n    database.delete(doc);\r\n\r\n    doc = (ODocument) database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"insert into cluster:default SET equaledges = 'no', name = 'circle', properties = {'round':'eeee', 'blaaa':'zigzag'} \"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n\r\n    doc = (ODocument) new ODocument(doc.getIdentity()).load();\r\n\r\n    Assert.assertEquals(doc.field(\"equaledges\"), \"no\");\r\n    Assert.assertEquals(doc.field(\"name\"), \"circle\");\r\n    Assert.assertTrue(doc.field(\"properties\") instanceof Map);\r\n\r\n    entries = ((Map<Object, Object>) doc.field(\"properties\"));\r\n    Assert.assertEquals(entries.size(), 2);\r\n\r\n    Assert.assertEquals(entries.get(\"round\"), \"eeee\");\r\n    Assert.assertEquals(entries.get(\"blaaa\"), \"zigzag\");\r\n  }\r\n\r\n  @Test\r\n  @SuppressWarnings(\"unchecked\")\r\n  public void insertList() {\r\n    ODocument doc = (ODocument) database.command(\r\n        new OCommandSQL(\r\n            \"insert into cluster:default (equaledges, name, list) values ('yes', 'square', ['bottom', 'top','left','right'] )\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n\r\n    doc = (ODocument) new ODocument(doc.getIdentity()).load();\r\n\r\n    Assert.assertEquals(doc.field(\"equaledges\"), \"yes\");\r\n    Assert.assertEquals(doc.field(\"name\"), \"square\");\r\n    Assert.assertTrue(doc.field(\"list\") instanceof List);\r\n\r\n    List<Object> entries = ((List<Object>) doc.field(\"list\"));\r\n    Assert.assertEquals(entries.size(), 4);\r\n\r\n    Assert.assertEquals(entries.get(0), \"bottom\");\r\n    Assert.assertEquals(entries.get(1), \"top\");\r\n    Assert.assertEquals(entries.get(2), \"left\");\r\n    Assert.assertEquals(entries.get(3), \"right\");\r\n\r\n    database.delete(doc);\r\n\r\n    doc = (ODocument) database.command(\r\n        new OCommandSQL(\r\n            \"insert into cluster:default SET equaledges = 'yes', name = 'square', list = ['bottom', 'top','left','right'] \"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n\r\n    doc = (ODocument) new ODocument(doc.getIdentity()).load();\r\n\r\n    Assert.assertEquals(doc.field(\"equaledges\"), \"yes\");\r\n    Assert.assertEquals(doc.field(\"name\"), \"square\");\r\n    Assert.assertTrue(doc.field(\"list\") instanceof List);\r\n\r\n    entries = ((List<Object>) doc.field(\"list\"));\r\n    Assert.assertEquals(entries.size(), 4);\r\n\r\n    Assert.assertEquals(entries.get(0), \"bottom\");\r\n    Assert.assertEquals(entries.get(1), \"top\");\r\n    Assert.assertEquals(entries.get(2), \"left\");\r\n    Assert.assertEquals(entries.get(3), \"right\");\r\n  }\r\n\r\n  @Test\r\n  public void insertWithNoSpaces() {\r\n    ODocument doc = (ODocument) database.command(\r\n        new OCommandSQL(\"insert into cluster:default(id, title)values(10, 'NoSQL movement')\")).execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n  }\r\n\r\n  @Test\r\n  public void insertAvoidingSubQuery() {\r\n    final OSchema schema = database.getMetadata().getSchema();\r\n    if (schema.getClass(\"test\") == null)\r\n      schema.createClass(\"test\");\r\n\r\n    ODocument doc = (ODocument) database.command(new OCommandSQL(\"INSERT INTO test(text) VALUES ('(Hello World)')\")).execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.field(\"text\"), \"(Hello World)\");\r\n  }\r\n\r\n  @Test\r\n  public void insertSubQuery() {\r\n    final OSchema schema = database.getMetadata().getSchema();\r\n    if (schema.getClass(\"test\") == null)\r\n      schema.createClass(\"test\");\r\n\r\n    final List<ODocument> usersCount = database.query(new OSQLSynchQuery<ODocument>(\"select count(*) from OUser\"));\r\n    final long uCount = usersCount.get(0).field(\"count\");\r\n\r\n    ODocument doc = (ODocument) database.command(new OCommandSQL(\"INSERT INTO test SET names = (select name from OUser)\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertNotNull(doc.field(\"names\"));\r\n    Assert.assertTrue(doc.field(\"names\") instanceof Collection);\r\n    Assert.assertEquals(((Collection<?>) doc.field(\"names\")).size(), uCount);\r\n  }\r\n\r\n  @Test(dependsOnMethods = \"insertOperator\")\r\n  public void insertCluster() {\r\n    ODocument doc = database.command(\r\n        new OCommandSQL(\"insert into Account cluster anotherdefault (id, title) values (10, 'NoSQL movement')\")).execute();\r\n\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.getIdentity().getClusterId(), database.getClusterIdByName(\"anotherdefault\"));\r\n    Assert.assertEquals(doc.getClassName(), \"Account\");\r\n  }\r\n\r\n  public void updateMultipleFields() {\r\n    List<Long> positions = getValidPositions(3);\r\n\r\n    OIdentifiable result = database.command(\r\n        new OCommandSQL(\"  INSERT INTO Account SET id= 3232,name= 'my name',map= {\\\"key\\\":\\\"value\\\"},dir= '',user= #3:\"\r\n            + positions.get(0))).execute();\r\n    Assert.assertNotNull(result);\r\n\r\n    ODocument record = result.getRecord();\r\n\r\n    Assert.assertEquals(record.field(\"id\"), 3232);\r\n    Assert.assertEquals(record.field(\"name\"), \"my name\");\r\n    Map<String, String> map = record.field(\"map\");\r\n    Assert.assertTrue(map.get(\"key\").equals(\"value\"));\r\n    Assert.assertEquals(record.field(\"dir\"), \"\");\r\n    Assert.assertEquals(record.field(\"user\"), new ORecordId(3, positions.get(0)));\r\n  }\r\n\r\n  public void insertSelect() {\r\n    database.command(new OCommandSQL(\"CREATE CLASS UserCopy\")).execute();\r\n    database.getMetadata().getSchema().reload();\r\n\r\n    long inserted = database.command(new OCommandSQL(\"INSERT INTO UserCopy FROM select from ouser where name <> 'admin' limit 2\"))\r\n        .execute();\r\n    Assert.assertEquals(inserted, 2);\r\n\r\n    List<OIdentifiable> result = database.query(new OSQLSynchQuery<OIdentifiable>(\"select from UserCopy\"));\r\n    Assert.assertEquals(result.size(), 2);\r\n    for (OIdentifiable r : result) {\r\n      Assert.assertEquals(((ODocument) r.getRecord()).getClassName(), \"UserCopy\");\r\n      Assert.assertNotSame(((ODocument) r.getRecord()).field(\"name\"), \"admin\");\r\n    }\r\n  }\r\n\r\n  public void insertWithReturn() {\r\n\r\n    if (!database.getMetadata().getSchema().existsClass(\"actor2\")) {\r\n      database.command(new OCommandSQL(\"CREATE CLASS Actor2\")).execute();\r\n      database.getMetadata().getSchema().reload();\r\n    }\r\n\r\n    // RETURN with $current.\r\n    ODocument doc = database.command(new OCommandSQL(\"INSERT INTO Actor2 SET FirstName=\\\"FFFF\\\" RETURN $current\")).execute();\r\n    Assert.assertTrue(doc != null);\r\n    Assert.assertEquals(doc.getClassName(), \"Actor2\");\r\n\r\n    // RETURN with @rid\r\n    Object res1 = database.command(new OCommandSQL(\"INSERT INTO Actor2 SET FirstName=\\\"Butch 1\\\" RETURN @rid\")).execute();\r\n    Assert.assertTrue(res1 instanceof ORecordId);\r\n    Assert.assertTrue(((OIdentifiable) res1).getIdentity().isValid());\r\n\r\n    // Create many records and return @rid\r\n    Object res2 = database.command(\r\n        new OCommandSQL(\r\n            \"INSERT INTO Actor2(FirstName,LastName) VALUES ('Jay','Miner'),('Frank','Hermier'),('Emily','Saut')  RETURN @rid\"))\r\n        .execute();\r\n    Assert.assertTrue(res2 instanceof List<?>);\r\n    Assert.assertTrue(((List) res2).get(0) instanceof ORecordId);\r\n\r\n    // Create many records by INSERT INTO ...FROM and return wrapped field\r\n    ORID another = ((OIdentifiable) res1).getIdentity();\r\n    final String sql = \"INSERT INTO Actor2 RETURN $current.FirstName  FROM SELECT * FROM [\" + doc.getIdentity().toString() + \",\"\r\n        + another.toString() + \"]\";\r\n    ArrayList res3 = database.command(new OCommandSQL(sql)).execute();\r\n    Assert.assertEquals(res3.size(), 2);\r\n    Assert.assertTrue(((List) res3).get(0) instanceof ODocument);\r\n    final ODocument res3doc = (ODocument) res3.get(0);\r\n    Assert.assertTrue(res3doc.containsField(\"result\"));\r\n    Assert.assertTrue(\"FFFF\".equalsIgnoreCase((String) res3doc.field(\"result\"))\r\n        || \"Butch 1\".equalsIgnoreCase((String) res3doc.field(\"result\")));\r\n    Assert.assertTrue(res3doc.containsField(\"rid\"));\r\n    Assert.assertTrue(res3doc.containsField(\"version\"));\r\n\r\n    // create record using content keyword and update it in sql batch passing recordID between commands\r\n    final String sql2 = \"let var1=INSERT INTO Actor2 CONTENT {Name:\\\"content\\\"} RETURN $current.@rid\\n\"\r\n        + \"let var2=UPDATE $var1 SET Bingo=1 RETURN AFTER @rid\\n\" + \"return $var2\";\r\n    List<?> res_sql2 = database.command(new OCommandScript(\"sql\", sql2)).execute();\r\n    Assert.assertEquals(res_sql2.size(), 1);\r\n    Assert.assertTrue(((List) res_sql2).get(0) instanceof ORecordId);\r\n\r\n    // create record using content keyword and update it in sql batch passing recordID between commands\r\n    final String sql3 = \"let var1=INSERT INTO Actor2 CONTENT {Name:\\\"Bingo owner\\\"} RETURN @this\\n\"\r\n        + \"let var2=UPDATE $var1 SET Bingo=1 RETURN AFTER\\n\" + \"return $var2\";\r\n    List<?> res_sql3 = database.command(new OCommandScript(\"sql\", sql3)).execute();\r\n    Assert.assertEquals(res_sql3.size(), 1);\r\n    Assert.assertTrue(((List) res_sql3).get(0) instanceof ODocument);\r\n    final ODocument sql3doc = (ODocument) (((List) res_sql3).get(0));\r\n    Assert.assertEquals(sql3doc.field(\"Bingo\"), 1);\r\n    Assert.assertEquals(sql3doc.field(\"Name\"), \"Bingo owner\");\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededSetNoLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedSetNoLinkedClass\", OType.EMBEDDEDSET);\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedSetNoLinkedClass', embeddedSetNoLinkedClass = [{'line1':'123 Fake Street'}]\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedSetNoLinkedClass\") instanceof Set);\r\n\r\n    Set addr = doc.field(\"embeddedSetNoLinkedClass\");\r\n    for (Object o : addr) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededSetWithLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedSetWithLinkedClass\", OType.EMBEDDEDSET,\r\n        database.getMetadata().getSchema().getOrCreateClass(\"TestConvertLinkedClass\"));\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedSetWithLinkedClass', embeddedSetWithLinkedClass = [{'line1':'123 Fake Street'}]\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedSetWithLinkedClass\") instanceof Set);\r\n\r\n    Set addr = doc.field(\"embeddedSetWithLinkedClass\");\r\n    for (Object o : addr) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n      Assert.assertEquals(((ODocument) o).getClassName(), \"TestConvertLinkedClass\");\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededListNoLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedListNoLinkedClass\", OType.EMBEDDEDLIST);\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedListNoLinkedClass', embeddedListNoLinkedClass = [{'line1':'123 Fake Street'}]\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedListNoLinkedClass\") instanceof List);\r\n\r\n    List addr = doc.field(\"embeddedListNoLinkedClass\");\r\n    for (Object o : addr) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededListWithLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    if (!c.existsProperty(\"embeddedListWithLinkedClass\"))\r\n      c.createProperty(\"embeddedListWithLinkedClass\", OType.EMBEDDEDLIST,\r\n          database.getMetadata().getSchema().getOrCreateClass(\"TestConvertLinkedClass\"));\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedListWithLinkedClass', embeddedListWithLinkedClass = [{'line1':'123 Fake Street'}]\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedListWithLinkedClass\") instanceof List);\r\n\r\n    List addr = doc.field(\"embeddedListWithLinkedClass\");\r\n    for (Object o : addr) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n      Assert.assertEquals(((ODocument) o).getClassName(), \"TestConvertLinkedClass\");\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededMapNoLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedMapNoLinkedClass\", OType.EMBEDDEDMAP);\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedMapNoLinkedClass', embeddedMapNoLinkedClass = {test:{'line1':'123 Fake Street'}}\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedMapNoLinkedClass\") instanceof Map);\r\n\r\n    Map addr = doc.field(\"embeddedMapNoLinkedClass\");\r\n    for (Object o : addr.values()) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededMapWithLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedMapWithLinkedClass\", OType.EMBEDDEDMAP,\r\n        database.getMetadata().getSchema().getOrCreateClass(\"TestConvertLinkedClass\"));\r\n\r\n    ODocument doc = database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"INSERT INTO TestConvert SET name = 'embeddedMapWithLinkedClass', embeddedMapWithLinkedClass = {test:{'line1':'123 Fake Street'}}\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedMapWithLinkedClass\") instanceof Map);\r\n\r\n    Map addr = doc.field(\"embeddedMapWithLinkedClass\");\r\n    for (Object o : addr.values()) {\r\n      Assert.assertTrue(o instanceof ODocument);\r\n      Assert.assertEquals(((ODocument) o).getClassName(), \"TestConvertLinkedClass\");\r\n    }\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededNoLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedNoLinkedClass\", OType.EMBEDDED);\r\n\r\n    ODocument doc = database.command(\r\n        new OCommandSQL(\r\n            \"INSERT INTO TestConvert SET name = 'embeddedNoLinkedClass', embeddedNoLinkedClass = {'line1':'123 Fake Street'}\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedNoLinkedClass\") instanceof ODocument);\r\n  }\r\n\r\n  public void testEmbeddedDates() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestEmbeddedDates\");\r\n\r\n    database\r\n        .command(\r\n            new OCommandSQL(\r\n                \"insert into TestEmbeddedDates set events = [{\\\"on\\\": date(\\\"2005-09-08 04:00:00\\\", \\\"yyyy-MM-dd HH:mm:ss\\\", \\\"UTC\\\")}]\\n\"))\r\n        .execute();\r\n\r\n    List<ODocument> result = database.query(new OSQLSynchQuery<ODocument>(\"select from TestEmbeddedDates\"));\r\n\r\n    Assert.assertEquals(result.size(), 1);\r\n    boolean found = false;\r\n    ODocument doc = result.get(0);\r\n    Collection events = doc.field(\"events\");\r\n    for (Object event : events) {\r\n      Assert.assertTrue(event instanceof Map);\r\n      Object dateObj = ((Map) event).get(\"on\");\r\n      Assert.assertTrue(dateObj instanceof Date);\r\n      Calendar cal = new GregorianCalendar();\r\n      cal.setTime((Date) dateObj);\r\n      Assert.assertEquals(cal.get(Calendar.YEAR), 2005);\r\n      found = true;\r\n    }\r\n\r\n    doc.delete();\r\n    Assert.assertEquals(found, true);\r\n\r\n  }\r\n\r\n  public void testAutoConversionOfEmbeddededWithLinkedClass() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"TestConvert\");\r\n    c.createProperty(\"embeddedWithLinkedClass\", OType.EMBEDDED,\r\n        database.getMetadata().getSchema().getOrCreateClass(\"TestConvertLinkedClass\"));\r\n\r\n    ODocument doc = database.command(\r\n        new OCommandSQL(\r\n            \"INSERT INTO TestConvert SET name = 'embeddedWithLinkedClass', embeddedWithLinkedClass = {'line1':'123 Fake Street'}\"))\r\n        .execute();\r\n\r\n    Assert.assertTrue(doc.field(\"embeddedWithLinkedClass\") instanceof ODocument);\r\n    Assert.assertEquals(((ODocument) doc.field(\"embeddedWithLinkedClass\")).getClassName(), \"TestConvertLinkedClass\");\r\n  }\r\n\r\n  public void testInsertEmbeddedWithRecordAttributes() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"EmbeddedWithRecordAttributes\");\r\n    c.createProperty(\"like\", OType.EMBEDDED,\r\n        database.getMetadata().getSchema().getOrCreateClass(\"EmbeddedWithRecordAttributes_Like\"));\r\n\r\n    ODocument doc = database.command(\r\n        new OCommandSQL(\"INSERT INTO EmbeddedWithRecordAttributes SET `like` = { \\n\" + \"      count: 0, \\n\"\r\n            + \"      latest: [], \\n\" + \"      '@type': 'document', \\n\" + \"      '@class': 'EmbeddedWithRecordAttributes_Like'\\n\"\r\n            + \"    } \")).execute();\r\n\r\n    Assert.assertTrue(doc.field(\"like\") instanceof OIdentifiable);\r\n    Assert.assertEquals(((ODocument) doc.field(\"like\")).getClassName(), \"EmbeddedWithRecordAttributes_Like\");\r\n    Assert.assertEquals(((ODocument) doc.field(\"like\")).field(\"count\"), 0);\r\n  }\r\n\r\n  public void testInsertEmbeddedWithRecordAttributes2() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"EmbeddedWithRecordAttributes2\");\r\n    c.createProperty(\"like\", OType.EMBEDDED,\r\n        database.getMetadata().getSchema().getOrCreateClass(\"EmbeddedWithRecordAttributes2_Like\"));\r\n\r\n    ODocument doc = database.command(\r\n        new OCommandSQL(\"INSERT INTO EmbeddedWithRecordAttributes2 SET `like` = { \\n\" + \"      count: 0, \\n\"\r\n            + \"      latest: [], \\n\" + \"      @type: 'document', \\n\" + \"      @class: 'EmbeddedWithRecordAttributes2_Like'\\n\"\r\n            + \"    } \")).execute();\r\n\r\n    Assert.assertTrue(doc.field(\"like\") instanceof OIdentifiable);\r\n    Assert.assertEquals(((ODocument) doc.field(\"like\")).getClassName(), \"EmbeddedWithRecordAttributes2_Like\");\r\n    Assert.assertEquals(((ODocument) doc.field(\"like\")).field(\"count\"), 0);\r\n  }\r\n\r\n  public void testInsertWithClusterAsFieldName() {\r\n    OClass c = database.getMetadata().getSchema().getOrCreateClass(\"InsertWithClusterAsFieldName\");\r\n\r\n    database.command(\r\n        new OCommandSQL(\"INSERT INTO InsertWithClusterAsFieldName ( `cluster` ) values ( 'foo' )\")).execute();\r\n\r\n    List<ODocument> result = database\r\n        .query(new OSQLSynchQuery<ODocument>(\"SELECT FROM InsertWithClusterAsFieldName\"));\r\n\r\n    Assert.assertEquals(result.size(), 1);\r\n    Assert.assertEquals(result.get(0).field(\"cluster\"), \"foo\");\r\n  }\r\n\r\n  public void testInsertEmbeddedBigDecimal() {\r\n    // issue #6670\r\n    database.getMetadata().getSchema().getOrCreateClass(\"TestInsertEmbeddedBigDecimal\");\r\n    database.command(new OCommandSQL(\"create property TestInsertEmbeddedBigDecimal.ed embeddedlist decimal\")).execute();\r\n    database.command(new OCommandSQL(\"INSERT INTO TestInsertEmbeddedBigDecimal CONTENT {\\\"ed\\\": [5,null,5]}\")).execute();\r\n    List<ODocument> result = database.query(new OSQLSynchQuery<ODocument>(\"SELECT FROM TestInsertEmbeddedBigDecimal\"));\r\n    Assert.assertEquals(result.size(), 1);\r\n    Iterable ed = result.get(0).field(\"ed\");\r\n    Object o = ed.iterator().next();\r\n    Assert.assertEquals(o.getClass(), BigDecimal.class);\r\n    Assert.assertEquals(((BigDecimal)o).intValue(), 5);\r\n  }\r\n\r\n  private List<Long> getValidPositions(int clusterId) {\r\n    final List<Long> positions = new ArrayList<Long>();\r\n\r\n    final ORecordIteratorCluster<?> iteratorCluster = database.browseCluster(database.getClusterNameById(clusterId));\r\n\r\n    for (int i = 0; i < 100; i++) {\r\n      if (!iteratorCluster.hasNext())\r\n        break;\r\n      ORecord doc = iteratorCluster.next();\r\n      positions.add(doc.getIdentity().getClusterPosition());\r\n    }\r\n    return positions;\r\n  }\r\n}\r\n","repository":"https://github.com/orientechnologies/orientdb.git","language":"java","tokens":[{"text":"com","line":16,"char":663,"type":"package"},{"text":"orientechnologies","line":16,"char":667,"type":"package"},{"text":"orient","line":16,"char":685,"type":"package"},{"text":"test","line":16,"char":692,"type":"package"},{"text":"database","line":16,"char":697,"type":"package"},{"text":"auto","line":16,"char":706,"type":"package"},{"text":"com","line":18,"char":722,"type":"import"},{"text":"orientechnologies","line":18,"char":726,"type":"import"},{"text":"orient","line":18,"char":744,"type":"import"},{"text":"core","line":18,"char":751,"type":"import"},{"text":"command","line":18,"char":756,"type":"import"},{"text":"script","line":18,"char":764,"type":"import"},{"text":"OCommandScript","line":18,"char":771,"type":"import"},{"text":"com","line":19,"char":795,"type":"import"},{"text":"orientechnologies","line":19,"char":799,"type":"import"},{"text":"orient","line":19,"char":817,"type":"import"},{"text":"core","line":19,"char":824,"type":"import"},{"text":"db","line":19,"char":829,"type":"import"},{"text":"record","line":19,"char":832,"type":"import"},{"text":"OIdentifiable","line":19,"char":839,"type":"import"},{"text":"com","line":20,"char":862,"type":"import"},{"text":"orientechnologies","line":20,"char":866,"type":"import"},{"text":"orient","line":20,"char":884,"type":"import"},{"text":"core","line":20,"char":891,"type":"import"},{"text":"id","line":20,"char":896,"type":"import"},{"text":"ORID","line":20,"char":899,"type":"import"},{"text":"com","line":21,"char":913,"type":"import"},{"text":"orientechnologies","line":21,"char":917,"type":"import"},{"text":"orient","line":21,"char":935,"type":"import"},{"text":"core","line":21,"char":942,"type":"import"},{"text":"id","line":21,"char":947,"type":"import"},{"text":"ORecordId","line":21,"char":950,"type":"import"},{"text":"com","line":22,"char":969,"type":"import"},{"text":"orientechnologies","line":22,"char":973,"type":"import"},{"text":"orient","line":22,"char":991,"type":"import"},{"text":"core","line":22,"char":998,"type":"import"},{"text":"iterator","line":22,"char":1003,"type":"import"},{"text":"ORecordIteratorCluster","line":22,"char":1012,"type":"import"},{"text":"com","line":23,"char":1044,"type":"import"},{"text":"orientechnologies","line":23,"char":1048,"type":"import"},{"text":"orient","line":23,"char":1066,"type":"import"},{"text":"core","line":23,"char":1073,"type":"import"},{"text":"metadata","line":23,"char":1078,"type":"import"},{"text":"schema","line":23,"char":1087,"type":"import"},{"text":"OClass","line":23,"char":1094,"type":"import"},{"text":"com","line":24,"char":1110,"type":"import"},{"text":"orientechnologies","line":24,"char":1114,"type":"import"},{"text":"orient","line":24,"char":1132,"type":"import"},{"text":"core","line":24,"char":1139,"type":"import"},{"text":"metadata","line":24,"char":1144,"type":"import"},{"text":"schema","line":24,"char":1153,"type":"import"},{"text":"OSchema","line":24,"char":1160,"type":"import"},{"text":"com","line":25,"char":1177,"type":"import"},{"text":"orientechnologies","line":25,"char":1181,"type":"import"},{"text":"orient","line":25,"char":1199,"type":"import"},{"text":"core","line":25,"char":1206,"type":"import"},{"text":"metadata","line":25,"char":1211,"type":"import"},{"text":"schema","line":25,"char":1220,"type":"import"},{"text":"OType","line":25,"char":1227,"type":"import"},{"text":"com","line":26,"char":1242,"type":"import"},{"text":"orientechnologies","line":26,"char":1246,"type":"import"},{"text":"orient","line":26,"char":1264,"type":"import"},{"text":"core","line":26,"char":1271,"type":"import"},{"text":"record","line":26,"char":1276,"type":"import"},{"text":"ORecord","line":26,"char":1283,"type":"import"},{"text":"com","line":27,"char":1300,"type":"import"},{"text":"orientechnologies","line":27,"char":1304,"type":"import"},{"text":"orient","line":27,"char":1322,"type":"import"},{"text":"core","line":27,"char":1329,"type":"import"},{"text":"record","line":27,"char":1334,"type":"import"},{"text":"impl","line":27,"char":1341,"type":"import"},{"text":"ODocument","line":27,"char":1346,"type":"import"},{"text":"com","line":28,"char":1365,"type":"import"},{"text":"orientechnologies","line":28,"char":1369,"type":"import"},{"text":"orient","line":28,"char":1387,"type":"import"},{"text":"core","line":28,"char":1394,"type":"import"},{"text":"sql","line":28,"char":1399,"type":"import"},{"text":"OCommandSQL","line":28,"char":1403,"type":"import"},{"text":"com","line":29,"char":1424,"type":"import"},{"text":"orientechnologies","line":29,"char":1428,"type":"import"},{"text":"orient","line":29,"char":1446,"type":"import"},{"text":"core","line":29,"char":1453,"type":"import"},{"text":"sql","line":29,"char":1458,"type":"import"},{"text":"query","line":29,"char":1462,"type":"import"},{"text":"OSQLSynchQuery","line":29,"char":1468,"type":"import"},{"text":"org","line":30,"char":1492,"type":"import"},{"text":"testng","line":30,"char":1496,"type":"import"},{"text":"Assert","line":30,"char":1503,"type":"import"},{"text":"org","line":31,"char":1519,"type":"import"},{"text":"testng","line":31,"char":1523,"type":"import"},{"text":"annotations","line":31,"char":1530,"type":"import"},{"text":"Optional","line":31,"char":1542,"type":"import"},{"text":"org","line":32,"char":1560,"type":"import"},{"text":"testng","line":32,"char":1564,"type":"import"},{"text":"annotations","line":32,"char":1571,"type":"import"},{"text":"Parameters","line":32,"char":1583,"type":"import"},{"text":"org","line":33,"char":1603,"type":"import"},{"text":"testng","line":33,"char":1607,"type":"import"},{"text":"annotations","line":33,"char":1614,"type":"import"},{"text":"Test","line":33,"char":1626,"type":"import"},{"text":"java","line":35,"char":1642,"type":"import"},{"text":"math","line":35,"char":1647,"type":"import"},{"text":"BigDecimal","line":35,"char":1652,"type":"import"},{"text":"java","line":36,"char":1672,"type":"import"},{"text":"util","line":36,"char":1677,"type":"import"},{"text":"Test","line":42,"char":1896,"type":"annotation"},{"text":"Parameters","line":45,"char":1987,"type":"annotation"},{"text":"Optional","line":46,"char":2038,"type":"annotation"},{"text":"Test","line":50,"char":2089,"type":"annotation"},{"text":"Test","line":94,"char":4191,"type":"annotation"},{"text":"Test","line":125,"char":5709,"type":"annotation"},{"text":"SuppressWarnings","line":126,"char":5718,"type":"annotation"},{"text":"Test","line":171,"char":7352,"type":"annotation"},{"text":"SuppressWarnings","line":172,"char":7361,"type":"annotation"},{"text":"Test","line":219,"char":9081,"type":"annotation"},{"text":"Test","line":227,"char":9332,"type":"annotation"},{"text":"Test","line":239,"char":9763,"type":"annotation"},{"text":"Test","line":257,"char":10510,"type":"annotation"},{"text":"SQLInsertTest","line":43,"char":1938,"type":"class"},{"text":"url","line":46,"char":2054,"type":"variable"},{"text":"clId","line":55,"char":2280,"type":"variable"},{"text":"profileClass","line":56,"char":2344,"type":"variable"},{"text":"addressId","line":62,"char":2601,"type":"variable"},{"text":"positions","line":64,"char":2709,"type":"variable"},{"text":"doc","line":69,"char":2905,"type":"variable"},{"text":"addressId","line":96,"char":4244,"type":"variable"},{"text":"positions","line":98,"char":4352,"type":"variable"},{"text":"doc","line":100,"char":4411,"type":"variable"},{"text":"doc","line":128,"char":5792,"type":"variable"},{"text":"entries","line":142,"char":6340,"type":"variable"},{"text":"doc","line":174,"char":7436,"type":"variable"},{"text":"entries","line":187,"char":7948,"type":"variable"},{"text":"doc","line":221,"char":9139,"type":"variable"},{"text":"schema","line":229,"char":9398,"type":"variable"},{"text":"doc","line":233,"char":9537,"type":"variable"},{"text":"schema","line":241,"char":9821,"type":"variable"},{"text":"usersCount","line":245,"char":9972,"type":"variable"},{"text":"uCount","line":246,"char":10078,"type":"variable"},{"text":"doc","line":248,"char":10138,"type":"variable"},{"text":"doc","line":259,"char":10600,"type":"variable"},{"text":"positions","line":268,"char":11015,"type":"variable"},{"text":"result","line":270,"char":11070,"type":"variable"},{"text":"record","line":275,"char":11315,"type":"variable"},{"text":"map","line":279,"char":11482,"type":"variable"},{"text":"inserted","line":289,"char":11876,"type":"variable"},{"text":"result","line":293,"char":12085,"type":"variable"},{"text":"r","line":295,"char":12237,"type":"variable"},{"text":"doc","line":309,"char":12719,"type":"variable"},{"text":"res1","line":314,"char":12963,"type":"variable"},{"text":"res2","line":319,"char":13256,"type":"variable"},{"text":"another","line":327,"char":13661,"type":"variable"},{"text":"sql","line":328,"char":13727,"type":"variable"},{"text":"res3","line":330,"char":13891,"type":"variable"},{"text":"res3doc","line":333,"char":14078,"type":"variable"},{"text":"sql2","line":341,"char":14563,"type":"variable"},{"text":"res_sql2","line":343,"char":14748,"type":"variable"},{"text":"sql3","line":348,"char":15062,"type":"variable"},{"text":"res_sql3","line":350,"char":15238,"type":"variable"},{"text":"sql3doc","line":353,"char":15448,"type":"variable"},{"text":"c","line":359,"char":15700,"type":"variable"},{"text":"doc","line":362,"char":15859,"type":"variable"},{"text":"addr","line":370,"char":16176,"type":"variable"},{"text":"o","line":371,"char":16239,"type":"variable"},{"text":"c","line":377,"char":16395,"type":"variable"},{"text":"doc","line":381,"char":16644,"type":"variable"},{"text":"addr","line":389,"char":16967,"type":"variable"},{"text":"o","line":390,"char":17032,"type":"variable"},{"text":"c","line":397,"char":17273,"type":"variable"},{"text":"doc","line":400,"char":17434,"type":"variable"},{"text":"addr","line":408,"char":17756,"type":"variable"},{"text":"o","line":409,"char":17820,"type":"variable"},{"text":"c","line":415,"char":17977,"type":"variable"},{"text":"doc","line":420,"char":18291,"type":"variable"},{"text":"addr","line":428,"char":18619,"type":"variable"},{"text":"o","line":429,"char":18685,"type":"variable"},{"text":"c","line":436,"char":18925,"type":"variable"},{"text":"doc","line":439,"char":19084,"type":"variable"},{"text":"addr","line":447,"char":19406,"type":"variable"},{"text":"o","line":448,"char":19469,"type":"variable"},{"text":"c","line":454,"char":19634,"type":"variable"},{"text":"doc","line":458,"char":19883,"type":"variable"},{"text":"addr","line":466,"char":20211,"type":"variable"},{"text":"o","line":467,"char":20276,"type":"variable"},{"text":"c","line":474,"char":20522,"type":"variable"},{"text":"doc","line":477,"char":20675,"type":"variable"},{"text":"c","line":486,"char":21014,"type":"variable"},{"text":"result","line":494,"char":21343,"type":"variable"},{"text":"found","line":497,"char":21491,"type":"variable"},{"text":"doc","line":498,"char":21521,"type":"variable"},{"text":"events","line":499,"char":21558,"type":"variable"},{"text":"event","line":500,"char":21605,"type":"variable"},{"text":"dateObj","line":502,"char":21685,"type":"variable"},{"text":"cal","line":504,"char":21787,"type":"variable"},{"text":"c","line":516,"char":22086,"type":"variable"},{"text":"doc","line":520,"char":22329,"type":"variable"},{"text":"c","line":530,"char":22814,"type":"variable"},{"text":"doc","line":534,"char":23066,"type":"variable"},{"text":"c","line":545,"char":23702,"type":"variable"},{"text":"doc","line":549,"char":23956,"type":"variable"},{"text":"c","line":560,"char":24584,"type":"variable"},{"text":"result","line":565,"char":24833,"type":"variable"},{"text":"result","line":577,"char":25485,"type":"variable"},{"text":"ed","line":579,"char":25643,"type":"variable"},{"text":"o","line":580,"char":25687,"type":"variable"},{"text":"clusterId","line":585,"char":25879,"type":"variable"},{"text":"positions","line":586,"char":25914,"type":"variable"},{"text":"iteratorCluster","line":588,"char":25988,"type":"variable"},{"text":"i","line":590,"char":26086,"type":"variable"},{"text":"doc","line":593,"char":26179,"type":"variable"},{"text":"insertOperator","line":51,"char":2109,"type":"method"},{"text":"insertWithWildcards","line":95,"char":4211,"type":"method"},{"text":"insertMap","line":127,"char":5763,"type":"method"},{"text":"insertList","line":173,"char":7406,"type":"method"},{"text":"insertWithNoSpaces","line":220,"char":9101,"type":"method"},{"text":"insertAvoidingSubQuery","line":228,"char":9352,"type":"method"},{"text":"insertSubQuery","line":240,"char":9783,"type":"method"},{"text":"insertCluster","line":258,"char":10567,"type":"method"},{"text":"updateMultipleFields","line":267,"char":10974,"type":"method"},{"text":"insertSelect","line":285,"char":11722,"type":"method"},{"text":"insertWithReturn","line":301,"char":12445,"type":"method"},{"text":"testAutoConversionOfEmbeddededSetNoLinkedClass","line":358,"char":15637,"type":"method"},{"text":"testAutoConversionOfEmbeddededSetWithLinkedClass","line":376,"char":16330,"type":"method"},{"text":"testAutoConversionOfEmbeddededListNoLinkedClass","line":396,"char":17209,"type":"method"},{"text":"testAutoConversionOfEmbeddededListWithLinkedClass","line":414,"char":17911,"type":"method"},{"text":"testAutoConversionOfEmbeddededMapNoLinkedClass","line":435,"char":18862,"type":"method"},{"text":"testAutoConversionOfEmbeddededMapWithLinkedClass","line":453,"char":19569,"type":"method"},{"text":"testAutoConversionOfEmbeddededNoLinkedClass","line":473,"char":20462,"type":"method"},{"text":"testEmbeddedDates","line":485,"char":20980,"type":"method"},{"text":"testAutoConversionOfEmbeddededWithLinkedClass","line":515,"char":22024,"type":"method"},{"text":"testInsertEmbeddedWithRecordAttributes","line":529,"char":22759,"type":"method"},{"text":"testInsertEmbeddedWithRecordAttributes2","line":544,"char":23646,"type":"method"},{"text":"testInsertWithClusterAsFieldName","line":559,"char":24535,"type":"method"},{"text":"testInsertEmbeddedBigDecimal","line":572,"char":25076,"type":"method"},{"text":"getValidPositions","line":585,"char":25857,"type":"method"},{"text":"groups","line":42,"char":1901,"type":"identifier"},{"text":"DocumentDBBaseTest","line":43,"char":1960,"type":"identifier"},{"text":"value","line":45,"char":1998,"type":"identifier"},{"text":"SQLInsertTest","line":46,"char":2023,"type":"identifier"},{"text":"String","line":46,"char":2047,"type":"identifier"},{"text":"url","line":47,"char":2072,"type":"identifier"},{"text":"database","line":52,"char":2138,"type":"identifier"},{"text":"getMetadata","line":52,"char":2147,"type":"identifier"},{"text":"getSchema","line":52,"char":2161,"type":"identifier"},{"text":"existsClass","line":52,"char":2173,"type":"identifier"},{"text":"database","line":53,"char":2204,"type":"identifier"},{"text":"getMetadata","line":53,"char":2213,"type":"identifier"},{"text":"getSchema","line":53,"char":2227,"type":"identifier"},{"text":"createClass","line":53,"char":2239,"type":"identifier"},{"text":"database","line":55,"char":2287,"type":"identifier"},{"text":"addCluster","line":55,"char":2296,"type":"identifier"},{"text":"OClass","line":56,"char":2337,"type":"identifier"},{"text":"database","line":56,"char":2359,"type":"identifier"},{"text":"getMetadata","line":56,"char":2368,"type":"identifier"},{"text":"getSchema","line":56,"char":2382,"type":"identifier"},{"text":"getClass","line":56,"char":2394,"type":"identifier"},{"text":"profileClass","line":57,"char":2420,"type":"identifier"},{"text":"addClusterId","line":57,"char":2433,"type":"identifier"},{"text":"clId","line":57,"char":2446,"type":"identifier"},{"text":"database","line":59,"char":2465,"type":"identifier"},{"text":"getMetadata","line":59,"char":2474,"type":"identifier"},{"text":"getSchema","line":59,"char":2488,"type":"identifier"},{"text":"existsClass","line":59,"char":2500,"type":"identifier"},{"text":"database","line":60,"char":2531,"type":"identifier"},{"text":"getMetadata","line":60,"char":2540,"type":"identifier"},{"text":"getSchema","line":60,"char":2554,"type":"identifier"},{"text":"createClass","line":60,"char":2566,"type":"identifier"},{"text":"database","line":62,"char":2613,"type":"identifier"},{"text":"getMetadata","line":62,"char":2622,"type":"identifier"},{"text":"getSchema","line":62,"char":2636,"type":"identifier"},{"text":"getClass","line":62,"char":2648,"type":"identifier"},{"text":"getDefaultClusterId","line":62,"char":2668,"type":"identifier"},{"text":"List","line":64,"char":2698,"type":"identifier"},{"text":"Long","line":64,"char":2703,"type":"identifier"},{"text":"getValidPositions","line":64,"char":2721,"type":"identifier"},{"text":"addressId","line":64,"char":2739,"type":"identifier"},{"text":"database","line":66,"char":2763,"type":"identifier"},{"text":"getMetadata","line":66,"char":2772,"type":"identifier"},{"text":"getSchema","line":66,"char":2786,"type":"identifier"},{"text":"existsClass","line":66,"char":2798,"type":"identifier"},{"text":"database","line":67,"char":2829,"type":"identifier"},{"text":"getMetadata","line":67,"char":2838,"type":"identifier"},{"text":"getSchema","line":67,"char":2852,"type":"identifier"},{"text":"createClass","line":67,"char":2864,"type":"identifier"},{"text":"ODocument","line":69,"char":2895,"type":"identifier"},{"text":"ODocument","line":69,"char":2912,"type":"identifier"},{"text":"database","line":69,"char":2923,"type":"identifier"},{"text":"command","line":69,"char":2932,"type":"identifier"},{"text":"OCommandSQL","line":70,"char":2954,"type":"identifier"},{"text":"addressId","line":70,"char":3064,"type":"identifier"},{"text":"positions","line":71,"char":3095,"type":"identifier"},{"text":"get","line":71,"char":3105,"type":"identifier"},{"text":"execute","line":71,"char":3130,"type":"identifier"},{"text":"Assert","line":73,"char":3148,"type":"identifier"},{"text":"assertTrue","line":73,"char":3155,"type":"identifier"},{"text":"doc","line":73,"char":3166,"type":"identifier"},{"text":"Assert","line":74,"char":3185,"type":"identifier"},{"text":"assertEquals","line":74,"char":3192,"type":"identifier"},{"text":"doc","line":74,"char":3205,"type":"identifier"},{"text":"field","line":74,"char":3209,"type":"identifier"},{"text":"Assert","line":75,"char":3238,"type":"identifier"},{"text":"assertEquals","line":75,"char":3245,"type":"identifier"},{"text":"doc","line":75,"char":3258,"type":"identifier"},{"text":"field","line":75,"char":3262,"type":"identifier"},{"text":"Assert","line":76,"char":3295,"type":"identifier"},{"text":"assertEquals","line":76,"char":3302,"type":"identifier"},{"text":"Number","line":76,"char":3317,"type":"identifier"},{"text":"doc","line":76,"char":3325,"type":"identifier"},{"text":"field","line":76,"char":3329,"type":"identifier"},{"text":"floatValue","line":76,"char":3346,"type":"identifier"},{"text":"Assert","line":77,"char":3374,"type":"identifier"},{"text":"assertEquals","line":77,"char":3381,"type":"identifier"},{"text":"doc","line":77,"char":3394,"type":"identifier"},{"text":"field","line":77,"char":3398,"type":"identifier"},{"text":"ORecordId","line":77,"char":3421,"type":"identifier"},{"text":"addressId","line":77,"char":3431,"type":"identifier"},{"text":"positions","line":77,"char":3442,"type":"identifier"},{"text":"get","line":77,"char":3452,"type":"identifier"},{"text":"Assert","line":78,"char":3467,"type":"identifier"},{"text":"assertEquals","line":78,"char":3474,"type":"identifier"},{"text":"doc","line":78,"char":3487,"type":"identifier"},{"text":"field","line":78,"char":3491,"type":"identifier"},{"text":"doc","line":80,"char":3525,"type":"identifier"},{"text":"ODocument","line":80,"char":3532,"type":"identifier"},{"text":"database","line":80,"char":3543,"type":"identifier"},{"text":"command","line":80,"char":3552,"type":"identifier"},{"text":"OCommandSQL","line":81,"char":3574,"type":"identifier"},{"text":"addressId","line":81,"char":3677,"type":"identifier"},{"text":"positions","line":82,"char":3708,"type":"identifier"},{"text":"get","line":82,"char":3718,"type":"identifier"},{"text":"execute","line":82,"char":3751,"type":"identifier"},{"text":"database","line":84,"char":3769,"type":"identifier"},{"text":"delete","line":84,"char":3778,"type":"identifier"},{"text":"doc","line":84,"char":3785,"type":"identifier"},{"text":"Assert","line":86,"char":3798,"type":"identifier"},{"text":"assertTrue","line":86,"char":3805,"type":"identifier"},{"text":"doc","line":86,"char":3816,"type":"identifier"},{"text":"Assert","line":87,"char":3835,"type":"identifier"},{"text":"assertEquals","line":87,"char":3842,"type":"identifier"},{"text":"doc","line":87,"char":3855,"type":"identifier"},{"text":"field","line":87,"char":3859,"type":"identifier"},{"text":"Assert","line":88,"char":3888,"type":"identifier"},{"text":"assertEquals","line":88,"char":3895,"type":"identifier"},{"text":"doc","line":88,"char":3908,"type":"identifier"},{"text":"field","line":88,"char":3912,"type":"identifier"},{"text":"Assert","line":89,"char":3945,"type":"identifier"},{"text":"assertEquals","line":89,"char":3952,"type":"identifier"},{"text":"Number","line":89,"char":3967,"type":"identifier"},{"text":"doc","line":89,"char":3975,"type":"identifier"},{"text":"field","line":89,"char":3979,"type":"identifier"},{"text":"floatValue","line":89,"char":3996,"type":"identifier"},{"text":"Assert","line":90,"char":4024,"type":"identifier"},{"text":"assertEquals","line":90,"char":4031,"type":"identifier"},{"text":"doc","line":90,"char":4044,"type":"identifier"},{"text":"field","line":90,"char":4048,"type":"identifier"},{"text":"OType","line":90,"char":4066,"type":"identifier"},{"text":"LINK","line":90,"char":4072,"type":"identifier"},{"text":"ORecordId","line":90,"char":4083,"type":"identifier"},{"text":"addressId","line":90,"char":4093,"type":"identifier"},{"text":"positions","line":90,"char":4104,"type":"identifier"},{"text":"get","line":90,"char":4114,"type":"identifier"},{"text":"Assert","line":91,"char":4129,"type":"identifier"},{"text":"assertEquals","line":91,"char":4136,"type":"identifier"},{"text":"doc","line":91,"char":4149,"type":"identifier"},{"text":"field","line":91,"char":4153,"type":"identifier"},{"text":"database","line":96,"char":4256,"type":"identifier"},{"text":"getMetadata","line":96,"char":4265,"type":"identifier"},{"text":"getSchema","line":96,"char":4279,"type":"identifier"},{"text":"getClass","line":96,"char":4291,"type":"identifier"},{"text":"getDefaultClusterId","line":96,"char":4311,"type":"identifier"},{"text":"List","line":98,"char":4341,"type":"identifier"},{"text":"Long","line":98,"char":4346,"type":"identifier"},{"text":"getValidPositions","line":98,"char":4364,"type":"identifier"},{"text":"addressId","line":98,"char":4382,"type":"identifier"},{"text":"ODocument","line":100,"char":4401,"type":"identifier"},{"text":"ODocument","line":100,"char":4418,"type":"identifier"},{"text":"database","line":100,"char":4429,"type":"identifier"},{"text":"command","line":100,"char":4438,"type":"identifier"},{"text":"OCommandSQL","line":101,"char":4460,"type":"identifier"},{"text":"execute","line":101,"char":4556,"type":"identifier"},{"text":"ORecordId","line":102,"char":4601,"type":"identifier"},{"text":"addressId","line":102,"char":4611,"type":"identifier"},{"text":"positions","line":102,"char":4622,"type":"identifier"},{"text":"get","line":102,"char":4632,"type":"identifier"},{"text":"Assert","line":104,"char":4659,"type":"identifier"},{"text":"assertTrue","line":104,"char":4666,"type":"identifier"},{"text":"doc","line":104,"char":4677,"type":"identifier"},{"text":"Assert","line":105,"char":4696,"type":"identifier"},{"text":"assertEquals","line":105,"char":4703,"type":"identifier"},{"text":"doc","line":105,"char":4716,"type":"identifier"},{"text":"field","line":105,"char":4720,"type":"identifier"},{"text":"Assert","line":106,"char":4749,"type":"identifier"},{"text":"assertEquals","line":106,"char":4756,"type":"identifier"},{"text":"doc","line":106,"char":4769,"type":"identifier"},{"text":"field","line":106,"char":4773,"type":"identifier"},{"text":"Assert","line":107,"char":4806,"type":"identifier"},{"text":"assertEquals","line":107,"char":4813,"type":"identifier"},{"text":"Number","line":107,"char":4828,"type":"identifier"},{"text":"doc","line":107,"char":4836,"type":"identifier"},{"text":"field","line":107,"char":4840,"type":"identifier"},{"text":"floatValue","line":107,"char":4857,"type":"identifier"},{"text":"Assert","line":108,"char":4885,"type":"identifier"},{"text":"assertEquals","line":108,"char":4892,"type":"identifier"},{"text":"doc","line":108,"char":4905,"type":"identifier"},{"text":"field","line":108,"char":4909,"type":"identifier"},{"text":"ORecordId","line":108,"char":4932,"type":"identifier"},{"text":"addressId","line":108,"char":4942,"type":"identifier"},{"text":"positions","line":108,"char":4953,"type":"identifier"},{"text":"get","line":108,"char":4963,"type":"identifier"},{"text":"Assert","line":109,"char":4978,"type":"identifier"},{"text":"assertEquals","line":109,"char":4985,"type":"identifier"},{"text":"doc","line":109,"char":4998,"type":"identifier"},{"text":"field","line":109,"char":5002,"type":"identifier"},{"text":"database","line":111,"char":5036,"type":"identifier"},{"text":"delete","line":111,"char":5045,"type":"identifier"},{"text":"doc","line":111,"char":5052,"type":"identifier"},{"text":"doc","line":113,"char":5065,"type":"identifier"},{"text":"ODocument","line":113,"char":5072,"type":"identifier"},{"text":"database","line":113,"char":5083,"type":"identifier"},{"text":"command","line":113,"char":5092,"type":"identifier"},{"text":"OCommandSQL","line":114,"char":5114,"type":"identifier"},{"text":"execute","line":114,"char":5213,"type":"identifier"},{"text":"ORecordId","line":115,"char":5258,"type":"identifier"},{"text":"addressId","line":115,"char":5268,"type":"identifier"},{"text":"positions","line":115,"char":5279,"type":"identifier"},{"text":"get","line":115,"char":5289,"type":"identifier"},{"text":"Assert","line":117,"char":5316,"type":"identifier"},{"text":"assertTrue","line":117,"char":5323,"type":"identifier"},{"text":"doc","line":117,"char":5334,"type":"identifier"},{"text":"Assert","line":118,"char":5353,"type":"identifier"},{"text":"assertEquals","line":118,"char":5360,"type":"identifier"},{"text":"doc","line":118,"char":5373,"type":"identifier"},{"text":"field","line":118,"char":5377,"type":"identifier"},{"text":"Assert","line":119,"char":5406,"type":"identifier"},{"text":"assertEquals","line":119,"char":5413,"type":"identifier"},{"text":"doc","line":119,"char":5426,"type":"identifier"},{"text":"field","line":119,"char":5430,"type":"identifier"},{"text":"Assert","line":120,"char":5463,"type":"identifier"},{"text":"assertEquals","line":120,"char":5470,"type":"identifier"},{"text":"Number","line":120,"char":5485,"type":"identifier"},{"text":"doc","line":120,"char":5493,"type":"identifier"},{"text":"field","line":120,"char":5497,"type":"identifier"},{"text":"floatValue","line":120,"char":5514,"type":"identifier"},{"text":"Assert","line":121,"char":5542,"type":"identifier"},{"text":"assertEquals","line":121,"char":5549,"type":"identifier"},{"text":"doc","line":121,"char":5562,"type":"identifier"},{"text":"field","line":121,"char":5566,"type":"identifier"},{"text":"OType","line":121,"char":5584,"type":"identifier"},{"text":"LINK","line":121,"char":5590,"type":"identifier"},{"text":"ORecordId","line":121,"char":5601,"type":"identifier"},{"text":"addressId","line":121,"char":5611,"type":"identifier"},{"text":"positions","line":121,"char":5622,"type":"identifier"},{"text":"get","line":121,"char":5632,"type":"identifier"},{"text":"Assert","line":122,"char":5647,"type":"identifier"},{"text":"assertEquals","line":122,"char":5654,"type":"identifier"},{"text":"doc","line":122,"char":5667,"type":"identifier"},{"text":"field","line":122,"char":5671,"type":"identifier"},{"text":"ODocument","line":128,"char":5782,"type":"identifier"},{"text":"ODocument","line":128,"char":5799,"type":"identifier"},{"text":"database","line":128,"char":5810,"type":"identifier"},{"text":"command","line":129,"char":5829,"type":"identifier"},{"text":"OCommandSQL","line":130,"char":5855,"type":"identifier"},{"text":"execute","line":132,"char":6019,"type":"identifier"},{"text":"Assert","line":134,"char":6037,"type":"identifier"},{"text":"assertTrue","line":134,"char":6044,"type":"identifier"},{"text":"doc","line":134,"char":6055,"type":"identifier"},{"text":"doc","line":136,"char":6076,"type":"identifier"},{"text":"ODocument","line":136,"char":6083,"type":"identifier"},{"text":"ODocument","line":136,"char":6098,"type":"identifier"},{"text":"doc","line":136,"char":6108,"type":"identifier"},{"text":"getIdentity","line":136,"char":6112,"type":"identifier"},{"text":"load","line":136,"char":6127,"type":"identifier"},{"text":"Assert","line":138,"char":6142,"type":"identifier"},{"text":"assertEquals","line":138,"char":6149,"type":"identifier"},{"text":"doc","line":138,"char":6162,"type":"identifier"},{"text":"field","line":138,"char":6166,"type":"identifier"},{"text":"Assert","line":139,"char":6199,"type":"identifier"},{"text":"assertEquals","line":139,"char":6206,"type":"identifier"},{"text":"doc","line":139,"char":6219,"type":"identifier"},{"text":"field","line":139,"char":6223,"type":"identifier"},{"text":"Assert","line":140,"char":6254,"type":"identifier"},{"text":"assertTrue","line":140,"char":6261,"type":"identifier"},{"text":"doc","line":140,"char":6272,"type":"identifier"},{"text":"field","line":140,"char":6276,"type":"identifier"},{"text":"Map","line":140,"char":6307,"type":"identifier"},{"text":"Map","line":142,"char":6320,"type":"identifier"},{"text":"Object","line":142,"char":6324,"type":"identifier"},{"text":"Object","line":142,"char":6332,"type":"identifier"},{"text":"Map","line":142,"char":6352,"type":"identifier"},{"text":"Object","line":142,"char":6356,"type":"identifier"},{"text":"Object","line":142,"char":6364,"type":"identifier"},{"text":"doc","line":142,"char":6373,"type":"identifier"},{"text":"field","line":142,"char":6377,"type":"identifier"},{"text":"Assert","line":143,"char":6404,"type":"identifier"},{"text":"assertEquals","line":143,"char":6411,"type":"identifier"},{"text":"entries","line":143,"char":6424,"type":"identifier"},{"text":"size","line":143,"char":6432,"type":"identifier"},{"text":"Assert","line":145,"char":6451,"type":"identifier"},{"text":"assertEquals","line":145,"char":6458,"type":"identifier"},{"text":"entries","line":145,"char":6471,"type":"identifier"},{"text":"get","line":145,"char":6479,"type":"identifier"},{"text":"Assert","line":146,"char":6507,"type":"identifier"},{"text":"assertEquals","line":146,"char":6514,"type":"identifier"},{"text":"entries","line":146,"char":6527,"type":"identifier"},{"text":"get","line":146,"char":6535,"type":"identifier"},{"text":"database","line":148,"char":6567,"type":"identifier"},{"text":"delete","line":148,"char":6576,"type":"identifier"},{"text":"doc","line":148,"char":6583,"type":"identifier"},{"text":"doc","line":150,"char":6596,"type":"identifier"},{"text":"ODocument","line":150,"char":6603,"type":"identifier"},{"text":"database","line":150,"char":6614,"type":"identifier"},{"text":"command","line":151,"char":6633,"type":"identifier"},{"text":"OCommandSQL","line":152,"char":6659,"type":"identifier"},{"text":"execute","line":154,"char":6820,"type":"identifier"},{"text":"Assert","line":156,"char":6838,"type":"identifier"},{"text":"assertTrue","line":156,"char":6845,"type":"identifier"},{"text":"doc","line":156,"char":6856,"type":"identifier"},{"text":"doc","line":158,"char":6877,"type":"identifier"},{"text":"ODocument","line":158,"char":6884,"type":"identifier"},{"text":"ODocument","line":158,"char":6899,"type":"identifier"},{"text":"doc","line":158,"char":6909,"type":"identifier"},{"text":"getIdentity","line":158,"char":6913,"type":"identifier"},{"text":"load","line":158,"char":6928,"type":"identifier"},{"text":"Assert","line":160,"char":6943,"type":"identifier"},{"text":"assertEquals","line":160,"char":6950,"type":"identifier"},{"text":"doc","line":160,"char":6963,"type":"identifier"},{"text":"field","line":160,"char":6967,"type":"identifier"},{"text":"Assert","line":161,"char":7000,"type":"identifier"},{"text":"assertEquals","line":161,"char":7007,"type":"identifier"},{"text":"doc","line":161,"char":7020,"type":"identifier"},{"text":"field","line":161,"char":7024,"type":"identifier"},{"text":"Assert","line":162,"char":7055,"type":"identifier"},{"text":"assertTrue","line":162,"char":7062,"type":"identifier"},{"text":"doc","line":162,"char":7073,"type":"identifier"},{"text":"field","line":162,"char":7077,"type":"identifier"},{"text":"Map","line":162,"char":7108,"type":"identifier"},{"text":"entries","line":164,"char":7121,"type":"identifier"},{"text":"Map","line":164,"char":7133,"type":"identifier"},{"text":"Object","line":164,"char":7137,"type":"identifier"},{"text":"Object","line":164,"char":7145,"type":"identifier"},{"text":"doc","line":164,"char":7154,"type":"identifier"},{"text":"field","line":164,"char":7158,"type":"identifier"},{"text":"Assert","line":165,"char":7185,"type":"identifier"},{"text":"assertEquals","line":165,"char":7192,"type":"identifier"},{"text":"entries","line":165,"char":7205,"type":"identifier"},{"text":"size","line":165,"char":7213,"type":"identifier"},{"text":"Assert","line":167,"char":7232,"type":"identifier"},{"text":"assertEquals","line":167,"char":7239,"type":"identifier"},{"text":"entries","line":167,"char":7252,"type":"identifier"},{"text":"get","line":167,"char":7260,"type":"identifier"},{"text":"Assert","line":168,"char":7288,"type":"identifier"},{"text":"assertEquals","line":168,"char":7295,"type":"identifier"},{"text":"entries","line":168,"char":7308,"type":"identifier"},{"text":"get","line":168,"char":7316,"type":"identifier"},{"text":"ODocument","line":174,"char":7426,"type":"identifier"},{"text":"ODocument","line":174,"char":7443,"type":"identifier"},{"text":"database","line":174,"char":7454,"type":"identifier"},{"text":"command","line":174,"char":7463,"type":"identifier"},{"text":"OCommandSQL","line":175,"char":7485,"type":"identifier"},{"text":"execute","line":177,"char":7638,"type":"identifier"},{"text":"Assert","line":179,"char":7656,"type":"identifier"},{"text":"assertTrue","line":179,"char":7663,"type":"identifier"},{"text":"doc","line":179,"char":7674,"type":"identifier"},{"text":"doc","line":181,"char":7695,"type":"identifier"},{"text":"ODocument","line":181,"char":7702,"type":"identifier"},{"text":"ODocument","line":181,"char":7717,"type":"identifier"},{"text":"doc","line":181,"char":7727,"type":"identifier"},{"text":"getIdentity","line":181,"char":7731,"type":"identifier"},{"text":"load","line":181,"char":7746,"type":"identifier"},{"text":"Assert","line":183,"char":7761,"type":"identifier"},{"text":"assertEquals","line":183,"char":7768,"type":"identifier"},{"text":"doc","line":183,"char":7781,"type":"identifier"},{"text":"field","line":183,"char":7785,"type":"identifier"},{"text":"Assert","line":184,"char":7819,"type":"identifier"},{"text":"assertEquals","line":184,"char":7826,"type":"identifier"},{"text":"doc","line":184,"char":7839,"type":"identifier"},{"text":"field","line":184,"char":7843,"type":"identifier"},{"text":"Assert","line":185,"char":7874,"type":"identifier"},{"text":"assertTrue","line":185,"char":7881,"type":"identifier"},{"text":"doc","line":185,"char":7892,"type":"identifier"},{"text":"field","line":185,"char":7896,"type":"identifier"},{"text":"List","line":185,"char":7921,"type":"identifier"},{"text":"List","line":187,"char":7935,"type":"identifier"},{"text":"Object","line":187,"char":7940,"type":"identifier"},{"text":"List","line":187,"char":7960,"type":"identifier"},{"text":"Object","line":187,"char":7965,"type":"identifier"},{"text":"doc","line":187,"char":7974,"type":"identifier"},{"text":"field","line":187,"char":7978,"type":"identifier"},{"text":"Assert","line":188,"char":7999,"type":"identifier"},{"text":"assertEquals","line":188,"char":8006,"type":"identifier"},{"text":"entries","line":188,"char":8019,"type":"identifier"},{"text":"size","line":188,"char":8027,"type":"identifier"},{"text":"Assert","line":190,"char":8046,"type":"identifier"},{"text":"assertEquals","line":190,"char":8053,"type":"identifier"},{"text":"entries","line":190,"char":8066,"type":"identifier"},{"text":"get","line":190,"char":8074,"type":"identifier"},{"text":"Assert","line":191,"char":8098,"type":"identifier"},{"text":"assertEquals","line":191,"char":8105,"type":"identifier"},{"text":"entries","line":191,"char":8118,"type":"identifier"},{"text":"get","line":191,"char":8126,"type":"identifier"},{"text":"Assert","line":192,"char":8147,"type":"identifier"},{"text":"assertEquals","line":192,"char":8154,"type":"identifier"},{"text":"entries","line":192,"char":8167,"type":"identifier"},{"text":"get","line":192,"char":8175,"type":"identifier"},{"text":"Assert","line":193,"char":8197,"type":"identifier"},{"text":"assertEquals","line":193,"char":8204,"type":"identifier"},{"text":"entries","line":193,"char":8217,"type":"identifier"},{"text":"get","line":193,"char":8225,"type":"identifier"},{"text":"database","line":195,"char":8250,"type":"identifier"},{"text":"delete","line":195,"char":8259,"type":"identifier"},{"text":"doc","line":195,"char":8266,"type":"identifier"},{"text":"doc","line":197,"char":8279,"type":"identifier"},{"text":"ODocument","line":197,"char":8286,"type":"identifier"},{"text":"database","line":197,"char":8297,"type":"identifier"},{"text":"command","line":197,"char":8306,"type":"identifier"},{"text":"OCommandSQL","line":198,"char":8328,"type":"identifier"},{"text":"execute","line":200,"char":8478,"type":"identifier"},{"text":"Assert","line":202,"char":8496,"type":"identifier"},{"text":"assertTrue","line":202,"char":8503,"type":"identifier"},{"text":"doc","line":202,"char":8514,"type":"identifier"},{"text":"doc","line":204,"char":8535,"type":"identifier"},{"text":"ODocument","line":204,"char":8542,"type":"identifier"},{"text":"ODocument","line":204,"char":8557,"type":"identifier"},{"text":"doc","line":204,"char":8567,"type":"identifier"},{"text":"getIdentity","line":204,"char":8571,"type":"identifier"},{"text":"load","line":204,"char":8586,"type":"identifier"},{"text":"Assert","line":206,"char":8601,"type":"identifier"},{"text":"assertEquals","line":206,"char":8608,"type":"identifier"},{"text":"doc","line":206,"char":8621,"type":"identifier"},{"text":"field","line":206,"char":8625,"type":"identifier"},{"text":"Assert","line":207,"char":8659,"type":"identifier"},{"text":"assertEquals","line":207,"char":8666,"type":"identifier"},{"text":"doc","line":207,"char":8679,"type":"identifier"},{"text":"field","line":207,"char":8683,"type":"identifier"},{"text":"Assert","line":208,"char":8714,"type":"identifier"},{"text":"assertTrue","line":208,"char":8721,"type":"identifier"},{"text":"doc","line":208,"char":8732,"type":"identifier"},{"text":"field","line":208,"char":8736,"type":"identifier"},{"text":"List","line":208,"char":8761,"type":"identifier"},{"text":"entries","line":210,"char":8775,"type":"identifier"},{"text":"List","line":210,"char":8787,"type":"identifier"},{"text":"Object","line":210,"char":8792,"type":"identifier"},{"text":"doc","line":210,"char":8801,"type":"identifier"},{"text":"field","line":210,"char":8805,"type":"identifier"},{"text":"Assert","line":211,"char":8826,"type":"identifier"},{"text":"assertEquals","line":211,"char":8833,"type":"identifier"},{"text":"entries","line":211,"char":8846,"type":"identifier"},{"text":"size","line":211,"char":8854,"type":"identifier"},{"text":"Assert","line":213,"char":8873,"type":"identifier"},{"text":"assertEquals","line":213,"char":8880,"type":"identifier"},{"text":"entries","line":213,"char":8893,"type":"identifier"},{"text":"get","line":213,"char":8901,"type":"identifier"},{"text":"Assert","line":214,"char":8925,"type":"identifier"},{"text":"assertEquals","line":214,"char":8932,"type":"identifier"},{"text":"entries","line":214,"char":8945,"type":"identifier"},{"text":"get","line":214,"char":8953,"type":"identifier"},{"text":"Assert","line":215,"char":8974,"type":"identifier"},{"text":"assertEquals","line":215,"char":8981,"type":"identifier"},{"text":"entries","line":215,"char":8994,"type":"identifier"},{"text":"get","line":215,"char":9002,"type":"identifier"},{"text":"Assert","line":216,"char":9024,"type":"identifier"},{"text":"assertEquals","line":216,"char":9031,"type":"identifier"},{"text":"entries","line":216,"char":9044,"type":"identifier"},{"text":"get","line":216,"char":9052,"type":"identifier"},{"text":"ODocument","line":221,"char":9129,"type":"identifier"},{"text":"ODocument","line":221,"char":9146,"type":"identifier"},{"text":"database","line":221,"char":9157,"type":"identifier"},{"text":"command","line":221,"char":9166,"type":"identifier"},{"text":"OCommandSQL","line":222,"char":9188,"type":"identifier"},{"text":"execute","line":222,"char":9271,"type":"identifier"},{"text":"Assert","line":224,"char":9289,"type":"identifier"},{"text":"assertTrue","line":224,"char":9296,"type":"identifier"},{"text":"doc","line":224,"char":9307,"type":"identifier"},{"text":"OSchema","line":229,"char":9390,"type":"identifier"},{"text":"database","line":229,"char":9407,"type":"identifier"},{"text":"getMetadata","line":229,"char":9416,"type":"identifier"},{"text":"getSchema","line":229,"char":9430,"type":"identifier"},{"text":"schema","line":230,"char":9452,"type":"identifier"},{"text":"getClass","line":230,"char":9459,"type":"identifier"},{"text":"schema","line":231,"char":9492,"type":"identifier"},{"text":"createClass","line":231,"char":9499,"type":"identifier"},{"text":"ODocument","line":233,"char":9527,"type":"identifier"},{"text":"ODocument","line":233,"char":9544,"type":"identifier"},{"text":"database","line":233,"char":9555,"type":"identifier"},{"text":"command","line":233,"char":9564,"type":"identifier"},{"text":"OCommandSQL","line":233,"char":9576,"type":"identifier"},{"text":"execute","line":233,"char":9640,"type":"identifier"},{"text":"Assert","line":235,"char":9658,"type":"identifier"},{"text":"assertTrue","line":235,"char":9665,"type":"identifier"},{"text":"doc","line":235,"char":9676,"type":"identifier"},{"text":"Assert","line":236,"char":9695,"type":"identifier"},{"text":"assertEquals","line":236,"char":9702,"type":"identifier"},{"text":"doc","line":236,"char":9715,"type":"identifier"},{"text":"field","line":236,"char":9719,"type":"identifier"},{"text":"OSchema","line":241,"char":9813,"type":"identifier"},{"text":"database","line":241,"char":9830,"type":"identifier"},{"text":"getMetadata","line":241,"char":9839,"type":"identifier"},{"text":"getSchema","line":241,"char":9853,"type":"identifier"},{"text":"schema","line":242,"char":9875,"type":"identifier"},{"text":"getClass","line":242,"char":9882,"type":"identifier"},{"text":"schema","line":243,"char":9915,"type":"identifier"},{"text":"createClass","line":243,"char":9922,"type":"identifier"},{"text":"List","line":245,"char":9956,"type":"identifier"},{"text":"ODocument","line":245,"char":9961,"type":"identifier"},{"text":"database","line":245,"char":9985,"type":"identifier"},{"text":"query","line":245,"char":9994,"type":"identifier"},{"text":"OSQLSynchQuery","line":245,"char":10004,"type":"identifier"},{"text":"ODocument","line":245,"char":10019,"type":"identifier"},{"text":"usersCount","line":246,"char":10087,"type":"identifier"},{"text":"get","line":246,"char":10098,"type":"identifier"},{"text":"field","line":246,"char":10105,"type":"identifier"},{"text":"ODocument","line":248,"char":10128,"type":"identifier"},{"text":"ODocument","line":248,"char":10145,"type":"identifier"},{"text":"database","line":248,"char":10156,"type":"identifier"},{"text":"command","line":248,"char":10165,"type":"identifier"},{"text":"OCommandSQL","line":248,"char":10177,"type":"identifier"},{"text":"execute","line":249,"char":10257,"type":"identifier"},{"text":"Assert","line":251,"char":10275,"type":"identifier"},{"text":"assertTrue","line":251,"char":10282,"type":"identifier"},{"text":"doc","line":251,"char":10293,"type":"identifier"},{"text":"Assert","line":252,"char":10312,"type":"identifier"},{"text":"assertNotNull","line":252,"char":10319,"type":"identifier"},{"text":"doc","line":252,"char":10333,"type":"identifier"},{"text":"field","line":252,"char":10337,"type":"identifier"},{"text":"Assert","line":253,"char":10359,"type":"identifier"},{"text":"assertTrue","line":253,"char":10366,"type":"identifier"},{"text":"doc","line":253,"char":10377,"type":"identifier"},{"text":"field","line":253,"char":10381,"type":"identifier"},{"text":"Collection","line":253,"char":10407,"type":"identifier"},{"text":"Assert","line":254,"char":10425,"type":"identifier"},{"text":"assertEquals","line":254,"char":10432,"type":"identifier"},{"text":"Collection","line":254,"char":10447,"type":"identifier"},{"text":"doc","line":254,"char":10462,"type":"identifier"},{"text":"field","line":254,"char":10466,"type":"identifier"},{"text":"size","line":254,"char":10482,"type":"identifier"},{"text":"uCount","line":254,"char":10490,"type":"identifier"},{"text":"dependsOnMethods","line":257,"char":10515,"type":"identifier"},{"text":"ODocument","line":259,"char":10590,"type":"identifier"},{"text":"database","line":259,"char":10606,"type":"identifier"},{"text":"command","line":259,"char":10615,"type":"identifier"},{"text":"OCommandSQL","line":260,"char":10637,"type":"identifier"},{"text":"execute","line":260,"char":10738,"type":"identifier"},{"text":"Assert","line":262,"char":10756,"type":"identifier"},{"text":"assertTrue","line":262,"char":10763,"type":"identifier"},{"text":"doc","line":262,"char":10774,"type":"identifier"},{"text":"Assert","line":263,"char":10793,"type":"identifier"},{"text":"assertEquals","line":263,"char":10800,"type":"identifier"},{"text":"doc","line":263,"char":10813,"type":"identifier"},{"text":"getIdentity","line":263,"char":10817,"type":"identifier"},{"text":"getClusterId","line":263,"char":10831,"type":"identifier"},{"text":"database","line":263,"char":10847,"type":"identifier"},{"text":"getClusterIdByName","line":263,"char":10856,"type":"identifier"},{"text":"Assert","line":264,"char":10900,"type":"identifier"},{"text":"assertEquals","line":264,"char":10907,"type":"identifier"},{"text":"doc","line":264,"char":10920,"type":"identifier"},{"text":"getClassName","line":264,"char":10924,"type":"identifier"},{"text":"List","line":268,"char":11004,"type":"identifier"},{"text":"Long","line":268,"char":11009,"type":"identifier"},{"text":"getValidPositions","line":268,"char":11027,"type":"identifier"},{"text":"OIdentifiable","line":270,"char":11056,"type":"identifier"},{"text":"database","line":270,"char":11079,"type":"identifier"},{"text":"command","line":270,"char":11088,"type":"identifier"},{"text":"OCommandSQL","line":271,"char":11110,"type":"identifier"},{"text":"positions","line":272,"char":11233,"type":"identifier"},{"text":"get","line":272,"char":11243,"type":"identifier"},{"text":"execute","line":272,"char":11252,"type":"identifier"},{"text":"Assert","line":273,"char":11268,"type":"identifier"},{"text":"assertNotNull","line":273,"char":11275,"type":"identifier"},{"text":"result","line":273,"char":11289,"type":"identifier"},{"text":"ODocument","line":275,"char":11305,"type":"identifier"},{"text":"result","line":275,"char":11324,"type":"identifier"},{"text":"getRecord","line":275,"char":11331,"type":"identifier"},{"text":"Assert","line":277,"char":11351,"type":"identifier"},{"text":"assertEquals","line":277,"char":11358,"type":"identifier"},{"text":"record","line":277,"char":11371,"type":"identifier"},{"text":"field","line":277,"char":11378,"type":"identifier"},{"text":"Assert","line":278,"char":11403,"type":"identifier"},{"text":"assertEquals","line":278,"char":11410,"type":"identifier"},{"text":"record","line":278,"char":11423,"type":"identifier"},{"text":"field","line":278,"char":11430,"type":"identifier"},{"text":"Map","line":279,"char":11462,"type":"identifier"},{"text":"String","line":279,"char":11466,"type":"identifier"},{"text":"String","line":279,"char":11474,"type":"identifier"},{"text":"record","line":279,"char":11488,"type":"identifier"},{"text":"field","line":279,"char":11495,"type":"identifier"},{"text":"Assert","line":280,"char":11514,"type":"identifier"},{"text":"assertTrue","line":280,"char":11521,"type":"identifier"},{"text":"map","line":280,"char":11532,"type":"identifier"},{"text":"get","line":280,"char":11536,"type":"identifier"},{"text":"equals","line":280,"char":11547,"type":"identifier"},{"text":"Assert","line":281,"char":11570,"type":"identifier"},{"text":"assertEquals","line":281,"char":11577,"type":"identifier"},{"text":"record","line":281,"char":11590,"type":"identifier"},{"text":"field","line":281,"char":11597,"type":"identifier"},{"text":"Assert","line":282,"char":11621,"type":"identifier"},{"text":"assertEquals","line":282,"char":11628,"type":"identifier"},{"text":"record","line":282,"char":11641,"type":"identifier"},{"text":"field","line":282,"char":11648,"type":"identifier"},{"text":"ORecordId","line":282,"char":11667,"type":"identifier"},{"text":"positions","line":282,"char":11680,"type":"identifier"},{"text":"get","line":282,"char":11690,"type":"identifier"},{"text":"database","line":286,"char":11744,"type":"identifier"},{"text":"command","line":286,"char":11753,"type":"identifier"},{"text":"OCommandSQL","line":286,"char":11765,"type":"identifier"},{"text":"execute","line":286,"char":11803,"type":"identifier"},{"text":"database","line":287,"char":11819,"type":"identifier"},{"text":"getMetadata","line":287,"char":11828,"type":"identifier"},{"text":"getSchema","line":287,"char":11842,"type":"identifier"},{"text":"reload","line":287,"char":11854,"type":"identifier"},{"text":"database","line":289,"char":11887,"type":"identifier"},{"text":"command","line":289,"char":11896,"type":"identifier"},{"text":"OCommandSQL","line":289,"char":11908,"type":"identifier"},{"text":"execute","line":290,"char":12008,"type":"identifier"},{"text":"Assert","line":291,"char":12024,"type":"identifier"},{"text":"assertEquals","line":291,"char":12031,"type":"identifier"},{"text":"inserted","line":291,"char":12044,"type":"identifier"},{"text":"List","line":293,"char":12065,"type":"identifier"},{"text":"OIdentifiable","line":293,"char":12070,"type":"identifier"},{"text":"database","line":293,"char":12094,"type":"identifier"},{"text":"query","line":293,"char":12103,"type":"identifier"},{"text":"OSQLSynchQuery","line":293,"char":12113,"type":"identifier"},{"text":"OIdentifiable","line":293,"char":12128,"type":"identifier"},{"text":"Assert","line":294,"char":12174,"type":"identifier"},{"text":"assertEquals","line":294,"char":12181,"type":"identifier"},{"text":"result","line":294,"char":12194,"type":"identifier"},{"text":"size","line":294,"char":12201,"type":"identifier"},{"text":"OIdentifiable","line":295,"char":12223,"type":"identifier"},{"text":"result","line":295,"char":12241,"type":"identifier"},{"text":"Assert","line":296,"char":12258,"type":"identifier"},{"text":"assertEquals","line":296,"char":12265,"type":"identifier"},{"text":"ODocument","line":296,"char":12280,"type":"identifier"},{"text":"r","line":296,"char":12291,"type":"identifier"},{"text":"getRecord","line":296,"char":12293,"type":"identifier"},{"text":"getClassName","line":296,"char":12306,"type":"identifier"},{"text":"Assert","line":297,"char":12342,"type":"identifier"},{"text":"assertNotSame","line":297,"char":12349,"type":"identifier"},{"text":"ODocument","line":297,"char":12365,"type":"identifier"},{"text":"r","line":297,"char":12376,"type":"identifier"},{"text":"getRecord","line":297,"char":12378,"type":"identifier"},{"text":"field","line":297,"char":12391,"type":"identifier"},{"text":"database","line":303,"char":12478,"type":"identifier"},{"text":"getMetadata","line":303,"char":12487,"type":"identifier"},{"text":"getSchema","line":303,"char":12501,"type":"identifier"},{"text":"existsClass","line":303,"char":12513,"type":"identifier"},{"text":"database","line":304,"char":12545,"type":"identifier"},{"text":"command","line":304,"char":12554,"type":"identifier"},{"text":"OCommandSQL","line":304,"char":12566,"type":"identifier"},{"text":"execute","line":304,"char":12602,"type":"identifier"},{"text":"database","line":305,"char":12620,"type":"identifier"},{"text":"getMetadata","line":305,"char":12629,"type":"identifier"},{"text":"getSchema","line":305,"char":12643,"type":"identifier"},{"text":"reload","line":305,"char":12655,"type":"identifier"},{"text":"ODocument","line":309,"char":12709,"type":"identifier"},{"text":"database","line":309,"char":12725,"type":"identifier"},{"text":"command","line":309,"char":12734,"type":"identifier"},{"text":"OCommandSQL","line":309,"char":12746,"type":"identifier"},{"text":"execute","line":309,"char":12820,"type":"identifier"},{"text":"Assert","line":310,"char":12836,"type":"identifier"},{"text":"assertTrue","line":310,"char":12843,"type":"identifier"},{"text":"doc","line":310,"char":12854,"type":"identifier"},{"text":"Assert","line":311,"char":12873,"type":"identifier"},{"text":"assertEquals","line":311,"char":12880,"type":"identifier"},{"text":"doc","line":311,"char":12893,"type":"identifier"},{"text":"getClassName","line":311,"char":12897,"type":"identifier"},{"text":"Object","line":314,"char":12956,"type":"identifier"},{"text":"database","line":314,"char":12970,"type":"identifier"},{"text":"command","line":314,"char":12979,"type":"identifier"},{"text":"OCommandSQL","line":314,"char":12991,"type":"identifier"},{"text":"execute","line":314,"char":13064,"type":"identifier"},{"text":"Assert","line":315,"char":13080,"type":"identifier"},{"text":"assertTrue","line":315,"char":13087,"type":"identifier"},{"text":"res1","line":315,"char":13098,"type":"identifier"},{"text":"ORecordId","line":315,"char":13114,"type":"identifier"},{"text":"Assert","line":316,"char":13131,"type":"identifier"},{"text":"assertTrue","line":316,"char":13138,"type":"identifier"},{"text":"OIdentifiable","line":316,"char":13151,"type":"identifier"},{"text":"res1","line":316,"char":13166,"type":"identifier"},{"text":"getIdentity","line":316,"char":13172,"type":"identifier"},{"text":"isValid","line":316,"char":13186,"type":"identifier"},{"text":"Object","line":319,"char":13249,"type":"identifier"},{"text":"database","line":319,"char":13263,"type":"identifier"},{"text":"command","line":319,"char":13272,"type":"identifier"},{"text":"OCommandSQL","line":320,"char":13294,"type":"identifier"},{"text":"execute","line":322,"char":13446,"type":"identifier"},{"text":"Assert","line":323,"char":13462,"type":"identifier"},{"text":"assertTrue","line":323,"char":13469,"type":"identifier"},{"text":"res2","line":323,"char":13480,"type":"identifier"},{"text":"List","line":323,"char":13496,"type":"identifier"},{"text":"Assert","line":324,"char":13511,"type":"identifier"},{"text":"assertTrue","line":324,"char":13518,"type":"identifier"},{"text":"List","line":324,"char":13531,"type":"identifier"},{"text":"res2","line":324,"char":13537,"type":"identifier"},{"text":"get","line":324,"char":13543,"type":"identifier"},{"text":"ORecordId","line":324,"char":13561,"type":"identifier"},{"text":"ORID","line":327,"char":13656,"type":"identifier"},{"text":"OIdentifiable","line":327,"char":13673,"type":"identifier"},{"text":"res1","line":327,"char":13688,"type":"identifier"},{"text":"getIdentity","line":327,"char":13694,"type":"identifier"},{"text":"String","line":328,"char":13720,"type":"identifier"},{"text":"doc","line":328,"char":13804,"type":"identifier"},{"text":"getIdentity","line":328,"char":13808,"type":"identifier"},{"text":"toString","line":328,"char":13822,"type":"identifier"},{"text":"another","line":329,"char":13850,"type":"identifier"},{"text":"toString","line":329,"char":13858,"type":"identifier"},{"text":"ArrayList","line":330,"char":13881,"type":"identifier"},{"text":"database","line":330,"char":13898,"type":"identifier"},{"text":"command","line":330,"char":13907,"type":"identifier"},{"text":"OCommandSQL","line":330,"char":13919,"type":"identifier"},{"text":"sql","line":330,"char":13931,"type":"identifier"},{"text":"execute","line":330,"char":13937,"type":"identifier"},{"text":"Assert","line":331,"char":13953,"type":"identifier"},{"text":"assertEquals","line":331,"char":13960,"type":"identifier"},{"text":"res3","line":331,"char":13973,"type":"identifier"},{"text":"size","line":331,"char":13978,"type":"identifier"},{"text":"Assert","line":332,"char":13995,"type":"identifier"},{"text":"assertTrue","line":332,"char":14002,"type":"identifier"},{"text":"List","line":332,"char":14015,"type":"identifier"},{"text":"res3","line":332,"char":14021,"type":"identifier"},{"text":"get","line":332,"char":14027,"type":"identifier"},{"text":"ODocument","line":332,"char":14045,"type":"identifier"},{"text":"ODocument","line":333,"char":14068,"type":"identifier"},{"text":"ODocument","line":333,"char":14089,"type":"identifier"},{"text":"res3","line":333,"char":14100,"type":"identifier"},{"text":"get","line":333,"char":14105,"type":"identifier"},{"text":"Assert","line":334,"char":14118,"type":"identifier"},{"text":"assertTrue","line":334,"char":14125,"type":"identifier"},{"text":"res3doc","line":334,"char":14136,"type":"identifier"},{"text":"containsField","line":334,"char":14144,"type":"identifier"},{"text":"Assert","line":335,"char":14175,"type":"identifier"},{"text":"assertTrue","line":335,"char":14182,"type":"identifier"},{"text":"equalsIgnoreCase","line":335,"char":14200,"type":"identifier"},{"text":"String","line":335,"char":14218,"type":"identifier"},{"text":"res3doc","line":335,"char":14226,"type":"identifier"},{"text":"field","line":335,"char":14234,"type":"identifier"},{"text":"equalsIgnoreCase","line":336,"char":14273,"type":"identifier"},{"text":"String","line":336,"char":14291,"type":"identifier"},{"text":"res3doc","line":336,"char":14299,"type":"identifier"},{"text":"field","line":336,"char":14307,"type":"identifier"},{"text":"Assert","line":337,"char":14331,"type":"identifier"},{"text":"assertTrue","line":337,"char":14338,"type":"identifier"},{"text":"res3doc","line":337,"char":14349,"type":"identifier"},{"text":"containsField","line":337,"char":14357,"type":"identifier"},{"text":"Assert","line":338,"char":14385,"type":"identifier"},{"text":"assertTrue","line":338,"char":14392,"type":"identifier"},{"text":"res3doc","line":338,"char":14403,"type":"identifier"},{"text":"containsField","line":338,"char":14411,"type":"identifier"},{"text":"String","line":341,"char":14556,"type":"identifier"},{"text":"List","line":343,"char":14740,"type":"identifier"},{"text":"database","line":343,"char":14759,"type":"identifier"},{"text":"command","line":343,"char":14768,"type":"identifier"},{"text":"OCommandScript","line":343,"char":14780,"type":"identifier"},{"text":"sql2","line":343,"char":14802,"type":"identifier"},{"text":"execute","line":343,"char":14809,"type":"identifier"},{"text":"Assert","line":344,"char":14825,"type":"identifier"},{"text":"assertEquals","line":344,"char":14832,"type":"identifier"},{"text":"res_sql2","line":344,"char":14845,"type":"identifier"},{"text":"size","line":344,"char":14854,"type":"identifier"},{"text":"Assert","line":345,"char":14871,"type":"identifier"},{"text":"assertTrue","line":345,"char":14878,"type":"identifier"},{"text":"List","line":345,"char":14891,"type":"identifier"},{"text":"res_sql2","line":345,"char":14897,"type":"identifier"},{"text":"get","line":345,"char":14907,"type":"identifier"},{"text":"ORecordId","line":345,"char":14925,"type":"identifier"},{"text":"String","line":348,"char":15055,"type":"identifier"},{"text":"List","line":350,"char":15230,"type":"identifier"},{"text":"database","line":350,"char":15249,"type":"identifier"},{"text":"command","line":350,"char":15258,"type":"identifier"},{"text":"OCommandScript","line":350,"char":15270,"type":"identifier"},{"text":"sql3","line":350,"char":15292,"type":"identifier"},{"text":"execute","line":350,"char":15299,"type":"identifier"},{"text":"Assert","line":351,"char":15315,"type":"identifier"},{"text":"assertEquals","line":351,"char":15322,"type":"identifier"},{"text":"res_sql3","line":351,"char":15335,"type":"identifier"},{"text":"size","line":351,"char":15344,"type":"identifier"},{"text":"Assert","line":352,"char":15361,"type":"identifier"},{"text":"assertTrue","line":352,"char":15368,"type":"identifier"},{"text":"List","line":352,"char":15381,"type":"identifier"},{"text":"res_sql3","line":352,"char":15387,"type":"identifier"},{"text":"get","line":352,"char":15397,"type":"identifier"},{"text":"ODocument","line":352,"char":15415,"type":"identifier"},{"text":"ODocument","line":353,"char":15438,"type":"identifier"},{"text":"ODocument","line":353,"char":15459,"type":"identifier"},{"text":"List","line":353,"char":15473,"type":"identifier"},{"text":"res_sql3","line":353,"char":15479,"type":"identifier"},{"text":"get","line":353,"char":15489,"type":"identifier"},{"text":"Assert","line":354,"char":15503,"type":"identifier"},{"text":"assertEquals","line":354,"char":15510,"type":"identifier"},{"text":"sql3doc","line":354,"char":15523,"type":"identifier"},{"text":"field","line":354,"char":15531,"type":"identifier"},{"text":"Assert","line":355,"char":15556,"type":"identifier"},{"text":"assertEquals","line":355,"char":15563,"type":"identifier"},{"text":"sql3doc","line":355,"char":15576,"type":"identifier"},{"text":"field","line":355,"char":15584,"type":"identifier"},{"text":"OClass","line":359,"char":15693,"type":"identifier"},{"text":"database","line":359,"char":15704,"type":"identifier"},{"text":"getMetadata","line":359,"char":15713,"type":"identifier"},{"text":"getSchema","line":359,"char":15727,"type":"identifier"},{"text":"getOrCreateClass","line":359,"char":15739,"type":"identifier"},{"text":"c","line":360,"char":15777,"type":"identifier"},{"text":"createProperty","line":360,"char":15779,"type":"identifier"},{"text":"OType","line":360,"char":15822,"type":"identifier"},{"text":"EMBEDDEDSET","line":360,"char":15828,"type":"identifier"},{"text":"ODocument","line":362,"char":15849,"type":"identifier"},{"text":"database","line":362,"char":15865,"type":"identifier"},{"text":"command","line":363,"char":15884,"type":"identifier"},{"text":"OCommandSQL","line":364,"char":15910,"type":"identifier"},{"text":"execute","line":366,"char":16074,"type":"identifier"},{"text":"Assert","line":368,"char":16092,"type":"identifier"},{"text":"assertTrue","line":368,"char":16099,"type":"identifier"},{"text":"doc","line":368,"char":16110,"type":"identifier"},{"text":"field","line":368,"char":16114,"type":"identifier"},{"text":"Set","line":368,"char":16159,"type":"identifier"},{"text":"Set","line":370,"char":16172,"type":"identifier"},{"text":"doc","line":370,"char":16183,"type":"identifier"},{"text":"field","line":370,"char":16187,"type":"identifier"},{"text":"Object","line":371,"char":16232,"type":"identifier"},{"text":"addr","line":371,"char":16243,"type":"identifier"},{"text":"Assert","line":372,"char":16258,"type":"identifier"},{"text":"assertTrue","line":372,"char":16265,"type":"identifier"},{"text":"o","line":372,"char":16276,"type":"identifier"},{"text":"ODocument","line":372,"char":16289,"type":"identifier"},{"text":"OClass","line":377,"char":16388,"type":"identifier"},{"text":"database","line":377,"char":16399,"type":"identifier"},{"text":"getMetadata","line":377,"char":16408,"type":"identifier"},{"text":"getSchema","line":377,"char":16422,"type":"identifier"},{"text":"getOrCreateClass","line":377,"char":16434,"type":"identifier"},{"text":"c","line":378,"char":16472,"type":"identifier"},{"text":"createProperty","line":378,"char":16474,"type":"identifier"},{"text":"OType","line":378,"char":16519,"type":"identifier"},{"text":"EMBEDDEDSET","line":378,"char":16525,"type":"identifier"},{"text":"database","line":379,"char":16547,"type":"identifier"},{"text":"getMetadata","line":379,"char":16556,"type":"identifier"},{"text":"getSchema","line":379,"char":16570,"type":"identifier"},{"text":"getOrCreateClass","line":379,"char":16582,"type":"identifier"},{"text":"ODocument","line":381,"char":16634,"type":"identifier"},{"text":"database","line":381,"char":16650,"type":"identifier"},{"text":"command","line":382,"char":16669,"type":"identifier"},{"text":"OCommandSQL","line":383,"char":16695,"type":"identifier"},{"text":"execute","line":385,"char":16863,"type":"identifier"},{"text":"Assert","line":387,"char":16881,"type":"identifier"},{"text":"assertTrue","line":387,"char":16888,"type":"identifier"},{"text":"doc","line":387,"char":16899,"type":"identifier"},{"text":"field","line":387,"char":16903,"type":"identifier"},{"text":"Set","line":387,"char":16950,"type":"identifier"},{"text":"Set","line":389,"char":16963,"type":"identifier"},{"text":"doc","line":389,"char":16974,"type":"identifier"},{"text":"field","line":389,"char":16978,"type":"identifier"},{"text":"Object","line":390,"char":17025,"type":"identifier"},{"text":"addr","line":390,"char":17036,"type":"identifier"},{"text":"Assert","line":391,"char":17051,"type":"identifier"},{"text":"assertTrue","line":391,"char":17058,"type":"identifier"},{"text":"o","line":391,"char":17069,"type":"identifier"},{"text":"ODocument","line":391,"char":17082,"type":"identifier"},{"text":"Assert","line":392,"char":17101,"type":"identifier"},{"text":"assertEquals","line":392,"char":17108,"type":"identifier"},{"text":"ODocument","line":392,"char":17123,"type":"identifier"},{"text":"o","line":392,"char":17134,"type":"identifier"},{"text":"getClassName","line":392,"char":17137,"type":"identifier"},{"text":"OClass","line":397,"char":17266,"type":"identifier"},{"text":"database","line":397,"char":17277,"type":"identifier"},{"text":"getMetadata","line":397,"char":17286,"type":"identifier"},{"text":"getSchema","line":397,"char":17300,"type":"identifier"},{"text":"getOrCreateClass","line":397,"char":17312,"type":"identifier"},{"text":"c","line":398,"char":17350,"type":"identifier"},{"text":"createProperty","line":398,"char":17352,"type":"identifier"},{"text":"OType","line":398,"char":17396,"type":"identifier"},{"text":"EMBEDDEDLIST","line":398,"char":17402,"type":"identifier"},{"text":"ODocument","line":400,"char":17424,"type":"identifier"},{"text":"database","line":400,"char":17440,"type":"identifier"},{"text":"command","line":401,"char":17459,"type":"identifier"},{"text":"OCommandSQL","line":402,"char":17485,"type":"identifier"},{"text":"execute","line":404,"char":17651,"type":"identifier"},{"text":"Assert","line":406,"char":17669,"type":"identifier"},{"text":"assertTrue","line":406,"char":17676,"type":"identifier"},{"text":"doc","line":406,"char":17687,"type":"identifier"},{"text":"field","line":406,"char":17691,"type":"identifier"},{"text":"List","line":406,"char":17737,"type":"identifier"},{"text":"List","line":408,"char":17751,"type":"identifier"},{"text":"doc","line":408,"char":17763,"type":"identifier"},{"text":"field","line":408,"char":17767,"type":"identifier"},{"text":"Object","line":409,"char":17813,"type":"identifier"},{"text":"addr","line":409,"char":17824,"type":"identifier"},{"text":"Assert","line":410,"char":17839,"type":"identifier"},{"text":"assertTrue","line":410,"char":17846,"type":"identifier"},{"text":"o","line":410,"char":17857,"type":"identifier"},{"text":"ODocument","line":410,"char":17870,"type":"identifier"},{"text":"OClass","line":415,"char":17970,"type":"identifier"},{"text":"database","line":415,"char":17981,"type":"identifier"},{"text":"getMetadata","line":415,"char":17990,"type":"identifier"},{"text":"getSchema","line":415,"char":18004,"type":"identifier"},{"text":"getOrCreateClass","line":415,"char":18016,"type":"identifier"},{"text":"c","line":416,"char":18059,"type":"identifier"},{"text":"existsProperty","line":416,"char":18061,"type":"identifier"},{"text":"c","line":417,"char":18115,"type":"identifier"},{"text":"createProperty","line":417,"char":18117,"type":"identifier"},{"text":"OType","line":417,"char":18163,"type":"identifier"},{"text":"EMBEDDEDLIST","line":417,"char":18169,"type":"identifier"},{"text":"database","line":418,"char":18194,"type":"identifier"},{"text":"getMetadata","line":418,"char":18203,"type":"identifier"},{"text":"getSchema","line":418,"char":18217,"type":"identifier"},{"text":"getOrCreateClass","line":418,"char":18229,"type":"identifier"},{"text":"ODocument","line":420,"char":18281,"type":"identifier"},{"text":"database","line":420,"char":18297,"type":"identifier"},{"text":"command","line":421,"char":18316,"type":"identifier"},{"text":"OCommandSQL","line":422,"char":18342,"type":"identifier"},{"text":"execute","line":424,"char":18512,"type":"identifier"},{"text":"Assert","line":426,"char":18530,"type":"identifier"},{"text":"assertTrue","line":426,"char":18537,"type":"identifier"},{"text":"doc","line":426,"char":18548,"type":"identifier"},{"text":"field","line":426,"char":18552,"type":"identifier"},{"text":"List","line":426,"char":18600,"type":"identifier"},{"text":"List","line":428,"char":18614,"type":"identifier"},{"text":"doc","line":428,"char":18626,"type":"identifier"},{"text":"field","line":428,"char":18630,"type":"identifier"},{"text":"Object","line":429,"char":18678,"type":"identifier"},{"text":"addr","line":429,"char":18689,"type":"identifier"},{"text":"Assert","line":430,"char":18704,"type":"identifier"},{"text":"assertTrue","line":430,"char":18711,"type":"identifier"},{"text":"o","line":430,"char":18722,"type":"identifier"},{"text":"ODocument","line":430,"char":18735,"type":"identifier"},{"text":"Assert","line":431,"char":18754,"type":"identifier"},{"text":"assertEquals","line":431,"char":18761,"type":"identifier"},{"text":"ODocument","line":431,"char":18776,"type":"identifier"},{"text":"o","line":431,"char":18787,"type":"identifier"},{"text":"getClassName","line":431,"char":18790,"type":"identifier"},{"text":"OClass","line":436,"char":18918,"type":"identifier"},{"text":"database","line":436,"char":18929,"type":"identifier"},{"text":"getMetadata","line":436,"char":18938,"type":"identifier"},{"text":"getSchema","line":436,"char":18952,"type":"identifier"},{"text":"getOrCreateClass","line":436,"char":18964,"type":"identifier"},{"text":"c","line":437,"char":19002,"type":"identifier"},{"text":"createProperty","line":437,"char":19004,"type":"identifier"},{"text":"OType","line":437,"char":19047,"type":"identifier"},{"text":"EMBEDDEDMAP","line":437,"char":19053,"type":"identifier"},{"text":"ODocument","line":439,"char":19074,"type":"identifier"},{"text":"database","line":439,"char":19090,"type":"identifier"},{"text":"command","line":440,"char":19109,"type":"identifier"},{"text":"OCommandSQL","line":441,"char":19135,"type":"identifier"},{"text":"execute","line":443,"char":19304,"type":"identifier"},{"text":"Assert","line":445,"char":19322,"type":"identifier"},{"text":"assertTrue","line":445,"char":19329,"type":"identifier"},{"text":"doc","line":445,"char":19340,"type":"identifier"},{"text":"field","line":445,"char":19344,"type":"identifier"},{"text":"Map","line":445,"char":19389,"type":"identifier"},{"text":"Map","line":447,"char":19402,"type":"identifier"},{"text":"doc","line":447,"char":19413,"type":"identifier"},{"text":"field","line":447,"char":19417,"type":"identifier"},{"text":"Object","line":448,"char":19462,"type":"identifier"},{"text":"addr","line":448,"char":19473,"type":"identifier"},{"text":"values","line":448,"char":19478,"type":"identifier"},{"text":"Assert","line":449,"char":19497,"type":"identifier"},{"text":"assertTrue","line":449,"char":19504,"type":"identifier"},{"text":"o","line":449,"char":19515,"type":"identifier"},{"text":"ODocument","line":449,"char":19528,"type":"identifier"},{"text":"OClass","line":454,"char":19627,"type":"identifier"},{"text":"database","line":454,"char":19638,"type":"identifier"},{"text":"getMetadata","line":454,"char":19647,"type":"identifier"},{"text":"getSchema","line":454,"char":19661,"type":"identifier"},{"text":"getOrCreateClass","line":454,"char":19673,"type":"identifier"},{"text":"c","line":455,"char":19711,"type":"identifier"},{"text":"createProperty","line":455,"char":19713,"type":"identifier"},{"text":"OType","line":455,"char":19758,"type":"identifier"},{"text":"EMBEDDEDMAP","line":455,"char":19764,"type":"identifier"},{"text":"database","line":456,"char":19786,"type":"identifier"},{"text":"getMetadata","line":456,"char":19795,"type":"identifier"},{"text":"getSchema","line":456,"char":19809,"type":"identifier"},{"text":"getOrCreateClass","line":456,"char":19821,"type":"identifier"},{"text":"ODocument","line":458,"char":19873,"type":"identifier"},{"text":"database","line":458,"char":19889,"type":"identifier"},{"text":"command","line":459,"char":19908,"type":"identifier"},{"text":"OCommandSQL","line":460,"char":19934,"type":"identifier"},{"text":"execute","line":462,"char":20107,"type":"identifier"},{"text":"Assert","line":464,"char":20125,"type":"identifier"},{"text":"assertTrue","line":464,"char":20132,"type":"identifier"},{"text":"doc","line":464,"char":20143,"type":"identifier"},{"text":"field","line":464,"char":20147,"type":"identifier"},{"text":"Map","line":464,"char":20194,"type":"identifier"},{"text":"Map","line":466,"char":20207,"type":"identifier"},{"text":"doc","line":466,"char":20218,"type":"identifier"},{"text":"field","line":466,"char":20222,"type":"identifier"},{"text":"Object","line":467,"char":20269,"type":"identifier"},{"text":"addr","line":467,"char":20280,"type":"identifier"},{"text":"values","line":467,"char":20285,"type":"identifier"},{"text":"Assert","line":468,"char":20304,"type":"identifier"},{"text":"assertTrue","line":468,"char":20311,"type":"identifier"},{"text":"o","line":468,"char":20322,"type":"identifier"},{"text":"ODocument","line":468,"char":20335,"type":"identifier"},{"text":"Assert","line":469,"char":20354,"type":"identifier"},{"text":"assertEquals","line":469,"char":20361,"type":"identifier"},{"text":"ODocument","line":469,"char":20376,"type":"identifier"},{"text":"o","line":469,"char":20387,"type":"identifier"},{"text":"getClassName","line":469,"char":20390,"type":"identifier"},{"text":"OClass","line":474,"char":20515,"type":"identifier"},{"text":"database","line":474,"char":20526,"type":"identifier"},{"text":"getMetadata","line":474,"char":20535,"type":"identifier"},{"text":"getSchema","line":474,"char":20549,"type":"identifier"},{"text":"getOrCreateClass","line":474,"char":20561,"type":"identifier"},{"text":"c","line":475,"char":20599,"type":"identifier"},{"text":"createProperty","line":475,"char":20601,"type":"identifier"},{"text":"OType","line":475,"char":20641,"type":"identifier"},{"text":"EMBEDDED","line":475,"char":20647,"type":"identifier"},{"text":"ODocument","line":477,"char":20665,"type":"identifier"},{"text":"database","line":477,"char":20681,"type":"identifier"},{"text":"command","line":477,"char":20690,"type":"identifier"},{"text":"OCommandSQL","line":478,"char":20712,"type":"identifier"},{"text":"execute","line":480,"char":20864,"type":"identifier"},{"text":"Assert","line":482,"char":20882,"type":"identifier"},{"text":"assertTrue","line":482,"char":20889,"type":"identifier"},{"text":"doc","line":482,"char":20900,"type":"identifier"},{"text":"field","line":482,"char":20904,"type":"identifier"},{"text":"ODocument","line":482,"char":20946,"type":"identifier"},{"text":"OClass","line":486,"char":21007,"type":"identifier"},{"text":"database","line":486,"char":21018,"type":"identifier"},{"text":"getMetadata","line":486,"char":21027,"type":"identifier"},{"text":"getSchema","line":486,"char":21041,"type":"identifier"},{"text":"getOrCreateClass","line":486,"char":21053,"type":"identifier"},{"text":"database","line":488,"char":21099,"type":"identifier"},{"text":"command","line":489,"char":21118,"type":"identifier"},{"text":"OCommandSQL","line":490,"char":21144,"type":"identifier"},{"text":"execute","line":492,"char":21309,"type":"identifier"},{"text":"List","line":494,"char":21327,"type":"identifier"},{"text":"ODocument","line":494,"char":21332,"type":"identifier"},{"text":"database","line":494,"char":21352,"type":"identifier"},{"text":"query","line":494,"char":21361,"type":"identifier"},{"text":"OSQLSynchQuery","line":494,"char":21371,"type":"identifier"},{"text":"ODocument","line":494,"char":21386,"type":"identifier"},{"text":"Assert","line":496,"char":21439,"type":"identifier"},{"text":"assertEquals","line":496,"char":21446,"type":"identifier"},{"text":"result","line":496,"char":21459,"type":"identifier"},{"text":"size","line":496,"char":21466,"type":"identifier"},{"text":"ODocument","line":498,"char":21511,"type":"identifier"},{"text":"result","line":498,"char":21527,"type":"identifier"},{"text":"get","line":498,"char":21534,"type":"identifier"},{"text":"Collection","line":499,"char":21547,"type":"identifier"},{"text":"doc","line":499,"char":21567,"type":"identifier"},{"text":"field","line":499,"char":21571,"type":"identifier"},{"text":"Object","line":500,"char":21598,"type":"identifier"},{"text":"events","line":500,"char":21613,"type":"identifier"},{"text":"Assert","line":501,"char":21630,"type":"identifier"},{"text":"assertTrue","line":501,"char":21637,"type":"identifier"},{"text":"event","line":501,"char":21648,"type":"identifier"},{"text":"Map","line":501,"char":21665,"type":"identifier"},{"text":"Object","line":502,"char":21678,"type":"identifier"},{"text":"Map","line":502,"char":21697,"type":"identifier"},{"text":"event","line":502,"char":21702,"type":"identifier"},{"text":"get","line":502,"char":21709,"type":"identifier"},{"text":"Assert","line":503,"char":21727,"type":"identifier"},{"text":"assertTrue","line":503,"char":21734,"type":"identifier"},{"text":"dateObj","line":503,"char":21745,"type":"identifier"},{"text":"Date","line":503,"char":21764,"type":"identifier"},{"text":"Calendar","line":504,"char":21778,"type":"identifier"},{"text":"GregorianCalendar","line":504,"char":21797,"type":"identifier"},{"text":"cal","line":505,"char":21825,"type":"identifier"},{"text":"setTime","line":505,"char":21829,"type":"identifier"},{"text":"Date","line":505,"char":21838,"type":"identifier"},{"text":"dateObj","line":505,"char":21844,"type":"identifier"},{"text":"Assert","line":506,"char":21861,"type":"identifier"},{"text":"assertEquals","line":506,"char":21868,"type":"identifier"},{"text":"cal","line":506,"char":21881,"type":"identifier"},{"text":"get","line":506,"char":21885,"type":"identifier"},{"text":"Calendar","line":506,"char":21889,"type":"identifier"},{"text":"YEAR","line":506,"char":21898,"type":"identifier"},{"text":"found","line":507,"char":21919,"type":"identifier"},{"text":"doc","line":510,"char":21947,"type":"identifier"},{"text":"delete","line":510,"char":21951,"type":"identifier"},{"text":"Assert","line":511,"char":21966,"type":"identifier"},{"text":"assertEquals","line":511,"char":21973,"type":"identifier"},{"text":"found","line":511,"char":21986,"type":"identifier"},{"text":"OClass","line":516,"char":22079,"type":"identifier"},{"text":"database","line":516,"char":22090,"type":"identifier"},{"text":"getMetadata","line":516,"char":22099,"type":"identifier"},{"text":"getSchema","line":516,"char":22113,"type":"identifier"},{"text":"getOrCreateClass","line":516,"char":22125,"type":"identifier"},{"text":"c","line":517,"char":22163,"type":"identifier"},{"text":"createProperty","line":517,"char":22165,"type":"identifier"},{"text":"OType","line":517,"char":22207,"type":"identifier"},{"text":"EMBEDDED","line":517,"char":22213,"type":"identifier"},{"text":"database","line":518,"char":22232,"type":"identifier"},{"text":"getMetadata","line":518,"char":22241,"type":"identifier"},{"text":"getSchema","line":518,"char":22255,"type":"identifier"},{"text":"getOrCreateClass","line":518,"char":22267,"type":"identifier"},{"text":"ODocument","line":520,"char":22319,"type":"identifier"},{"text":"database","line":520,"char":22335,"type":"identifier"},{"text":"command","line":520,"char":22344,"type":"identifier"},{"text":"OCommandSQL","line":521,"char":22366,"type":"identifier"},{"text":"execute","line":523,"char":22522,"type":"identifier"},{"text":"Assert","line":525,"char":22540,"type":"identifier"},{"text":"assertTrue","line":525,"char":22547,"type":"identifier"},{"text":"doc","line":525,"char":22558,"type":"identifier"},{"text":"field","line":525,"char":22562,"type":"identifier"},{"text":"ODocument","line":525,"char":22606,"type":"identifier"},{"text":"Assert","line":526,"char":22623,"type":"identifier"},{"text":"assertEquals","line":526,"char":22630,"type":"identifier"},{"text":"ODocument","line":526,"char":22645,"type":"identifier"},{"text":"doc","line":526,"char":22656,"type":"identifier"},{"text":"field","line":526,"char":22660,"type":"identifier"},{"text":"getClassName","line":526,"char":22694,"type":"identifier"},{"text":"OClass","line":530,"char":22807,"type":"identifier"},{"text":"database","line":530,"char":22818,"type":"identifier"},{"text":"getMetadata","line":530,"char":22827,"type":"identifier"},{"text":"getSchema","line":530,"char":22841,"type":"identifier"},{"text":"getOrCreateClass","line":530,"char":22853,"type":"identifier"},{"text":"c","line":531,"char":22908,"type":"identifier"},{"text":"createProperty","line":531,"char":22910,"type":"identifier"},{"text":"OType","line":531,"char":22933,"type":"identifier"},{"text":"EMBEDDED","line":531,"char":22939,"type":"identifier"},{"text":"database","line":532,"char":22958,"type":"identifier"},{"text":"getMetadata","line":532,"char":22967,"type":"identifier"},{"text":"getSchema","line":532,"char":22981,"type":"identifier"},{"text":"getOrCreateClass","line":532,"char":22993,"type":"identifier"},{"text":"ODocument","line":534,"char":23056,"type":"identifier"},{"text":"database","line":534,"char":23072,"type":"identifier"},{"text":"command","line":534,"char":23081,"type":"identifier"},{"text":"OCommandSQL","line":535,"char":23103,"type":"identifier"},{"text":"execute","line":537,"char":23355,"type":"identifier"},{"text":"Assert","line":539,"char":23373,"type":"identifier"},{"text":"assertTrue","line":539,"char":23380,"type":"identifier"},{"text":"doc","line":539,"char":23391,"type":"identifier"},{"text":"field","line":539,"char":23395,"type":"identifier"},{"text":"OIdentifiable","line":539,"char":23420,"type":"identifier"},{"text":"Assert","line":540,"char":23441,"type":"identifier"},{"text":"assertEquals","line":540,"char":23448,"type":"identifier"},{"text":"ODocument","line":540,"char":23463,"type":"identifier"},{"text":"doc","line":540,"char":23474,"type":"identifier"},{"text":"field","line":540,"char":23478,"type":"identifier"},{"text":"getClassName","line":540,"char":23493,"type":"identifier"},{"text":"Assert","line":541,"char":23552,"type":"identifier"},{"text":"assertEquals","line":541,"char":23559,"type":"identifier"},{"text":"ODocument","line":541,"char":23574,"type":"identifier"},{"text":"doc","line":541,"char":23585,"type":"identifier"},{"text":"field","line":541,"char":23589,"type":"identifier"},{"text":"field","line":541,"char":23604,"type":"identifier"},{"text":"OClass","line":545,"char":23695,"type":"identifier"},{"text":"database","line":545,"char":23706,"type":"identifier"},{"text":"getMetadata","line":545,"char":23715,"type":"identifier"},{"text":"getSchema","line":545,"char":23729,"type":"identifier"},{"text":"getOrCreateClass","line":545,"char":23741,"type":"identifier"},{"text":"c","line":546,"char":23797,"type":"identifier"},{"text":"createProperty","line":546,"char":23799,"type":"identifier"},{"text":"OType","line":546,"char":23822,"type":"identifier"},{"text":"EMBEDDED","line":546,"char":23828,"type":"identifier"},{"text":"database","line":547,"char":23847,"type":"identifier"},{"text":"getMetadata","line":547,"char":23856,"type":"identifier"},{"text":"getSchema","line":547,"char":23870,"type":"identifier"},{"text":"getOrCreateClass","line":547,"char":23882,"type":"identifier"},{"text":"ODocument","line":549,"char":23946,"type":"identifier"},{"text":"database","line":549,"char":23962,"type":"identifier"},{"text":"command","line":549,"char":23971,"type":"identifier"},{"text":"OCommandSQL","line":550,"char":23993,"type":"identifier"},{"text":"execute","line":552,"char":24243,"type":"identifier"},{"text":"Assert","line":554,"char":24261,"type":"identifier"},{"text":"assertTrue","line":554,"char":24268,"type":"identifier"},{"text":"doc","line":554,"char":24279,"type":"identifier"},{"text":"field","line":554,"char":24283,"type":"identifier"},{"text":"OIdentifiable","line":554,"char":24308,"type":"identifier"},{"text":"Assert","line":555,"char":24329,"type":"identifier"},{"text":"assertEquals","line":555,"char":24336,"type":"identifier"},{"text":"ODocument","line":555,"char":24351,"type":"identifier"},{"text":"doc","line":555,"char":24362,"type":"identifier"},{"text":"field","line":555,"char":24366,"type":"identifier"},{"text":"getClassName","line":555,"char":24381,"type":"identifier"},{"text":"Assert","line":556,"char":24441,"type":"identifier"},{"text":"assertEquals","line":556,"char":24448,"type":"identifier"},{"text":"ODocument","line":556,"char":24463,"type":"identifier"},{"text":"doc","line":556,"char":24474,"type":"identifier"},{"text":"field","line":556,"char":24478,"type":"identifier"},{"text":"field","line":556,"char":24493,"type":"identifier"},{"text":"OClass","line":560,"char":24577,"type":"identifier"},{"text":"database","line":560,"char":24588,"type":"identifier"},{"text":"getMetadata","line":560,"char":24597,"type":"identifier"},{"text":"getSchema","line":560,"char":24611,"type":"identifier"},{"text":"getOrCreateClass","line":560,"char":24623,"type":"identifier"},{"text":"database","line":562,"char":24680,"type":"identifier"},{"text":"command","line":562,"char":24689,"type":"identifier"},{"text":"OCommandSQL","line":563,"char":24711,"type":"identifier"},{"text":"execute","line":563,"char":24799,"type":"identifier"},{"text":"List","line":565,"char":24817,"type":"identifier"},{"text":"ODocument","line":565,"char":24822,"type":"identifier"},{"text":"database","line":565,"char":24842,"type":"identifier"},{"text":"query","line":566,"char":24861,"type":"identifier"},{"text":"OSQLSynchQuery","line":566,"char":24871,"type":"identifier"},{"text":"ODocument","line":566,"char":24886,"type":"identifier"},{"text":"Assert","line":568,"char":24950,"type":"identifier"},{"text":"assertEquals","line":568,"char":24957,"type":"identifier"},{"text":"result","line":568,"char":24970,"type":"identifier"},{"text":"size","line":568,"char":24977,"type":"identifier"},{"text":"Assert","line":569,"char":24994,"type":"identifier"},{"text":"assertEquals","line":569,"char":25001,"type":"identifier"},{"text":"result","line":569,"char":25014,"type":"identifier"},{"text":"get","line":569,"char":25021,"type":"identifier"},{"text":"field","line":569,"char":25028,"type":"identifier"},{"text":"database","line":574,"char":25134,"type":"identifier"},{"text":"getMetadata","line":574,"char":25143,"type":"identifier"},{"text":"getSchema","line":574,"char":25157,"type":"identifier"},{"text":"getOrCreateClass","line":574,"char":25169,"type":"identifier"},{"text":"database","line":575,"char":25224,"type":"identifier"},{"text":"command","line":575,"char":25233,"type":"identifier"},{"text":"OCommandSQL","line":575,"char":25245,"type":"identifier"},{"text":"execute","line":575,"char":25330,"type":"identifier"},{"text":"database","line":576,"char":25346,"type":"identifier"},{"text":"command","line":576,"char":25355,"type":"identifier"},{"text":"OCommandSQL","line":576,"char":25367,"type":"identifier"},{"text":"execute","line":576,"char":25453,"type":"identifier"},{"text":"List","line":577,"char":25469,"type":"identifier"},{"text":"ODocument","line":577,"char":25474,"type":"identifier"},{"text":"database","line":577,"char":25494,"type":"identifier"},{"text":"query","line":577,"char":25503,"type":"identifier"},{"text":"OSQLSynchQuery","line":577,"char":25513,"type":"identifier"},{"text":"ODocument","line":577,"char":25528,"type":"identifier"},{"text":"Assert","line":578,"char":25590,"type":"identifier"},{"text":"assertEquals","line":578,"char":25597,"type":"identifier"},{"text":"result","line":578,"char":25610,"type":"identifier"},{"text":"size","line":578,"char":25617,"type":"identifier"},{"text":"Iterable","line":579,"char":25634,"type":"identifier"},{"text":"result","line":579,"char":25648,"type":"identifier"},{"text":"get","line":579,"char":25655,"type":"identifier"},{"text":"field","line":579,"char":25662,"type":"identifier"},{"text":"Object","line":580,"char":25680,"type":"identifier"},{"text":"ed","line":580,"char":25691,"type":"identifier"},{"text":"iterator","line":580,"char":25694,"type":"identifier"},{"text":"next","line":580,"char":25705,"type":"identifier"},{"text":"Assert","line":581,"char":25718,"type":"identifier"},{"text":"assertEquals","line":581,"char":25725,"type":"identifier"},{"text":"o","line":581,"char":25738,"type":"identifier"},{"text":"getClass","line":581,"char":25740,"type":"identifier"},{"text":"BigDecimal","line":581,"char":25752,"type":"identifier"},{"text":"Assert","line":582,"char":25776,"type":"identifier"},{"text":"assertEquals","line":582,"char":25783,"type":"identifier"},{"text":"BigDecimal","line":582,"char":25798,"type":"identifier"},{"text":"o","line":582,"char":25809,"type":"identifier"},{"text":"intValue","line":582,"char":25812,"type":"identifier"},{"text":"List","line":585,"char":25846,"type":"identifier"},{"text":"Long","line":585,"char":25851,"type":"identifier"},{"text":"List","line":586,"char":25903,"type":"identifier"},{"text":"Long","line":586,"char":25908,"type":"identifier"},{"text":"ArrayList","line":586,"char":25930,"type":"identifier"},{"text":"Long","line":586,"char":25940,"type":"identifier"},{"text":"ORecordIteratorCluster","line":588,"char":25962,"type":"identifier"},{"text":"database","line":588,"char":26006,"type":"identifier"},{"text":"browseCluster","line":588,"char":26015,"type":"identifier"},{"text":"database","line":588,"char":26029,"type":"identifier"},{"text":"getClusterNameById","line":588,"char":26038,"type":"identifier"},{"text":"clusterId","line":588,"char":26057,"type":"identifier"},{"text":"i","line":590,"char":26093,"type":"identifier"},{"text":"i","line":590,"char":26102,"type":"identifier"},{"text":"iteratorCluster","line":591,"char":26121,"type":"identifier"},{"text":"hasNext","line":591,"char":26137,"type":"identifier"},{"text":"ORecord","line":593,"char":26171,"type":"identifier"},{"text":"iteratorCluster","line":593,"char":26185,"type":"identifier"},{"text":"next","line":593,"char":26201,"type":"identifier"},{"text":"positions","line":594,"char":26216,"type":"identifier"},{"text":"add","line":594,"char":26226,"type":"identifier"},{"text":"doc","line":594,"char":26230,"type":"identifier"},{"text":"getIdentity","line":594,"char":26234,"type":"identifier"},{"text":"getClusterPosition","line":594,"char":26248,"type":"identifier"},{"text":"positions","line":596,"char":26290,"type":"identifier"}]},"highlight":{"content":[" INTO test(text) VALUES ('(<em>Hello</em> World)')\")).execute();\r\n\r\n    Assert.assertTrue(doc != null",");\r\n    Assert.assertEquals(doc.field(\"text\"), \"(<em>Hello</em> World)\");\r\n  }\r\n\r\n  @Test\r\n  public void insertSubQuery"]}},{"_index":"codesearch","_type":"code","_id":"933706809b957bd7e9b41bfc99a521bc7c0cf535","_score":0.0,"_source":{"filename":"test/com/facebook/buck/event/listener/SuperConsoleEventBusListenerTest.java","content":"/*\n * Copyright 2013-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\npackage com.facebook.buck.event.listener;\n\nimport static com.facebook.buck.event.TestEventConfigurator.configureTestEventAtTime;\nimport static com.facebook.buck.event.listener.ConsoleTestUtils.postStoreFinished;\nimport static com.facebook.buck.event.listener.ConsoleTestUtils.postStoreScheduled;\nimport static com.facebook.buck.event.listener.ConsoleTestUtils.postStoreStarted;\nimport static com.facebook.buck.event.listener.SuperConsoleEventBusListener.EMOJI_BUNNY;\nimport static com.facebook.buck.event.listener.SuperConsoleEventBusListener.EMOJI_SNAIL;\nimport static com.facebook.buck.event.listener.SuperConsoleEventBusListener.EMOJI_WHALE;\nimport static com.facebook.buck.event.listener.SuperConsoleEventBusListener.NEW_DAEMON_INSTANCE_MSG;\nimport static com.facebook.buck.event.listener.SuperConsoleEventBusListener.createParsingMessage;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThat;\n\nimport com.facebook.buck.artifact_cache.ArtifactCacheEvent;\nimport com.facebook.buck.artifact_cache.CacheResult;\nimport com.facebook.buck.artifact_cache.DirArtifactCacheEvent;\nimport com.facebook.buck.artifact_cache.HttpArtifactCacheEvent;\nimport com.facebook.buck.cli.FakeBuckConfig;\nimport com.facebook.buck.distributed.DistBuildStatus;\nimport com.facebook.buck.distributed.DistBuildStatusEvent;\nimport com.facebook.buck.distributed.thrift.BuildStatus;\nimport com.facebook.buck.distributed.thrift.LogRecord;\nimport com.facebook.buck.event.ActionGraphEvent;\nimport com.facebook.buck.event.ArtifactCompressionEvent;\nimport com.facebook.buck.event.BuckEventBus;\nimport com.facebook.buck.event.BuckEventBusFactory;\nimport com.facebook.buck.event.CommandEvent;\nimport com.facebook.buck.event.ConsoleEvent;\nimport com.facebook.buck.event.DaemonEvent;\nimport com.facebook.buck.event.InstallEvent;\nimport com.facebook.buck.event.ParsingEvent;\nimport com.facebook.buck.event.ProjectGenerationEvent;\nimport com.facebook.buck.event.WatchmanStatusEvent;\nimport com.facebook.buck.json.ProjectBuildFileParseEvents;\nimport com.facebook.buck.model.BuildTarget;\nimport com.facebook.buck.model.BuildTargetFactory;\nimport com.facebook.buck.parser.ParseEvent;\nimport com.facebook.buck.rules.BuildEvent;\nimport com.facebook.buck.rules.BuildRuleCacheEvent;\nimport com.facebook.buck.rules.BuildRuleEvent;\nimport com.facebook.buck.rules.BuildRuleKeys;\nimport com.facebook.buck.rules.BuildRuleResolver;\nimport com.facebook.buck.rules.BuildRuleStatus;\nimport com.facebook.buck.rules.BuildRuleSuccessType;\nimport com.facebook.buck.rules.DefaultTargetNodeToBuildRuleTransformer;\nimport com.facebook.buck.rules.FakeBuildRule;\nimport com.facebook.buck.rules.FakeRuleKeyBuilderFactory;\nimport com.facebook.buck.rules.RuleKey;\nimport com.facebook.buck.rules.SourcePathResolver;\nimport com.facebook.buck.rules.TargetGraph;\nimport com.facebook.buck.rules.TestRunEvent;\nimport com.facebook.buck.rules.TestSummaryEvent;\nimport com.facebook.buck.step.StepEvent;\nimport com.facebook.buck.test.TestCaseSummary;\nimport com.facebook.buck.test.TestResultSummary;\nimport com.facebook.buck.test.TestResultSummaryVerbosity;\nimport com.facebook.buck.test.TestResults;\nimport com.facebook.buck.test.TestRuleEvent;\nimport com.facebook.buck.test.result.type.ResultType;\nimport com.facebook.buck.test.selectors.TestSelectorList;\nimport com.facebook.buck.testutil.TestConsole;\nimport com.facebook.buck.testutil.integration.TemporaryPaths;\nimport com.facebook.buck.timing.Clock;\nimport com.facebook.buck.timing.IncrementingFakeClock;\nimport com.facebook.buck.util.ObjectMappers;\nimport com.facebook.buck.util.environment.DefaultExecutionEnvironment;\nimport com.facebook.buck.util.unit.SizeUnit;\nimport com.google.common.base.Joiner;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.ImmutableSortedMap;\nimport com.google.common.collect.ImmutableSortedSet;\nimport com.google.common.collect.Iterables;\nimport com.google.common.jimfs.Configuration;\nimport com.google.common.jimfs.Jimfs;\nimport com.google.gson.Gson;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.FileSystem;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.LinkedList;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.TimeZone;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\npublic class SuperConsoleEventBusListenerTest {\n  private static final String TARGET_ONE = \"TARGET_ONE\";\n  private static final String TARGET_TWO = \"TARGET_TWO\";\n  private static final String TARGET_THREE = \"TARGET_THREE\";\n  private static final String DOWNLOAD_STRING =\n      \"[+] DOWNLOADING... (0.00 B/S, TOTAL: 0.00 B, 0 Artifacts)\";\n  private static final String FINISHED_DOWNLOAD_STRING =\n      \"[-] DOWNLOADING... (0.00 B/S AVG, TOTAL: 0.00 B, 0 Artifacts)\";\n  private static final String SEVERE_MESSAGE = \"This is a sample severe message.\";\n\n  private static final TestResultSummaryVerbosity noisySummaryVerbosity =\n      TestResultSummaryVerbosity.of(true, true);\n\n  private static final TestResultSummaryVerbosity silentSummaryVerbosity =\n      TestResultSummaryVerbosity.of(false, false);\n\n  @Rule\n  public final TemporaryPaths tmp = new TemporaryPaths();\n\n  private FileSystem vfs;\n  private Path logPath;\n  private SuperConsoleConfig emptySuperConsoleConfig =\n      new SuperConsoleConfig(FakeBuckConfig.builder().build());\n\n  private final TimeZone timeZone = TimeZone.getTimeZone(\"UTC\");\n\n  @Before\n  public void createTestLogFile() {\n    vfs = Jimfs.newFileSystem(Configuration.unix());\n    logPath = vfs.getPath(\"log.txt\");\n  }\n\n  @Test\n  public void testSimpleBuild() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n\n    BuildTarget fakeTarget = BuildTargetFactory.newInstance(\"//banana:stand\");\n    BuildTarget cachedTarget = BuildTargetFactory.newInstance(\"//chicken:dance\");\n    ImmutableSet<BuildTarget> buildTargets = ImmutableSet.of(fakeTarget, cachedTarget);\n    Iterable<String> buildArgs = Iterables.transform(buildTargets, Object::toString);\n    FakeBuildRule fakeRule = new FakeBuildRule(\n        fakeTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n    FakeBuildRule cachedRule = new FakeBuildRule(\n        cachedTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n\n    ProjectBuildFileParseEvents.Started parseEventStarted =\n        new ProjectBuildFileParseEvents.Started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] PARSING BUCK FILES...0.0s\"));\n\n    validateConsole(\n        listener, 100L, ImmutableList.of(\n            \"[+] PARSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectBuildFileParseEvents.Finished(parseEventStarted),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(\n        listener, 200L, ImmutableList.of(\n            \"[-] PARSING BUCK FILES...FINISHED 0.2s\"));\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(buildArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(buildTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\n        \"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(listener, 540L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(fakeRule),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 700L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (checking_cache)\"));\n\n    BuildRuleCacheEvent.CacheStepStarted cacheStepStarted = BuildRuleCacheEvent.started(\n        fakeRule,\n        BuildRuleCacheEvent.CacheStepType.INPUT_BASED);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            cacheStepStarted,\n            701L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 701L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (running checking_cache_input_based[0.0s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleCacheEvent.finished(cacheStepStarted),\n            702L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 702L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (checking_cache)\"));\n\n    ArtifactCompressionEvent.Started compressStarted = ArtifactCompressionEvent.started(\n        ArtifactCompressionEvent.Operation.COMPRESS, ImmutableSet.of());\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            compressStarted,\n            703L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 703L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (running artifact_compress[0.0s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ArtifactCompressionEvent.finished(compressStarted),\n            704L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 705L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (checking_cache)\"));\n\n    DirArtifactCacheEvent.DirArtifactCacheEventFactory dirArtifactCacheEventFactory =\n        new DirArtifactCacheEvent.DirArtifactCacheEventFactory();\n\n    ArtifactCacheEvent.Started dirFetchStarted = dirArtifactCacheEventFactory\n        .newFetchStartedEvent(ImmutableSet.of());\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            dirFetchStarted,\n            740L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 741L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.3s\",\n        \" |=> //banana:stand...  0.1s (running dir_artifact_fetch[0.0s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            dirArtifactCacheEventFactory.newFetchFinishedEvent(\n                dirFetchStarted,\n                CacheResult.hit(\"dir\")),\n            742L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 800L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.4s\",\n        \" |=> //banana:stand...  0.2s (checking_cache)\"));\n\n    String stepShortName = \"doing_something\";\n    String stepDescription = \"working hard\";\n    UUID stepUuid = UUID.randomUUID();\n    StepEvent.Started stepEventStarted =\n        StepEvent.started(stepShortName, stepDescription, stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            800L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 900L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.5s\",\n        \" |=> //banana:stand...  0.3s (running doing_something[0.1s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, 0),\n            900L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                fakeRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 1000L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.6s\",\n        \" |=> IDLE\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(cachedRule),\n            1010L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 2L));\n\n    validateConsole(listener, 1100L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.7s\",\n        \" |=> IDLE\",\n        \" |=> //chicken:dance...  0.1s (checking_cache)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                cachedRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1120L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 2L));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1234L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 0.8s\";\n\n    validateConsole(listener, 1300L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ConsoleEvent.severe(SEVERE_MESSAGE),\n            1500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsoleWithLogLines(\n        listener,\n        1600L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine),\n        ImmutableList.of(SEVERE_MESSAGE));\n\n    InstallEvent.Started installEventStarted = InstallEvent.started(fakeTarget);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            installEventStarted,\n            2500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 3000L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        \"[+] INSTALLING...0.5s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            InstallEvent.finished(\n                installEventStarted,\n                true, Optional.empty(),\n                Optional.empty()),\n            4000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String installingFinished = \"[-] INSTALLING...FINISHED 1.5s\";\n\n    validateConsole(listener, 5000L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished));\n\n    HttpArtifactCacheEvent.Scheduled storeScheduledOne =\n        postStoreScheduled(eventBus, 0L, TARGET_ONE, 6000L);\n\n    HttpArtifactCacheEvent.Scheduled storeScheduledTwo =\n        postStoreScheduled(eventBus, 0L, TARGET_TWO, 6010L);\n\n    HttpArtifactCacheEvent.Scheduled storeScheduledThree =\n        postStoreScheduled(eventBus, 0L, TARGET_THREE, 6020L);\n\n    validateConsole(listener, 6021L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished,\n        \"[+] HTTP CACHE UPLOAD...0.00 B (0 COMPLETE/0 FAILED/0 UPLOADING/3 PENDING)\"));\n\n    HttpArtifactCacheEvent.Started storeStartedOne =\n        postStoreStarted(eventBus, 0, 6025L, storeScheduledOne);\n\n    validateConsole(listener, 7000, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished,\n        \"[+] HTTP CACHE UPLOAD...0.00 B (0 COMPLETE/0 FAILED/1 UPLOADING/2 PENDING)\"));\n\n    long artifactSizeOne = SizeUnit.KILOBYTES.toBytes(1.5);\n    postStoreFinished(eventBus, 0, artifactSizeOne, 7020L, true, storeStartedOne);\n\n    validateConsole(listener, 7020, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished,\n        \"[+] HTTP CACHE UPLOAD...1.50 KB (1 COMPLETE/0 FAILED/0 UPLOADING/2 PENDING)\"));\n\n    HttpArtifactCacheEvent.Started storeStartedTwo =\n        postStoreStarted(eventBus, 0, 7030L, storeScheduledTwo);\n    long artifactSizeTwo = SizeUnit.KILOBYTES.toBytes(1.6);\n    postStoreFinished(eventBus, 0, artifactSizeTwo, 7030L, false, storeStartedTwo);\n\n    validateConsole(listener, 7040, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished,\n        \"[+] HTTP CACHE UPLOAD...1.50 KB (1 COMPLETE/1 FAILED/0 UPLOADING/1 PENDING)\"));\n\n    HttpArtifactCacheEvent.Started storeStartedThree =\n        postStoreStarted(eventBus, 0, 7040L, storeScheduledThree);\n    long artifactSizeThree = SizeUnit.KILOBYTES.toBytes(0.6);\n    postStoreFinished(eventBus, 0, artifactSizeThree, 7040L, true, storeStartedThree);\n\n    validateConsole(listener, 7040, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine,\n        installingFinished,\n        \"[+] HTTP CACHE UPLOAD...2.10 KB (2 COMPLETE/1 FAILED/0 UPLOADING/0 PENDING)\"));\n\n    listener.render();\n    TestConsole console = (TestConsole) listener.console;\n    String beforeStderrWrite = console.getTextWrittenToStdErr();\n    console.getStdErr().print(\"ROFLCOPTER\");\n    listener.render();\n    assertEquals(\"After stderr is written to by someone other than SuperConsole, rendering \" +\n            \"should be a noop.\",\n        beforeStderrWrite + \"ROFLCOPTER\", console.getTextWrittenToStdErr());\n  }\n\n  @Test\n  public void testSimpleBuildWithProgress() throws IOException {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n\n    BuildTarget fakeTarget = BuildTargetFactory.newInstance(\"//banana:stand\");\n    BuildTarget cachedTarget = BuildTargetFactory.newInstance(\"//chicken:dance\");\n    ImmutableSet<BuildTarget> buildTargets = ImmutableSet.of(fakeTarget, cachedTarget);\n    Iterable<String> buildArgs = Iterables.transform(buildTargets, Object::toString);\n    FakeBuildRule fakeRule = new FakeBuildRule(\n        fakeTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n    FakeBuildRule cachedRule = new FakeBuildRule(\n        cachedTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n\n    ProgressEstimator e = new ProgressEstimator(\n        getStorageForTest(),\n        eventBus,\n        ObjectMappers.newDefaultInstance());\n    listener.setProgressEstimator(e);\n    eventBus.register(listener);\n\n    BuildEvent.RuleCountCalculated ruleCountCalculated =\n        BuildEvent.ruleCountCalculated(ImmutableSet.of(), 10);\n    eventBus.post(ruleCountCalculated);\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(buildArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(buildTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\n        \"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(\n                parseStarted,\n                Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(listener, 540L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.1s\" + \" [0%] (0/10 JOBS, 0 UPDATED, \" +\n            \"0 [0.0%] CACHE MISS)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(fakeRule),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 800L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.4s\" + \" [0%] (0/10 JOBS, 0 UPDATED, \" +\n            \"0 [0.0%] CACHE MISS)\",\n        \" |=> //banana:stand...  0.2s (checking_cache)\"));\n\n    String stepShortName = \"doing_something\";\n    String stepDescription = \"working hard\";\n    UUID stepUuid = UUID.randomUUID();\n    StepEvent.Started stepEventStarted =\n        StepEvent.started(stepShortName, stepDescription, stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            800L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 900L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.5s\" + \" [0%] (0/10 JOBS, 0 UPDATED, \" +\n            \"0 [0.0%] CACHE MISS)\",\n        \" |=> //banana:stand...  0.3s (running doing_something[0.1s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, 0),\n            900L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                fakeRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 1000L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.6s [10%] (1/10 JOBS, 1 UPDATED, 1 [10.0%] CACHE MISS)\",\n        \" |=> IDLE\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(cachedRule),\n            1010L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 2L));\n\n    validateConsole(listener, 1100L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.7s [10%] (1/10 JOBS, 1 UPDATED, 1 [10.0%] CACHE MISS)\",\n        \" |=> IDLE\",\n        \" |=> //chicken:dance...  0.1s (checking_cache)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                cachedRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1120L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 2L));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1234L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 0.8s\" +\n        \" [100%] (2/10 JOBS, 2 UPDATED, 2 [20.0%] CACHE MISS)\";\n\n    validateConsole(listener, 1300L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine));\n  }\n\n  @Test\n  public void testSimpleDistBuildWithProgress() throws IOException {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    BuildTarget fakeTarget = BuildTargetFactory.newInstance(\"//banana:stand\");\n    BuildTarget cachedTarget = BuildTargetFactory.newInstance(\"//chicken:dance\");\n    ImmutableSet<BuildTarget> buildTargets = ImmutableSet.of(fakeTarget, cachedTarget);\n    Iterable<String> buildArgs = Iterables.transform(buildTargets, Object::toString);\n\n    ProgressEstimator e = new ProgressEstimator(\n        getStorageForTest(),\n        eventBus,\n        ObjectMappers.newDefaultInstance());\n    listener.setProgressEstimator(e);\n    eventBus.register(listener);\n\n    ProjectBuildFileParseEvents.Started parseEventStarted =\n        new ProjectBuildFileParseEvents.Started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of(\n        \"[+] PARSING BUCK FILES...0.0s\"));\n\n    validateConsole(\n        listener, 100L, ImmutableList.of(\n            \"[+] PARSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectBuildFileParseEvents.Finished(parseEventStarted),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(\n        listener, 200L, ImmutableList.of(\n            \"[-] PARSING BUCK FILES...FINISHED 0.2s\"));\n\n    // trigger a distributed build instead of a local build\n    BuildEvent.Started buildEventStarted = BuildEvent.started(buildArgs, true);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(buildTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\n        \"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(\n                parseStarted,\n                Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(listener, 540L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] DISTBUILD STATUS: INIT...\",\n        \"[+] BUILDING...0.1s [0%]\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new DistBuildStatusEvent(\n                DistBuildStatus.builder()\n                    .setStatus(BuildStatus.QUEUED)\n                    .setMessage(\"step 1\")\n                    .setETAMillis(2000)\n                    .setLogBook(Optional.empty())\n                    .build()),\n            800L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 900L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] DISTBUILD STATUS: QUEUED... ETA: 2.0s (step 1)\",\n        \"[+] BUILDING...0.5s [29%]\"));\n\n\n    LinkedList<LogRecord> debugLogs = new LinkedList<LogRecord>();\n    LogRecord log = new LogRecord();\n    log.setName(\"buck-client\");\n    log.setTimestampMillis(0);\n    debugLogs.add(log);\n    final String distDebugLine = \"Distributed build debug info:\";\n    final String logLine1 = \"[1970-01-01 00:00:00.000] buck-client\";\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new DistBuildStatusEvent(\n                DistBuildStatus.builder()\n                    .setStatus(BuildStatus.BUILDING)\n                    .setMessage(\"step 2\")\n                    .setETAMillis(1800)\n                    .setLogBook(debugLogs)\n                    .build()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 1100L, ImmutableList.of(\n        distDebugLine,\n        logLine1,\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] DISTBUILD STATUS: BUILDING... ETA: 1.8s (step 2)\",\n        \"[+] BUILDING...0.7s [50%]\"));\n\n\n    log = new LogRecord();\n    log.setName(\"buck-frontend\");\n    log.setTimestampMillis(100);\n    debugLogs.add(log);\n    final String logLine2 = \"[1970-01-01 00:00:00.100] buck-frontend\";\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new DistBuildStatusEvent(\n                DistBuildStatus.builder()\n                    .setStatus(BuildStatus.BUILDING)\n                    .setMessage(\"step 2\")\n                    .setETAMillis(1600)\n                    .setLogBook(debugLogs)\n                    .build()),\n            1200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 1300L, ImmutableList.of(\n        distDebugLine,\n        logLine1,\n        logLine2,\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] DISTBUILD STATUS: BUILDING... ETA: 1.6s (step 2)\",\n        \"[+] BUILDING...0.9s [64%]\"));\n\n\n    log = new LogRecord();\n    log.setName(\"build_slave_start\");\n    log.setTimestampMillis(200);\n    debugLogs.add(log);\n    final String logLine3 = \"[1970-01-01 00:00:00.200] build_slave_start\";\n\n    log = new LogRecord();\n    log.setName(\"build_slave_end\");\n    log.setTimestampMillis(300);\n    debugLogs.add(log);\n    final String logLine4 = \"[1970-01-01 00:00:00.300] build_slave_end\";\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new DistBuildStatusEvent(\n                DistBuildStatus.builder()\n                    .setStatus(BuildStatus.FINISHED_SUCCESSFULLY)\n                    .setMessage(\"step 3\")\n                    .setETAMillis(0)\n                    .setLogBook(debugLogs)\n                    .build()),\n            1400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String distbuildLine = \"[-] DISTBUILD STATUS: FINISHED_SUCCESSFULLY... (step 3)\";\n    validateConsole(listener, 1500L, ImmutableList.of(\n        distDebugLine,\n        logLine1,\n        logLine2,\n        logLine3,\n        logLine4,\n        parsingLine,\n        DOWNLOAD_STRING,\n        distbuildLine,\n        \"[+] BUILDING...1.1s [100%]\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 1.2s [100%]\";\n\n    validateConsole(listener, 1600L, ImmutableList.of(\n        distDebugLine,\n        logLine1,\n        logLine2,\n        logLine3,\n        logLine4,\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        distbuildLine,\n        buildingLine));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ConsoleEvent.severe(SEVERE_MESSAGE),\n            1700L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsoleWithLogLines(\n        listener,\n        1750L,\n        ImmutableList.of(\n            distDebugLine,\n            logLine1,\n            logLine2,\n            logLine3,\n            logLine4,\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            distbuildLine,\n            buildingLine),\n        ImmutableList.of(SEVERE_MESSAGE));\n  }\n\n  @Test\n  public void testSimpleTest() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n\n    BuildTarget testTarget = BuildTargetFactory.newInstance(\"//:test\");\n    ImmutableSet<BuildTarget> testTargets = ImmutableSet.of(testTarget);\n    Iterable<String> testArgs = Iterables.transform(testTargets, Object::toString);\n    FakeBuildRule testBuildRule = new FakeBuildRule(\n        testTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n\n    ProjectBuildFileParseEvents.Started parseEventStarted =\n        new ProjectBuildFileParseEvents.Started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of(\n        \"[+] PARSING BUCK FILES...0.0s\"));\n\n    validateConsole(listener, 100L, ImmutableList.of(\"[+] PARSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectBuildFileParseEvents.Finished(parseEventStarted),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 200L, ImmutableList.of(\"[-] PARSING BUCK FILES...FINISHED 0.2s\"));\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(testArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(testTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(\n        listener,\n        540L,\n        ImmutableList.of(parsingLine, DOWNLOAD_STRING, \"[+] BUILDING...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(testBuildRule),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n\n    validateConsole(\n        listener,\n        800L,\n        ImmutableList.of(parsingLine, DOWNLOAD_STRING, \"[+] BUILDING...0.4s\",\n            \" |=> //:test...  0.2s (checking_cache)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                testBuildRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1234L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 0.8s\";\n\n    validateConsole(\n        listener,\n        1300L,\n        ImmutableList.of(parsingLine, FINISHED_DOWNLOAD_STRING, buildingLine));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.started(\n                true, // isRunAllTests\n                TestSelectorList.empty(),\n                false, // shouldExplainTestSelectorList\n                ImmutableSet.copyOf(testArgs)),\n            2500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3000L,\n        ImmutableList.of(parsingLine, FINISHED_DOWNLOAD_STRING, buildingLine,\n            \"[+] TESTING...0.5s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRuleEvent.started(testTarget),\n            3100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.7s\",\n            \" |=> //:test...  0.1s\"));\n\n    UUID stepUuid = new UUID(0, 1);\n    StepEvent.Started stepEventStarted = StepEvent.started(\n        \"step_name\",\n        \"step_desc\",\n        stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            3300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3400L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.9s\",\n            \" |=> //:test...  0.3s (running step_name[0.1s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, 0),\n            3500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3600L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.1s\",\n            \" |=> //:test...  0.5s\"));\n\n    UUID testUUID = new UUID(2, 3);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.started(testUUID, \"TestClass\", \"Foo\"),\n            3700L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3800L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.3s\",\n            \" |=> //:test...  0.7s (running Foo[0.1s])\"));\n\n    TestResultSummary testResultSummary =\n        new TestResultSummary(\n            \"TestClass\",\n            \"Foo\",\n            ResultType.SUCCESS,\n            0L, // time\n            null, // message\n            null, // stacktrace\n            null, // stdOut\n            null); // stdErr\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.finished(\n                testUUID,\n                testResultSummary),\n            3900L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        4000L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.5s (1 PASS/0 FAIL)\",\n            \" |=> //:test...  0.9s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.finished(\n                ImmutableSet.copyOf(testArgs),\n                ImmutableList.of(\n                    TestResults.of(\n                        testTarget,\n                        ImmutableList.of(\n                            new TestCaseSummary(\n                                \"TestClass\",\n                                ImmutableList.of(\n                                    testResultSummary))),\n                        ImmutableSet.of(), // contacts\n                        ImmutableSet.of()))), // labels\n            4100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String testingLine = \"[-] TESTING...FINISHED 1.6s (1 PASS/0 FAIL)\";\n\n    validateConsoleWithStdOutAndErr(\n        listener,\n        4200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            testingLine),\n        ImmutableList.of(),\n        Optional.of(\n            Joiner.on('\\n').join(\n                \"RESULTS FOR ALL TESTS\",\n                \"PASS    <100ms  1 Passed   0 Skipped   0 Failed   TestClass\",\n                \"TESTS PASSED\",\n                \"\")),\n        // We don't care about stderr, since the last frame will be flushed there.\n        Optional.empty());\n  }\n\n  @Test\n  public void testSkippedTest() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n\n    BuildTarget testTarget = BuildTargetFactory.newInstance(\"//:test\");\n    ImmutableSet<BuildTarget> testTargets = ImmutableSet.of(testTarget);\n    Iterable<String> testArgs = Iterables.transform(testTargets, Object::toString);\n    FakeBuildRule testBuildRule = new FakeBuildRule(\n        testTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n\n    ProjectBuildFileParseEvents.Started parseEventStarted =\n        new ProjectBuildFileParseEvents.Started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] PARSING BUCK FILES...0.0s\"));\n\n    validateConsole(\n        listener,\n        100L,\n        ImmutableList.of(\"[+] PARSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectBuildFileParseEvents.Finished(parseEventStarted),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(\n        listener,\n        200L,\n        ImmutableList.of(\"[-] PARSING BUCK FILES...FINISHED 0.2s\"));\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(testArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(testTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(\n        listener,\n        540L,\n        ImmutableList.of(parsingLine, DOWNLOAD_STRING, \"[+] BUILDING...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(testBuildRule),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n\n    validateConsole(listener, 800L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.4s\",\n        \" |=> //:test...  0.2s (checking_cache)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                testBuildRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1234L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 0.8s\";\n\n    validateConsole(listener, 1300L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.started(\n                true, // isRunAllTests\n                TestSelectorList.empty(),\n                false, // shouldExplainTestSelectorList\n                ImmutableSet.copyOf(testArgs)),\n            2500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3000L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.5s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRuleEvent.started(testTarget),\n            3100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.7s\",\n            \" |=> //:test...  0.1s\"));\n\n    UUID stepUuid = new UUID(0, 1);\n    StepEvent.Started stepEventStarted = StepEvent.started(\n        \"step_name\",\n        \"step_desc\",\n        stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            3300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3400L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.9s\",\n            \" |=> //:test...  0.3s (running step_name[0.1s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, 0),\n            3500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3600L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.1s\",\n            \" |=> //:test...  0.5s\"));\n\n    UUID testUUID = new UUID(2, 3);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.started(testUUID, \"TestClass\", \"Foo\"),\n            3700L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3800L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.3s\",\n            \" |=> //:test...  0.7s (running Foo[0.1s])\"));\n\n    TestResultSummary testResultSummary =\n        new TestResultSummary(\n            \"TestClass\",\n            \"Foo\",\n            ResultType.ASSUMPTION_VIOLATION,\n            0L, // time\n            null, // message\n            null, // stacktrace\n            null, // stdOut\n            null); // stdErr\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.finished(testUUID, testResultSummary),\n            3900L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        4000L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.5s (0 PASS/1 SKIP/0 FAIL)\",\n            \" |=> //:test...  0.9s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.finished(\n                ImmutableSet.copyOf(testArgs),\n                ImmutableList.of(\n                    TestResults.of(\n                        testTarget,\n                        ImmutableList.of(\n                            new TestCaseSummary(\"TestClass\", ImmutableList.of(testResultSummary))),\n                        ImmutableSet.of(), // contacts\n                        ImmutableSet.of()))), // labels\n            4100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String testingLine = \"[-] TESTING...FINISHED 1.6s (0 PASS/1 SKIP/0 FAIL)\";\n\n    validateConsoleWithStdOutAndErr(\n        listener,\n        4200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            testingLine),\n        ImmutableList.of(),\n        Optional.of(\n            Joiner.on('\\n').join(\n                \"RESULTS FOR ALL TESTS\",\n                \"ASSUME  <100ms  0 Passed   1 Skipped   0 Failed   TestClass\",\n                \"TESTS PASSED (with some assumption violations)\",\n                \"\")),\n        // We don't care about stderr, since the last frame will be flushed there.\n        Optional.empty());\n  }\n\n  @Test\n  public void testFailingTest() {\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    TestConsole console = new TestConsole();\n\n    BuildTarget testTarget = BuildTargetFactory.newInstance(\"//:test\");\n    ImmutableSet<BuildTarget> testTargets = ImmutableSet.of(testTarget);\n    Iterable<String> testArgs = Iterables.transform(testTargets, Object::toString);\n    FakeBuildRule testBuildRule = new FakeBuildRule(\n        testTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n\n    SuperConsoleEventBusListener listener =\n        new SuperConsoleEventBusListener(\n            emptySuperConsoleConfig,\n            console,\n            fakeClock,\n            noisySummaryVerbosity,\n            new DefaultExecutionEnvironment(\n                ImmutableMap.copyOf(System.getenv()),\n                System.getProperties()),\n            Optional.empty(),\n            Locale.US,\n            logPath,\n            timeZone);\n    eventBus.register(listener);\n\n    ProjectBuildFileParseEvents.Started parseEventStarted =\n        new ProjectBuildFileParseEvents.Started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] PARSING BUCK FILES...0.0s\"));\n\n    validateConsole(\n        listener,\n        100L,\n        ImmutableList.of(\"[+] PARSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectBuildFileParseEvents.Finished(parseEventStarted),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(\n        listener,\n        200L,\n        ImmutableList.of(\"[-] PARSING BUCK FILES...FINISHED 0.2s\"));\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(testArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ParseEvent.Started parseStarted = ParseEvent.started(testTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 300L, ImmutableList.of(\"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(listener, 540L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(testBuildRule),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n\n    validateConsole(listener, 800L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.4s\",\n        \" |=> //:test...  0.2s (checking_cache)\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                testBuildRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            1000L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildEvent.finished(buildEventStarted, 0),\n            1234L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String buildingLine = \"[-] BUILDING...FINISHED 0.8s\";\n\n    validateConsole(listener, 1300L, ImmutableList.of(\n        parsingLine,\n        FINISHED_DOWNLOAD_STRING,\n        buildingLine));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.started(\n                true, // isRunAllTests\n                TestSelectorList.empty(),\n                false, // shouldExplainTestSelectorList\n                ImmutableSet.copyOf(testArgs)),\n            2500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3000L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.5s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRuleEvent.started(testTarget),\n            3100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.7s\",\n            \" |=> //:test...  0.1s\"));\n\n    UUID stepUuid = new UUID(0, 1);\n    StepEvent.Started stepEventStarted = StepEvent.started(\n        \"step_name\",\n        \"step_desc\",\n        stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            3300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3400L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...0.9s\",\n            \" |=> //:test...  0.3s (running step_name[0.1s])\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, 0),\n            3500L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3600L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.1s\",\n            \" |=> //:test...  0.5s\"));\n\n    UUID testUUID = new UUID(2, 3);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.started(testUUID, \"TestClass\", \"Foo\"),\n            3700L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(\n        listener,\n        3800L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.3s\",\n            \" |=> //:test...  0.7s (running Foo[0.1s])\"));\n\n    TestResultSummary testResultSummary =\n        new TestResultSummary(\n            \"TestClass\",\n            \"Foo\",\n            ResultType.FAILURE,\n            0L, // time\n            \"Foo.java:47: Assertion failure: 'foo' != 'bar'\", // message\n            null, // stacktrace\n            \"Message on stdout\", // stdOut\n            \"Message on stderr\"); // stdErr\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestSummaryEvent.finished(\n                testUUID,\n                testResultSummary),\n            3900L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsoleWithLogLines(\n        listener,\n        4000L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            \"[+] TESTING...1.5s (0 PASS/1 FAIL)\",\n            \" |=> //:test...  0.9s\"),\n        ImmutableList.of(\n            \"FAILURE TestClass Foo: Foo.java:47: Assertion failure: 'foo' != 'bar'\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            TestRunEvent.finished(\n                ImmutableSet.copyOf(testArgs),\n                ImmutableList.of(\n                    TestResults.of(\n                        testTarget,\n                        ImmutableList.of(\n                            new TestCaseSummary(\n                                \"TestClass\",\n                                ImmutableList.of(\n                                    testResultSummary))),\n                        ImmutableSet.of(), // contacts\n                        ImmutableSet.of()))), // labels\n            4100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    final String testingLine = \"[-] TESTING...FINISHED 1.6s (0 PASS/1 FAIL)\";\n\n    validateConsoleWithStdOutAndErr(\n        listener,\n        4200L,\n        ImmutableList.of(\n            parsingLine,\n            FINISHED_DOWNLOAD_STRING,\n            buildingLine,\n            testingLine),\n        ImmutableList.of(),\n        Optional.of(\n            Joiner.on('\\n').join(\n                \"RESULTS FOR ALL TESTS\",\n                \"FAIL    <100ms  0 Passed   0 Skipped   1 Failed   TestClass\",\n                \"FAILURE TestClass Foo: Foo.java:47: Assertion failure: 'foo' != 'bar'\",\n                \"====STANDARD OUT====\",\n                \"Message on stdout\",\n                \"====STANDARD ERR====\",\n                \"Message on stderr\",\n                \"TESTS FAILED: 1 FAILURE\",\n                \"Failed target: //:test\",\n                \"FAIL TestClass\",\n                \"\")),\n        // We don't care about stderr, since the last frame will be flushed there.\n        Optional.empty());\n  }\n\n  @Test\n  public void testBuildRuleSuspendResumeEvents() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    SourcePathResolver pathResolver = new SourcePathResolver(\n        new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer())\n    );\n\n    BuildTarget fakeTarget = BuildTargetFactory.newInstance(\"//banana:stand\");\n    ImmutableSet<BuildTarget> buildTargets = ImmutableSet.of(fakeTarget);\n    Iterable<String> buildArgs = Iterables.transform(buildTargets, Object::toString);\n    FakeBuildRule fakeRule = new FakeBuildRule(\n        fakeTarget,\n        pathResolver,\n        ImmutableSortedSet.of());\n    String stepShortName = \"doing_something\";\n    String stepDescription = \"working hard\";\n    UUID stepUuid = UUID.randomUUID();\n\n    FakeRuleKeyBuilderFactory ruleKeyBuilderFactory = new FakeRuleKeyBuilderFactory(\n        ImmutableMap.of(\n            fakeTarget, new RuleKey(\"aaaa\")));\n\n    // Start the build.\n    BuildEvent.Started buildEventStarted = BuildEvent.started(buildArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Start and stop parsing.\n    String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.0s\";\n    ParseEvent.Started parseStarted = ParseEvent.started(buildTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(ActionGraphEvent.started()),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Start the rule.\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.started(fakeRule),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Post events that run a step for 100ms.\n    StepEvent.Started stepEventStarted =\n        StepEvent.started(stepShortName, stepDescription, stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            stepEventStarted,\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(stepEventStarted, /* exitCode */ 0),\n            100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Suspend the rule.\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.suspended(fakeRule, ruleKeyBuilderFactory),\n            100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Verify that the rule isn't printed now that it's suspended.\n    validateConsole(\n        listener,\n        200L,\n        ImmutableList.of(\n            parsingLine,\n            DOWNLOAD_STRING,\n            \"[+] BUILDING...0.2s\",\n            \" |=> IDLE\"));\n\n    // Resume the rule.\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.resumed(fakeRule, ruleKeyBuilderFactory),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Verify that we print \"checking local...\" now that we've resumed, and that we're accounting\n    // for previous running time.\n    validateConsole(\n        listener,\n        300L,\n        ImmutableList.of(\n            parsingLine,\n            DOWNLOAD_STRING,\n            \"[+] BUILDING...0.3s\",\n            \" |=> //banana:stand...  0.1s (checking_cache)\"));\n\n    // Post events that run another step.\n    StepEvent.Started step2EventStarted =\n        StepEvent.started(stepShortName, stepDescription, stepUuid);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            step2EventStarted,\n            400L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Verify the current console now accounts for the step.\n    validateConsole(\n        listener,\n        500L,\n        ImmutableList.of(\n            parsingLine,\n            DOWNLOAD_STRING,\n            \"[+] BUILDING...0.5s\",\n            \" |=> //banana:stand...  0.3s (running doing_something[0.1s])\"));\n\n    // Finish the step and rule.\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            StepEvent.finished(step2EventStarted, /* exitCode */ 0),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            BuildRuleEvent.finished(\n                fakeRule,\n                BuildRuleKeys.of(new RuleKey(\"aaaa\")),\n                BuildRuleStatus.SUCCESS,\n                CacheResult.miss(),\n                Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty(),\n                Optional.empty()),\n            600L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    // Verify that the rule isn't printed now that it's finally finished..\n    validateConsole(\n        listener,\n        700L,\n        ImmutableList.of(\n            parsingLine,\n            DOWNLOAD_STRING,\n            \"[+] BUILDING...0.7s\",\n            \" |=> IDLE\"));\n  }\n\n  @Test\n  public void debugConsoleEventShouldNotPrintLogLineToConsole() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ConsoleEvent.fine(\"I'll get you Bluths - Hel-loh\"),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    validateConsole(listener, 0L, ImmutableList.of());\n  }\n\n  @Test\n  public void testParsingStatus() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    // new daemon instance & action graph cache miss\n    eventBus.post(DaemonEvent.newDaemonInstance());\n    assertEquals(NEW_DAEMON_INSTANCE_MSG, listener.getParsingStatus());\n    eventBus.post(ActionGraphEvent.Cache.miss());\n    assertEquals(NEW_DAEMON_INSTANCE_MSG, listener.getParsingStatus());\n\n    // overflow scenario\n    String overflowMessage = \"and if you go chasing rabbits\";\n    eventBus.post(WatchmanStatusEvent.overflow(overflowMessage));\n    assertEquals(createParsingMessage(EMOJI_SNAIL, overflowMessage), listener.getParsingStatus());\n\n    // file added scenario\n    eventBus.post(WatchmanStatusEvent.fileCreation());\n    assertEquals(createParsingMessage(EMOJI_SNAIL, \"File added\"), listener.getParsingStatus());\n\n    // file removed scenario\n    eventBus.post(WatchmanStatusEvent.fileDeletion());\n    assertEquals(createParsingMessage(EMOJI_SNAIL, \"File removed\"), listener.getParsingStatus());\n\n    // symlink invalidation scenario\n    eventBus.post(ParsingEvent.symlinkInvalidation());\n    assertEquals(\n        createParsingMessage(EMOJI_WHALE, \"Symlink caused cache invalidation\"),\n        listener.getParsingStatus());\n\n    // environmental change scenario\n    eventBus.post(ParsingEvent.environmentalChange(\"WHITE_RABBIT=1\"));\n    assertEquals(\n        createParsingMessage(EMOJI_SNAIL, \"Environment variable changes: WHITE_RABBIT=1\"),\n        listener.getParsingStatus());\n\n    // action graph cache hit scenario\n    eventBus.post(ActionGraphEvent.Cache.hit());\n    assertEquals(createParsingMessage(EMOJI_BUNNY, \"\"), listener.getParsingStatus());\n  }\n\n  @Test\n  public void testProjectGeneration() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.started(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] GENERATING PROJECT...0.0s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectGenerationEvent.Finished(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[-] GENERATING PROJECT...FINISHED 0.0s\"));\n  }\n\n  @Test\n  public void testProjectGenerationWithProgress() throws IOException {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    Path storagePath = getStorageForTest();\n    Map<String, Object> storageContents = ImmutableSortedMap.<String, Object>naturalOrder()\n        .put(\n            \"project arg1 arg2\",\n            ImmutableSortedMap.<String, Number>naturalOrder()\n                .put(ProgressEstimator.EXPECTED_NUMBER_OF_GENERATED_PROJECT_FILES, 10)\n                .build())\n        .build();\n    String contents = new Gson().toJson(storageContents);\n    Files.createDirectories(storagePath.getParent());\n    Files.write(storagePath, contents.getBytes(StandardCharsets.UTF_8));\n\n    ProgressEstimator e = new ProgressEstimator(\n        storagePath,\n        eventBus,\n        ObjectMappers.newDefaultInstance());\n    listener.setProgressEstimator(e);\n\n    eventBus.post(\n        CommandEvent.started(\n            \"project\",\n            ImmutableList.of(\"arg1\", \"arg2\"),\n            false));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.started(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] GENERATING PROJECT...0.0s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.processed(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.processed(),\n            100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 100L, ImmutableList.of(\"[+] GENERATING PROJECT...0.1s [20%]\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectGenerationEvent.Finished(),\n            200L,\n            TimeUnit.MILLISECONDS,\n            0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\n        \"[-] GENERATING PROJECT...FINISHED 0.2s [100%]\"));\n  }\n\n  @Test\n  public void testPostingEventBeforeAnyLines() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    eventBus.post(ConsoleEvent.info(\"Hello world!\"));\n\n    validateConsoleWithLogLines(\n        listener,\n        0L,\n        ImmutableList.of(),\n        ImmutableList.of(\"Hello world!\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.started(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] GENERATING PROJECT...0.0s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectGenerationEvent.Finished(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[-] GENERATING PROJECT...FINISHED 0.0s\"));\n  }\n\n  @Test\n  public void renderLinesWithLineLimit() throws IOException {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    try (SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus)) {\n\n      FakeThreadStateRenderer fakeRenderer =\n          new FakeThreadStateRenderer(ImmutableList.of(2L, 1L, 4L, 8L, 5L));\n      ImmutableList.Builder<String> lines;\n\n      ImmutableList<String> fullOutput = ImmutableList.of(\n          \" |=> Status of thread 2\",\n          \" |=> Status of thread 1\",\n          \" |=> Status of thread 4\",\n          \" |=> Status of thread 8\",\n          \" |=> Status of thread 5\");\n\n      compareOutput(listener, fakeRenderer, fullOutput, 10000);\n      compareOutput(listener, fakeRenderer, fullOutput, 10000);\n      compareOutput(listener, fakeRenderer, fullOutput, 6);\n      compareOutput(listener, fakeRenderer, fullOutput, 5);\n\n      lines = ImmutableList.builder();\n      listener.renderLines(fakeRenderer, lines, 4, false);\n      assertThat(\n          lines.build(),\n          equalTo(\n              ImmutableList.of(\n                  \" |=> Status of thread 2\",\n                  \" |=> Status of thread 1\",\n                  \" |=> Status of thread 4\",\n                  \" |=> 2 MORE THREADS: t8 t5\")));\n      assertThat(fakeRenderer.lastSortWasByTime(), is(true));\n\n      lines = ImmutableList.builder();\n      listener.renderLines(fakeRenderer, lines, 2, false);\n      assertThat(\n          lines.build(),\n          equalTo(\n              ImmutableList.of(\n                  \" |=> Status of thread 2\",\n                  \" |=> 4 MORE THREADS: t1 t4 t8 t5\")));\n      assertThat(fakeRenderer.lastSortWasByTime(), is(true));\n\n      lines = ImmutableList.builder();\n      listener.renderLines(fakeRenderer, lines, 1, false);\n      assertThat(\n          lines.build(),\n          equalTo(\n              ImmutableList.of(\n                  \" |=> 5 THREADS: t2 t1 t4 t8 t5\")));\n      assertThat(fakeRenderer.lastSortWasByTime(), is(true));\n    }\n  }\n\n  private void validateConsole(\n      SuperConsoleEventBusListener listener,\n      long timeMs,\n      ImmutableList<String> lines) {\n    validateConsoleWithLogLines(listener, timeMs, lines, ImmutableList.of());\n  }\n\n  private void validateConsoleWithLogLines(\n      SuperConsoleEventBusListener listener,\n      long timeMs,\n      ImmutableList<String> lines,\n      ImmutableList<String> logLines) {\n    validateConsoleWithStdOutAndErr(\n        listener,\n        timeMs,\n        lines,\n        logLines,\n        Optional.of(\"\"),\n        Optional.of(\"\"));\n  }\n\n  private void validateConsoleWithStdOutAndErr(\n      SuperConsoleEventBusListener listener,\n      long timeMs,\n      ImmutableList<String> lines,\n      ImmutableList<String> logLines,\n      Optional<String> stdout,\n      Optional<String> stderr) {\n\n    if (stdout.isPresent()) {\n      assertThat(((TestConsole) listener.console).getTextWrittenToStdOut(), equalTo(stdout.get()));\n    }\n    if (stderr.isPresent()) {\n      assertThat(((TestConsole) listener.console).getTextWrittenToStdErr(), equalTo(stderr.get()));\n    }\n    assertThat(listener.createRenderLinesAtTime(timeMs), equalTo(lines));\n    assertThat(listener.createLogRenderLines(), equalTo(logLines));\n  }\n\n  @Test\n  public void timestampsInLocaleWithDecimalCommaFormatCorrectly() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener =\n        new SuperConsoleEventBusListener(\n            new SuperConsoleConfig(FakeBuckConfig.builder().build()),\n            new TestConsole(),\n            fakeClock,\n            silentSummaryVerbosity,\n            new DefaultExecutionEnvironment(\n                ImmutableMap.copyOf(System.getenv()),\n                System.getProperties()),\n            Optional.empty(),\n            // Note we use de_DE to ensure we get a decimal comma in the output.\n            Locale.GERMAN,\n            logPath,\n            timeZone);\n    eventBus.register(listener);\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ProjectGenerationEvent.started(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[+] GENERATING PROJECT...0,0s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            new ProjectGenerationEvent.Finished(),\n            0L,\n            TimeUnit.MILLISECONDS,\n            0L));\n\n    validateConsole(listener, 0L, ImmutableList.of(\"[-] GENERATING PROJECT...FINISHED 0,0s\"));\n  }\n\n  @Test\n  public void testBuildTimeDoesNotDisplayNegativeOffset() {\n    Clock fakeClock = new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));\n    BuckEventBus eventBus = BuckEventBusFactory.newInstance(fakeClock);\n    SuperConsoleEventBusListener listener = createSuperConsole(fakeClock, eventBus);\n\n    BuildTarget fakeTarget = BuildTargetFactory.newInstance(\"//banana:stand\");\n    ImmutableSet<BuildTarget> buildTargets = ImmutableSet.of(fakeTarget);\n    Iterable<String> buildArgs = Iterables.transform(buildTargets, Object::toString);\n\n    // Do a full parse and action graph cycle before the build event starts\n    // This sequencing occurs when running `buck project`\n    ParseEvent.Started parseStarted = ParseEvent.started(buildTargets);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            parseStarted,\n            100L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ParseEvent.finished(parseStarted, Optional.empty()),\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    ActionGraphEvent.Started actionGraphStarted = ActionGraphEvent.started();\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            actionGraphStarted,\n            200L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    validateConsole(listener, 200L, ImmutableList.of(\"[+] PROCESSING BUCK FILES...0.1s\"));\n\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            ActionGraphEvent.finished(actionGraphStarted),\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n    BuildEvent.Started buildEventStarted = BuildEvent.started(buildArgs);\n    eventBus.postWithoutConfiguring(\n        configureTestEventAtTime(\n            buildEventStarted,\n            300L,\n            TimeUnit.MILLISECONDS,\n            /* threadId */ 0L));\n\n\n    final String parsingLine = \"[-] PROCESSING BUCK FILES...FINISHED 0.2s\";\n\n    validateConsole(listener, 433L, ImmutableList.of(\n        parsingLine,\n        DOWNLOAD_STRING,\n        \"[+] BUILDING...0.1s\"));\n  }\n\n  private SuperConsoleEventBusListener createSuperConsole(Clock clock, BuckEventBus eventBus) {\n    SuperConsoleEventBusListener listener =\n        new SuperConsoleEventBusListener(\n            emptySuperConsoleConfig,\n            new TestConsole(),\n            clock,\n            silentSummaryVerbosity,\n            new DefaultExecutionEnvironment(\n                ImmutableMap.copyOf(System.getenv()),\n                System.getProperties()),\n            Optional.empty(),\n            Locale.US,\n            logPath,\n            timeZone);\n    eventBus.register(listener);\n    return listener;\n  }\n\n  private Path getStorageForTest() throws IOException {\n    return tmp.newFile();\n  }\n\n  private void compareOutput(\n      SuperConsoleEventBusListener listener,\n      FakeThreadStateRenderer fakeRenderer,\n      ImmutableList<String> fullOutput,\n      int maxLines) {\n    ImmutableList.Builder<String> lines;\n    lines = ImmutableList.builder();\n    listener.renderLines(fakeRenderer, lines, maxLines, false);\n    assertThat(lines.build(), equalTo(fullOutput));\n    assertThat(fakeRenderer.lastSortWasByTime(), is(false));\n  }\n}\n","repository":"https://github.com/facebook/buck.git","language":"java","tokens":[{"text":"com","line":16,"char":614,"type":"package"},{"text":"facebook","line":16,"char":618,"type":"package"},{"text":"buck","line":16,"char":627,"type":"package"},{"text":"event","line":16,"char":632,"type":"package"},{"text":"listener","line":16,"char":638,"type":"package"},{"text":"com","line":18,"char":663,"type":"import"},{"text":"facebook","line":18,"char":667,"type":"import"},{"text":"buck","line":18,"char":676,"type":"import"},{"text":"event","line":18,"char":681,"type":"import"},{"text":"TestEventConfigurator","line":18,"char":687,"type":"import"},{"text":"configureTestEventAtTime","line":18,"char":709,"type":"import"},{"text":"com","line":19,"char":749,"type":"import"},{"text":"facebook","line":19,"char":753,"type":"import"},{"text":"buck","line":19,"char":762,"type":"import"},{"text":"event","line":19,"char":767,"type":"import"},{"text":"listener","line":19,"char":773,"type":"import"},{"text":"ConsoleTestUtils","line":19,"char":782,"type":"import"},{"text":"postStoreFinished","line":19,"char":799,"type":"import"},{"text":"com","line":20,"char":832,"type":"import"},{"text":"facebook","line":20,"char":836,"type":"import"},{"text":"buck","line":20,"char":845,"type":"import"},{"text":"event","line":20,"char":850,"type":"import"},{"text":"listener","line":20,"char":856,"type":"import"},{"text":"ConsoleTestUtils","line":20,"char":865,"type":"import"},{"text":"postStoreScheduled","line":20,"char":882,"type":"import"},{"text":"com","line":21,"char":916,"type":"import"},{"text":"facebook","line":21,"char":920,"type":"import"},{"text":"buck","line":21,"char":929,"type":"import"},{"text":"event","line":21,"char":934,"type":"import"},{"text":"listener","line":21,"char":940,"type":"import"},{"text":"ConsoleTestUtils","line":21,"char":949,"type":"import"},{"text":"postStoreStarted","line":21,"char":966,"type":"import"},{"text":"com","line":22,"char":998,"type":"import"},{"text":"facebook","line":22,"char":1002,"type":"import"},{"text":"buck","line":22,"char":1011,"type":"import"},{"text":"event","line":22,"char":1016,"type":"import"},{"text":"listener","line":22,"char":1022,"type":"import"},{"text":"SuperConsoleEventBusListener","line":22,"char":1031,"type":"import"},{"text":"EMOJI_BUNNY","line":22,"char":1060,"type":"import"},{"text":"com","line":23,"char":1087,"type":"import"},{"text":"facebook","line":23,"char":1091,"type":"import"},{"text":"buck","line":23,"char":1100,"type":"import"},{"text":"event","line":23,"char":1105,"type":"import"},{"text":"listener","line":23,"char":1111,"type":"import"},{"text":"SuperConsoleEventBusListener","line":23,"char":1120,"type":"import"},{"text":"EMOJI_SNAIL","line":23,"char":1149,"type":"import"},{"text":"com","line":24,"char":1176,"type":"import"},{"text":"facebook","line":24,"char":1180,"type":"import"},{"text":"buck","line":24,"char":1189,"type":"import"},{"text":"event","line":24,"char":1194,"type":"import"},{"text":"listener","line":24,"char":1200,"type":"import"},{"text":"SuperConsoleEventBusListener","line":24,"char":1209,"type":"import"},{"text":"EMOJI_WHALE","line":24,"char":1238,"type":"import"},{"text":"com","line":25,"char":1265,"type":"import"},{"text":"facebook","line":25,"char":1269,"type":"import"},{"text":"buck","line":25,"char":1278,"type":"import"},{"text":"event","line":25,"char":1283,"type":"import"},{"text":"listener","line":25,"char":1289,"type":"import"},{"text":"SuperConsoleEventBusListener","line":25,"char":1298,"type":"import"},{"text":"NEW_DAEMON_INSTANCE_MSG","line":25,"char":1327,"type":"import"},{"text":"com","line":26,"char":1366,"type":"import"},{"text":"facebook","line":26,"char":1370,"type":"import"},{"text":"buck","line":26,"char":1379,"type":"import"},{"text":"event","line":26,"char":1384,"type":"import"},{"text":"listener","line":26,"char":1390,"type":"import"},{"text":"SuperConsoleEventBusListener","line":26,"char":1399,"type":"import"},{"text":"createParsingMessage","line":26,"char":1428,"type":"import"},{"text":"org","line":27,"char":1464,"type":"import"},{"text":"hamcrest","line":27,"char":1468,"type":"import"},{"text":"Matchers","line":27,"char":1477,"type":"import"},{"text":"equalTo","line":27,"char":1486,"type":"import"},{"text":"org","line":28,"char":1509,"type":"import"},{"text":"hamcrest","line":28,"char":1513,"type":"import"},{"text":"Matchers","line":28,"char":1522,"type":"import"},{"text":"is","line":28,"char":1531,"type":"import"},{"text":"org","line":29,"char":1549,"type":"import"},{"text":"junit","line":29,"char":1553,"type":"import"},{"text":"Assert","line":29,"char":1559,"type":"import"},{"text":"assertEquals","line":29,"char":1566,"type":"import"},{"text":"org","line":30,"char":1594,"type":"import"},{"text":"junit","line":30,"char":1598,"type":"import"},{"text":"Assert","line":30,"char":1604,"type":"import"},{"text":"assertThat","line":30,"char":1611,"type":"import"},{"text":"com","line":32,"char":1631,"type":"import"},{"text":"facebook","line":32,"char":1635,"type":"import"},{"text":"buck","line":32,"char":1644,"type":"import"},{"text":"artifact_cache","line":32,"char":1649,"type":"import"},{"text":"ArtifactCacheEvent","line":32,"char":1664,"type":"import"},{"text":"com","line":33,"char":1691,"type":"import"},{"text":"facebook","line":33,"char":1695,"type":"import"},{"text":"buck","line":33,"char":1704,"type":"import"},{"text":"artifact_cache","line":33,"char":1709,"type":"import"},{"text":"CacheResult","line":33,"char":1724,"type":"import"},{"text":"com","line":34,"char":1744,"type":"import"},{"text":"facebook","line":34,"char":1748,"type":"import"},{"text":"buck","line":34,"char":1757,"type":"import"},{"text":"artifact_cache","line":34,"char":1762,"type":"import"},{"text":"DirArtifactCacheEvent","line":34,"char":1777,"type":"import"},{"text":"com","line":35,"char":1807,"type":"import"},{"text":"facebook","line":35,"char":1811,"type":"import"},{"text":"buck","line":35,"char":1820,"type":"import"},{"text":"artifact_cache","line":35,"char":1825,"type":"import"},{"text":"HttpArtifactCacheEvent","line":35,"char":1840,"type":"import"},{"text":"com","line":36,"char":1871,"type":"import"},{"text":"facebook","line":36,"char":1875,"type":"import"},{"text":"buck","line":36,"char":1884,"type":"import"},{"text":"cli","line":36,"char":1889,"type":"import"},{"text":"FakeBuckConfig","line":36,"char":1893,"type":"import"},{"text":"com","line":37,"char":1916,"type":"import"},{"text":"facebook","line":37,"char":1920,"type":"import"},{"text":"buck","line":37,"char":1929,"type":"import"},{"text":"distributed","line":37,"char":1934,"type":"import"},{"text":"DistBuildStatus","line":37,"char":1946,"type":"import"},{"text":"com","line":38,"char":1970,"type":"import"},{"text":"facebook","line":38,"char":1974,"type":"import"},{"text":"buck","line":38,"char":1983,"type":"import"},{"text":"distributed","line":38,"char":1988,"type":"import"},{"text":"DistBuildStatusEvent","line":38,"char":2000,"type":"import"},{"text":"com","line":39,"char":2029,"type":"import"},{"text":"facebook","line":39,"char":2033,"type":"import"},{"text":"buck","line":39,"char":2042,"type":"import"},{"text":"distributed","line":39,"char":2047,"type":"import"},{"text":"thrift","line":39,"char":2059,"type":"import"},{"text":"BuildStatus","line":39,"char":2066,"type":"import"},{"text":"com","line":40,"char":2086,"type":"import"},{"text":"facebook","line":40,"char":2090,"type":"import"},{"text":"buck","line":40,"char":2099,"type":"import"},{"text":"distributed","line":40,"char":2104,"type":"import"},{"text":"thrift","line":40,"char":2116,"type":"import"},{"text":"LogRecord","line":40,"char":2123,"type":"import"},{"text":"com","line":41,"char":2141,"type":"import"},{"text":"facebook","line":41,"char":2145,"type":"import"},{"text":"buck","line":41,"char":2154,"type":"import"},{"text":"event","line":41,"char":2159,"type":"import"},{"text":"ActionGraphEvent","line":41,"char":2165,"type":"import"},{"text":"com","line":42,"char":2190,"type":"import"},{"text":"facebook","line":42,"char":2194,"type":"import"},{"text":"buck","line":42,"char":2203,"type":"import"},{"text":"event","line":42,"char":2208,"type":"import"},{"text":"ArtifactCompressionEvent","line":42,"char":2214,"type":"import"},{"text":"com","line":43,"char":2247,"type":"import"},{"text":"facebook","line":43,"char":2251,"type":"import"},{"text":"buck","line":43,"char":2260,"type":"import"},{"text":"event","line":43,"char":2265,"type":"import"},{"text":"BuckEventBus","line":43,"char":2271,"type":"import"},{"text":"com","line":44,"char":2292,"type":"import"},{"text":"facebook","line":44,"char":2296,"type":"import"},{"text":"buck","line":44,"char":2305,"type":"import"},{"text":"event","line":44,"char":2310,"type":"import"},{"text":"BuckEventBusFactory","line":44,"char":2316,"type":"import"},{"text":"com","line":45,"char":2344,"type":"import"},{"text":"facebook","line":45,"char":2348,"type":"import"},{"text":"buck","line":45,"char":2357,"type":"import"},{"text":"event","line":45,"char":2362,"type":"import"},{"text":"CommandEvent","line":45,"char":2368,"type":"import"},{"text":"com","line":46,"char":2389,"type":"import"},{"text":"facebook","line":46,"char":2393,"type":"import"},{"text":"buck","line":46,"char":2402,"type":"import"},{"text":"event","line":46,"char":2407,"type":"import"},{"text":"ConsoleEvent","line":46,"char":2413,"type":"import"},{"text":"com","line":47,"char":2434,"type":"import"},{"text":"facebook","line":47,"char":2438,"type":"import"},{"text":"buck","line":47,"char":2447,"type":"import"},{"text":"event","line":47,"char":2452,"type":"import"},{"text":"DaemonEvent","line":47,"char":2458,"type":"import"},{"text":"com","line":48,"char":2478,"type":"import"},{"text":"facebook","line":48,"char":2482,"type":"import"},{"text":"buck","line":48,"char":2491,"type":"import"},{"text":"event","line":48,"char":2496,"type":"import"},{"text":"InstallEvent","line":48,"char":2502,"type":"import"},{"text":"com","line":49,"char":2523,"type":"import"},{"text":"facebook","line":49,"char":2527,"type":"import"},{"text":"buck","line":49,"char":2536,"type":"import"},{"text":"event","line":49,"char":2541,"type":"import"},{"text":"ParsingEvent","line":49,"char":2547,"type":"import"},{"text":"com","line":50,"char":2568,"type":"import"},{"text":"facebook","line":50,"char":2572,"type":"import"},{"text":"buck","line":50,"char":2581,"type":"import"},{"text":"event","line":50,"char":2586,"type":"import"},{"text":"ProjectGenerationEvent","line":50,"char":2592,"type":"import"},{"text":"com","line":51,"char":2623,"type":"import"},{"text":"facebook","line":51,"char":2627,"type":"import"},{"text":"buck","line":51,"char":2636,"type":"import"},{"text":"event","line":51,"char":2641,"type":"import"},{"text":"WatchmanStatusEvent","line":51,"char":2647,"type":"import"},{"text":"com","line":52,"char":2675,"type":"import"},{"text":"facebook","line":52,"char":2679,"type":"import"},{"text":"buck","line":52,"char":2688,"type":"import"},{"text":"json","line":52,"char":2693,"type":"import"},{"text":"ProjectBuildFileParseEvents","line":52,"char":2698,"type":"import"},{"text":"com","line":53,"char":2734,"type":"import"},{"text":"facebook","line":53,"char":2738,"type":"import"},{"text":"buck","line":53,"char":2747,"type":"import"},{"text":"model","line":53,"char":2752,"type":"import"},{"text":"BuildTarget","line":53,"char":2758,"type":"import"},{"text":"com","line":54,"char":2778,"type":"import"},{"text":"facebook","line":54,"char":2782,"type":"import"},{"text":"buck","line":54,"char":2791,"type":"import"},{"text":"model","line":54,"char":2796,"type":"import"},{"text":"BuildTargetFactory","line":54,"char":2802,"type":"import"},{"text":"com","line":55,"char":2829,"type":"import"},{"text":"facebook","line":55,"char":2833,"type":"import"},{"text":"buck","line":55,"char":2842,"type":"import"},{"text":"parser","line":55,"char":2847,"type":"import"},{"text":"ParseEvent","line":55,"char":2854,"type":"import"},{"text":"com","line":56,"char":2873,"type":"import"},{"text":"facebook","line":56,"char":2877,"type":"import"},{"text":"buck","line":56,"char":2886,"type":"import"},{"text":"rules","line":56,"char":2891,"type":"import"},{"text":"BuildEvent","line":56,"char":2897,"type":"import"},{"text":"com","line":57,"char":2916,"type":"import"},{"text":"facebook","line":57,"char":2920,"type":"import"},{"text":"buck","line":57,"char":2929,"type":"import"},{"text":"rules","line":57,"char":2934,"type":"import"},{"text":"BuildRuleCacheEvent","line":57,"char":2940,"type":"import"},{"text":"com","line":58,"char":2968,"type":"import"},{"text":"facebook","line":58,"char":2972,"type":"import"},{"text":"buck","line":58,"char":2981,"type":"import"},{"text":"rules","line":58,"char":2986,"type":"import"},{"text":"BuildRuleEvent","line":58,"char":2992,"type":"import"},{"text":"com","line":59,"char":3015,"type":"import"},{"text":"facebook","line":59,"char":3019,"type":"import"},{"text":"buck","line":59,"char":3028,"type":"import"},{"text":"rules","line":59,"char":3033,"type":"import"},{"text":"BuildRuleKeys","line":59,"char":3039,"type":"import"},{"text":"com","line":60,"char":3061,"type":"import"},{"text":"facebook","line":60,"char":3065,"type":"import"},{"text":"buck","line":60,"char":3074,"type":"import"},{"text":"rules","line":60,"char":3079,"type":"import"},{"text":"BuildRuleResolver","line":60,"char":3085,"type":"import"},{"text":"com","line":61,"char":3111,"type":"import"},{"text":"facebook","line":61,"char":3115,"type":"import"},{"text":"buck","line":61,"char":3124,"type":"import"},{"text":"rules","line":61,"char":3129,"type":"import"},{"text":"BuildRuleStatus","line":61,"char":3135,"type":"import"},{"text":"com","line":62,"char":3159,"type":"import"},{"text":"facebook","line":62,"char":3163,"type":"import"},{"text":"buck","line":62,"char":3172,"type":"import"},{"text":"rules","line":62,"char":3177,"type":"import"},{"text":"BuildRuleSuccessType","line":62,"char":3183,"type":"import"},{"text":"com","line":63,"char":3212,"type":"import"},{"text":"facebook","line":63,"char":3216,"type":"import"},{"text":"buck","line":63,"char":3225,"type":"import"},{"text":"rules","line":63,"char":3230,"type":"import"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":63,"char":3236,"type":"import"},{"text":"com","line":64,"char":3284,"type":"import"},{"text":"facebook","line":64,"char":3288,"type":"import"},{"text":"buck","line":64,"char":3297,"type":"import"},{"text":"rules","line":64,"char":3302,"type":"import"},{"text":"FakeBuildRule","line":64,"char":3308,"type":"import"},{"text":"com","line":65,"char":3330,"type":"import"},{"text":"facebook","line":65,"char":3334,"type":"import"},{"text":"buck","line":65,"char":3343,"type":"import"},{"text":"rules","line":65,"char":3348,"type":"import"},{"text":"FakeRuleKeyBuilderFactory","line":65,"char":3354,"type":"import"},{"text":"com","line":66,"char":3388,"type":"import"},{"text":"facebook","line":66,"char":3392,"type":"import"},{"text":"buck","line":66,"char":3401,"type":"import"},{"text":"rules","line":66,"char":3406,"type":"import"},{"text":"RuleKey","line":66,"char":3412,"type":"import"},{"text":"com","line":67,"char":3428,"type":"import"},{"text":"facebook","line":67,"char":3432,"type":"import"},{"text":"buck","line":67,"char":3441,"type":"import"},{"text":"rules","line":67,"char":3446,"type":"import"},{"text":"SourcePathResolver","line":67,"char":3452,"type":"import"},{"text":"com","line":68,"char":3479,"type":"import"},{"text":"facebook","line":68,"char":3483,"type":"import"},{"text":"buck","line":68,"char":3492,"type":"import"},{"text":"rules","line":68,"char":3497,"type":"import"},{"text":"TargetGraph","line":68,"char":3503,"type":"import"},{"text":"com","line":69,"char":3523,"type":"import"},{"text":"facebook","line":69,"char":3527,"type":"import"},{"text":"buck","line":69,"char":3536,"type":"import"},{"text":"rules","line":69,"char":3541,"type":"import"},{"text":"TestRunEvent","line":69,"char":3547,"type":"import"},{"text":"com","line":70,"char":3568,"type":"import"},{"text":"facebook","line":70,"char":3572,"type":"import"},{"text":"buck","line":70,"char":3581,"type":"import"},{"text":"rules","line":70,"char":3586,"type":"import"},{"text":"TestSummaryEvent","line":70,"char":3592,"type":"import"},{"text":"com","line":71,"char":3617,"type":"import"},{"text":"facebook","line":71,"char":3621,"type":"import"},{"text":"buck","line":71,"char":3630,"type":"import"},{"text":"step","line":71,"char":3635,"type":"import"},{"text":"StepEvent","line":71,"char":3640,"type":"import"},{"text":"com","line":72,"char":3658,"type":"import"},{"text":"facebook","line":72,"char":3662,"type":"import"},{"text":"buck","line":72,"char":3671,"type":"import"},{"text":"test","line":72,"char":3676,"type":"import"},{"text":"TestCaseSummary","line":72,"char":3681,"type":"import"},{"text":"com","line":73,"char":3705,"type":"import"},{"text":"facebook","line":73,"char":3709,"type":"import"},{"text":"buck","line":73,"char":3718,"type":"import"},{"text":"test","line":73,"char":3723,"type":"import"},{"text":"TestResultSummary","line":73,"char":3728,"type":"import"},{"text":"com","line":74,"char":3754,"type":"import"},{"text":"facebook","line":74,"char":3758,"type":"import"},{"text":"buck","line":74,"char":3767,"type":"import"},{"text":"test","line":74,"char":3772,"type":"import"},{"text":"TestResultSummaryVerbosity","line":74,"char":3777,"type":"import"},{"text":"com","line":75,"char":3812,"type":"import"},{"text":"facebook","line":75,"char":3816,"type":"import"},{"text":"buck","line":75,"char":3825,"type":"import"},{"text":"test","line":75,"char":3830,"type":"import"},{"text":"TestResults","line":75,"char":3835,"type":"import"},{"text":"com","line":76,"char":3855,"type":"import"},{"text":"facebook","line":76,"char":3859,"type":"import"},{"text":"buck","line":76,"char":3868,"type":"import"},{"text":"test","line":76,"char":3873,"type":"import"},{"text":"TestRuleEvent","line":76,"char":3878,"type":"import"},{"text":"com","line":77,"char":3900,"type":"import"},{"text":"facebook","line":77,"char":3904,"type":"import"},{"text":"buck","line":77,"char":3913,"type":"import"},{"text":"test","line":77,"char":3918,"type":"import"},{"text":"result","line":77,"char":3923,"type":"import"},{"text":"type","line":77,"char":3930,"type":"import"},{"text":"ResultType","line":77,"char":3935,"type":"import"},{"text":"com","line":78,"char":3954,"type":"import"},{"text":"facebook","line":78,"char":3958,"type":"import"},{"text":"buck","line":78,"char":3967,"type":"import"},{"text":"test","line":78,"char":3972,"type":"import"},{"text":"selectors","line":78,"char":3977,"type":"import"},{"text":"TestSelectorList","line":78,"char":3987,"type":"import"},{"text":"com","line":79,"char":4012,"type":"import"},{"text":"facebook","line":79,"char":4016,"type":"import"},{"text":"buck","line":79,"char":4025,"type":"import"},{"text":"testutil","line":79,"char":4030,"type":"import"},{"text":"TestConsole","line":79,"char":4039,"type":"import"},{"text":"com","line":80,"char":4059,"type":"import"},{"text":"facebook","line":80,"char":4063,"type":"import"},{"text":"buck","line":80,"char":4072,"type":"import"},{"text":"testutil","line":80,"char":4077,"type":"import"},{"text":"integration","line":80,"char":4086,"type":"import"},{"text":"TemporaryPaths","line":80,"char":4098,"type":"import"},{"text":"com","line":81,"char":4121,"type":"import"},{"text":"facebook","line":81,"char":4125,"type":"import"},{"text":"buck","line":81,"char":4134,"type":"import"},{"text":"timing","line":81,"char":4139,"type":"import"},{"text":"Clock","line":81,"char":4146,"type":"import"},{"text":"com","line":82,"char":4160,"type":"import"},{"text":"facebook","line":82,"char":4164,"type":"import"},{"text":"buck","line":82,"char":4173,"type":"import"},{"text":"timing","line":82,"char":4178,"type":"import"},{"text":"IncrementingFakeClock","line":82,"char":4185,"type":"import"},{"text":"com","line":83,"char":4215,"type":"import"},{"text":"facebook","line":83,"char":4219,"type":"import"},{"text":"buck","line":83,"char":4228,"type":"import"},{"text":"util","line":83,"char":4233,"type":"import"},{"text":"ObjectMappers","line":83,"char":4238,"type":"import"},{"text":"com","line":84,"char":4260,"type":"import"},{"text":"facebook","line":84,"char":4264,"type":"import"},{"text":"buck","line":84,"char":4273,"type":"import"},{"text":"util","line":84,"char":4278,"type":"import"},{"text":"environment","line":84,"char":4283,"type":"import"},{"text":"DefaultExecutionEnvironment","line":84,"char":4295,"type":"import"},{"text":"com","line":85,"char":4331,"type":"import"},{"text":"facebook","line":85,"char":4335,"type":"import"},{"text":"buck","line":85,"char":4344,"type":"import"},{"text":"util","line":85,"char":4349,"type":"import"},{"text":"unit","line":85,"char":4354,"type":"import"},{"text":"SizeUnit","line":85,"char":4359,"type":"import"},{"text":"com","line":86,"char":4376,"type":"import"},{"text":"google","line":86,"char":4380,"type":"import"},{"text":"common","line":86,"char":4387,"type":"import"},{"text":"base","line":86,"char":4394,"type":"import"},{"text":"Joiner","line":86,"char":4399,"type":"import"},{"text":"com","line":87,"char":4414,"type":"import"},{"text":"google","line":87,"char":4418,"type":"import"},{"text":"common","line":87,"char":4425,"type":"import"},{"text":"collect","line":87,"char":4432,"type":"import"},{"text":"ImmutableList","line":87,"char":4440,"type":"import"},{"text":"com","line":88,"char":4462,"type":"import"},{"text":"google","line":88,"char":4466,"type":"import"},{"text":"common","line":88,"char":4473,"type":"import"},{"text":"collect","line":88,"char":4480,"type":"import"},{"text":"ImmutableMap","line":88,"char":4488,"type":"import"},{"text":"com","line":89,"char":4509,"type":"import"},{"text":"google","line":89,"char":4513,"type":"import"},{"text":"common","line":89,"char":4520,"type":"import"},{"text":"collect","line":89,"char":4527,"type":"import"},{"text":"ImmutableSet","line":89,"char":4535,"type":"import"},{"text":"com","line":90,"char":4556,"type":"import"},{"text":"google","line":90,"char":4560,"type":"import"},{"text":"common","line":90,"char":4567,"type":"import"},{"text":"collect","line":90,"char":4574,"type":"import"},{"text":"ImmutableSortedMap","line":90,"char":4582,"type":"import"},{"text":"com","line":91,"char":4609,"type":"import"},{"text":"google","line":91,"char":4613,"type":"import"},{"text":"common","line":91,"char":4620,"type":"import"},{"text":"collect","line":91,"char":4627,"type":"import"},{"text":"ImmutableSortedSet","line":91,"char":4635,"type":"import"},{"text":"com","line":92,"char":4662,"type":"import"},{"text":"google","line":92,"char":4666,"type":"import"},{"text":"common","line":92,"char":4673,"type":"import"},{"text":"collect","line":92,"char":4680,"type":"import"},{"text":"Iterables","line":92,"char":4688,"type":"import"},{"text":"com","line":93,"char":4706,"type":"import"},{"text":"google","line":93,"char":4710,"type":"import"},{"text":"common","line":93,"char":4717,"type":"import"},{"text":"jimfs","line":93,"char":4724,"type":"import"},{"text":"Configuration","line":93,"char":4730,"type":"import"},{"text":"com","line":94,"char":4752,"type":"import"},{"text":"google","line":94,"char":4756,"type":"import"},{"text":"common","line":94,"char":4763,"type":"import"},{"text":"jimfs","line":94,"char":4770,"type":"import"},{"text":"Jimfs","line":94,"char":4776,"type":"import"},{"text":"com","line":95,"char":4790,"type":"import"},{"text":"google","line":95,"char":4794,"type":"import"},{"text":"gson","line":95,"char":4801,"type":"import"},{"text":"Gson","line":95,"char":4806,"type":"import"},{"text":"org","line":97,"char":4820,"type":"import"},{"text":"junit","line":97,"char":4824,"type":"import"},{"text":"Before","line":97,"char":4830,"type":"import"},{"text":"org","line":98,"char":4845,"type":"import"},{"text":"junit","line":98,"char":4849,"type":"import"},{"text":"Rule","line":98,"char":4855,"type":"import"},{"text":"org","line":99,"char":4868,"type":"import"},{"text":"junit","line":99,"char":4872,"type":"import"},{"text":"Test","line":99,"char":4878,"type":"import"},{"text":"java","line":101,"char":4892,"type":"import"},{"text":"io","line":101,"char":4897,"type":"import"},{"text":"IOException","line":101,"char":4900,"type":"import"},{"text":"java","line":102,"char":4920,"type":"import"},{"text":"nio","line":102,"char":4925,"type":"import"},{"text":"charset","line":102,"char":4929,"type":"import"},{"text":"StandardCharsets","line":102,"char":4937,"type":"import"},{"text":"java","line":103,"char":4962,"type":"import"},{"text":"nio","line":103,"char":4967,"type":"import"},{"text":"file","line":103,"char":4971,"type":"import"},{"text":"FileSystem","line":103,"char":4976,"type":"import"},{"text":"java","line":104,"char":4995,"type":"import"},{"text":"nio","line":104,"char":5000,"type":"import"},{"text":"file","line":104,"char":5004,"type":"import"},{"text":"Files","line":104,"char":5009,"type":"import"},{"text":"java","line":105,"char":5023,"type":"import"},{"text":"nio","line":105,"char":5028,"type":"import"},{"text":"file","line":105,"char":5032,"type":"import"},{"text":"Path","line":105,"char":5037,"type":"import"},{"text":"java","line":106,"char":5050,"type":"import"},{"text":"util","line":106,"char":5055,"type":"import"},{"text":"LinkedList","line":106,"char":5060,"type":"import"},{"text":"java","line":107,"char":5079,"type":"import"},{"text":"util","line":107,"char":5084,"type":"import"},{"text":"Locale","line":107,"char":5089,"type":"import"},{"text":"java","line":108,"char":5104,"type":"import"},{"text":"util","line":108,"char":5109,"type":"import"},{"text":"Map","line":108,"char":5114,"type":"import"},{"text":"java","line":109,"char":5126,"type":"import"},{"text":"util","line":109,"char":5131,"type":"import"},{"text":"Optional","line":109,"char":5136,"type":"import"},{"text":"java","line":110,"char":5153,"type":"import"},{"text":"util","line":110,"char":5158,"type":"import"},{"text":"TimeZone","line":110,"char":5163,"type":"import"},{"text":"java","line":111,"char":5180,"type":"import"},{"text":"util","line":111,"char":5185,"type":"import"},{"text":"UUID","line":111,"char":5190,"type":"import"},{"text":"java","line":112,"char":5203,"type":"import"},{"text":"util","line":112,"char":5208,"type":"import"},{"text":"concurrent","line":112,"char":5213,"type":"import"},{"text":"TimeUnit","line":112,"char":5224,"type":"import"},{"text":"SuperConsoleEventBusListenerTest","line":114,"char":5248,"type":"class"},{"text":"TARGET_ONE","line":115,"char":5313,"type":"variable"},{"text":"TARGET_TWO","line":116,"char":5370,"type":"variable"},{"text":"TARGET_THREE","line":117,"char":5427,"type":"variable"},{"text":"DOWNLOAD_STRING","line":118,"char":5488,"type":"variable"},{"text":"FINISHED_DOWNLOAD_STRING","line":120,"char":5603,"type":"variable"},{"text":"SEVERE_MESSAGE","line":122,"char":5731,"type":"variable"},{"text":"noisySummaryVerbosity","line":124,"char":5835,"type":"variable"},{"text":"silentSummaryVerbosity","line":127,"char":5959,"type":"variable"},{"text":"tmp","line":131,"char":6074,"type":"variable"},{"text":"vfs","line":133,"char":6124,"type":"variable"},{"text":"logPath","line":134,"char":6144,"type":"variable"},{"text":"emptySuperConsoleConfig","line":135,"char":6182,"type":"variable"},{"text":"timeZone","line":138,"char":6298,"type":"variable"},{"text":"fakeClock","line":148,"char":6533,"type":"variable"},{"text":"eventBus","line":149,"char":6618,"type":"variable"},{"text":"listener","line":150,"char":6706,"type":"variable"},{"text":"pathResolver","line":152,"char":6782,"type":"variable"},{"text":"fakeTarget","line":156,"char":6941,"type":"variable"},{"text":"cachedTarget","line":157,"char":7020,"type":"variable"},{"text":"buildTargets","line":158,"char":7116,"type":"variable"},{"text":"fakeRule","line":160,"char":7278,"type":"variable"},{"text":"cachedRule","line":164,"char":7402,"type":"variable"},{"text":"parseEventStarted","line":169,"char":7553,"type":"variable"},{"text":"buildEventStarted","line":193,"char":8381,"type":"variable"},{"text":"parseStarted","line":200,"char":8643,"type":"variable"},{"text":"actionGraphStarted","line":217,"char":9228,"type":"variable"},{"text":"parsingLine","line":231,"char":9700,"type":"variable"},{"text":"cacheStepStarted","line":251,"char":10330,"type":"variable"},{"text":"compressStarted","line":280,"char":11303,"type":"variable"},{"text":"dirArtifactCacheEventFactory","line":308,"char":12291,"type":"variable"},{"text":"dirFetchStarted","line":311,"char":12420,"type":"variable"},{"text":"stepShortName","line":342,"char":13412,"type":"variable"},{"text":"stepDescription","line":343,"char":13458,"type":"variable"},{"text":"stepUuid","line":344,"char":13501,"type":"variable"},{"text":"stepEventStarted","line":345,"char":13553,"type":"variable"},{"text":"buildingLine","line":425,"char":16167,"type":"variable"},{"text":"installEventStarted","line":448,"char":16809,"type":"variable"},{"text":"installingFinished","line":472,"char":17548,"type":"variable"},{"text":"storeScheduledOne","line":480,"char":17804,"type":"variable"},{"text":"storeScheduledTwo","line":483,"char":17923,"type":"variable"},{"text":"storeScheduledThree","line":486,"char":18042,"type":"variable"},{"text":"storeStartedOne","line":496,"char":18412,"type":"variable"},{"text":"artifactSizeOne","line":506,"char":18753,"type":"variable"},{"text":"storeStartedTwo","line":516,"char":19172,"type":"variable"},{"text":"artifactSizeTwo","line":518,"char":19264,"type":"variable"},{"text":"storeStartedThree","line":528,"char":19684,"type":"variable"},{"text":"artifactSizeThree","line":530,"char":19780,"type":"variable"},{"text":"console","line":541,"char":20209,"type":"variable"},{"text":"beforeStderrWrite","line":542,"char":20262,"type":"variable"},{"text":"fakeClock","line":552,"char":20677,"type":"variable"},{"text":"eventBus","line":553,"char":20762,"type":"variable"},{"text":"listener","line":554,"char":20850,"type":"variable"},{"text":"pathResolver","line":556,"char":20926,"type":"variable"},{"text":"fakeTarget","line":560,"char":21085,"type":"variable"},{"text":"cachedTarget","line":561,"char":21164,"type":"variable"},{"text":"buildTargets","line":562,"char":21260,"type":"variable"},{"text":"fakeRule","line":564,"char":21422,"type":"variable"},{"text":"cachedRule","line":568,"char":21546,"type":"variable"},{"text":"e","line":573,"char":21679,"type":"variable"},{"text":"ruleCountCalculated","line":580,"char":21905,"type":"variable"},{"text":"buildEventStarted","line":584,"char":22054,"type":"variable"},{"text":"parseStarted","line":591,"char":22316,"type":"variable"},{"text":"actionGraphStarted","line":610,"char":22934,"type":"variable"},{"text":"parsingLine","line":623,"char":23405,"type":"variable"},{"text":"stepShortName","line":645,"char":24147,"type":"variable"},{"text":"stepDescription","line":646,"char":24193,"type":"variable"},{"text":"stepUuid","line":647,"char":24236,"type":"variable"},{"text":"stepEventStarted","line":648,"char":24288,"type":"variable"},{"text":"buildingLine","line":729,"char":27075,"type":"variable"},{"text":"fakeClock","line":740,"char":27414,"type":"variable"},{"text":"eventBus","line":741,"char":27499,"type":"variable"},{"text":"listener","line":742,"char":27587,"type":"variable"},{"text":"fakeTarget","line":744,"char":27656,"type":"variable"},{"text":"cachedTarget","line":745,"char":27735,"type":"variable"},{"text":"buildTargets","line":746,"char":27831,"type":"variable"},{"text":"e","line":749,"char":27998,"type":"variable"},{"text":"parseEventStarted","line":756,"char":28229,"type":"variable"},{"text":"buildEventStarted","line":782,"char":29126,"type":"variable"},{"text":"parseStarted","line":789,"char":29394,"type":"variable"},{"text":"actionGraphStarted","line":808,"char":30012,"type":"variable"},{"text":"parsingLine","line":822,"char":30484,"type":"variable"},{"text":"debugLogs","line":850,"char":31405,"type":"variable"},{"text":"log","line":851,"char":31460,"type":"variable"},{"text":"distDebugLine","line":855,"char":31587,"type":"variable"},{"text":"logLine1","line":856,"char":31653,"type":"variable"},{"text":"logLine2","line":884,"char":32536,"type":"variable"},{"text":"logLine3","line":913,"char":33443,"type":"variable"},{"text":"logLine4","line":919,"char":33639,"type":"variable"},{"text":"distbuildLine","line":934,"char":34171,"type":"variable"},{"text":"buildingLine","line":953,"char":34737,"type":"variable"},{"text":"fakeClock","line":991,"char":35676,"type":"variable"},{"text":"eventBus","line":992,"char":35761,"type":"variable"},{"text":"listener","line":993,"char":35849,"type":"variable"},{"text":"pathResolver","line":995,"char":35925,"type":"variable"},{"text":"testTarget","line":999,"char":36084,"type":"variable"},{"text":"testTargets","line":1000,"char":36170,"type":"variable"},{"text":"testBuildRule","line":1002,"char":36315,"type":"variable"},{"text":"parseEventStarted","line":1007,"char":36467,"type":"variable"},{"text":"buildEventStarted","line":1028,"char":37260,"type":"variable"},{"text":"parseStarted","line":1035,"char":37521,"type":"variable"},{"text":"actionGraphStarted","line":1051,"char":38096,"type":"variable"},{"text":"parsingLine","line":1065,"char":38568,"type":"variable"},{"text":"buildingLine","line":1109,"char":39952,"type":"variable"},{"text":"stepUuid","line":1150,"char":41140,"type":"variable"},{"text":"stepEventStarted","line":1151,"char":41189,"type":"variable"},{"text":"testUUID","line":1189,"char":42210,"type":"variable"},{"text":"testResultSummary","line":1208,"char":42750,"type":"variable"},{"text":"testingLine","line":1255,"char":44257,"type":"variable"},{"text":"fakeClock","line":1278,"char":44954,"type":"variable"},{"text":"eventBus","line":1279,"char":45039,"type":"variable"},{"text":"listener","line":1280,"char":45127,"type":"variable"},{"text":"pathResolver","line":1282,"char":45203,"type":"variable"},{"text":"testTarget","line":1286,"char":45362,"type":"variable"},{"text":"testTargets","line":1287,"char":45448,"type":"variable"},{"text":"testBuildRule","line":1289,"char":45593,"type":"variable"},{"text":"parseEventStarted","line":1294,"char":45745,"type":"variable"},{"text":"buildEventStarted","line":1320,"char":46579,"type":"variable"},{"text":"parseStarted","line":1327,"char":46840,"type":"variable"},{"text":"actionGraphStarted","line":1343,"char":47415,"type":"variable"},{"text":"parsingLine","line":1357,"char":47887,"type":"variable"},{"text":"buildingLine","line":1401,"char":49267,"type":"variable"},{"text":"stepUuid","line":1445,"char":50492,"type":"variable"},{"text":"stepEventStarted","line":1446,"char":50541,"type":"variable"},{"text":"testUUID","line":1484,"char":51562,"type":"variable"},{"text":"testResultSummary","line":1503,"char":52102,"type":"variable"},{"text":"testingLine","line":1546,"char":53495,"type":"variable"},{"text":"pathResolver","line":1569,"char":54246,"type":"variable"},{"text":"fakeClock","line":1572,"char":54398,"type":"variable"},{"text":"eventBus","line":1573,"char":54483,"type":"variable"},{"text":"console","line":1574,"char":54554,"type":"variable"},{"text":"testTarget","line":1576,"char":54600,"type":"variable"},{"text":"testTargets","line":1577,"char":54686,"type":"variable"},{"text":"testBuildRule","line":1579,"char":54831,"type":"variable"},{"text":"listener","line":1584,"char":54976,"type":"variable"},{"text":"parseEventStarted","line":1599,"char":55456,"type":"variable"},{"text":"buildEventStarted","line":1625,"char":56290,"type":"variable"},{"text":"parseStarted","line":1632,"char":56551,"type":"variable"},{"text":"actionGraphStarted","line":1648,"char":57126,"type":"variable"},{"text":"parsingLine","line":1662,"char":57598,"type":"variable"},{"text":"buildingLine","line":1706,"char":58978,"type":"variable"},{"text":"stepUuid","line":1750,"char":60203,"type":"variable"},{"text":"stepEventStarted","line":1751,"char":60252,"type":"variable"},{"text":"testUUID","line":1789,"char":61273,"type":"variable"},{"text":"testResultSummary","line":1808,"char":61813,"type":"variable"},{"text":"testingLine","line":1857,"char":63518,"type":"variable"},{"text":"fakeClock","line":1887,"char":64562,"type":"variable"},{"text":"eventBus","line":1888,"char":64647,"type":"variable"},{"text":"listener","line":1889,"char":64735,"type":"variable"},{"text":"pathResolver","line":1891,"char":64811,"type":"variable"},{"text":"fakeTarget","line":1895,"char":64970,"type":"variable"},{"text":"buildTargets","line":1896,"char":65063,"type":"variable"},{"text":"fakeRule","line":1898,"char":65211,"type":"variable"},{"text":"stepShortName","line":1902,"char":65328,"type":"variable"},{"text":"stepDescription","line":1903,"char":65374,"type":"variable"},{"text":"stepUuid","line":1904,"char":65417,"type":"variable"},{"text":"ruleKeyBuilderFactory","line":1906,"char":65478,"type":"variable"},{"text":"buildEventStarted","line":1911,"char":65653,"type":"variable"},{"text":"parsingLine","line":1920,"char":65933,"type":"variable"},{"text":"parseStarted","line":1921,"char":66015,"type":"variable"},{"text":"stepEventStarted","line":1950,"char":66981,"type":"variable"},{"text":"step2EventStarted","line":2003,"char":68676,"type":"variable"},{"text":"fakeClock","line":2058,"char":70435,"type":"variable"},{"text":"eventBus","line":2059,"char":70520,"type":"variable"},{"text":"listener","line":2060,"char":70608,"type":"variable"},{"text":"fakeClock","line":2073,"char":70994,"type":"variable"},{"text":"eventBus","line":2074,"char":71079,"type":"variable"},{"text":"listener","line":2075,"char":71167,"type":"variable"},{"text":"overflowMessage","line":2084,"char":71556,"type":"variable"},{"text":"fakeClock","line":2115,"char":72857,"type":"variable"},{"text":"eventBus","line":2116,"char":72942,"type":"variable"},{"text":"listener","line":2117,"char":73030,"type":"variable"},{"text":"fakeClock","line":2140,"char":73753,"type":"variable"},{"text":"eventBus","line":2141,"char":73838,"type":"variable"},{"text":"listener","line":2142,"char":73926,"type":"variable"},{"text":"storagePath","line":2144,"char":73988,"type":"variable"},{"text":"storageContents","line":2145,"char":74047,"type":"variable"},{"text":"contents","line":2152,"char":74366,"type":"variable"},{"text":"e","line":2156,"char":74563,"type":"variable"},{"text":"fakeClock","line":2205,"char":76023,"type":"variable"},{"text":"eventBus","line":2206,"char":76108,"type":"variable"},{"text":"listener","line":2207,"char":76196,"type":"variable"},{"text":"fakeClock","line":2238,"char":77100,"type":"variable"},{"text":"eventBus","line":2239,"char":77185,"type":"variable"},{"text":"listener","line":2240,"char":77278,"type":"variable"},{"text":"fakeRenderer","line":2242,"char":77363,"type":"variable"},{"text":"lines","line":2244,"char":77491,"type":"variable"},{"text":"fullOutput","line":2246,"char":77527,"type":"variable"},{"text":"listener","line":2292,"char":79179,"type":"variable"},{"text":"timeMs","line":2293,"char":79200,"type":"variable"},{"text":"lines","line":2294,"char":79236,"type":"variable"},{"text":"listener","line":2299,"char":79407,"type":"variable"},{"text":"timeMs","line":2300,"char":79428,"type":"variable"},{"text":"lines","line":2301,"char":79464,"type":"variable"},{"text":"logLines","line":2302,"char":79499,"type":"variable"},{"text":"listener","line":2313,"char":79754,"type":"variable"},{"text":"timeMs","line":2314,"char":79775,"type":"variable"},{"text":"lines","line":2315,"char":79811,"type":"variable"},{"text":"logLines","line":2316,"char":79846,"type":"variable"},{"text":"stdout","line":2317,"char":79879,"type":"variable"},{"text":"stderr","line":2318,"char":79910,"type":"variable"},{"text":"fakeClock","line":2332,"char":80426,"type":"variable"},{"text":"eventBus","line":2333,"char":80511,"type":"variable"},{"text":"listener","line":2334,"char":80599,"type":"variable"},{"text":"fakeClock","line":2371,"char":81827,"type":"variable"},{"text":"eventBus","line":2372,"char":81912,"type":"variable"},{"text":"listener","line":2373,"char":82000,"type":"variable"},{"text":"fakeTarget","line":2375,"char":82069,"type":"variable"},{"text":"buildTargets","line":2376,"char":82162,"type":"variable"},{"text":"parseStarted","line":2381,"char":82450,"type":"variable"},{"text":"actionGraphStarted","line":2395,"char":82934,"type":"variable"},{"text":"buildEventStarted","line":2412,"char":83505,"type":"variable"},{"text":"parsingLine","line":2421,"char":83763,"type":"variable"},{"text":"clock","line":2429,"char":84025,"type":"variable"},{"text":"eventBus","line":2429,"char":84045,"type":"variable"},{"text":"listener","line":2430,"char":84090,"type":"variable"},{"text":"listener","line":2452,"char":84714,"type":"variable"},{"text":"fakeRenderer","line":2453,"char":84754,"type":"variable"},{"text":"fullOutput","line":2454,"char":84796,"type":"variable"},{"text":"maxLines","line":2455,"char":84818,"type":"variable"},{"text":"lines","line":2456,"char":84864,"type":"variable"},{"text":"Rule","line":130,"char":6039,"type":"annotation"},{"text":"Before","line":140,"char":6342,"type":"annotation"},{"text":"Test","line":146,"char":6484,"type":"annotation"},{"text":"Test","line":550,"char":20597,"type":"annotation"},{"text":"Test","line":738,"char":27330,"type":"annotation"},{"text":"Test","line":989,"char":35628,"type":"annotation"},{"text":"Test","line":1276,"char":44905,"type":"annotation"},{"text":"Test","line":1567,"char":54184,"type":"annotation"},{"text":"Test","line":1885,"char":64496,"type":"annotation"},{"text":"Test","line":2056,"char":70354,"type":"annotation"},{"text":"Test","line":2071,"char":70943,"type":"annotation"},{"text":"Test","line":2113,"char":72802,"type":"annotation"},{"text":"Test","line":2138,"char":73667,"type":"annotation"},{"text":"Test","line":2203,"char":75959,"type":"annotation"},{"text":"Test","line":2236,"char":77023,"type":"annotation"},{"text":"Test","line":2330,"char":80343,"type":"annotation"},{"text":"Test","line":2369,"char":81752,"type":"annotation"},{"text":"createTestLogFile","line":141,"char":6363,"type":"method"},{"text":"testSimpleBuild","line":147,"char":6503,"type":"method"},{"text":"testSimpleBuildWithProgress","line":551,"char":20616,"type":"method"},{"text":"testSimpleDistBuildWithProgress","line":739,"char":27349,"type":"method"},{"text":"testSimpleTest","line":990,"char":35647,"type":"method"},{"text":"testSkippedTest","line":1277,"char":44924,"type":"method"},{"text":"testFailingTest","line":1568,"char":54203,"type":"method"},{"text":"testBuildRuleSuspendResumeEvents","line":1886,"char":64515,"type":"method"},{"text":"debugConsoleEventShouldNotPrintLogLineToConsole","line":2057,"char":70373,"type":"method"},{"text":"testParsingStatus","line":2072,"char":70962,"type":"method"},{"text":"testProjectGeneration","line":2114,"char":72821,"type":"method"},{"text":"testProjectGenerationWithProgress","line":2139,"char":73686,"type":"method"},{"text":"testPostingEventBeforeAnyLines","line":2204,"char":75978,"type":"method"},{"text":"renderLinesWithLineLimit","line":2237,"char":77042,"type":"method"},{"text":"validateConsole","line":2291,"char":79127,"type":"method"},{"text":"validateConsoleWithLogLines","line":2298,"char":79343,"type":"method"},{"text":"validateConsoleWithStdOutAndErr","line":2312,"char":79686,"type":"method"},{"text":"timestampsInLocaleWithDecimalCommaFormatCorrectly","line":2331,"char":80362,"type":"method"},{"text":"testBuildTimeDoesNotDisplayNegativeOffset","line":2370,"char":81771,"type":"method"},{"text":"createSuperConsole","line":2429,"char":84000,"type":"method"},{"text":"getStorageForTest","line":2447,"char":84577,"type":"method"},{"text":"compareOutput","line":2451,"char":84664,"type":"method"},{"text":"String","line":115,"char":5306,"type":"identifier"},{"text":"String","line":116,"char":5363,"type":"identifier"},{"text":"String","line":117,"char":5420,"type":"identifier"},{"text":"String","line":118,"char":5481,"type":"identifier"},{"text":"String","line":120,"char":5596,"type":"identifier"},{"text":"String","line":122,"char":5724,"type":"identifier"},{"text":"TestResultSummaryVerbosity","line":124,"char":5808,"type":"identifier"},{"text":"TestResultSummaryVerbosity","line":125,"char":5865,"type":"identifier"},{"text":"of","line":125,"char":5892,"type":"identifier"},{"text":"TestResultSummaryVerbosity","line":127,"char":5932,"type":"identifier"},{"text":"TestResultSummaryVerbosity","line":128,"char":5990,"type":"identifier"},{"text":"of","line":128,"char":6017,"type":"identifier"},{"text":"TemporaryPaths","line":131,"char":6059,"type":"identifier"},{"text":"TemporaryPaths","line":131,"char":6084,"type":"identifier"},{"text":"FileSystem","line":133,"char":6113,"type":"identifier"},{"text":"Path","line":134,"char":6139,"type":"identifier"},{"text":"SuperConsoleConfig","line":135,"char":6163,"type":"identifier"},{"text":"SuperConsoleConfig","line":136,"char":6218,"type":"identifier"},{"text":"FakeBuckConfig","line":136,"char":6237,"type":"identifier"},{"text":"builder","line":136,"char":6252,"type":"identifier"},{"text":"build","line":136,"char":6262,"type":"identifier"},{"text":"TimeZone","line":138,"char":6289,"type":"identifier"},{"text":"TimeZone","line":138,"char":6309,"type":"identifier"},{"text":"getTimeZone","line":138,"char":6318,"type":"identifier"},{"text":"vfs","line":142,"char":6389,"type":"identifier"},{"text":"Jimfs","line":142,"char":6395,"type":"identifier"},{"text":"newFileSystem","line":142,"char":6401,"type":"identifier"},{"text":"Configuration","line":142,"char":6415,"type":"identifier"},{"text":"unix","line":142,"char":6429,"type":"identifier"},{"text":"logPath","line":143,"char":6442,"type":"identifier"},{"text":"vfs","line":143,"char":6452,"type":"identifier"},{"text":"getPath","line":143,"char":6456,"type":"identifier"},{"text":"Clock","line":148,"char":6527,"type":"identifier"},{"text":"IncrementingFakeClock","line":148,"char":6549,"type":"identifier"},{"text":"TimeUnit","line":148,"char":6571,"type":"identifier"},{"text":"SECONDS","line":148,"char":6580,"type":"identifier"},{"text":"toNanos","line":148,"char":6588,"type":"identifier"},{"text":"BuckEventBus","line":149,"char":6605,"type":"identifier"},{"text":"BuckEventBusFactory","line":149,"char":6629,"type":"identifier"},{"text":"newInstance","line":149,"char":6649,"type":"identifier"},{"text":"fakeClock","line":149,"char":6661,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":150,"char":6677,"type":"identifier"},{"text":"createSuperConsole","line":150,"char":6717,"type":"identifier"},{"text":"fakeClock","line":150,"char":6736,"type":"identifier"},{"text":"eventBus","line":150,"char":6747,"type":"identifier"},{"text":"SourcePathResolver","line":152,"char":6763,"type":"identifier"},{"text":"SourcePathResolver","line":152,"char":6801,"type":"identifier"},{"text":"BuildRuleResolver","line":153,"char":6833,"type":"identifier"},{"text":"TargetGraph","line":153,"char":6851,"type":"identifier"},{"text":"EMPTY","line":153,"char":6863,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":153,"char":6874,"type":"identifier"},{"text":"BuildTarget","line":156,"char":6929,"type":"identifier"},{"text":"BuildTargetFactory","line":156,"char":6954,"type":"identifier"},{"text":"newInstance","line":156,"char":6973,"type":"identifier"},{"text":"BuildTarget","line":157,"char":7008,"type":"identifier"},{"text":"BuildTargetFactory","line":157,"char":7035,"type":"identifier"},{"text":"newInstance","line":157,"char":7054,"type":"identifier"},{"text":"ImmutableSet","line":158,"char":7090,"type":"identifier"},{"text":"BuildTarget","line":158,"char":7103,"type":"identifier"},{"text":"ImmutableSet","line":158,"char":7131,"type":"identifier"},{"text":"of","line":158,"char":7144,"type":"identifier"},{"text":"fakeTarget","line":158,"char":7147,"type":"identifier"},{"text":"cachedTarget","line":158,"char":7159,"type":"identifier"},{"text":"Iterable","line":159,"char":7178,"type":"identifier"},{"text":"String","line":159,"char":7187,"type":"identifier"},{"text":"buildArgs","line":159,"char":7195,"type":"identifier"},{"text":"Iterables","line":159,"char":7207,"type":"identifier"},{"text":"transform","line":159,"char":7217,"type":"identifier"},{"text":"buildTargets","line":159,"char":7227,"type":"identifier"},{"text":"Object","line":159,"char":7241,"type":"identifier"},{"text":"toString","line":159,"char":7249,"type":"identifier"},{"text":"FakeBuildRule","line":160,"char":7264,"type":"identifier"},{"text":"FakeBuildRule","line":160,"char":7293,"type":"identifier"},{"text":"fakeTarget","line":161,"char":7316,"type":"identifier"},{"text":"pathResolver","line":162,"char":7336,"type":"identifier"},{"text":"ImmutableSortedSet","line":163,"char":7358,"type":"identifier"},{"text":"of","line":163,"char":7377,"type":"identifier"},{"text":"FakeBuildRule","line":164,"char":7388,"type":"identifier"},{"text":"FakeBuildRule","line":164,"char":7419,"type":"identifier"},{"text":"cachedTarget","line":165,"char":7442,"type":"identifier"},{"text":"pathResolver","line":166,"char":7464,"type":"identifier"},{"text":"ImmutableSortedSet","line":167,"char":7486,"type":"identifier"},{"text":"of","line":167,"char":7505,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":169,"char":7517,"type":"identifier"},{"text":"Started","line":169,"char":7545,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":170,"char":7585,"type":"identifier"},{"text":"Started","line":170,"char":7613,"type":"identifier"},{"text":"eventBus","line":171,"char":7628,"type":"identifier"},{"text":"postWithoutConfiguring","line":171,"char":7637,"type":"identifier"},{"text":"configureTestEventAtTime","line":172,"char":7669,"type":"identifier"},{"text":"parseEventStarted","line":173,"char":7707,"type":"identifier"},{"text":"TimeUnit","line":175,"char":7754,"type":"identifier"},{"text":"MILLISECONDS","line":175,"char":7763,"type":"identifier"},{"text":"validateConsole","line":177,"char":7814,"type":"identifier"},{"text":"listener","line":177,"char":7830,"type":"identifier"},{"text":"ImmutableList","line":177,"char":7844,"type":"identifier"},{"text":"of","line":177,"char":7858,"type":"identifier"},{"text":"validateConsole","line":179,"char":7901,"type":"identifier"},{"text":"listener","line":180,"char":7926,"type":"identifier"},{"text":"ImmutableList","line":180,"char":7942,"type":"identifier"},{"text":"of","line":180,"char":7956,"type":"identifier"},{"text":"eventBus","line":183,"char":8012,"type":"identifier"},{"text":"postWithoutConfiguring","line":183,"char":8021,"type":"identifier"},{"text":"configureTestEventAtTime","line":184,"char":8053,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":185,"char":8095,"type":"identifier"},{"text":"Finished","line":185,"char":8123,"type":"identifier"},{"text":"parseEventStarted","line":185,"char":8132,"type":"identifier"},{"text":"TimeUnit","line":187,"char":8182,"type":"identifier"},{"text":"MILLISECONDS","line":187,"char":8191,"type":"identifier"},{"text":"validateConsole","line":189,"char":8242,"type":"identifier"},{"text":"listener","line":190,"char":8267,"type":"identifier"},{"text":"ImmutableList","line":190,"char":8283,"type":"identifier"},{"text":"of","line":190,"char":8297,"type":"identifier"},{"text":"BuildEvent","line":193,"char":8362,"type":"identifier"},{"text":"Started","line":193,"char":8373,"type":"identifier"},{"text":"BuildEvent","line":193,"char":8401,"type":"identifier"},{"text":"started","line":193,"char":8412,"type":"identifier"},{"text":"buildArgs","line":193,"char":8420,"type":"identifier"},{"text":"eventBus","line":194,"char":8436,"type":"identifier"},{"text":"postWithoutConfiguring","line":194,"char":8445,"type":"identifier"},{"text":"configureTestEventAtTime","line":195,"char":8477,"type":"identifier"},{"text":"buildEventStarted","line":196,"char":8515,"type":"identifier"},{"text":"TimeUnit","line":198,"char":8564,"type":"identifier"},{"text":"MILLISECONDS","line":198,"char":8573,"type":"identifier"},{"text":"ParseEvent","line":200,"char":8624,"type":"identifier"},{"text":"Started","line":200,"char":8635,"type":"identifier"},{"text":"ParseEvent","line":200,"char":8658,"type":"identifier"},{"text":"started","line":200,"char":8669,"type":"identifier"},{"text":"buildTargets","line":200,"char":8677,"type":"identifier"},{"text":"eventBus","line":201,"char":8696,"type":"identifier"},{"text":"postWithoutConfiguring","line":201,"char":8705,"type":"identifier"},{"text":"configureTestEventAtTime","line":202,"char":8737,"type":"identifier"},{"text":"parseStarted","line":203,"char":8775,"type":"identifier"},{"text":"TimeUnit","line":205,"char":8819,"type":"identifier"},{"text":"MILLISECONDS","line":205,"char":8828,"type":"identifier"},{"text":"validateConsole","line":208,"char":8880,"type":"identifier"},{"text":"listener","line":208,"char":8896,"type":"identifier"},{"text":"ImmutableList","line":208,"char":8912,"type":"identifier"},{"text":"of","line":208,"char":8926,"type":"identifier"},{"text":"eventBus","line":211,"char":8981,"type":"identifier"},{"text":"postWithoutConfiguring","line":211,"char":8990,"type":"identifier"},{"text":"configureTestEventAtTime","line":212,"char":9022,"type":"identifier"},{"text":"ParseEvent","line":213,"char":9060,"type":"identifier"},{"text":"finished","line":213,"char":9071,"type":"identifier"},{"text":"parseStarted","line":213,"char":9080,"type":"identifier"},{"text":"Optional","line":213,"char":9094,"type":"identifier"},{"text":"empty","line":213,"char":9103,"type":"identifier"},{"text":"TimeUnit","line":215,"char":9143,"type":"identifier"},{"text":"MILLISECONDS","line":215,"char":9152,"type":"identifier"},{"text":"ActionGraphEvent","line":217,"char":9203,"type":"identifier"},{"text":"Started","line":217,"char":9220,"type":"identifier"},{"text":"ActionGraphEvent","line":217,"char":9249,"type":"identifier"},{"text":"started","line":217,"char":9266,"type":"identifier"},{"text":"eventBus","line":218,"char":9281,"type":"identifier"},{"text":"postWithoutConfiguring","line":218,"char":9290,"type":"identifier"},{"text":"configureTestEventAtTime","line":219,"char":9322,"type":"identifier"},{"text":"actionGraphStarted","line":220,"char":9360,"type":"identifier"},{"text":"TimeUnit","line":222,"char":9410,"type":"identifier"},{"text":"MILLISECONDS","line":222,"char":9419,"type":"identifier"},{"text":"eventBus","line":224,"char":9470,"type":"identifier"},{"text":"postWithoutConfiguring","line":224,"char":9479,"type":"identifier"},{"text":"configureTestEventAtTime","line":225,"char":9511,"type":"identifier"},{"text":"ActionGraphEvent","line":226,"char":9549,"type":"identifier"},{"text":"finished","line":226,"char":9566,"type":"identifier"},{"text":"actionGraphStarted","line":226,"char":9575,"type":"identifier"},{"text":"TimeUnit","line":228,"char":9626,"type":"identifier"},{"text":"MILLISECONDS","line":228,"char":9635,"type":"identifier"},{"text":"String","line":231,"char":9693,"type":"identifier"},{"text":"validateConsole","line":233,"char":9764,"type":"identifier"},{"text":"listener","line":233,"char":9780,"type":"identifier"},{"text":"ImmutableList","line":233,"char":9796,"type":"identifier"},{"text":"of","line":233,"char":9810,"type":"identifier"},{"text":"parsingLine","line":234,"char":9822,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":235,"char":9843,"type":"identifier"},{"text":"eventBus","line":238,"char":9898,"type":"identifier"},{"text":"postWithoutConfiguring","line":238,"char":9907,"type":"identifier"},{"text":"configureTestEventAtTime","line":239,"char":9939,"type":"identifier"},{"text":"BuildRuleEvent","line":240,"char":9977,"type":"identifier"},{"text":"started","line":240,"char":9992,"type":"identifier"},{"text":"fakeRule","line":240,"char":10000,"type":"identifier"},{"text":"TimeUnit","line":242,"char":10041,"type":"identifier"},{"text":"MILLISECONDS","line":242,"char":10050,"type":"identifier"},{"text":"validateConsole","line":245,"char":10102,"type":"identifier"},{"text":"listener","line":245,"char":10118,"type":"identifier"},{"text":"ImmutableList","line":245,"char":10134,"type":"identifier"},{"text":"of","line":245,"char":10148,"type":"identifier"},{"text":"parsingLine","line":246,"char":10160,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":247,"char":10181,"type":"identifier"},{"text":"BuildRuleCacheEvent","line":251,"char":10293,"type":"identifier"},{"text":"CacheStepStarted","line":251,"char":10313,"type":"identifier"},{"text":"BuildRuleCacheEvent","line":251,"char":10349,"type":"identifier"},{"text":"started","line":251,"char":10369,"type":"identifier"},{"text":"fakeRule","line":252,"char":10386,"type":"identifier"},{"text":"BuildRuleCacheEvent","line":253,"char":10404,"type":"identifier"},{"text":"CacheStepType","line":253,"char":10424,"type":"identifier"},{"text":"INPUT_BASED","line":253,"char":10438,"type":"identifier"},{"text":"eventBus","line":254,"char":10456,"type":"identifier"},{"text":"postWithoutConfiguring","line":254,"char":10465,"type":"identifier"},{"text":"configureTestEventAtTime","line":255,"char":10497,"type":"identifier"},{"text":"cacheStepStarted","line":256,"char":10535,"type":"identifier"},{"text":"TimeUnit","line":258,"char":10583,"type":"identifier"},{"text":"MILLISECONDS","line":258,"char":10592,"type":"identifier"},{"text":"validateConsole","line":261,"char":10644,"type":"identifier"},{"text":"listener","line":261,"char":10660,"type":"identifier"},{"text":"ImmutableList","line":261,"char":10676,"type":"identifier"},{"text":"of","line":261,"char":10690,"type":"identifier"},{"text":"parsingLine","line":262,"char":10702,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":263,"char":10723,"type":"identifier"},{"text":"eventBus","line":267,"char":10861,"type":"identifier"},{"text":"postWithoutConfiguring","line":267,"char":10870,"type":"identifier"},{"text":"configureTestEventAtTime","line":268,"char":10902,"type":"identifier"},{"text":"BuildRuleCacheEvent","line":269,"char":10940,"type":"identifier"},{"text":"finished","line":269,"char":10960,"type":"identifier"},{"text":"cacheStepStarted","line":269,"char":10969,"type":"identifier"},{"text":"TimeUnit","line":271,"char":11018,"type":"identifier"},{"text":"MILLISECONDS","line":271,"char":11027,"type":"identifier"},{"text":"validateConsole","line":274,"char":11079,"type":"identifier"},{"text":"listener","line":274,"char":11095,"type":"identifier"},{"text":"ImmutableList","line":274,"char":11111,"type":"identifier"},{"text":"of","line":274,"char":11125,"type":"identifier"},{"text":"parsingLine","line":275,"char":11137,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":276,"char":11158,"type":"identifier"},{"text":"ArtifactCompressionEvent","line":280,"char":11270,"type":"identifier"},{"text":"Started","line":280,"char":11295,"type":"identifier"},{"text":"ArtifactCompressionEvent","line":280,"char":11321,"type":"identifier"},{"text":"started","line":280,"char":11346,"type":"identifier"},{"text":"ArtifactCompressionEvent","line":281,"char":11363,"type":"identifier"},{"text":"Operation","line":281,"char":11388,"type":"identifier"},{"text":"COMPRESS","line":281,"char":11398,"type":"identifier"},{"text":"ImmutableSet","line":281,"char":11408,"type":"identifier"},{"text":"of","line":281,"char":11421,"type":"identifier"},{"text":"eventBus","line":282,"char":11432,"type":"identifier"},{"text":"postWithoutConfiguring","line":282,"char":11441,"type":"identifier"},{"text":"configureTestEventAtTime","line":283,"char":11473,"type":"identifier"},{"text":"compressStarted","line":284,"char":11511,"type":"identifier"},{"text":"TimeUnit","line":286,"char":11558,"type":"identifier"},{"text":"MILLISECONDS","line":286,"char":11567,"type":"identifier"},{"text":"validateConsole","line":289,"char":11619,"type":"identifier"},{"text":"listener","line":289,"char":11635,"type":"identifier"},{"text":"ImmutableList","line":289,"char":11651,"type":"identifier"},{"text":"of","line":289,"char":11665,"type":"identifier"},{"text":"parsingLine","line":290,"char":11677,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":291,"char":11698,"type":"identifier"},{"text":"eventBus","line":295,"char":11827,"type":"identifier"},{"text":"postWithoutConfiguring","line":295,"char":11836,"type":"identifier"},{"text":"configureTestEventAtTime","line":296,"char":11868,"type":"identifier"},{"text":"ArtifactCompressionEvent","line":297,"char":11906,"type":"identifier"},{"text":"finished","line":297,"char":11931,"type":"identifier"},{"text":"compressStarted","line":297,"char":11940,"type":"identifier"},{"text":"TimeUnit","line":299,"char":11988,"type":"identifier"},{"text":"MILLISECONDS","line":299,"char":11997,"type":"identifier"},{"text":"validateConsole","line":302,"char":12049,"type":"identifier"},{"text":"listener","line":302,"char":12065,"type":"identifier"},{"text":"ImmutableList","line":302,"char":12081,"type":"identifier"},{"text":"of","line":302,"char":12095,"type":"identifier"},{"text":"parsingLine","line":303,"char":12107,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":304,"char":12128,"type":"identifier"},{"text":"DirArtifactCacheEvent","line":308,"char":12240,"type":"identifier"},{"text":"DirArtifactCacheEventFactory","line":308,"char":12262,"type":"identifier"},{"text":"DirArtifactCacheEvent","line":309,"char":12334,"type":"identifier"},{"text":"DirArtifactCacheEventFactory","line":309,"char":12356,"type":"identifier"},{"text":"ArtifactCacheEvent","line":311,"char":12393,"type":"identifier"},{"text":"Started","line":311,"char":12412,"type":"identifier"},{"text":"dirArtifactCacheEventFactory","line":311,"char":12438,"type":"identifier"},{"text":"newFetchStartedEvent","line":312,"char":12476,"type":"identifier"},{"text":"ImmutableSet","line":312,"char":12497,"type":"identifier"},{"text":"of","line":312,"char":12510,"type":"identifier"},{"text":"eventBus","line":314,"char":12522,"type":"identifier"},{"text":"postWithoutConfiguring","line":314,"char":12531,"type":"identifier"},{"text":"configureTestEventAtTime","line":315,"char":12563,"type":"identifier"},{"text":"dirFetchStarted","line":316,"char":12601,"type":"identifier"},{"text":"TimeUnit","line":318,"char":12648,"type":"identifier"},{"text":"MILLISECONDS","line":318,"char":12657,"type":"identifier"},{"text":"validateConsole","line":321,"char":12709,"type":"identifier"},{"text":"listener","line":321,"char":12725,"type":"identifier"},{"text":"ImmutableList","line":321,"char":12741,"type":"identifier"},{"text":"of","line":321,"char":12755,"type":"identifier"},{"text":"parsingLine","line":322,"char":12767,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":323,"char":12788,"type":"identifier"},{"text":"eventBus","line":327,"char":12918,"type":"identifier"},{"text":"postWithoutConfiguring","line":327,"char":12927,"type":"identifier"},{"text":"configureTestEventAtTime","line":328,"char":12959,"type":"identifier"},{"text":"dirArtifactCacheEventFactory","line":329,"char":12997,"type":"identifier"},{"text":"newFetchFinishedEvent","line":329,"char":13026,"type":"identifier"},{"text":"dirFetchStarted","line":330,"char":13065,"type":"identifier"},{"text":"CacheResult","line":331,"char":13098,"type":"identifier"},{"text":"hit","line":331,"char":13110,"type":"identifier"},{"text":"TimeUnit","line":333,"char":13153,"type":"identifier"},{"text":"MILLISECONDS","line":333,"char":13162,"type":"identifier"},{"text":"validateConsole","line":336,"char":13214,"type":"identifier"},{"text":"listener","line":336,"char":13230,"type":"identifier"},{"text":"ImmutableList","line":336,"char":13246,"type":"identifier"},{"text":"of","line":336,"char":13260,"type":"identifier"},{"text":"parsingLine","line":337,"char":13272,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":338,"char":13293,"type":"identifier"},{"text":"String","line":342,"char":13405,"type":"identifier"},{"text":"String","line":343,"char":13451,"type":"identifier"},{"text":"UUID","line":344,"char":13496,"type":"identifier"},{"text":"UUID","line":344,"char":13512,"type":"identifier"},{"text":"randomUUID","line":344,"char":13517,"type":"identifier"},{"text":"StepEvent","line":345,"char":13535,"type":"identifier"},{"text":"Started","line":345,"char":13545,"type":"identifier"},{"text":"StepEvent","line":346,"char":13580,"type":"identifier"},{"text":"started","line":346,"char":13590,"type":"identifier"},{"text":"stepShortName","line":346,"char":13598,"type":"identifier"},{"text":"stepDescription","line":346,"char":13613,"type":"identifier"},{"text":"stepUuid","line":346,"char":13630,"type":"identifier"},{"text":"eventBus","line":347,"char":13645,"type":"identifier"},{"text":"postWithoutConfiguring","line":347,"char":13654,"type":"identifier"},{"text":"configureTestEventAtTime","line":348,"char":13686,"type":"identifier"},{"text":"stepEventStarted","line":349,"char":13724,"type":"identifier"},{"text":"TimeUnit","line":351,"char":13772,"type":"identifier"},{"text":"MILLISECONDS","line":351,"char":13781,"type":"identifier"},{"text":"validateConsole","line":354,"char":13833,"type":"identifier"},{"text":"listener","line":354,"char":13849,"type":"identifier"},{"text":"ImmutableList","line":354,"char":13865,"type":"identifier"},{"text":"of","line":354,"char":13879,"type":"identifier"},{"text":"parsingLine","line":355,"char":13891,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":356,"char":13912,"type":"identifier"},{"text":"eventBus","line":360,"char":14039,"type":"identifier"},{"text":"postWithoutConfiguring","line":360,"char":14048,"type":"identifier"},{"text":"configureTestEventAtTime","line":361,"char":14080,"type":"identifier"},{"text":"StepEvent","line":362,"char":14118,"type":"identifier"},{"text":"finished","line":362,"char":14128,"type":"identifier"},{"text":"stepEventStarted","line":362,"char":14137,"type":"identifier"},{"text":"TimeUnit","line":364,"char":14189,"type":"identifier"},{"text":"MILLISECONDS","line":364,"char":14198,"type":"identifier"},{"text":"eventBus","line":366,"char":14249,"type":"identifier"},{"text":"postWithoutConfiguring","line":366,"char":14258,"type":"identifier"},{"text":"configureTestEventAtTime","line":367,"char":14290,"type":"identifier"},{"text":"BuildRuleEvent","line":368,"char":14328,"type":"identifier"},{"text":"finished","line":368,"char":14343,"type":"identifier"},{"text":"fakeRule","line":369,"char":14369,"type":"identifier"},{"text":"BuildRuleKeys","line":370,"char":14395,"type":"identifier"},{"text":"of","line":370,"char":14409,"type":"identifier"},{"text":"RuleKey","line":370,"char":14416,"type":"identifier"},{"text":"BuildRuleStatus","line":371,"char":14450,"type":"identifier"},{"text":"SUCCESS","line":371,"char":14466,"type":"identifier"},{"text":"CacheResult","line":372,"char":14491,"type":"identifier"},{"text":"miss","line":372,"char":14503,"type":"identifier"},{"text":"Optional","line":373,"char":14527,"type":"identifier"},{"text":"of","line":373,"char":14536,"type":"identifier"},{"text":"BuildRuleSuccessType","line":373,"char":14539,"type":"identifier"},{"text":"BUILT_LOCALLY","line":373,"char":14560,"type":"identifier"},{"text":"Optional","line":374,"char":14592,"type":"identifier"},{"text":"empty","line":374,"char":14601,"type":"identifier"},{"text":"Optional","line":375,"char":14626,"type":"identifier"},{"text":"empty","line":375,"char":14635,"type":"identifier"},{"text":"Optional","line":376,"char":14660,"type":"identifier"},{"text":"empty","line":376,"char":14669,"type":"identifier"},{"text":"Optional","line":377,"char":14694,"type":"identifier"},{"text":"empty","line":377,"char":14703,"type":"identifier"},{"text":"TimeUnit","line":379,"char":14744,"type":"identifier"},{"text":"MILLISECONDS","line":379,"char":14753,"type":"identifier"},{"text":"validateConsole","line":382,"char":14805,"type":"identifier"},{"text":"listener","line":382,"char":14821,"type":"identifier"},{"text":"ImmutableList","line":382,"char":14838,"type":"identifier"},{"text":"of","line":382,"char":14852,"type":"identifier"},{"text":"parsingLine","line":383,"char":14864,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":384,"char":14885,"type":"identifier"},{"text":"eventBus","line":388,"char":14961,"type":"identifier"},{"text":"postWithoutConfiguring","line":388,"char":14970,"type":"identifier"},{"text":"configureTestEventAtTime","line":389,"char":15002,"type":"identifier"},{"text":"BuildRuleEvent","line":390,"char":15040,"type":"identifier"},{"text":"started","line":390,"char":15055,"type":"identifier"},{"text":"cachedRule","line":390,"char":15063,"type":"identifier"},{"text":"TimeUnit","line":392,"char":15107,"type":"identifier"},{"text":"MILLISECONDS","line":392,"char":15116,"type":"identifier"},{"text":"validateConsole","line":395,"char":15168,"type":"identifier"},{"text":"listener","line":395,"char":15184,"type":"identifier"},{"text":"ImmutableList","line":395,"char":15201,"type":"identifier"},{"text":"of","line":395,"char":15215,"type":"identifier"},{"text":"parsingLine","line":396,"char":15227,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":397,"char":15248,"type":"identifier"},{"text":"eventBus","line":402,"char":15382,"type":"identifier"},{"text":"postWithoutConfiguring","line":402,"char":15391,"type":"identifier"},{"text":"configureTestEventAtTime","line":403,"char":15423,"type":"identifier"},{"text":"BuildRuleEvent","line":404,"char":15461,"type":"identifier"},{"text":"finished","line":404,"char":15476,"type":"identifier"},{"text":"cachedRule","line":405,"char":15502,"type":"identifier"},{"text":"BuildRuleKeys","line":406,"char":15530,"type":"identifier"},{"text":"of","line":406,"char":15544,"type":"identifier"},{"text":"RuleKey","line":406,"char":15551,"type":"identifier"},{"text":"BuildRuleStatus","line":407,"char":15585,"type":"identifier"},{"text":"SUCCESS","line":407,"char":15601,"type":"identifier"},{"text":"CacheResult","line":408,"char":15626,"type":"identifier"},{"text":"miss","line":408,"char":15638,"type":"identifier"},{"text":"Optional","line":409,"char":15662,"type":"identifier"},{"text":"of","line":409,"char":15671,"type":"identifier"},{"text":"BuildRuleSuccessType","line":409,"char":15674,"type":"identifier"},{"text":"BUILT_LOCALLY","line":409,"char":15695,"type":"identifier"},{"text":"Optional","line":410,"char":15727,"type":"identifier"},{"text":"empty","line":410,"char":15736,"type":"identifier"},{"text":"Optional","line":411,"char":15761,"type":"identifier"},{"text":"empty","line":411,"char":15770,"type":"identifier"},{"text":"Optional","line":412,"char":15795,"type":"identifier"},{"text":"empty","line":412,"char":15804,"type":"identifier"},{"text":"Optional","line":413,"char":15829,"type":"identifier"},{"text":"empty","line":413,"char":15838,"type":"identifier"},{"text":"TimeUnit","line":415,"char":15879,"type":"identifier"},{"text":"MILLISECONDS","line":415,"char":15888,"type":"identifier"},{"text":"eventBus","line":418,"char":15940,"type":"identifier"},{"text":"postWithoutConfiguring","line":418,"char":15949,"type":"identifier"},{"text":"configureTestEventAtTime","line":419,"char":15981,"type":"identifier"},{"text":"BuildEvent","line":420,"char":16019,"type":"identifier"},{"text":"finished","line":420,"char":16030,"type":"identifier"},{"text":"buildEventStarted","line":420,"char":16039,"type":"identifier"},{"text":"TimeUnit","line":422,"char":16093,"type":"identifier"},{"text":"MILLISECONDS","line":422,"char":16102,"type":"identifier"},{"text":"String","line":425,"char":16160,"type":"identifier"},{"text":"validateConsole","line":427,"char":16219,"type":"identifier"},{"text":"listener","line":427,"char":16235,"type":"identifier"},{"text":"ImmutableList","line":427,"char":16252,"type":"identifier"},{"text":"of","line":427,"char":16266,"type":"identifier"},{"text":"parsingLine","line":428,"char":16278,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":429,"char":16299,"type":"identifier"},{"text":"buildingLine","line":430,"char":16333,"type":"identifier"},{"text":"eventBus","line":432,"char":16354,"type":"identifier"},{"text":"postWithoutConfiguring","line":432,"char":16363,"type":"identifier"},{"text":"configureTestEventAtTime","line":433,"char":16395,"type":"identifier"},{"text":"ConsoleEvent","line":434,"char":16433,"type":"identifier"},{"text":"severe","line":434,"char":16446,"type":"identifier"},{"text":"SEVERE_MESSAGE","line":434,"char":16453,"type":"identifier"},{"text":"TimeUnit","line":436,"char":16501,"type":"identifier"},{"text":"MILLISECONDS","line":436,"char":16510,"type":"identifier"},{"text":"validateConsoleWithLogLines","line":439,"char":16562,"type":"identifier"},{"text":"listener","line":440,"char":16599,"type":"identifier"},{"text":"ImmutableList","line":442,"char":16632,"type":"identifier"},{"text":"of","line":442,"char":16646,"type":"identifier"},{"text":"parsingLine","line":443,"char":16662,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":444,"char":16687,"type":"identifier"},{"text":"buildingLine","line":445,"char":16725,"type":"identifier"},{"text":"ImmutableList","line":446,"char":16748,"type":"identifier"},{"text":"of","line":446,"char":16762,"type":"identifier"},{"text":"SEVERE_MESSAGE","line":446,"char":16765,"type":"identifier"},{"text":"InstallEvent","line":448,"char":16788,"type":"identifier"},{"text":"Started","line":448,"char":16801,"type":"identifier"},{"text":"InstallEvent","line":448,"char":16831,"type":"identifier"},{"text":"started","line":448,"char":16844,"type":"identifier"},{"text":"fakeTarget","line":448,"char":16852,"type":"identifier"},{"text":"eventBus","line":449,"char":16869,"type":"identifier"},{"text":"postWithoutConfiguring","line":449,"char":16878,"type":"identifier"},{"text":"configureTestEventAtTime","line":450,"char":16910,"type":"identifier"},{"text":"installEventStarted","line":451,"char":16948,"type":"identifier"},{"text":"TimeUnit","line":453,"char":17000,"type":"identifier"},{"text":"MILLISECONDS","line":453,"char":17009,"type":"identifier"},{"text":"validateConsole","line":456,"char":17061,"type":"identifier"},{"text":"listener","line":456,"char":17077,"type":"identifier"},{"text":"ImmutableList","line":456,"char":17094,"type":"identifier"},{"text":"of","line":456,"char":17108,"type":"identifier"},{"text":"parsingLine","line":457,"char":17120,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":458,"char":17141,"type":"identifier"},{"text":"buildingLine","line":459,"char":17175,"type":"identifier"},{"text":"eventBus","line":462,"char":17229,"type":"identifier"},{"text":"postWithoutConfiguring","line":462,"char":17238,"type":"identifier"},{"text":"configureTestEventAtTime","line":463,"char":17270,"type":"identifier"},{"text":"InstallEvent","line":464,"char":17308,"type":"identifier"},{"text":"finished","line":464,"char":17321,"type":"identifier"},{"text":"installEventStarted","line":465,"char":17347,"type":"identifier"},{"text":"Optional","line":466,"char":17390,"type":"identifier"},{"text":"empty","line":466,"char":17399,"type":"identifier"},{"text":"Optional","line":467,"char":17424,"type":"identifier"},{"text":"empty","line":467,"char":17433,"type":"identifier"},{"text":"TimeUnit","line":469,"char":17474,"type":"identifier"},{"text":"MILLISECONDS","line":469,"char":17483,"type":"identifier"},{"text":"String","line":472,"char":17541,"type":"identifier"},{"text":"validateConsole","line":474,"char":17608,"type":"identifier"},{"text":"listener","line":474,"char":17624,"type":"identifier"},{"text":"ImmutableList","line":474,"char":17641,"type":"identifier"},{"text":"of","line":474,"char":17655,"type":"identifier"},{"text":"parsingLine","line":475,"char":17667,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":476,"char":17688,"type":"identifier"},{"text":"buildingLine","line":477,"char":17722,"type":"identifier"},{"text":"installingFinished","line":478,"char":17744,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":480,"char":17771,"type":"identifier"},{"text":"Scheduled","line":480,"char":17794,"type":"identifier"},{"text":"postStoreScheduled","line":481,"char":17832,"type":"identifier"},{"text":"eventBus","line":481,"char":17851,"type":"identifier"},{"text":"TARGET_ONE","line":481,"char":17865,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":483,"char":17890,"type":"identifier"},{"text":"Scheduled","line":483,"char":17913,"type":"identifier"},{"text":"postStoreScheduled","line":484,"char":17951,"type":"identifier"},{"text":"eventBus","line":484,"char":17970,"type":"identifier"},{"text":"TARGET_TWO","line":484,"char":17984,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":486,"char":18009,"type":"identifier"},{"text":"Scheduled","line":486,"char":18032,"type":"identifier"},{"text":"postStoreScheduled","line":487,"char":18072,"type":"identifier"},{"text":"eventBus","line":487,"char":18091,"type":"identifier"},{"text":"TARGET_THREE","line":487,"char":18105,"type":"identifier"},{"text":"validateConsole","line":489,"char":18132,"type":"identifier"},{"text":"listener","line":489,"char":18148,"type":"identifier"},{"text":"ImmutableList","line":489,"char":18165,"type":"identifier"},{"text":"of","line":489,"char":18179,"type":"identifier"},{"text":"parsingLine","line":490,"char":18191,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":491,"char":18212,"type":"identifier"},{"text":"buildingLine","line":492,"char":18246,"type":"identifier"},{"text":"installingFinished","line":493,"char":18268,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":496,"char":18381,"type":"identifier"},{"text":"Started","line":496,"char":18404,"type":"identifier"},{"text":"postStoreStarted","line":497,"char":18438,"type":"identifier"},{"text":"eventBus","line":497,"char":18455,"type":"identifier"},{"text":"storeScheduledOne","line":497,"char":18475,"type":"identifier"},{"text":"validateConsole","line":499,"char":18500,"type":"identifier"},{"text":"listener","line":499,"char":18516,"type":"identifier"},{"text":"ImmutableList","line":499,"char":18532,"type":"identifier"},{"text":"of","line":499,"char":18546,"type":"identifier"},{"text":"parsingLine","line":500,"char":18558,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":501,"char":18579,"type":"identifier"},{"text":"buildingLine","line":502,"char":18613,"type":"identifier"},{"text":"installingFinished","line":503,"char":18635,"type":"identifier"},{"text":"SizeUnit","line":506,"char":18771,"type":"identifier"},{"text":"KILOBYTES","line":506,"char":18780,"type":"identifier"},{"text":"toBytes","line":506,"char":18790,"type":"identifier"},{"text":"postStoreFinished","line":507,"char":18808,"type":"identifier"},{"text":"eventBus","line":507,"char":18826,"type":"identifier"},{"text":"artifactSizeOne","line":507,"char":18839,"type":"identifier"},{"text":"storeStartedOne","line":507,"char":18869,"type":"identifier"},{"text":"validateConsole","line":509,"char":18892,"type":"identifier"},{"text":"listener","line":509,"char":18908,"type":"identifier"},{"text":"ImmutableList","line":509,"char":18924,"type":"identifier"},{"text":"of","line":509,"char":18938,"type":"identifier"},{"text":"parsingLine","line":510,"char":18950,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":511,"char":18971,"type":"identifier"},{"text":"buildingLine","line":512,"char":19005,"type":"identifier"},{"text":"installingFinished","line":513,"char":19027,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":516,"char":19141,"type":"identifier"},{"text":"Started","line":516,"char":19164,"type":"identifier"},{"text":"postStoreStarted","line":517,"char":19198,"type":"identifier"},{"text":"eventBus","line":517,"char":19215,"type":"identifier"},{"text":"storeScheduledTwo","line":517,"char":19235,"type":"identifier"},{"text":"SizeUnit","line":518,"char":19282,"type":"identifier"},{"text":"KILOBYTES","line":518,"char":19291,"type":"identifier"},{"text":"toBytes","line":518,"char":19301,"type":"identifier"},{"text":"postStoreFinished","line":519,"char":19319,"type":"identifier"},{"text":"eventBus","line":519,"char":19337,"type":"identifier"},{"text":"artifactSizeTwo","line":519,"char":19350,"type":"identifier"},{"text":"storeStartedTwo","line":519,"char":19381,"type":"identifier"},{"text":"validateConsole","line":521,"char":19404,"type":"identifier"},{"text":"listener","line":521,"char":19420,"type":"identifier"},{"text":"ImmutableList","line":521,"char":19436,"type":"identifier"},{"text":"of","line":521,"char":19450,"type":"identifier"},{"text":"parsingLine","line":522,"char":19462,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":523,"char":19483,"type":"identifier"},{"text":"buildingLine","line":524,"char":19517,"type":"identifier"},{"text":"installingFinished","line":525,"char":19539,"type":"identifier"},{"text":"HttpArtifactCacheEvent","line":528,"char":19653,"type":"identifier"},{"text":"Started","line":528,"char":19676,"type":"identifier"},{"text":"postStoreStarted","line":529,"char":19712,"type":"identifier"},{"text":"eventBus","line":529,"char":19729,"type":"identifier"},{"text":"storeScheduledThree","line":529,"char":19749,"type":"identifier"},{"text":"SizeUnit","line":530,"char":19800,"type":"identifier"},{"text":"KILOBYTES","line":530,"char":19809,"type":"identifier"},{"text":"toBytes","line":530,"char":19819,"type":"identifier"},{"text":"postStoreFinished","line":531,"char":19837,"type":"identifier"},{"text":"eventBus","line":531,"char":19855,"type":"identifier"},{"text":"artifactSizeThree","line":531,"char":19868,"type":"identifier"},{"text":"storeStartedThree","line":531,"char":19900,"type":"identifier"},{"text":"validateConsole","line":533,"char":19925,"type":"identifier"},{"text":"listener","line":533,"char":19941,"type":"identifier"},{"text":"ImmutableList","line":533,"char":19957,"type":"identifier"},{"text":"of","line":533,"char":19971,"type":"identifier"},{"text":"parsingLine","line":534,"char":19983,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":535,"char":20004,"type":"identifier"},{"text":"buildingLine","line":536,"char":20038,"type":"identifier"},{"text":"installingFinished","line":537,"char":20060,"type":"identifier"},{"text":"listener","line":540,"char":20174,"type":"identifier"},{"text":"render","line":540,"char":20183,"type":"identifier"},{"text":"TestConsole","line":541,"char":20197,"type":"identifier"},{"text":"TestConsole","line":541,"char":20220,"type":"identifier"},{"text":"listener","line":541,"char":20233,"type":"identifier"},{"text":"console","line":541,"char":20242,"type":"identifier"},{"text":"String","line":542,"char":20255,"type":"identifier"},{"text":"console","line":542,"char":20282,"type":"identifier"},{"text":"getTextWrittenToStdErr","line":542,"char":20290,"type":"identifier"},{"text":"console","line":543,"char":20320,"type":"identifier"},{"text":"getStdErr","line":543,"char":20328,"type":"identifier"},{"text":"print","line":543,"char":20340,"type":"identifier"},{"text":"listener","line":544,"char":20365,"type":"identifier"},{"text":"render","line":544,"char":20374,"type":"identifier"},{"text":"assertEquals","line":545,"char":20388,"type":"identifier"},{"text":"beforeStderrWrite","line":547,"char":20520,"type":"identifier"},{"text":"console","line":547,"char":20554,"type":"identifier"},{"text":"getTextWrittenToStdErr","line":547,"char":20562,"type":"identifier"},{"text":"IOException","line":551,"char":20653,"type":"identifier"},{"text":"Clock","line":552,"char":20671,"type":"identifier"},{"text":"IncrementingFakeClock","line":552,"char":20693,"type":"identifier"},{"text":"TimeUnit","line":552,"char":20715,"type":"identifier"},{"text":"SECONDS","line":552,"char":20724,"type":"identifier"},{"text":"toNanos","line":552,"char":20732,"type":"identifier"},{"text":"BuckEventBus","line":553,"char":20749,"type":"identifier"},{"text":"BuckEventBusFactory","line":553,"char":20773,"type":"identifier"},{"text":"newInstance","line":553,"char":20793,"type":"identifier"},{"text":"fakeClock","line":553,"char":20805,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":554,"char":20821,"type":"identifier"},{"text":"createSuperConsole","line":554,"char":20861,"type":"identifier"},{"text":"fakeClock","line":554,"char":20880,"type":"identifier"},{"text":"eventBus","line":554,"char":20891,"type":"identifier"},{"text":"SourcePathResolver","line":556,"char":20907,"type":"identifier"},{"text":"SourcePathResolver","line":556,"char":20945,"type":"identifier"},{"text":"BuildRuleResolver","line":557,"char":20977,"type":"identifier"},{"text":"TargetGraph","line":557,"char":20995,"type":"identifier"},{"text":"EMPTY","line":557,"char":21007,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":557,"char":21018,"type":"identifier"},{"text":"BuildTarget","line":560,"char":21073,"type":"identifier"},{"text":"BuildTargetFactory","line":560,"char":21098,"type":"identifier"},{"text":"newInstance","line":560,"char":21117,"type":"identifier"},{"text":"BuildTarget","line":561,"char":21152,"type":"identifier"},{"text":"BuildTargetFactory","line":561,"char":21179,"type":"identifier"},{"text":"newInstance","line":561,"char":21198,"type":"identifier"},{"text":"ImmutableSet","line":562,"char":21234,"type":"identifier"},{"text":"BuildTarget","line":562,"char":21247,"type":"identifier"},{"text":"ImmutableSet","line":562,"char":21275,"type":"identifier"},{"text":"of","line":562,"char":21288,"type":"identifier"},{"text":"fakeTarget","line":562,"char":21291,"type":"identifier"},{"text":"cachedTarget","line":562,"char":21303,"type":"identifier"},{"text":"Iterable","line":563,"char":21322,"type":"identifier"},{"text":"String","line":563,"char":21331,"type":"identifier"},{"text":"buildArgs","line":563,"char":21339,"type":"identifier"},{"text":"Iterables","line":563,"char":21351,"type":"identifier"},{"text":"transform","line":563,"char":21361,"type":"identifier"},{"text":"buildTargets","line":563,"char":21371,"type":"identifier"},{"text":"Object","line":563,"char":21385,"type":"identifier"},{"text":"toString","line":563,"char":21393,"type":"identifier"},{"text":"FakeBuildRule","line":564,"char":21408,"type":"identifier"},{"text":"FakeBuildRule","line":564,"char":21437,"type":"identifier"},{"text":"fakeTarget","line":565,"char":21460,"type":"identifier"},{"text":"pathResolver","line":566,"char":21480,"type":"identifier"},{"text":"ImmutableSortedSet","line":567,"char":21502,"type":"identifier"},{"text":"of","line":567,"char":21521,"type":"identifier"},{"text":"FakeBuildRule","line":568,"char":21532,"type":"identifier"},{"text":"FakeBuildRule","line":568,"char":21563,"type":"identifier"},{"text":"cachedTarget","line":569,"char":21586,"type":"identifier"},{"text":"pathResolver","line":570,"char":21608,"type":"identifier"},{"text":"ImmutableSortedSet","line":571,"char":21630,"type":"identifier"},{"text":"of","line":571,"char":21649,"type":"identifier"},{"text":"ProgressEstimator","line":573,"char":21661,"type":"identifier"},{"text":"ProgressEstimator","line":573,"char":21687,"type":"identifier"},{"text":"getStorageForTest","line":574,"char":21714,"type":"identifier"},{"text":"eventBus","line":575,"char":21743,"type":"identifier"},{"text":"ObjectMappers","line":576,"char":21761,"type":"identifier"},{"text":"newDefaultInstance","line":576,"char":21775,"type":"identifier"},{"text":"listener","line":577,"char":21802,"type":"identifier"},{"text":"setProgressEstimator","line":577,"char":21811,"type":"identifier"},{"text":"e","line":577,"char":21832,"type":"identifier"},{"text":"eventBus","line":578,"char":21840,"type":"identifier"},{"text":"register","line":578,"char":21849,"type":"identifier"},{"text":"listener","line":578,"char":21858,"type":"identifier"},{"text":"BuildEvent","line":580,"char":21874,"type":"identifier"},{"text":"RuleCountCalculated","line":580,"char":21885,"type":"identifier"},{"text":"BuildEvent","line":581,"char":21935,"type":"identifier"},{"text":"ruleCountCalculated","line":581,"char":21946,"type":"identifier"},{"text":"ImmutableSet","line":581,"char":21966,"type":"identifier"},{"text":"of","line":581,"char":21979,"type":"identifier"},{"text":"eventBus","line":582,"char":21994,"type":"identifier"},{"text":"post","line":582,"char":22003,"type":"identifier"},{"text":"ruleCountCalculated","line":582,"char":22008,"type":"identifier"},{"text":"BuildEvent","line":584,"char":22035,"type":"identifier"},{"text":"Started","line":584,"char":22046,"type":"identifier"},{"text":"BuildEvent","line":584,"char":22074,"type":"identifier"},{"text":"started","line":584,"char":22085,"type":"identifier"},{"text":"buildArgs","line":584,"char":22093,"type":"identifier"},{"text":"eventBus","line":585,"char":22109,"type":"identifier"},{"text":"postWithoutConfiguring","line":585,"char":22118,"type":"identifier"},{"text":"configureTestEventAtTime","line":586,"char":22150,"type":"identifier"},{"text":"buildEventStarted","line":587,"char":22188,"type":"identifier"},{"text":"TimeUnit","line":589,"char":22237,"type":"identifier"},{"text":"MILLISECONDS","line":589,"char":22246,"type":"identifier"},{"text":"ParseEvent","line":591,"char":22297,"type":"identifier"},{"text":"Started","line":591,"char":22308,"type":"identifier"},{"text":"ParseEvent","line":591,"char":22331,"type":"identifier"},{"text":"started","line":591,"char":22342,"type":"identifier"},{"text":"buildTargets","line":591,"char":22350,"type":"identifier"},{"text":"eventBus","line":592,"char":22369,"type":"identifier"},{"text":"postWithoutConfiguring","line":592,"char":22378,"type":"identifier"},{"text":"configureTestEventAtTime","line":593,"char":22410,"type":"identifier"},{"text":"parseStarted","line":594,"char":22448,"type":"identifier"},{"text":"TimeUnit","line":596,"char":22492,"type":"identifier"},{"text":"MILLISECONDS","line":596,"char":22501,"type":"identifier"},{"text":"validateConsole","line":599,"char":22553,"type":"identifier"},{"text":"listener","line":599,"char":22569,"type":"identifier"},{"text":"ImmutableList","line":599,"char":22585,"type":"identifier"},{"text":"of","line":599,"char":22599,"type":"identifier"},{"text":"eventBus","line":602,"char":22654,"type":"identifier"},{"text":"postWithoutConfiguring","line":602,"char":22663,"type":"identifier"},{"text":"configureTestEventAtTime","line":603,"char":22695,"type":"identifier"},{"text":"ParseEvent","line":604,"char":22733,"type":"identifier"},{"text":"finished","line":604,"char":22744,"type":"identifier"},{"text":"parseStarted","line":605,"char":22770,"type":"identifier"},{"text":"Optional","line":606,"char":22800,"type":"identifier"},{"text":"empty","line":606,"char":22809,"type":"identifier"},{"text":"TimeUnit","line":608,"char":22849,"type":"identifier"},{"text":"MILLISECONDS","line":608,"char":22858,"type":"identifier"},{"text":"ActionGraphEvent","line":610,"char":22909,"type":"identifier"},{"text":"Started","line":610,"char":22926,"type":"identifier"},{"text":"ActionGraphEvent","line":610,"char":22955,"type":"identifier"},{"text":"started","line":610,"char":22972,"type":"identifier"},{"text":"eventBus","line":611,"char":22987,"type":"identifier"},{"text":"postWithoutConfiguring","line":611,"char":22996,"type":"identifier"},{"text":"configureTestEventAtTime","line":612,"char":23028,"type":"identifier"},{"text":"actionGraphStarted","line":613,"char":23066,"type":"identifier"},{"text":"TimeUnit","line":615,"char":23116,"type":"identifier"},{"text":"MILLISECONDS","line":615,"char":23125,"type":"identifier"},{"text":"eventBus","line":617,"char":23176,"type":"identifier"},{"text":"postWithoutConfiguring","line":617,"char":23185,"type":"identifier"},{"text":"configureTestEventAtTime","line":618,"char":23217,"type":"identifier"},{"text":"ActionGraphEvent","line":619,"char":23255,"type":"identifier"},{"text":"finished","line":619,"char":23272,"type":"identifier"},{"text":"actionGraphStarted","line":619,"char":23281,"type":"identifier"},{"text":"TimeUnit","line":621,"char":23332,"type":"identifier"},{"text":"MILLISECONDS","line":621,"char":23341,"type":"identifier"},{"text":"String","line":623,"char":23398,"type":"identifier"},{"text":"validateConsole","line":625,"char":23469,"type":"identifier"},{"text":"listener","line":625,"char":23485,"type":"identifier"},{"text":"ImmutableList","line":625,"char":23501,"type":"identifier"},{"text":"of","line":625,"char":23515,"type":"identifier"},{"text":"parsingLine","line":626,"char":23527,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":627,"char":23548,"type":"identifier"},{"text":"eventBus","line":631,"char":23674,"type":"identifier"},{"text":"postWithoutConfiguring","line":631,"char":23683,"type":"identifier"},{"text":"configureTestEventAtTime","line":632,"char":23715,"type":"identifier"},{"text":"BuildRuleEvent","line":633,"char":23753,"type":"identifier"},{"text":"started","line":633,"char":23768,"type":"identifier"},{"text":"fakeRule","line":633,"char":23776,"type":"identifier"},{"text":"TimeUnit","line":635,"char":23817,"type":"identifier"},{"text":"MILLISECONDS","line":635,"char":23826,"type":"identifier"},{"text":"validateConsole","line":638,"char":23878,"type":"identifier"},{"text":"listener","line":638,"char":23894,"type":"identifier"},{"text":"ImmutableList","line":638,"char":23910,"type":"identifier"},{"text":"of","line":638,"char":23924,"type":"identifier"},{"text":"parsingLine","line":639,"char":23936,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":640,"char":23957,"type":"identifier"},{"text":"String","line":645,"char":24140,"type":"identifier"},{"text":"String","line":646,"char":24186,"type":"identifier"},{"text":"UUID","line":647,"char":24231,"type":"identifier"},{"text":"UUID","line":647,"char":24247,"type":"identifier"},{"text":"randomUUID","line":647,"char":24252,"type":"identifier"},{"text":"StepEvent","line":648,"char":24270,"type":"identifier"},{"text":"Started","line":648,"char":24280,"type":"identifier"},{"text":"StepEvent","line":649,"char":24315,"type":"identifier"},{"text":"started","line":649,"char":24325,"type":"identifier"},{"text":"stepShortName","line":649,"char":24333,"type":"identifier"},{"text":"stepDescription","line":649,"char":24348,"type":"identifier"},{"text":"stepUuid","line":649,"char":24365,"type":"identifier"},{"text":"eventBus","line":650,"char":24380,"type":"identifier"},{"text":"postWithoutConfiguring","line":650,"char":24389,"type":"identifier"},{"text":"configureTestEventAtTime","line":651,"char":24421,"type":"identifier"},{"text":"stepEventStarted","line":652,"char":24459,"type":"identifier"},{"text":"TimeUnit","line":654,"char":24507,"type":"identifier"},{"text":"MILLISECONDS","line":654,"char":24516,"type":"identifier"},{"text":"validateConsole","line":657,"char":24568,"type":"identifier"},{"text":"listener","line":657,"char":24584,"type":"identifier"},{"text":"ImmutableList","line":657,"char":24600,"type":"identifier"},{"text":"of","line":657,"char":24614,"type":"identifier"},{"text":"parsingLine","line":658,"char":24626,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":659,"char":24647,"type":"identifier"},{"text":"eventBus","line":664,"char":24845,"type":"identifier"},{"text":"postWithoutConfiguring","line":664,"char":24854,"type":"identifier"},{"text":"configureTestEventAtTime","line":665,"char":24886,"type":"identifier"},{"text":"StepEvent","line":666,"char":24924,"type":"identifier"},{"text":"finished","line":666,"char":24934,"type":"identifier"},{"text":"stepEventStarted","line":666,"char":24943,"type":"identifier"},{"text":"TimeUnit","line":668,"char":24995,"type":"identifier"},{"text":"MILLISECONDS","line":668,"char":25004,"type":"identifier"},{"text":"eventBus","line":670,"char":25055,"type":"identifier"},{"text":"postWithoutConfiguring","line":670,"char":25064,"type":"identifier"},{"text":"configureTestEventAtTime","line":671,"char":25096,"type":"identifier"},{"text":"BuildRuleEvent","line":672,"char":25134,"type":"identifier"},{"text":"finished","line":672,"char":25149,"type":"identifier"},{"text":"fakeRule","line":673,"char":25175,"type":"identifier"},{"text":"BuildRuleKeys","line":674,"char":25201,"type":"identifier"},{"text":"of","line":674,"char":25215,"type":"identifier"},{"text":"RuleKey","line":674,"char":25222,"type":"identifier"},{"text":"BuildRuleStatus","line":675,"char":25256,"type":"identifier"},{"text":"SUCCESS","line":675,"char":25272,"type":"identifier"},{"text":"CacheResult","line":676,"char":25297,"type":"identifier"},{"text":"miss","line":676,"char":25309,"type":"identifier"},{"text":"Optional","line":677,"char":25333,"type":"identifier"},{"text":"of","line":677,"char":25342,"type":"identifier"},{"text":"BuildRuleSuccessType","line":677,"char":25345,"type":"identifier"},{"text":"BUILT_LOCALLY","line":677,"char":25366,"type":"identifier"},{"text":"Optional","line":678,"char":25398,"type":"identifier"},{"text":"empty","line":678,"char":25407,"type":"identifier"},{"text":"Optional","line":679,"char":25432,"type":"identifier"},{"text":"empty","line":679,"char":25441,"type":"identifier"},{"text":"Optional","line":680,"char":25466,"type":"identifier"},{"text":"empty","line":680,"char":25475,"type":"identifier"},{"text":"Optional","line":681,"char":25500,"type":"identifier"},{"text":"empty","line":681,"char":25509,"type":"identifier"},{"text":"TimeUnit","line":683,"char":25550,"type":"identifier"},{"text":"MILLISECONDS","line":683,"char":25559,"type":"identifier"},{"text":"validateConsole","line":686,"char":25611,"type":"identifier"},{"text":"listener","line":686,"char":25627,"type":"identifier"},{"text":"ImmutableList","line":686,"char":25644,"type":"identifier"},{"text":"of","line":686,"char":25658,"type":"identifier"},{"text":"parsingLine","line":687,"char":25670,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":688,"char":25691,"type":"identifier"},{"text":"eventBus","line":692,"char":25818,"type":"identifier"},{"text":"postWithoutConfiguring","line":692,"char":25827,"type":"identifier"},{"text":"configureTestEventAtTime","line":693,"char":25859,"type":"identifier"},{"text":"BuildRuleEvent","line":694,"char":25897,"type":"identifier"},{"text":"started","line":694,"char":25912,"type":"identifier"},{"text":"cachedRule","line":694,"char":25920,"type":"identifier"},{"text":"TimeUnit","line":696,"char":25964,"type":"identifier"},{"text":"MILLISECONDS","line":696,"char":25973,"type":"identifier"},{"text":"validateConsole","line":699,"char":26025,"type":"identifier"},{"text":"listener","line":699,"char":26041,"type":"identifier"},{"text":"ImmutableList","line":699,"char":26058,"type":"identifier"},{"text":"of","line":699,"char":26072,"type":"identifier"},{"text":"parsingLine","line":700,"char":26084,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":701,"char":26105,"type":"identifier"},{"text":"eventBus","line":706,"char":26290,"type":"identifier"},{"text":"postWithoutConfiguring","line":706,"char":26299,"type":"identifier"},{"text":"configureTestEventAtTime","line":707,"char":26331,"type":"identifier"},{"text":"BuildRuleEvent","line":708,"char":26369,"type":"identifier"},{"text":"finished","line":708,"char":26384,"type":"identifier"},{"text":"cachedRule","line":709,"char":26410,"type":"identifier"},{"text":"BuildRuleKeys","line":710,"char":26438,"type":"identifier"},{"text":"of","line":710,"char":26452,"type":"identifier"},{"text":"RuleKey","line":710,"char":26459,"type":"identifier"},{"text":"BuildRuleStatus","line":711,"char":26493,"type":"identifier"},{"text":"SUCCESS","line":711,"char":26509,"type":"identifier"},{"text":"CacheResult","line":712,"char":26534,"type":"identifier"},{"text":"miss","line":712,"char":26546,"type":"identifier"},{"text":"Optional","line":713,"char":26570,"type":"identifier"},{"text":"of","line":713,"char":26579,"type":"identifier"},{"text":"BuildRuleSuccessType","line":713,"char":26582,"type":"identifier"},{"text":"BUILT_LOCALLY","line":713,"char":26603,"type":"identifier"},{"text":"Optional","line":714,"char":26635,"type":"identifier"},{"text":"empty","line":714,"char":26644,"type":"identifier"},{"text":"Optional","line":715,"char":26669,"type":"identifier"},{"text":"empty","line":715,"char":26678,"type":"identifier"},{"text":"Optional","line":716,"char":26703,"type":"identifier"},{"text":"empty","line":716,"char":26712,"type":"identifier"},{"text":"Optional","line":717,"char":26737,"type":"identifier"},{"text":"empty","line":717,"char":26746,"type":"identifier"},{"text":"TimeUnit","line":719,"char":26787,"type":"identifier"},{"text":"MILLISECONDS","line":719,"char":26796,"type":"identifier"},{"text":"eventBus","line":722,"char":26848,"type":"identifier"},{"text":"postWithoutConfiguring","line":722,"char":26857,"type":"identifier"},{"text":"configureTestEventAtTime","line":723,"char":26889,"type":"identifier"},{"text":"BuildEvent","line":724,"char":26927,"type":"identifier"},{"text":"finished","line":724,"char":26938,"type":"identifier"},{"text":"buildEventStarted","line":724,"char":26947,"type":"identifier"},{"text":"TimeUnit","line":726,"char":27001,"type":"identifier"},{"text":"MILLISECONDS","line":726,"char":27010,"type":"identifier"},{"text":"String","line":729,"char":27068,"type":"identifier"},{"text":"validateConsole","line":732,"char":27192,"type":"identifier"},{"text":"listener","line":732,"char":27208,"type":"identifier"},{"text":"ImmutableList","line":732,"char":27225,"type":"identifier"},{"text":"of","line":732,"char":27239,"type":"identifier"},{"text":"parsingLine","line":733,"char":27251,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":734,"char":27272,"type":"identifier"},{"text":"buildingLine","line":735,"char":27306,"type":"identifier"},{"text":"IOException","line":739,"char":27390,"type":"identifier"},{"text":"Clock","line":740,"char":27408,"type":"identifier"},{"text":"IncrementingFakeClock","line":740,"char":27430,"type":"identifier"},{"text":"TimeUnit","line":740,"char":27452,"type":"identifier"},{"text":"SECONDS","line":740,"char":27461,"type":"identifier"},{"text":"toNanos","line":740,"char":27469,"type":"identifier"},{"text":"BuckEventBus","line":741,"char":27486,"type":"identifier"},{"text":"BuckEventBusFactory","line":741,"char":27510,"type":"identifier"},{"text":"newInstance","line":741,"char":27530,"type":"identifier"},{"text":"fakeClock","line":741,"char":27542,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":742,"char":27558,"type":"identifier"},{"text":"createSuperConsole","line":742,"char":27598,"type":"identifier"},{"text":"fakeClock","line":742,"char":27617,"type":"identifier"},{"text":"eventBus","line":742,"char":27628,"type":"identifier"},{"text":"BuildTarget","line":744,"char":27644,"type":"identifier"},{"text":"BuildTargetFactory","line":744,"char":27669,"type":"identifier"},{"text":"newInstance","line":744,"char":27688,"type":"identifier"},{"text":"BuildTarget","line":745,"char":27723,"type":"identifier"},{"text":"BuildTargetFactory","line":745,"char":27750,"type":"identifier"},{"text":"newInstance","line":745,"char":27769,"type":"identifier"},{"text":"ImmutableSet","line":746,"char":27805,"type":"identifier"},{"text":"BuildTarget","line":746,"char":27818,"type":"identifier"},{"text":"ImmutableSet","line":746,"char":27846,"type":"identifier"},{"text":"of","line":746,"char":27859,"type":"identifier"},{"text":"fakeTarget","line":746,"char":27862,"type":"identifier"},{"text":"cachedTarget","line":746,"char":27874,"type":"identifier"},{"text":"Iterable","line":747,"char":27893,"type":"identifier"},{"text":"String","line":747,"char":27902,"type":"identifier"},{"text":"buildArgs","line":747,"char":27910,"type":"identifier"},{"text":"Iterables","line":747,"char":27922,"type":"identifier"},{"text":"transform","line":747,"char":27932,"type":"identifier"},{"text":"buildTargets","line":747,"char":27942,"type":"identifier"},{"text":"Object","line":747,"char":27956,"type":"identifier"},{"text":"toString","line":747,"char":27964,"type":"identifier"},{"text":"ProgressEstimator","line":749,"char":27980,"type":"identifier"},{"text":"ProgressEstimator","line":749,"char":28006,"type":"identifier"},{"text":"getStorageForTest","line":750,"char":28033,"type":"identifier"},{"text":"eventBus","line":751,"char":28062,"type":"identifier"},{"text":"ObjectMappers","line":752,"char":28080,"type":"identifier"},{"text":"newDefaultInstance","line":752,"char":28094,"type":"identifier"},{"text":"listener","line":753,"char":28121,"type":"identifier"},{"text":"setProgressEstimator","line":753,"char":28130,"type":"identifier"},{"text":"e","line":753,"char":28151,"type":"identifier"},{"text":"eventBus","line":754,"char":28159,"type":"identifier"},{"text":"register","line":754,"char":28168,"type":"identifier"},{"text":"listener","line":754,"char":28177,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":756,"char":28193,"type":"identifier"},{"text":"Started","line":756,"char":28221,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":757,"char":28261,"type":"identifier"},{"text":"Started","line":757,"char":28289,"type":"identifier"},{"text":"eventBus","line":758,"char":28304,"type":"identifier"},{"text":"postWithoutConfiguring","line":758,"char":28313,"type":"identifier"},{"text":"configureTestEventAtTime","line":759,"char":28345,"type":"identifier"},{"text":"parseEventStarted","line":760,"char":28383,"type":"identifier"},{"text":"TimeUnit","line":762,"char":28430,"type":"identifier"},{"text":"MILLISECONDS","line":762,"char":28439,"type":"identifier"},{"text":"validateConsole","line":764,"char":28490,"type":"identifier"},{"text":"listener","line":764,"char":28506,"type":"identifier"},{"text":"ImmutableList","line":764,"char":28520,"type":"identifier"},{"text":"of","line":764,"char":28534,"type":"identifier"},{"text":"validateConsole","line":767,"char":28586,"type":"identifier"},{"text":"listener","line":768,"char":28611,"type":"identifier"},{"text":"ImmutableList","line":768,"char":28627,"type":"identifier"},{"text":"of","line":768,"char":28641,"type":"identifier"},{"text":"eventBus","line":771,"char":28697,"type":"identifier"},{"text":"postWithoutConfiguring","line":771,"char":28706,"type":"identifier"},{"text":"configureTestEventAtTime","line":772,"char":28738,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":773,"char":28780,"type":"identifier"},{"text":"Finished","line":773,"char":28808,"type":"identifier"},{"text":"parseEventStarted","line":773,"char":28817,"type":"identifier"},{"text":"TimeUnit","line":775,"char":28867,"type":"identifier"},{"text":"MILLISECONDS","line":775,"char":28876,"type":"identifier"},{"text":"validateConsole","line":777,"char":28927,"type":"identifier"},{"text":"listener","line":778,"char":28952,"type":"identifier"},{"text":"ImmutableList","line":778,"char":28968,"type":"identifier"},{"text":"of","line":778,"char":28982,"type":"identifier"},{"text":"BuildEvent","line":782,"char":29107,"type":"identifier"},{"text":"Started","line":782,"char":29118,"type":"identifier"},{"text":"BuildEvent","line":782,"char":29146,"type":"identifier"},{"text":"started","line":782,"char":29157,"type":"identifier"},{"text":"buildArgs","line":782,"char":29165,"type":"identifier"},{"text":"eventBus","line":783,"char":29187,"type":"identifier"},{"text":"postWithoutConfiguring","line":783,"char":29196,"type":"identifier"},{"text":"configureTestEventAtTime","line":784,"char":29228,"type":"identifier"},{"text":"buildEventStarted","line":785,"char":29266,"type":"identifier"},{"text":"TimeUnit","line":787,"char":29315,"type":"identifier"},{"text":"MILLISECONDS","line":787,"char":29324,"type":"identifier"},{"text":"ParseEvent","line":789,"char":29375,"type":"identifier"},{"text":"Started","line":789,"char":29386,"type":"identifier"},{"text":"ParseEvent","line":789,"char":29409,"type":"identifier"},{"text":"started","line":789,"char":29420,"type":"identifier"},{"text":"buildTargets","line":789,"char":29428,"type":"identifier"},{"text":"eventBus","line":790,"char":29447,"type":"identifier"},{"text":"postWithoutConfiguring","line":790,"char":29456,"type":"identifier"},{"text":"configureTestEventAtTime","line":791,"char":29488,"type":"identifier"},{"text":"parseStarted","line":792,"char":29526,"type":"identifier"},{"text":"TimeUnit","line":794,"char":29570,"type":"identifier"},{"text":"MILLISECONDS","line":794,"char":29579,"type":"identifier"},{"text":"validateConsole","line":797,"char":29631,"type":"identifier"},{"text":"listener","line":797,"char":29647,"type":"identifier"},{"text":"ImmutableList","line":797,"char":29663,"type":"identifier"},{"text":"of","line":797,"char":29677,"type":"identifier"},{"text":"eventBus","line":800,"char":29732,"type":"identifier"},{"text":"postWithoutConfiguring","line":800,"char":29741,"type":"identifier"},{"text":"configureTestEventAtTime","line":801,"char":29773,"type":"identifier"},{"text":"ParseEvent","line":802,"char":29811,"type":"identifier"},{"text":"finished","line":802,"char":29822,"type":"identifier"},{"text":"parseStarted","line":803,"char":29848,"type":"identifier"},{"text":"Optional","line":804,"char":29878,"type":"identifier"},{"text":"empty","line":804,"char":29887,"type":"identifier"},{"text":"TimeUnit","line":806,"char":29927,"type":"identifier"},{"text":"MILLISECONDS","line":806,"char":29936,"type":"identifier"},{"text":"ActionGraphEvent","line":808,"char":29987,"type":"identifier"},{"text":"Started","line":808,"char":30004,"type":"identifier"},{"text":"ActionGraphEvent","line":808,"char":30033,"type":"identifier"},{"text":"started","line":808,"char":30050,"type":"identifier"},{"text":"eventBus","line":809,"char":30065,"type":"identifier"},{"text":"postWithoutConfiguring","line":809,"char":30074,"type":"identifier"},{"text":"configureTestEventAtTime","line":810,"char":30106,"type":"identifier"},{"text":"actionGraphStarted","line":811,"char":30144,"type":"identifier"},{"text":"TimeUnit","line":813,"char":30194,"type":"identifier"},{"text":"MILLISECONDS","line":813,"char":30203,"type":"identifier"},{"text":"eventBus","line":815,"char":30254,"type":"identifier"},{"text":"postWithoutConfiguring","line":815,"char":30263,"type":"identifier"},{"text":"configureTestEventAtTime","line":816,"char":30295,"type":"identifier"},{"text":"ActionGraphEvent","line":817,"char":30333,"type":"identifier"},{"text":"finished","line":817,"char":30350,"type":"identifier"},{"text":"actionGraphStarted","line":817,"char":30359,"type":"identifier"},{"text":"TimeUnit","line":819,"char":30410,"type":"identifier"},{"text":"MILLISECONDS","line":819,"char":30419,"type":"identifier"},{"text":"String","line":822,"char":30477,"type":"identifier"},{"text":"validateConsole","line":824,"char":30548,"type":"identifier"},{"text":"listener","line":824,"char":30564,"type":"identifier"},{"text":"ImmutableList","line":824,"char":30580,"type":"identifier"},{"text":"of","line":824,"char":30594,"type":"identifier"},{"text":"parsingLine","line":825,"char":30606,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":826,"char":30627,"type":"identifier"},{"text":"eventBus","line":830,"char":30728,"type":"identifier"},{"text":"postWithoutConfiguring","line":830,"char":30737,"type":"identifier"},{"text":"configureTestEventAtTime","line":831,"char":30769,"type":"identifier"},{"text":"DistBuildStatusEvent","line":832,"char":30811,"type":"identifier"},{"text":"DistBuildStatus","line":833,"char":30849,"type":"identifier"},{"text":"builder","line":833,"char":30865,"type":"identifier"},{"text":"setStatus","line":834,"char":30896,"type":"identifier"},{"text":"BuildStatus","line":834,"char":30906,"type":"identifier"},{"text":"QUEUED","line":834,"char":30918,"type":"identifier"},{"text":"setMessage","line":835,"char":30947,"type":"identifier"},{"text":"setETAMillis","line":836,"char":30989,"type":"identifier"},{"text":"setLogBook","line":837,"char":31029,"type":"identifier"},{"text":"Optional","line":837,"char":31040,"type":"identifier"},{"text":"empty","line":837,"char":31049,"type":"identifier"},{"text":"build","line":838,"char":31079,"type":"identifier"},{"text":"TimeUnit","line":840,"char":31119,"type":"identifier"},{"text":"MILLISECONDS","line":840,"char":31128,"type":"identifier"},{"text":"validateConsole","line":843,"char":31180,"type":"identifier"},{"text":"listener","line":843,"char":31196,"type":"identifier"},{"text":"ImmutableList","line":843,"char":31212,"type":"identifier"},{"text":"of","line":843,"char":31226,"type":"identifier"},{"text":"parsingLine","line":844,"char":31238,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":845,"char":31259,"type":"identifier"},{"text":"LinkedList","line":850,"char":31383,"type":"identifier"},{"text":"LogRecord","line":850,"char":31394,"type":"identifier"},{"text":"LinkedList","line":850,"char":31421,"type":"identifier"},{"text":"LogRecord","line":850,"char":31432,"type":"identifier"},{"text":"LogRecord","line":851,"char":31450,"type":"identifier"},{"text":"LogRecord","line":851,"char":31470,"type":"identifier"},{"text":"log","line":852,"char":31487,"type":"identifier"},{"text":"setName","line":852,"char":31491,"type":"identifier"},{"text":"log","line":853,"char":31519,"type":"identifier"},{"text":"setTimestampMillis","line":853,"char":31523,"type":"identifier"},{"text":"debugLogs","line":854,"char":31550,"type":"identifier"},{"text":"add","line":854,"char":31560,"type":"identifier"},{"text":"log","line":854,"char":31564,"type":"identifier"},{"text":"String","line":855,"char":31580,"type":"identifier"},{"text":"String","line":856,"char":31646,"type":"identifier"},{"text":"eventBus","line":858,"char":31710,"type":"identifier"},{"text":"postWithoutConfiguring","line":858,"char":31719,"type":"identifier"},{"text":"configureTestEventAtTime","line":859,"char":31751,"type":"identifier"},{"text":"DistBuildStatusEvent","line":860,"char":31793,"type":"identifier"},{"text":"DistBuildStatus","line":861,"char":31831,"type":"identifier"},{"text":"builder","line":861,"char":31847,"type":"identifier"},{"text":"setStatus","line":862,"char":31878,"type":"identifier"},{"text":"BuildStatus","line":862,"char":31888,"type":"identifier"},{"text":"BUILDING","line":862,"char":31900,"type":"identifier"},{"text":"setMessage","line":863,"char":31931,"type":"identifier"},{"text":"setETAMillis","line":864,"char":31973,"type":"identifier"},{"text":"setLogBook","line":865,"char":32013,"type":"identifier"},{"text":"debugLogs","line":865,"char":32024,"type":"identifier"},{"text":"build","line":866,"char":32056,"type":"identifier"},{"text":"TimeUnit","line":868,"char":32097,"type":"identifier"},{"text":"MILLISECONDS","line":868,"char":32106,"type":"identifier"},{"text":"validateConsole","line":871,"char":32158,"type":"identifier"},{"text":"listener","line":871,"char":32174,"type":"identifier"},{"text":"ImmutableList","line":871,"char":32191,"type":"identifier"},{"text":"of","line":871,"char":32205,"type":"identifier"},{"text":"distDebugLine","line":872,"char":32217,"type":"identifier"},{"text":"logLine1","line":873,"char":32240,"type":"identifier"},{"text":"parsingLine","line":874,"char":32258,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":875,"char":32279,"type":"identifier"},{"text":"log","line":880,"char":32405,"type":"identifier"},{"text":"LogRecord","line":880,"char":32415,"type":"identifier"},{"text":"log","line":881,"char":32432,"type":"identifier"},{"text":"setName","line":881,"char":32436,"type":"identifier"},{"text":"log","line":882,"char":32466,"type":"identifier"},{"text":"setTimestampMillis","line":882,"char":32470,"type":"identifier"},{"text":"debugLogs","line":883,"char":32499,"type":"identifier"},{"text":"add","line":883,"char":32509,"type":"identifier"},{"text":"log","line":883,"char":32513,"type":"identifier"},{"text":"String","line":884,"char":32529,"type":"identifier"},{"text":"eventBus","line":886,"char":32595,"type":"identifier"},{"text":"postWithoutConfiguring","line":886,"char":32604,"type":"identifier"},{"text":"configureTestEventAtTime","line":887,"char":32636,"type":"identifier"},{"text":"DistBuildStatusEvent","line":888,"char":32678,"type":"identifier"},{"text":"DistBuildStatus","line":889,"char":32716,"type":"identifier"},{"text":"builder","line":889,"char":32732,"type":"identifier"},{"text":"setStatus","line":890,"char":32763,"type":"identifier"},{"text":"BuildStatus","line":890,"char":32773,"type":"identifier"},{"text":"BUILDING","line":890,"char":32785,"type":"identifier"},{"text":"setMessage","line":891,"char":32816,"type":"identifier"},{"text":"setETAMillis","line":892,"char":32858,"type":"identifier"},{"text":"setLogBook","line":893,"char":32898,"type":"identifier"},{"text":"debugLogs","line":893,"char":32909,"type":"identifier"},{"text":"build","line":894,"char":32941,"type":"identifier"},{"text":"TimeUnit","line":896,"char":32982,"type":"identifier"},{"text":"MILLISECONDS","line":896,"char":32991,"type":"identifier"},{"text":"validateConsole","line":899,"char":33043,"type":"identifier"},{"text":"listener","line":899,"char":33059,"type":"identifier"},{"text":"ImmutableList","line":899,"char":33076,"type":"identifier"},{"text":"of","line":899,"char":33090,"type":"identifier"},{"text":"distDebugLine","line":900,"char":33102,"type":"identifier"},{"text":"logLine1","line":901,"char":33125,"type":"identifier"},{"text":"logLine2","line":902,"char":33143,"type":"identifier"},{"text":"parsingLine","line":903,"char":33161,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":904,"char":33182,"type":"identifier"},{"text":"log","line":909,"char":33308,"type":"identifier"},{"text":"LogRecord","line":909,"char":33318,"type":"identifier"},{"text":"log","line":910,"char":33335,"type":"identifier"},{"text":"setName","line":910,"char":33339,"type":"identifier"},{"text":"log","line":911,"char":33373,"type":"identifier"},{"text":"setTimestampMillis","line":911,"char":33377,"type":"identifier"},{"text":"debugLogs","line":912,"char":33406,"type":"identifier"},{"text":"add","line":912,"char":33416,"type":"identifier"},{"text":"log","line":912,"char":33420,"type":"identifier"},{"text":"String","line":913,"char":33436,"type":"identifier"},{"text":"log","line":915,"char":33506,"type":"identifier"},{"text":"LogRecord","line":915,"char":33516,"type":"identifier"},{"text":"log","line":916,"char":33533,"type":"identifier"},{"text":"setName","line":916,"char":33537,"type":"identifier"},{"text":"log","line":917,"char":33569,"type":"identifier"},{"text":"setTimestampMillis","line":917,"char":33573,"type":"identifier"},{"text":"debugLogs","line":918,"char":33602,"type":"identifier"},{"text":"add","line":918,"char":33612,"type":"identifier"},{"text":"log","line":918,"char":33616,"type":"identifier"},{"text":"String","line":919,"char":33632,"type":"identifier"},{"text":"eventBus","line":921,"char":33700,"type":"identifier"},{"text":"postWithoutConfiguring","line":921,"char":33709,"type":"identifier"},{"text":"configureTestEventAtTime","line":922,"char":33741,"type":"identifier"},{"text":"DistBuildStatusEvent","line":923,"char":33783,"type":"identifier"},{"text":"DistBuildStatus","line":924,"char":33821,"type":"identifier"},{"text":"builder","line":924,"char":33837,"type":"identifier"},{"text":"setStatus","line":925,"char":33868,"type":"identifier"},{"text":"BuildStatus","line":925,"char":33878,"type":"identifier"},{"text":"FINISHED_SUCCESSFULLY","line":925,"char":33890,"type":"identifier"},{"text":"setMessage","line":926,"char":33934,"type":"identifier"},{"text":"setETAMillis","line":927,"char":33976,"type":"identifier"},{"text":"setLogBook","line":928,"char":34013,"type":"identifier"},{"text":"debugLogs","line":928,"char":34024,"type":"identifier"},{"text":"build","line":929,"char":34056,"type":"identifier"},{"text":"TimeUnit","line":931,"char":34097,"type":"identifier"},{"text":"MILLISECONDS","line":931,"char":34106,"type":"identifier"},{"text":"String","line":934,"char":34164,"type":"identifier"},{"text":"validateConsole","line":935,"char":34250,"type":"identifier"},{"text":"listener","line":935,"char":34266,"type":"identifier"},{"text":"ImmutableList","line":935,"char":34283,"type":"identifier"},{"text":"of","line":935,"char":34297,"type":"identifier"},{"text":"distDebugLine","line":936,"char":34309,"type":"identifier"},{"text":"logLine1","line":937,"char":34332,"type":"identifier"},{"text":"logLine2","line":938,"char":34350,"type":"identifier"},{"text":"logLine3","line":939,"char":34368,"type":"identifier"},{"text":"logLine4","line":940,"char":34386,"type":"identifier"},{"text":"parsingLine","line":941,"char":34404,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":942,"char":34425,"type":"identifier"},{"text":"distbuildLine","line":943,"char":34450,"type":"identifier"},{"text":"eventBus","line":946,"char":34510,"type":"identifier"},{"text":"postWithoutConfiguring","line":946,"char":34519,"type":"identifier"},{"text":"configureTestEventAtTime","line":947,"char":34551,"type":"identifier"},{"text":"BuildEvent","line":948,"char":34589,"type":"identifier"},{"text":"finished","line":948,"char":34600,"type":"identifier"},{"text":"buildEventStarted","line":948,"char":34609,"type":"identifier"},{"text":"TimeUnit","line":950,"char":34663,"type":"identifier"},{"text":"MILLISECONDS","line":950,"char":34672,"type":"identifier"},{"text":"String","line":953,"char":34730,"type":"identifier"},{"text":"validateConsole","line":955,"char":34796,"type":"identifier"},{"text":"listener","line":955,"char":34812,"type":"identifier"},{"text":"ImmutableList","line":955,"char":34829,"type":"identifier"},{"text":"of","line":955,"char":34843,"type":"identifier"},{"text":"distDebugLine","line":956,"char":34855,"type":"identifier"},{"text":"logLine1","line":957,"char":34878,"type":"identifier"},{"text":"logLine2","line":958,"char":34896,"type":"identifier"},{"text":"logLine3","line":959,"char":34914,"type":"identifier"},{"text":"logLine4","line":960,"char":34932,"type":"identifier"},{"text":"parsingLine","line":961,"char":34950,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":962,"char":34971,"type":"identifier"},{"text":"distbuildLine","line":963,"char":35005,"type":"identifier"},{"text":"buildingLine","line":964,"char":35028,"type":"identifier"},{"text":"eventBus","line":966,"char":35049,"type":"identifier"},{"text":"postWithoutConfiguring","line":966,"char":35058,"type":"identifier"},{"text":"configureTestEventAtTime","line":967,"char":35090,"type":"identifier"},{"text":"ConsoleEvent","line":968,"char":35128,"type":"identifier"},{"text":"severe","line":968,"char":35141,"type":"identifier"},{"text":"SEVERE_MESSAGE","line":968,"char":35148,"type":"identifier"},{"text":"TimeUnit","line":970,"char":35196,"type":"identifier"},{"text":"MILLISECONDS","line":970,"char":35205,"type":"identifier"},{"text":"validateConsoleWithLogLines","line":973,"char":35257,"type":"identifier"},{"text":"listener","line":974,"char":35294,"type":"identifier"},{"text":"ImmutableList","line":976,"char":35327,"type":"identifier"},{"text":"of","line":976,"char":35341,"type":"identifier"},{"text":"distDebugLine","line":977,"char":35357,"type":"identifier"},{"text":"logLine1","line":978,"char":35384,"type":"identifier"},{"text":"logLine2","line":979,"char":35406,"type":"identifier"},{"text":"logLine3","line":980,"char":35428,"type":"identifier"},{"text":"logLine4","line":981,"char":35450,"type":"identifier"},{"text":"parsingLine","line":982,"char":35472,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":983,"char":35497,"type":"identifier"},{"text":"distbuildLine","line":984,"char":35535,"type":"identifier"},{"text":"buildingLine","line":985,"char":35562,"type":"identifier"},{"text":"ImmutableList","line":986,"char":35585,"type":"identifier"},{"text":"of","line":986,"char":35599,"type":"identifier"},{"text":"SEVERE_MESSAGE","line":986,"char":35602,"type":"identifier"},{"text":"Clock","line":991,"char":35670,"type":"identifier"},{"text":"IncrementingFakeClock","line":991,"char":35692,"type":"identifier"},{"text":"TimeUnit","line":991,"char":35714,"type":"identifier"},{"text":"SECONDS","line":991,"char":35723,"type":"identifier"},{"text":"toNanos","line":991,"char":35731,"type":"identifier"},{"text":"BuckEventBus","line":992,"char":35748,"type":"identifier"},{"text":"BuckEventBusFactory","line":992,"char":35772,"type":"identifier"},{"text":"newInstance","line":992,"char":35792,"type":"identifier"},{"text":"fakeClock","line":992,"char":35804,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":993,"char":35820,"type":"identifier"},{"text":"createSuperConsole","line":993,"char":35860,"type":"identifier"},{"text":"fakeClock","line":993,"char":35879,"type":"identifier"},{"text":"eventBus","line":993,"char":35890,"type":"identifier"},{"text":"SourcePathResolver","line":995,"char":35906,"type":"identifier"},{"text":"SourcePathResolver","line":995,"char":35944,"type":"identifier"},{"text":"BuildRuleResolver","line":996,"char":35976,"type":"identifier"},{"text":"TargetGraph","line":996,"char":35994,"type":"identifier"},{"text":"EMPTY","line":996,"char":36006,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":996,"char":36017,"type":"identifier"},{"text":"BuildTarget","line":999,"char":36072,"type":"identifier"},{"text":"BuildTargetFactory","line":999,"char":36097,"type":"identifier"},{"text":"newInstance","line":999,"char":36116,"type":"identifier"},{"text":"ImmutableSet","line":1000,"char":36144,"type":"identifier"},{"text":"BuildTarget","line":1000,"char":36157,"type":"identifier"},{"text":"ImmutableSet","line":1000,"char":36184,"type":"identifier"},{"text":"of","line":1000,"char":36197,"type":"identifier"},{"text":"testTarget","line":1000,"char":36200,"type":"identifier"},{"text":"Iterable","line":1001,"char":36217,"type":"identifier"},{"text":"String","line":1001,"char":36226,"type":"identifier"},{"text":"testArgs","line":1001,"char":36234,"type":"identifier"},{"text":"Iterables","line":1001,"char":36245,"type":"identifier"},{"text":"transform","line":1001,"char":36255,"type":"identifier"},{"text":"testTargets","line":1001,"char":36265,"type":"identifier"},{"text":"Object","line":1001,"char":36278,"type":"identifier"},{"text":"toString","line":1001,"char":36286,"type":"identifier"},{"text":"FakeBuildRule","line":1002,"char":36301,"type":"identifier"},{"text":"FakeBuildRule","line":1002,"char":36335,"type":"identifier"},{"text":"testTarget","line":1003,"char":36358,"type":"identifier"},{"text":"pathResolver","line":1004,"char":36378,"type":"identifier"},{"text":"ImmutableSortedSet","line":1005,"char":36400,"type":"identifier"},{"text":"of","line":1005,"char":36419,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1007,"char":36431,"type":"identifier"},{"text":"Started","line":1007,"char":36459,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1008,"char":36499,"type":"identifier"},{"text":"Started","line":1008,"char":36527,"type":"identifier"},{"text":"eventBus","line":1009,"char":36542,"type":"identifier"},{"text":"postWithoutConfiguring","line":1009,"char":36551,"type":"identifier"},{"text":"configureTestEventAtTime","line":1010,"char":36583,"type":"identifier"},{"text":"parseEventStarted","line":1011,"char":36621,"type":"identifier"},{"text":"TimeUnit","line":1013,"char":36668,"type":"identifier"},{"text":"MILLISECONDS","line":1013,"char":36677,"type":"identifier"},{"text":"validateConsole","line":1015,"char":36728,"type":"identifier"},{"text":"listener","line":1015,"char":36744,"type":"identifier"},{"text":"ImmutableList","line":1015,"char":36758,"type":"identifier"},{"text":"of","line":1015,"char":36772,"type":"identifier"},{"text":"validateConsole","line":1018,"char":36824,"type":"identifier"},{"text":"listener","line":1018,"char":36840,"type":"identifier"},{"text":"ImmutableList","line":1018,"char":36856,"type":"identifier"},{"text":"of","line":1018,"char":36870,"type":"identifier"},{"text":"eventBus","line":1020,"char":36913,"type":"identifier"},{"text":"postWithoutConfiguring","line":1020,"char":36922,"type":"identifier"},{"text":"configureTestEventAtTime","line":1021,"char":36954,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1022,"char":36996,"type":"identifier"},{"text":"Finished","line":1022,"char":37024,"type":"identifier"},{"text":"parseEventStarted","line":1022,"char":37033,"type":"identifier"},{"text":"TimeUnit","line":1024,"char":37083,"type":"identifier"},{"text":"MILLISECONDS","line":1024,"char":37092,"type":"identifier"},{"text":"validateConsole","line":1026,"char":37143,"type":"identifier"},{"text":"listener","line":1026,"char":37159,"type":"identifier"},{"text":"ImmutableList","line":1026,"char":37175,"type":"identifier"},{"text":"of","line":1026,"char":37189,"type":"identifier"},{"text":"BuildEvent","line":1028,"char":37241,"type":"identifier"},{"text":"Started","line":1028,"char":37252,"type":"identifier"},{"text":"BuildEvent","line":1028,"char":37280,"type":"identifier"},{"text":"started","line":1028,"char":37291,"type":"identifier"},{"text":"testArgs","line":1028,"char":37299,"type":"identifier"},{"text":"eventBus","line":1029,"char":37314,"type":"identifier"},{"text":"postWithoutConfiguring","line":1029,"char":37323,"type":"identifier"},{"text":"configureTestEventAtTime","line":1030,"char":37355,"type":"identifier"},{"text":"buildEventStarted","line":1031,"char":37393,"type":"identifier"},{"text":"TimeUnit","line":1033,"char":37442,"type":"identifier"},{"text":"MILLISECONDS","line":1033,"char":37451,"type":"identifier"},{"text":"ParseEvent","line":1035,"char":37502,"type":"identifier"},{"text":"Started","line":1035,"char":37513,"type":"identifier"},{"text":"ParseEvent","line":1035,"char":37536,"type":"identifier"},{"text":"started","line":1035,"char":37547,"type":"identifier"},{"text":"testTargets","line":1035,"char":37555,"type":"identifier"},{"text":"eventBus","line":1036,"char":37573,"type":"identifier"},{"text":"postWithoutConfiguring","line":1036,"char":37582,"type":"identifier"},{"text":"configureTestEventAtTime","line":1037,"char":37614,"type":"identifier"},{"text":"parseStarted","line":1038,"char":37652,"type":"identifier"},{"text":"TimeUnit","line":1040,"char":37696,"type":"identifier"},{"text":"MILLISECONDS","line":1040,"char":37705,"type":"identifier"},{"text":"validateConsole","line":1043,"char":37757,"type":"identifier"},{"text":"listener","line":1043,"char":37773,"type":"identifier"},{"text":"ImmutableList","line":1043,"char":37789,"type":"identifier"},{"text":"of","line":1043,"char":37803,"type":"identifier"},{"text":"eventBus","line":1045,"char":37849,"type":"identifier"},{"text":"postWithoutConfiguring","line":1045,"char":37858,"type":"identifier"},{"text":"configureTestEventAtTime","line":1046,"char":37890,"type":"identifier"},{"text":"ParseEvent","line":1047,"char":37928,"type":"identifier"},{"text":"finished","line":1047,"char":37939,"type":"identifier"},{"text":"parseStarted","line":1047,"char":37948,"type":"identifier"},{"text":"Optional","line":1047,"char":37962,"type":"identifier"},{"text":"empty","line":1047,"char":37971,"type":"identifier"},{"text":"TimeUnit","line":1049,"char":38011,"type":"identifier"},{"text":"MILLISECONDS","line":1049,"char":38020,"type":"identifier"},{"text":"ActionGraphEvent","line":1051,"char":38071,"type":"identifier"},{"text":"Started","line":1051,"char":38088,"type":"identifier"},{"text":"ActionGraphEvent","line":1051,"char":38117,"type":"identifier"},{"text":"started","line":1051,"char":38134,"type":"identifier"},{"text":"eventBus","line":1052,"char":38149,"type":"identifier"},{"text":"postWithoutConfiguring","line":1052,"char":38158,"type":"identifier"},{"text":"configureTestEventAtTime","line":1053,"char":38190,"type":"identifier"},{"text":"actionGraphStarted","line":1054,"char":38228,"type":"identifier"},{"text":"TimeUnit","line":1056,"char":38278,"type":"identifier"},{"text":"MILLISECONDS","line":1056,"char":38287,"type":"identifier"},{"text":"eventBus","line":1058,"char":38338,"type":"identifier"},{"text":"postWithoutConfiguring","line":1058,"char":38347,"type":"identifier"},{"text":"configureTestEventAtTime","line":1059,"char":38379,"type":"identifier"},{"text":"ActionGraphEvent","line":1060,"char":38417,"type":"identifier"},{"text":"finished","line":1060,"char":38434,"type":"identifier"},{"text":"actionGraphStarted","line":1060,"char":38443,"type":"identifier"},{"text":"TimeUnit","line":1062,"char":38494,"type":"identifier"},{"text":"MILLISECONDS","line":1062,"char":38503,"type":"identifier"},{"text":"String","line":1065,"char":38561,"type":"identifier"},{"text":"validateConsole","line":1067,"char":38632,"type":"identifier"},{"text":"listener","line":1068,"char":38657,"type":"identifier"},{"text":"ImmutableList","line":1070,"char":38689,"type":"identifier"},{"text":"of","line":1070,"char":38703,"type":"identifier"},{"text":"parsingLine","line":1070,"char":38706,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1070,"char":38719,"type":"identifier"},{"text":"eventBus","line":1072,"char":38766,"type":"identifier"},{"text":"postWithoutConfiguring","line":1072,"char":38775,"type":"identifier"},{"text":"configureTestEventAtTime","line":1073,"char":38807,"type":"identifier"},{"text":"BuildRuleEvent","line":1074,"char":38845,"type":"identifier"},{"text":"started","line":1074,"char":38860,"type":"identifier"},{"text":"testBuildRule","line":1074,"char":38868,"type":"identifier"},{"text":"TimeUnit","line":1076,"char":38914,"type":"identifier"},{"text":"MILLISECONDS","line":1076,"char":38923,"type":"identifier"},{"text":"validateConsole","line":1080,"char":38976,"type":"identifier"},{"text":"listener","line":1081,"char":39001,"type":"identifier"},{"text":"ImmutableList","line":1083,"char":39033,"type":"identifier"},{"text":"of","line":1083,"char":39047,"type":"identifier"},{"text":"parsingLine","line":1083,"char":39050,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1083,"char":39063,"type":"identifier"},{"text":"eventBus","line":1086,"char":39164,"type":"identifier"},{"text":"postWithoutConfiguring","line":1086,"char":39173,"type":"identifier"},{"text":"configureTestEventAtTime","line":1087,"char":39205,"type":"identifier"},{"text":"BuildRuleEvent","line":1088,"char":39243,"type":"identifier"},{"text":"finished","line":1088,"char":39258,"type":"identifier"},{"text":"testBuildRule","line":1089,"char":39284,"type":"identifier"},{"text":"BuildRuleKeys","line":1090,"char":39315,"type":"identifier"},{"text":"of","line":1090,"char":39329,"type":"identifier"},{"text":"RuleKey","line":1090,"char":39336,"type":"identifier"},{"text":"BuildRuleStatus","line":1091,"char":39370,"type":"identifier"},{"text":"SUCCESS","line":1091,"char":39386,"type":"identifier"},{"text":"CacheResult","line":1092,"char":39411,"type":"identifier"},{"text":"miss","line":1092,"char":39423,"type":"identifier"},{"text":"Optional","line":1093,"char":39447,"type":"identifier"},{"text":"of","line":1093,"char":39456,"type":"identifier"},{"text":"BuildRuleSuccessType","line":1093,"char":39459,"type":"identifier"},{"text":"BUILT_LOCALLY","line":1093,"char":39480,"type":"identifier"},{"text":"Optional","line":1094,"char":39512,"type":"identifier"},{"text":"empty","line":1094,"char":39521,"type":"identifier"},{"text":"Optional","line":1095,"char":39546,"type":"identifier"},{"text":"empty","line":1095,"char":39555,"type":"identifier"},{"text":"Optional","line":1096,"char":39580,"type":"identifier"},{"text":"empty","line":1096,"char":39589,"type":"identifier"},{"text":"Optional","line":1097,"char":39614,"type":"identifier"},{"text":"empty","line":1097,"char":39623,"type":"identifier"},{"text":"TimeUnit","line":1099,"char":39664,"type":"identifier"},{"text":"MILLISECONDS","line":1099,"char":39673,"type":"identifier"},{"text":"eventBus","line":1102,"char":39725,"type":"identifier"},{"text":"postWithoutConfiguring","line":1102,"char":39734,"type":"identifier"},{"text":"configureTestEventAtTime","line":1103,"char":39766,"type":"identifier"},{"text":"BuildEvent","line":1104,"char":39804,"type":"identifier"},{"text":"finished","line":1104,"char":39815,"type":"identifier"},{"text":"buildEventStarted","line":1104,"char":39824,"type":"identifier"},{"text":"TimeUnit","line":1106,"char":39878,"type":"identifier"},{"text":"MILLISECONDS","line":1106,"char":39887,"type":"identifier"},{"text":"String","line":1109,"char":39945,"type":"identifier"},{"text":"validateConsole","line":1111,"char":40004,"type":"identifier"},{"text":"listener","line":1112,"char":40029,"type":"identifier"},{"text":"ImmutableList","line":1114,"char":40062,"type":"identifier"},{"text":"of","line":1114,"char":40076,"type":"identifier"},{"text":"parsingLine","line":1114,"char":40079,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1114,"char":40092,"type":"identifier"},{"text":"buildingLine","line":1114,"char":40118,"type":"identifier"},{"text":"eventBus","line":1116,"char":40139,"type":"identifier"},{"text":"postWithoutConfiguring","line":1116,"char":40148,"type":"identifier"},{"text":"configureTestEventAtTime","line":1117,"char":40180,"type":"identifier"},{"text":"TestRunEvent","line":1118,"char":40218,"type":"identifier"},{"text":"started","line":1118,"char":40231,"type":"identifier"},{"text":"TestSelectorList","line":1120,"char":40295,"type":"identifier"},{"text":"empty","line":1120,"char":40312,"type":"identifier"},{"text":"ImmutableSet","line":1122,"char":40393,"type":"identifier"},{"text":"copyOf","line":1122,"char":40406,"type":"identifier"},{"text":"testArgs","line":1122,"char":40413,"type":"identifier"},{"text":"TimeUnit","line":1124,"char":40456,"type":"identifier"},{"text":"MILLISECONDS","line":1124,"char":40465,"type":"identifier"},{"text":"validateConsole","line":1127,"char":40517,"type":"identifier"},{"text":"listener","line":1128,"char":40542,"type":"identifier"},{"text":"ImmutableList","line":1130,"char":40575,"type":"identifier"},{"text":"of","line":1130,"char":40589,"type":"identifier"},{"text":"parsingLine","line":1130,"char":40592,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1130,"char":40605,"type":"identifier"},{"text":"buildingLine","line":1130,"char":40631,"type":"identifier"},{"text":"eventBus","line":1133,"char":40686,"type":"identifier"},{"text":"postWithoutConfiguring","line":1133,"char":40695,"type":"identifier"},{"text":"configureTestEventAtTime","line":1134,"char":40727,"type":"identifier"},{"text":"TestRuleEvent","line":1135,"char":40765,"type":"identifier"},{"text":"started","line":1135,"char":40779,"type":"identifier"},{"text":"testTarget","line":1135,"char":40787,"type":"identifier"},{"text":"TimeUnit","line":1137,"char":40831,"type":"identifier"},{"text":"MILLISECONDS","line":1137,"char":40840,"type":"identifier"},{"text":"validateConsole","line":1140,"char":40892,"type":"identifier"},{"text":"listener","line":1141,"char":40917,"type":"identifier"},{"text":"ImmutableList","line":1143,"char":40950,"type":"identifier"},{"text":"of","line":1143,"char":40964,"type":"identifier"},{"text":"parsingLine","line":1144,"char":40980,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1145,"char":41005,"type":"identifier"},{"text":"buildingLine","line":1146,"char":41043,"type":"identifier"},{"text":"UUID","line":1150,"char":41135,"type":"identifier"},{"text":"UUID","line":1150,"char":41155,"type":"identifier"},{"text":"StepEvent","line":1151,"char":41171,"type":"identifier"},{"text":"Started","line":1151,"char":41181,"type":"identifier"},{"text":"StepEvent","line":1151,"char":41208,"type":"identifier"},{"text":"started","line":1151,"char":41218,"type":"identifier"},{"text":"stepUuid","line":1154,"char":41277,"type":"identifier"},{"text":"eventBus","line":1155,"char":41292,"type":"identifier"},{"text":"postWithoutConfiguring","line":1155,"char":41301,"type":"identifier"},{"text":"configureTestEventAtTime","line":1156,"char":41333,"type":"identifier"},{"text":"stepEventStarted","line":1157,"char":41371,"type":"identifier"},{"text":"TimeUnit","line":1159,"char":41420,"type":"identifier"},{"text":"MILLISECONDS","line":1159,"char":41429,"type":"identifier"},{"text":"validateConsole","line":1162,"char":41481,"type":"identifier"},{"text":"listener","line":1163,"char":41506,"type":"identifier"},{"text":"ImmutableList","line":1165,"char":41539,"type":"identifier"},{"text":"of","line":1165,"char":41553,"type":"identifier"},{"text":"parsingLine","line":1166,"char":41569,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1167,"char":41594,"type":"identifier"},{"text":"buildingLine","line":1168,"char":41632,"type":"identifier"},{"text":"eventBus","line":1172,"char":41750,"type":"identifier"},{"text":"postWithoutConfiguring","line":1172,"char":41759,"type":"identifier"},{"text":"configureTestEventAtTime","line":1173,"char":41791,"type":"identifier"},{"text":"StepEvent","line":1174,"char":41829,"type":"identifier"},{"text":"finished","line":1174,"char":41839,"type":"identifier"},{"text":"stepEventStarted","line":1174,"char":41848,"type":"identifier"},{"text":"TimeUnit","line":1176,"char":41901,"type":"identifier"},{"text":"MILLISECONDS","line":1176,"char":41910,"type":"identifier"},{"text":"validateConsole","line":1179,"char":41962,"type":"identifier"},{"text":"listener","line":1180,"char":41987,"type":"identifier"},{"text":"ImmutableList","line":1182,"char":42020,"type":"identifier"},{"text":"of","line":1182,"char":42034,"type":"identifier"},{"text":"parsingLine","line":1183,"char":42050,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1184,"char":42075,"type":"identifier"},{"text":"buildingLine","line":1185,"char":42113,"type":"identifier"},{"text":"UUID","line":1189,"char":42205,"type":"identifier"},{"text":"UUID","line":1189,"char":42225,"type":"identifier"},{"text":"eventBus","line":1191,"char":42242,"type":"identifier"},{"text":"postWithoutConfiguring","line":1191,"char":42251,"type":"identifier"},{"text":"configureTestEventAtTime","line":1192,"char":42283,"type":"identifier"},{"text":"TestSummaryEvent","line":1193,"char":42321,"type":"identifier"},{"text":"started","line":1193,"char":42338,"type":"identifier"},{"text":"testUUID","line":1193,"char":42346,"type":"identifier"},{"text":"TimeUnit","line":1195,"char":42408,"type":"identifier"},{"text":"MILLISECONDS","line":1195,"char":42417,"type":"identifier"},{"text":"validateConsole","line":1198,"char":42469,"type":"identifier"},{"text":"listener","line":1199,"char":42494,"type":"identifier"},{"text":"ImmutableList","line":1201,"char":42527,"type":"identifier"},{"text":"of","line":1201,"char":42541,"type":"identifier"},{"text":"parsingLine","line":1202,"char":42557,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1203,"char":42582,"type":"identifier"},{"text":"buildingLine","line":1204,"char":42620,"type":"identifier"},{"text":"TestResultSummary","line":1208,"char":42732,"type":"identifier"},{"text":"TestResultSummary","line":1209,"char":42782,"type":"identifier"},{"text":"ResultType","line":1212,"char":42857,"type":"identifier"},{"text":"SUCCESS","line":1212,"char":42868,"type":"identifier"},{"text":"eventBus","line":1218,"char":43023,"type":"identifier"},{"text":"postWithoutConfiguring","line":1218,"char":43032,"type":"identifier"},{"text":"configureTestEventAtTime","line":1219,"char":43064,"type":"identifier"},{"text":"TestSummaryEvent","line":1220,"char":43102,"type":"identifier"},{"text":"finished","line":1220,"char":43119,"type":"identifier"},{"text":"testUUID","line":1221,"char":43145,"type":"identifier"},{"text":"testResultSummary","line":1222,"char":43171,"type":"identifier"},{"text":"TimeUnit","line":1224,"char":43222,"type":"identifier"},{"text":"MILLISECONDS","line":1224,"char":43231,"type":"identifier"},{"text":"validateConsole","line":1227,"char":43283,"type":"identifier"},{"text":"listener","line":1228,"char":43308,"type":"identifier"},{"text":"ImmutableList","line":1230,"char":43341,"type":"identifier"},{"text":"of","line":1230,"char":43355,"type":"identifier"},{"text":"parsingLine","line":1231,"char":43371,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1232,"char":43396,"type":"identifier"},{"text":"buildingLine","line":1233,"char":43434,"type":"identifier"},{"text":"eventBus","line":1237,"char":43542,"type":"identifier"},{"text":"postWithoutConfiguring","line":1237,"char":43551,"type":"identifier"},{"text":"configureTestEventAtTime","line":1238,"char":43583,"type":"identifier"},{"text":"TestRunEvent","line":1239,"char":43621,"type":"identifier"},{"text":"finished","line":1239,"char":43634,"type":"identifier"},{"text":"ImmutableSet","line":1240,"char":43660,"type":"identifier"},{"text":"copyOf","line":1240,"char":43673,"type":"identifier"},{"text":"testArgs","line":1240,"char":43680,"type":"identifier"},{"text":"ImmutableList","line":1241,"char":43707,"type":"identifier"},{"text":"of","line":1241,"char":43721,"type":"identifier"},{"text":"TestResults","line":1242,"char":43745,"type":"identifier"},{"text":"of","line":1242,"char":43757,"type":"identifier"},{"text":"testTarget","line":1243,"char":43785,"type":"identifier"},{"text":"ImmutableList","line":1244,"char":43821,"type":"identifier"},{"text":"of","line":1244,"char":43835,"type":"identifier"},{"text":"TestCaseSummary","line":1245,"char":43871,"type":"identifier"},{"text":"ImmutableList","line":1247,"char":43965,"type":"identifier"},{"text":"of","line":1247,"char":43979,"type":"identifier"},{"text":"testResultSummary","line":1248,"char":44019,"type":"identifier"},{"text":"ImmutableSet","line":1249,"char":44065,"type":"identifier"},{"text":"of","line":1249,"char":44078,"type":"identifier"},{"text":"ImmutableSet","line":1250,"char":44120,"type":"identifier"},{"text":"of","line":1250,"char":44133,"type":"identifier"},{"text":"TimeUnit","line":1252,"char":44183,"type":"identifier"},{"text":"MILLISECONDS","line":1252,"char":44192,"type":"identifier"},{"text":"String","line":1255,"char":44250,"type":"identifier"},{"text":"validateConsoleWithStdOutAndErr","line":1257,"char":44323,"type":"identifier"},{"text":"listener","line":1258,"char":44364,"type":"identifier"},{"text":"ImmutableList","line":1260,"char":44397,"type":"identifier"},{"text":"of","line":1260,"char":44411,"type":"identifier"},{"text":"parsingLine","line":1261,"char":44427,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1262,"char":44452,"type":"identifier"},{"text":"buildingLine","line":1263,"char":44490,"type":"identifier"},{"text":"testingLine","line":1264,"char":44516,"type":"identifier"},{"text":"ImmutableList","line":1265,"char":44538,"type":"identifier"},{"text":"of","line":1265,"char":44552,"type":"identifier"},{"text":"Optional","line":1266,"char":44566,"type":"identifier"},{"text":"of","line":1266,"char":44575,"type":"identifier"},{"text":"Joiner","line":1267,"char":44591,"type":"identifier"},{"text":"on","line":1267,"char":44598,"type":"identifier"},{"text":"join","line":1267,"char":44607,"type":"identifier"},{"text":"Optional","line":1273,"char":44878,"type":"identifier"},{"text":"empty","line":1273,"char":44887,"type":"identifier"},{"text":"Clock","line":1278,"char":44948,"type":"identifier"},{"text":"IncrementingFakeClock","line":1278,"char":44970,"type":"identifier"},{"text":"TimeUnit","line":1278,"char":44992,"type":"identifier"},{"text":"SECONDS","line":1278,"char":45001,"type":"identifier"},{"text":"toNanos","line":1278,"char":45009,"type":"identifier"},{"text":"BuckEventBus","line":1279,"char":45026,"type":"identifier"},{"text":"BuckEventBusFactory","line":1279,"char":45050,"type":"identifier"},{"text":"newInstance","line":1279,"char":45070,"type":"identifier"},{"text":"fakeClock","line":1279,"char":45082,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":1280,"char":45098,"type":"identifier"},{"text":"createSuperConsole","line":1280,"char":45138,"type":"identifier"},{"text":"fakeClock","line":1280,"char":45157,"type":"identifier"},{"text":"eventBus","line":1280,"char":45168,"type":"identifier"},{"text":"SourcePathResolver","line":1282,"char":45184,"type":"identifier"},{"text":"SourcePathResolver","line":1282,"char":45222,"type":"identifier"},{"text":"BuildRuleResolver","line":1283,"char":45254,"type":"identifier"},{"text":"TargetGraph","line":1283,"char":45272,"type":"identifier"},{"text":"EMPTY","line":1283,"char":45284,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":1283,"char":45295,"type":"identifier"},{"text":"BuildTarget","line":1286,"char":45350,"type":"identifier"},{"text":"BuildTargetFactory","line":1286,"char":45375,"type":"identifier"},{"text":"newInstance","line":1286,"char":45394,"type":"identifier"},{"text":"ImmutableSet","line":1287,"char":45422,"type":"identifier"},{"text":"BuildTarget","line":1287,"char":45435,"type":"identifier"},{"text":"ImmutableSet","line":1287,"char":45462,"type":"identifier"},{"text":"of","line":1287,"char":45475,"type":"identifier"},{"text":"testTarget","line":1287,"char":45478,"type":"identifier"},{"text":"Iterable","line":1288,"char":45495,"type":"identifier"},{"text":"String","line":1288,"char":45504,"type":"identifier"},{"text":"testArgs","line":1288,"char":45512,"type":"identifier"},{"text":"Iterables","line":1288,"char":45523,"type":"identifier"},{"text":"transform","line":1288,"char":45533,"type":"identifier"},{"text":"testTargets","line":1288,"char":45543,"type":"identifier"},{"text":"Object","line":1288,"char":45556,"type":"identifier"},{"text":"toString","line":1288,"char":45564,"type":"identifier"},{"text":"FakeBuildRule","line":1289,"char":45579,"type":"identifier"},{"text":"FakeBuildRule","line":1289,"char":45613,"type":"identifier"},{"text":"testTarget","line":1290,"char":45636,"type":"identifier"},{"text":"pathResolver","line":1291,"char":45656,"type":"identifier"},{"text":"ImmutableSortedSet","line":1292,"char":45678,"type":"identifier"},{"text":"of","line":1292,"char":45697,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1294,"char":45709,"type":"identifier"},{"text":"Started","line":1294,"char":45737,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1295,"char":45777,"type":"identifier"},{"text":"Started","line":1295,"char":45805,"type":"identifier"},{"text":"eventBus","line":1296,"char":45820,"type":"identifier"},{"text":"postWithoutConfiguring","line":1296,"char":45829,"type":"identifier"},{"text":"configureTestEventAtTime","line":1297,"char":45861,"type":"identifier"},{"text":"parseEventStarted","line":1298,"char":45899,"type":"identifier"},{"text":"TimeUnit","line":1300,"char":45946,"type":"identifier"},{"text":"MILLISECONDS","line":1300,"char":45955,"type":"identifier"},{"text":"validateConsole","line":1302,"char":46006,"type":"identifier"},{"text":"listener","line":1302,"char":46022,"type":"identifier"},{"text":"ImmutableList","line":1302,"char":46036,"type":"identifier"},{"text":"of","line":1302,"char":46050,"type":"identifier"},{"text":"validateConsole","line":1304,"char":46093,"type":"identifier"},{"text":"listener","line":1305,"char":46118,"type":"identifier"},{"text":"ImmutableList","line":1307,"char":46150,"type":"identifier"},{"text":"of","line":1307,"char":46164,"type":"identifier"},{"text":"eventBus","line":1309,"char":46207,"type":"identifier"},{"text":"postWithoutConfiguring","line":1309,"char":46216,"type":"identifier"},{"text":"configureTestEventAtTime","line":1310,"char":46248,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1311,"char":46290,"type":"identifier"},{"text":"Finished","line":1311,"char":46318,"type":"identifier"},{"text":"parseEventStarted","line":1311,"char":46327,"type":"identifier"},{"text":"TimeUnit","line":1313,"char":46377,"type":"identifier"},{"text":"MILLISECONDS","line":1313,"char":46386,"type":"identifier"},{"text":"validateConsole","line":1315,"char":46437,"type":"identifier"},{"text":"listener","line":1316,"char":46462,"type":"identifier"},{"text":"ImmutableList","line":1318,"char":46494,"type":"identifier"},{"text":"of","line":1318,"char":46508,"type":"identifier"},{"text":"BuildEvent","line":1320,"char":46560,"type":"identifier"},{"text":"Started","line":1320,"char":46571,"type":"identifier"},{"text":"BuildEvent","line":1320,"char":46599,"type":"identifier"},{"text":"started","line":1320,"char":46610,"type":"identifier"},{"text":"testArgs","line":1320,"char":46618,"type":"identifier"},{"text":"eventBus","line":1321,"char":46633,"type":"identifier"},{"text":"postWithoutConfiguring","line":1321,"char":46642,"type":"identifier"},{"text":"configureTestEventAtTime","line":1322,"char":46674,"type":"identifier"},{"text":"buildEventStarted","line":1323,"char":46712,"type":"identifier"},{"text":"TimeUnit","line":1325,"char":46761,"type":"identifier"},{"text":"MILLISECONDS","line":1325,"char":46770,"type":"identifier"},{"text":"ParseEvent","line":1327,"char":46821,"type":"identifier"},{"text":"Started","line":1327,"char":46832,"type":"identifier"},{"text":"ParseEvent","line":1327,"char":46855,"type":"identifier"},{"text":"started","line":1327,"char":46866,"type":"identifier"},{"text":"testTargets","line":1327,"char":46874,"type":"identifier"},{"text":"eventBus","line":1328,"char":46892,"type":"identifier"},{"text":"postWithoutConfiguring","line":1328,"char":46901,"type":"identifier"},{"text":"configureTestEventAtTime","line":1329,"char":46933,"type":"identifier"},{"text":"parseStarted","line":1330,"char":46971,"type":"identifier"},{"text":"TimeUnit","line":1332,"char":47015,"type":"identifier"},{"text":"MILLISECONDS","line":1332,"char":47024,"type":"identifier"},{"text":"validateConsole","line":1335,"char":47076,"type":"identifier"},{"text":"listener","line":1335,"char":47092,"type":"identifier"},{"text":"ImmutableList","line":1335,"char":47108,"type":"identifier"},{"text":"of","line":1335,"char":47122,"type":"identifier"},{"text":"eventBus","line":1337,"char":47168,"type":"identifier"},{"text":"postWithoutConfiguring","line":1337,"char":47177,"type":"identifier"},{"text":"configureTestEventAtTime","line":1338,"char":47209,"type":"identifier"},{"text":"ParseEvent","line":1339,"char":47247,"type":"identifier"},{"text":"finished","line":1339,"char":47258,"type":"identifier"},{"text":"parseStarted","line":1339,"char":47267,"type":"identifier"},{"text":"Optional","line":1339,"char":47281,"type":"identifier"},{"text":"empty","line":1339,"char":47290,"type":"identifier"},{"text":"TimeUnit","line":1341,"char":47330,"type":"identifier"},{"text":"MILLISECONDS","line":1341,"char":47339,"type":"identifier"},{"text":"ActionGraphEvent","line":1343,"char":47390,"type":"identifier"},{"text":"Started","line":1343,"char":47407,"type":"identifier"},{"text":"ActionGraphEvent","line":1343,"char":47436,"type":"identifier"},{"text":"started","line":1343,"char":47453,"type":"identifier"},{"text":"eventBus","line":1344,"char":47468,"type":"identifier"},{"text":"postWithoutConfiguring","line":1344,"char":47477,"type":"identifier"},{"text":"configureTestEventAtTime","line":1345,"char":47509,"type":"identifier"},{"text":"actionGraphStarted","line":1346,"char":47547,"type":"identifier"},{"text":"TimeUnit","line":1348,"char":47597,"type":"identifier"},{"text":"MILLISECONDS","line":1348,"char":47606,"type":"identifier"},{"text":"eventBus","line":1350,"char":47657,"type":"identifier"},{"text":"postWithoutConfiguring","line":1350,"char":47666,"type":"identifier"},{"text":"configureTestEventAtTime","line":1351,"char":47698,"type":"identifier"},{"text":"ActionGraphEvent","line":1352,"char":47736,"type":"identifier"},{"text":"finished","line":1352,"char":47753,"type":"identifier"},{"text":"actionGraphStarted","line":1352,"char":47762,"type":"identifier"},{"text":"TimeUnit","line":1354,"char":47813,"type":"identifier"},{"text":"MILLISECONDS","line":1354,"char":47822,"type":"identifier"},{"text":"String","line":1357,"char":47880,"type":"identifier"},{"text":"validateConsole","line":1359,"char":47951,"type":"identifier"},{"text":"listener","line":1360,"char":47976,"type":"identifier"},{"text":"ImmutableList","line":1362,"char":48008,"type":"identifier"},{"text":"of","line":1362,"char":48022,"type":"identifier"},{"text":"parsingLine","line":1362,"char":48025,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1362,"char":48038,"type":"identifier"},{"text":"eventBus","line":1364,"char":48085,"type":"identifier"},{"text":"postWithoutConfiguring","line":1364,"char":48094,"type":"identifier"},{"text":"configureTestEventAtTime","line":1365,"char":48126,"type":"identifier"},{"text":"BuildRuleEvent","line":1366,"char":48164,"type":"identifier"},{"text":"started","line":1366,"char":48179,"type":"identifier"},{"text":"testBuildRule","line":1366,"char":48187,"type":"identifier"},{"text":"TimeUnit","line":1368,"char":48233,"type":"identifier"},{"text":"MILLISECONDS","line":1368,"char":48242,"type":"identifier"},{"text":"validateConsole","line":1372,"char":48295,"type":"identifier"},{"text":"listener","line":1372,"char":48311,"type":"identifier"},{"text":"ImmutableList","line":1372,"char":48327,"type":"identifier"},{"text":"of","line":1372,"char":48341,"type":"identifier"},{"text":"parsingLine","line":1373,"char":48353,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1374,"char":48374,"type":"identifier"},{"text":"eventBus","line":1378,"char":48479,"type":"identifier"},{"text":"postWithoutConfiguring","line":1378,"char":48488,"type":"identifier"},{"text":"configureTestEventAtTime","line":1379,"char":48520,"type":"identifier"},{"text":"BuildRuleEvent","line":1380,"char":48558,"type":"identifier"},{"text":"finished","line":1380,"char":48573,"type":"identifier"},{"text":"testBuildRule","line":1381,"char":48599,"type":"identifier"},{"text":"BuildRuleKeys","line":1382,"char":48630,"type":"identifier"},{"text":"of","line":1382,"char":48644,"type":"identifier"},{"text":"RuleKey","line":1382,"char":48651,"type":"identifier"},{"text":"BuildRuleStatus","line":1383,"char":48685,"type":"identifier"},{"text":"SUCCESS","line":1383,"char":48701,"type":"identifier"},{"text":"CacheResult","line":1384,"char":48726,"type":"identifier"},{"text":"miss","line":1384,"char":48738,"type":"identifier"},{"text":"Optional","line":1385,"char":48762,"type":"identifier"},{"text":"of","line":1385,"char":48771,"type":"identifier"},{"text":"BuildRuleSuccessType","line":1385,"char":48774,"type":"identifier"},{"text":"BUILT_LOCALLY","line":1385,"char":48795,"type":"identifier"},{"text":"Optional","line":1386,"char":48827,"type":"identifier"},{"text":"empty","line":1386,"char":48836,"type":"identifier"},{"text":"Optional","line":1387,"char":48861,"type":"identifier"},{"text":"empty","line":1387,"char":48870,"type":"identifier"},{"text":"Optional","line":1388,"char":48895,"type":"identifier"},{"text":"empty","line":1388,"char":48904,"type":"identifier"},{"text":"Optional","line":1389,"char":48929,"type":"identifier"},{"text":"empty","line":1389,"char":48938,"type":"identifier"},{"text":"TimeUnit","line":1391,"char":48979,"type":"identifier"},{"text":"MILLISECONDS","line":1391,"char":48988,"type":"identifier"},{"text":"eventBus","line":1394,"char":49040,"type":"identifier"},{"text":"postWithoutConfiguring","line":1394,"char":49049,"type":"identifier"},{"text":"configureTestEventAtTime","line":1395,"char":49081,"type":"identifier"},{"text":"BuildEvent","line":1396,"char":49119,"type":"identifier"},{"text":"finished","line":1396,"char":49130,"type":"identifier"},{"text":"buildEventStarted","line":1396,"char":49139,"type":"identifier"},{"text":"TimeUnit","line":1398,"char":49193,"type":"identifier"},{"text":"MILLISECONDS","line":1398,"char":49202,"type":"identifier"},{"text":"String","line":1401,"char":49260,"type":"identifier"},{"text":"validateConsole","line":1403,"char":49319,"type":"identifier"},{"text":"listener","line":1403,"char":49335,"type":"identifier"},{"text":"ImmutableList","line":1403,"char":49352,"type":"identifier"},{"text":"of","line":1403,"char":49366,"type":"identifier"},{"text":"parsingLine","line":1404,"char":49378,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1405,"char":49399,"type":"identifier"},{"text":"buildingLine","line":1406,"char":49433,"type":"identifier"},{"text":"eventBus","line":1408,"char":49454,"type":"identifier"},{"text":"postWithoutConfiguring","line":1408,"char":49463,"type":"identifier"},{"text":"configureTestEventAtTime","line":1409,"char":49495,"type":"identifier"},{"text":"TestRunEvent","line":1410,"char":49533,"type":"identifier"},{"text":"started","line":1410,"char":49546,"type":"identifier"},{"text":"TestSelectorList","line":1412,"char":49610,"type":"identifier"},{"text":"empty","line":1412,"char":49627,"type":"identifier"},{"text":"ImmutableSet","line":1414,"char":49708,"type":"identifier"},{"text":"copyOf","line":1414,"char":49721,"type":"identifier"},{"text":"testArgs","line":1414,"char":49728,"type":"identifier"},{"text":"TimeUnit","line":1416,"char":49771,"type":"identifier"},{"text":"MILLISECONDS","line":1416,"char":49780,"type":"identifier"},{"text":"validateConsole","line":1419,"char":49832,"type":"identifier"},{"text":"listener","line":1420,"char":49857,"type":"identifier"},{"text":"ImmutableList","line":1422,"char":49890,"type":"identifier"},{"text":"of","line":1422,"char":49904,"type":"identifier"},{"text":"parsingLine","line":1423,"char":49920,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1424,"char":49945,"type":"identifier"},{"text":"buildingLine","line":1425,"char":49983,"type":"identifier"},{"text":"eventBus","line":1428,"char":50038,"type":"identifier"},{"text":"postWithoutConfiguring","line":1428,"char":50047,"type":"identifier"},{"text":"configureTestEventAtTime","line":1429,"char":50079,"type":"identifier"},{"text":"TestRuleEvent","line":1430,"char":50117,"type":"identifier"},{"text":"started","line":1430,"char":50131,"type":"identifier"},{"text":"testTarget","line":1430,"char":50139,"type":"identifier"},{"text":"TimeUnit","line":1432,"char":50183,"type":"identifier"},{"text":"MILLISECONDS","line":1432,"char":50192,"type":"identifier"},{"text":"validateConsole","line":1435,"char":50244,"type":"identifier"},{"text":"listener","line":1436,"char":50269,"type":"identifier"},{"text":"ImmutableList","line":1438,"char":50302,"type":"identifier"},{"text":"of","line":1438,"char":50316,"type":"identifier"},{"text":"parsingLine","line":1439,"char":50332,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1440,"char":50357,"type":"identifier"},{"text":"buildingLine","line":1441,"char":50395,"type":"identifier"},{"text":"UUID","line":1445,"char":50487,"type":"identifier"},{"text":"UUID","line":1445,"char":50507,"type":"identifier"},{"text":"StepEvent","line":1446,"char":50523,"type":"identifier"},{"text":"Started","line":1446,"char":50533,"type":"identifier"},{"text":"StepEvent","line":1446,"char":50560,"type":"identifier"},{"text":"started","line":1446,"char":50570,"type":"identifier"},{"text":"stepUuid","line":1449,"char":50629,"type":"identifier"},{"text":"eventBus","line":1450,"char":50644,"type":"identifier"},{"text":"postWithoutConfiguring","line":1450,"char":50653,"type":"identifier"},{"text":"configureTestEventAtTime","line":1451,"char":50685,"type":"identifier"},{"text":"stepEventStarted","line":1452,"char":50723,"type":"identifier"},{"text":"TimeUnit","line":1454,"char":50772,"type":"identifier"},{"text":"MILLISECONDS","line":1454,"char":50781,"type":"identifier"},{"text":"validateConsole","line":1457,"char":50833,"type":"identifier"},{"text":"listener","line":1458,"char":50858,"type":"identifier"},{"text":"ImmutableList","line":1460,"char":50891,"type":"identifier"},{"text":"of","line":1460,"char":50905,"type":"identifier"},{"text":"parsingLine","line":1461,"char":50921,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1462,"char":50946,"type":"identifier"},{"text":"buildingLine","line":1463,"char":50984,"type":"identifier"},{"text":"eventBus","line":1467,"char":51102,"type":"identifier"},{"text":"postWithoutConfiguring","line":1467,"char":51111,"type":"identifier"},{"text":"configureTestEventAtTime","line":1468,"char":51143,"type":"identifier"},{"text":"StepEvent","line":1469,"char":51181,"type":"identifier"},{"text":"finished","line":1469,"char":51191,"type":"identifier"},{"text":"stepEventStarted","line":1469,"char":51200,"type":"identifier"},{"text":"TimeUnit","line":1471,"char":51253,"type":"identifier"},{"text":"MILLISECONDS","line":1471,"char":51262,"type":"identifier"},{"text":"validateConsole","line":1474,"char":51314,"type":"identifier"},{"text":"listener","line":1475,"char":51339,"type":"identifier"},{"text":"ImmutableList","line":1477,"char":51372,"type":"identifier"},{"text":"of","line":1477,"char":51386,"type":"identifier"},{"text":"parsingLine","line":1478,"char":51402,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1479,"char":51427,"type":"identifier"},{"text":"buildingLine","line":1480,"char":51465,"type":"identifier"},{"text":"UUID","line":1484,"char":51557,"type":"identifier"},{"text":"UUID","line":1484,"char":51577,"type":"identifier"},{"text":"eventBus","line":1486,"char":51594,"type":"identifier"},{"text":"postWithoutConfiguring","line":1486,"char":51603,"type":"identifier"},{"text":"configureTestEventAtTime","line":1487,"char":51635,"type":"identifier"},{"text":"TestSummaryEvent","line":1488,"char":51673,"type":"identifier"},{"text":"started","line":1488,"char":51690,"type":"identifier"},{"text":"testUUID","line":1488,"char":51698,"type":"identifier"},{"text":"TimeUnit","line":1490,"char":51760,"type":"identifier"},{"text":"MILLISECONDS","line":1490,"char":51769,"type":"identifier"},{"text":"validateConsole","line":1493,"char":51821,"type":"identifier"},{"text":"listener","line":1494,"char":51846,"type":"identifier"},{"text":"ImmutableList","line":1496,"char":51879,"type":"identifier"},{"text":"of","line":1496,"char":51893,"type":"identifier"},{"text":"parsingLine","line":1497,"char":51909,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1498,"char":51934,"type":"identifier"},{"text":"buildingLine","line":1499,"char":51972,"type":"identifier"},{"text":"TestResultSummary","line":1503,"char":52084,"type":"identifier"},{"text":"TestResultSummary","line":1504,"char":52134,"type":"identifier"},{"text":"ResultType","line":1507,"char":52209,"type":"identifier"},{"text":"ASSUMPTION_VIOLATION","line":1507,"char":52220,"type":"identifier"},{"text":"eventBus","line":1514,"char":52389,"type":"identifier"},{"text":"postWithoutConfiguring","line":1514,"char":52398,"type":"identifier"},{"text":"configureTestEventAtTime","line":1515,"char":52430,"type":"identifier"},{"text":"TestSummaryEvent","line":1516,"char":52468,"type":"identifier"},{"text":"finished","line":1516,"char":52485,"type":"identifier"},{"text":"testUUID","line":1516,"char":52494,"type":"identifier"},{"text":"testResultSummary","line":1516,"char":52504,"type":"identifier"},{"text":"TimeUnit","line":1518,"char":52555,"type":"identifier"},{"text":"MILLISECONDS","line":1518,"char":52564,"type":"identifier"},{"text":"validateConsole","line":1521,"char":52616,"type":"identifier"},{"text":"listener","line":1522,"char":52641,"type":"identifier"},{"text":"ImmutableList","line":1524,"char":52674,"type":"identifier"},{"text":"of","line":1524,"char":52688,"type":"identifier"},{"text":"parsingLine","line":1525,"char":52704,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1526,"char":52729,"type":"identifier"},{"text":"buildingLine","line":1527,"char":52767,"type":"identifier"},{"text":"eventBus","line":1531,"char":52882,"type":"identifier"},{"text":"postWithoutConfiguring","line":1531,"char":52891,"type":"identifier"},{"text":"configureTestEventAtTime","line":1532,"char":52923,"type":"identifier"},{"text":"TestRunEvent","line":1533,"char":52961,"type":"identifier"},{"text":"finished","line":1533,"char":52974,"type":"identifier"},{"text":"ImmutableSet","line":1534,"char":53000,"type":"identifier"},{"text":"copyOf","line":1534,"char":53013,"type":"identifier"},{"text":"testArgs","line":1534,"char":53020,"type":"identifier"},{"text":"ImmutableList","line":1535,"char":53047,"type":"identifier"},{"text":"of","line":1535,"char":53061,"type":"identifier"},{"text":"TestResults","line":1536,"char":53085,"type":"identifier"},{"text":"of","line":1536,"char":53097,"type":"identifier"},{"text":"testTarget","line":1537,"char":53125,"type":"identifier"},{"text":"ImmutableList","line":1538,"char":53161,"type":"identifier"},{"text":"of","line":1538,"char":53175,"type":"identifier"},{"text":"TestCaseSummary","line":1539,"char":53211,"type":"identifier"},{"text":"ImmutableList","line":1539,"char":53240,"type":"identifier"},{"text":"of","line":1539,"char":53254,"type":"identifier"},{"text":"testResultSummary","line":1539,"char":53257,"type":"identifier"},{"text":"ImmutableSet","line":1540,"char":53303,"type":"identifier"},{"text":"of","line":1540,"char":53316,"type":"identifier"},{"text":"ImmutableSet","line":1541,"char":53358,"type":"identifier"},{"text":"of","line":1541,"char":53371,"type":"identifier"},{"text":"TimeUnit","line":1543,"char":53421,"type":"identifier"},{"text":"MILLISECONDS","line":1543,"char":53430,"type":"identifier"},{"text":"String","line":1546,"char":53488,"type":"identifier"},{"text":"validateConsoleWithStdOutAndErr","line":1548,"char":53568,"type":"identifier"},{"text":"listener","line":1549,"char":53609,"type":"identifier"},{"text":"ImmutableList","line":1551,"char":53642,"type":"identifier"},{"text":"of","line":1551,"char":53656,"type":"identifier"},{"text":"parsingLine","line":1552,"char":53672,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1553,"char":53697,"type":"identifier"},{"text":"buildingLine","line":1554,"char":53735,"type":"identifier"},{"text":"testingLine","line":1555,"char":53761,"type":"identifier"},{"text":"ImmutableList","line":1556,"char":53783,"type":"identifier"},{"text":"of","line":1556,"char":53797,"type":"identifier"},{"text":"Optional","line":1557,"char":53811,"type":"identifier"},{"text":"of","line":1557,"char":53820,"type":"identifier"},{"text":"Joiner","line":1558,"char":53836,"type":"identifier"},{"text":"on","line":1558,"char":53843,"type":"identifier"},{"text":"join","line":1558,"char":53852,"type":"identifier"},{"text":"Optional","line":1564,"char":54157,"type":"identifier"},{"text":"empty","line":1564,"char":54166,"type":"identifier"},{"text":"SourcePathResolver","line":1569,"char":54227,"type":"identifier"},{"text":"SourcePathResolver","line":1569,"char":54265,"type":"identifier"},{"text":"BuildRuleResolver","line":1570,"char":54297,"type":"identifier"},{"text":"TargetGraph","line":1570,"char":54315,"type":"identifier"},{"text":"EMPTY","line":1570,"char":54327,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":1570,"char":54338,"type":"identifier"},{"text":"Clock","line":1572,"char":54392,"type":"identifier"},{"text":"IncrementingFakeClock","line":1572,"char":54414,"type":"identifier"},{"text":"TimeUnit","line":1572,"char":54436,"type":"identifier"},{"text":"SECONDS","line":1572,"char":54445,"type":"identifier"},{"text":"toNanos","line":1572,"char":54453,"type":"identifier"},{"text":"BuckEventBus","line":1573,"char":54470,"type":"identifier"},{"text":"BuckEventBusFactory","line":1573,"char":54494,"type":"identifier"},{"text":"newInstance","line":1573,"char":54514,"type":"identifier"},{"text":"fakeClock","line":1573,"char":54526,"type":"identifier"},{"text":"TestConsole","line":1574,"char":54542,"type":"identifier"},{"text":"TestConsole","line":1574,"char":54568,"type":"identifier"},{"text":"BuildTarget","line":1576,"char":54588,"type":"identifier"},{"text":"BuildTargetFactory","line":1576,"char":54613,"type":"identifier"},{"text":"newInstance","line":1576,"char":54632,"type":"identifier"},{"text":"ImmutableSet","line":1577,"char":54660,"type":"identifier"},{"text":"BuildTarget","line":1577,"char":54673,"type":"identifier"},{"text":"ImmutableSet","line":1577,"char":54700,"type":"identifier"},{"text":"of","line":1577,"char":54713,"type":"identifier"},{"text":"testTarget","line":1577,"char":54716,"type":"identifier"},{"text":"Iterable","line":1578,"char":54733,"type":"identifier"},{"text":"String","line":1578,"char":54742,"type":"identifier"},{"text":"testArgs","line":1578,"char":54750,"type":"identifier"},{"text":"Iterables","line":1578,"char":54761,"type":"identifier"},{"text":"transform","line":1578,"char":54771,"type":"identifier"},{"text":"testTargets","line":1578,"char":54781,"type":"identifier"},{"text":"Object","line":1578,"char":54794,"type":"identifier"},{"text":"toString","line":1578,"char":54802,"type":"identifier"},{"text":"FakeBuildRule","line":1579,"char":54817,"type":"identifier"},{"text":"FakeBuildRule","line":1579,"char":54851,"type":"identifier"},{"text":"testTarget","line":1580,"char":54874,"type":"identifier"},{"text":"pathResolver","line":1581,"char":54894,"type":"identifier"},{"text":"ImmutableSortedSet","line":1582,"char":54916,"type":"identifier"},{"text":"of","line":1582,"char":54935,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":1584,"char":54947,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":1585,"char":54999,"type":"identifier"},{"text":"emptySuperConsoleConfig","line":1586,"char":55041,"type":"identifier"},{"text":"console","line":1587,"char":55078,"type":"identifier"},{"text":"fakeClock","line":1588,"char":55099,"type":"identifier"},{"text":"noisySummaryVerbosity","line":1589,"char":55122,"type":"identifier"},{"text":"DefaultExecutionEnvironment","line":1590,"char":55161,"type":"identifier"},{"text":"ImmutableMap","line":1591,"char":55206,"type":"identifier"},{"text":"copyOf","line":1591,"char":55219,"type":"identifier"},{"text":"System","line":1591,"char":55226,"type":"identifier"},{"text":"getenv","line":1591,"char":55233,"type":"identifier"},{"text":"System","line":1592,"char":55260,"type":"identifier"},{"text":"getProperties","line":1592,"char":55267,"type":"identifier"},{"text":"Optional","line":1593,"char":55297,"type":"identifier"},{"text":"empty","line":1593,"char":55306,"type":"identifier"},{"text":"Locale","line":1594,"char":55327,"type":"identifier"},{"text":"US","line":1594,"char":55334,"type":"identifier"},{"text":"logPath","line":1595,"char":55350,"type":"identifier"},{"text":"timeZone","line":1596,"char":55371,"type":"identifier"},{"text":"eventBus","line":1597,"char":55386,"type":"identifier"},{"text":"register","line":1597,"char":55395,"type":"identifier"},{"text":"listener","line":1597,"char":55404,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1599,"char":55420,"type":"identifier"},{"text":"Started","line":1599,"char":55448,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1600,"char":55488,"type":"identifier"},{"text":"Started","line":1600,"char":55516,"type":"identifier"},{"text":"eventBus","line":1601,"char":55531,"type":"identifier"},{"text":"postWithoutConfiguring","line":1601,"char":55540,"type":"identifier"},{"text":"configureTestEventAtTime","line":1602,"char":55572,"type":"identifier"},{"text":"parseEventStarted","line":1603,"char":55610,"type":"identifier"},{"text":"TimeUnit","line":1605,"char":55657,"type":"identifier"},{"text":"MILLISECONDS","line":1605,"char":55666,"type":"identifier"},{"text":"validateConsole","line":1607,"char":55717,"type":"identifier"},{"text":"listener","line":1607,"char":55733,"type":"identifier"},{"text":"ImmutableList","line":1607,"char":55747,"type":"identifier"},{"text":"of","line":1607,"char":55761,"type":"identifier"},{"text":"validateConsole","line":1609,"char":55804,"type":"identifier"},{"text":"listener","line":1610,"char":55829,"type":"identifier"},{"text":"ImmutableList","line":1612,"char":55861,"type":"identifier"},{"text":"of","line":1612,"char":55875,"type":"identifier"},{"text":"eventBus","line":1614,"char":55918,"type":"identifier"},{"text":"postWithoutConfiguring","line":1614,"char":55927,"type":"identifier"},{"text":"configureTestEventAtTime","line":1615,"char":55959,"type":"identifier"},{"text":"ProjectBuildFileParseEvents","line":1616,"char":56001,"type":"identifier"},{"text":"Finished","line":1616,"char":56029,"type":"identifier"},{"text":"parseEventStarted","line":1616,"char":56038,"type":"identifier"},{"text":"TimeUnit","line":1618,"char":56088,"type":"identifier"},{"text":"MILLISECONDS","line":1618,"char":56097,"type":"identifier"},{"text":"validateConsole","line":1620,"char":56148,"type":"identifier"},{"text":"listener","line":1621,"char":56173,"type":"identifier"},{"text":"ImmutableList","line":1623,"char":56205,"type":"identifier"},{"text":"of","line":1623,"char":56219,"type":"identifier"},{"text":"BuildEvent","line":1625,"char":56271,"type":"identifier"},{"text":"Started","line":1625,"char":56282,"type":"identifier"},{"text":"BuildEvent","line":1625,"char":56310,"type":"identifier"},{"text":"started","line":1625,"char":56321,"type":"identifier"},{"text":"testArgs","line":1625,"char":56329,"type":"identifier"},{"text":"eventBus","line":1626,"char":56344,"type":"identifier"},{"text":"postWithoutConfiguring","line":1626,"char":56353,"type":"identifier"},{"text":"configureTestEventAtTime","line":1627,"char":56385,"type":"identifier"},{"text":"buildEventStarted","line":1628,"char":56423,"type":"identifier"},{"text":"TimeUnit","line":1630,"char":56472,"type":"identifier"},{"text":"MILLISECONDS","line":1630,"char":56481,"type":"identifier"},{"text":"ParseEvent","line":1632,"char":56532,"type":"identifier"},{"text":"Started","line":1632,"char":56543,"type":"identifier"},{"text":"ParseEvent","line":1632,"char":56566,"type":"identifier"},{"text":"started","line":1632,"char":56577,"type":"identifier"},{"text":"testTargets","line":1632,"char":56585,"type":"identifier"},{"text":"eventBus","line":1633,"char":56603,"type":"identifier"},{"text":"postWithoutConfiguring","line":1633,"char":56612,"type":"identifier"},{"text":"configureTestEventAtTime","line":1634,"char":56644,"type":"identifier"},{"text":"parseStarted","line":1635,"char":56682,"type":"identifier"},{"text":"TimeUnit","line":1637,"char":56726,"type":"identifier"},{"text":"MILLISECONDS","line":1637,"char":56735,"type":"identifier"},{"text":"validateConsole","line":1640,"char":56787,"type":"identifier"},{"text":"listener","line":1640,"char":56803,"type":"identifier"},{"text":"ImmutableList","line":1640,"char":56819,"type":"identifier"},{"text":"of","line":1640,"char":56833,"type":"identifier"},{"text":"eventBus","line":1642,"char":56879,"type":"identifier"},{"text":"postWithoutConfiguring","line":1642,"char":56888,"type":"identifier"},{"text":"configureTestEventAtTime","line":1643,"char":56920,"type":"identifier"},{"text":"ParseEvent","line":1644,"char":56958,"type":"identifier"},{"text":"finished","line":1644,"char":56969,"type":"identifier"},{"text":"parseStarted","line":1644,"char":56978,"type":"identifier"},{"text":"Optional","line":1644,"char":56992,"type":"identifier"},{"text":"empty","line":1644,"char":57001,"type":"identifier"},{"text":"TimeUnit","line":1646,"char":57041,"type":"identifier"},{"text":"MILLISECONDS","line":1646,"char":57050,"type":"identifier"},{"text":"ActionGraphEvent","line":1648,"char":57101,"type":"identifier"},{"text":"Started","line":1648,"char":57118,"type":"identifier"},{"text":"ActionGraphEvent","line":1648,"char":57147,"type":"identifier"},{"text":"started","line":1648,"char":57164,"type":"identifier"},{"text":"eventBus","line":1649,"char":57179,"type":"identifier"},{"text":"postWithoutConfiguring","line":1649,"char":57188,"type":"identifier"},{"text":"configureTestEventAtTime","line":1650,"char":57220,"type":"identifier"},{"text":"actionGraphStarted","line":1651,"char":57258,"type":"identifier"},{"text":"TimeUnit","line":1653,"char":57308,"type":"identifier"},{"text":"MILLISECONDS","line":1653,"char":57317,"type":"identifier"},{"text":"eventBus","line":1655,"char":57368,"type":"identifier"},{"text":"postWithoutConfiguring","line":1655,"char":57377,"type":"identifier"},{"text":"configureTestEventAtTime","line":1656,"char":57409,"type":"identifier"},{"text":"ActionGraphEvent","line":1657,"char":57447,"type":"identifier"},{"text":"finished","line":1657,"char":57464,"type":"identifier"},{"text":"actionGraphStarted","line":1657,"char":57473,"type":"identifier"},{"text":"TimeUnit","line":1659,"char":57524,"type":"identifier"},{"text":"MILLISECONDS","line":1659,"char":57533,"type":"identifier"},{"text":"String","line":1662,"char":57591,"type":"identifier"},{"text":"validateConsole","line":1664,"char":57662,"type":"identifier"},{"text":"listener","line":1664,"char":57678,"type":"identifier"},{"text":"ImmutableList","line":1664,"char":57694,"type":"identifier"},{"text":"of","line":1664,"char":57708,"type":"identifier"},{"text":"parsingLine","line":1665,"char":57720,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1666,"char":57741,"type":"identifier"},{"text":"eventBus","line":1669,"char":57796,"type":"identifier"},{"text":"postWithoutConfiguring","line":1669,"char":57805,"type":"identifier"},{"text":"configureTestEventAtTime","line":1670,"char":57837,"type":"identifier"},{"text":"BuildRuleEvent","line":1671,"char":57875,"type":"identifier"},{"text":"started","line":1671,"char":57890,"type":"identifier"},{"text":"testBuildRule","line":1671,"char":57898,"type":"identifier"},{"text":"TimeUnit","line":1673,"char":57944,"type":"identifier"},{"text":"MILLISECONDS","line":1673,"char":57953,"type":"identifier"},{"text":"validateConsole","line":1677,"char":58006,"type":"identifier"},{"text":"listener","line":1677,"char":58022,"type":"identifier"},{"text":"ImmutableList","line":1677,"char":58038,"type":"identifier"},{"text":"of","line":1677,"char":58052,"type":"identifier"},{"text":"parsingLine","line":1678,"char":58064,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1679,"char":58085,"type":"identifier"},{"text":"eventBus","line":1683,"char":58190,"type":"identifier"},{"text":"postWithoutConfiguring","line":1683,"char":58199,"type":"identifier"},{"text":"configureTestEventAtTime","line":1684,"char":58231,"type":"identifier"},{"text":"BuildRuleEvent","line":1685,"char":58269,"type":"identifier"},{"text":"finished","line":1685,"char":58284,"type":"identifier"},{"text":"testBuildRule","line":1686,"char":58310,"type":"identifier"},{"text":"BuildRuleKeys","line":1687,"char":58341,"type":"identifier"},{"text":"of","line":1687,"char":58355,"type":"identifier"},{"text":"RuleKey","line":1687,"char":58362,"type":"identifier"},{"text":"BuildRuleStatus","line":1688,"char":58396,"type":"identifier"},{"text":"SUCCESS","line":1688,"char":58412,"type":"identifier"},{"text":"CacheResult","line":1689,"char":58437,"type":"identifier"},{"text":"miss","line":1689,"char":58449,"type":"identifier"},{"text":"Optional","line":1690,"char":58473,"type":"identifier"},{"text":"of","line":1690,"char":58482,"type":"identifier"},{"text":"BuildRuleSuccessType","line":1690,"char":58485,"type":"identifier"},{"text":"BUILT_LOCALLY","line":1690,"char":58506,"type":"identifier"},{"text":"Optional","line":1691,"char":58538,"type":"identifier"},{"text":"empty","line":1691,"char":58547,"type":"identifier"},{"text":"Optional","line":1692,"char":58572,"type":"identifier"},{"text":"empty","line":1692,"char":58581,"type":"identifier"},{"text":"Optional","line":1693,"char":58606,"type":"identifier"},{"text":"empty","line":1693,"char":58615,"type":"identifier"},{"text":"Optional","line":1694,"char":58640,"type":"identifier"},{"text":"empty","line":1694,"char":58649,"type":"identifier"},{"text":"TimeUnit","line":1696,"char":58690,"type":"identifier"},{"text":"MILLISECONDS","line":1696,"char":58699,"type":"identifier"},{"text":"eventBus","line":1699,"char":58751,"type":"identifier"},{"text":"postWithoutConfiguring","line":1699,"char":58760,"type":"identifier"},{"text":"configureTestEventAtTime","line":1700,"char":58792,"type":"identifier"},{"text":"BuildEvent","line":1701,"char":58830,"type":"identifier"},{"text":"finished","line":1701,"char":58841,"type":"identifier"},{"text":"buildEventStarted","line":1701,"char":58850,"type":"identifier"},{"text":"TimeUnit","line":1703,"char":58904,"type":"identifier"},{"text":"MILLISECONDS","line":1703,"char":58913,"type":"identifier"},{"text":"String","line":1706,"char":58971,"type":"identifier"},{"text":"validateConsole","line":1708,"char":59030,"type":"identifier"},{"text":"listener","line":1708,"char":59046,"type":"identifier"},{"text":"ImmutableList","line":1708,"char":59063,"type":"identifier"},{"text":"of","line":1708,"char":59077,"type":"identifier"},{"text":"parsingLine","line":1709,"char":59089,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1710,"char":59110,"type":"identifier"},{"text":"buildingLine","line":1711,"char":59144,"type":"identifier"},{"text":"eventBus","line":1713,"char":59165,"type":"identifier"},{"text":"postWithoutConfiguring","line":1713,"char":59174,"type":"identifier"},{"text":"configureTestEventAtTime","line":1714,"char":59206,"type":"identifier"},{"text":"TestRunEvent","line":1715,"char":59244,"type":"identifier"},{"text":"started","line":1715,"char":59257,"type":"identifier"},{"text":"TestSelectorList","line":1717,"char":59321,"type":"identifier"},{"text":"empty","line":1717,"char":59338,"type":"identifier"},{"text":"ImmutableSet","line":1719,"char":59419,"type":"identifier"},{"text":"copyOf","line":1719,"char":59432,"type":"identifier"},{"text":"testArgs","line":1719,"char":59439,"type":"identifier"},{"text":"TimeUnit","line":1721,"char":59482,"type":"identifier"},{"text":"MILLISECONDS","line":1721,"char":59491,"type":"identifier"},{"text":"validateConsole","line":1724,"char":59543,"type":"identifier"},{"text":"listener","line":1725,"char":59568,"type":"identifier"},{"text":"ImmutableList","line":1727,"char":59601,"type":"identifier"},{"text":"of","line":1727,"char":59615,"type":"identifier"},{"text":"parsingLine","line":1728,"char":59631,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1729,"char":59656,"type":"identifier"},{"text":"buildingLine","line":1730,"char":59694,"type":"identifier"},{"text":"eventBus","line":1733,"char":59749,"type":"identifier"},{"text":"postWithoutConfiguring","line":1733,"char":59758,"type":"identifier"},{"text":"configureTestEventAtTime","line":1734,"char":59790,"type":"identifier"},{"text":"TestRuleEvent","line":1735,"char":59828,"type":"identifier"},{"text":"started","line":1735,"char":59842,"type":"identifier"},{"text":"testTarget","line":1735,"char":59850,"type":"identifier"},{"text":"TimeUnit","line":1737,"char":59894,"type":"identifier"},{"text":"MILLISECONDS","line":1737,"char":59903,"type":"identifier"},{"text":"validateConsole","line":1740,"char":59955,"type":"identifier"},{"text":"listener","line":1741,"char":59980,"type":"identifier"},{"text":"ImmutableList","line":1743,"char":60013,"type":"identifier"},{"text":"of","line":1743,"char":60027,"type":"identifier"},{"text":"parsingLine","line":1744,"char":60043,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1745,"char":60068,"type":"identifier"},{"text":"buildingLine","line":1746,"char":60106,"type":"identifier"},{"text":"UUID","line":1750,"char":60198,"type":"identifier"},{"text":"UUID","line":1750,"char":60218,"type":"identifier"},{"text":"StepEvent","line":1751,"char":60234,"type":"identifier"},{"text":"Started","line":1751,"char":60244,"type":"identifier"},{"text":"StepEvent","line":1751,"char":60271,"type":"identifier"},{"text":"started","line":1751,"char":60281,"type":"identifier"},{"text":"stepUuid","line":1754,"char":60340,"type":"identifier"},{"text":"eventBus","line":1755,"char":60355,"type":"identifier"},{"text":"postWithoutConfiguring","line":1755,"char":60364,"type":"identifier"},{"text":"configureTestEventAtTime","line":1756,"char":60396,"type":"identifier"},{"text":"stepEventStarted","line":1757,"char":60434,"type":"identifier"},{"text":"TimeUnit","line":1759,"char":60483,"type":"identifier"},{"text":"MILLISECONDS","line":1759,"char":60492,"type":"identifier"},{"text":"validateConsole","line":1762,"char":60544,"type":"identifier"},{"text":"listener","line":1763,"char":60569,"type":"identifier"},{"text":"ImmutableList","line":1765,"char":60602,"type":"identifier"},{"text":"of","line":1765,"char":60616,"type":"identifier"},{"text":"parsingLine","line":1766,"char":60632,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1767,"char":60657,"type":"identifier"},{"text":"buildingLine","line":1768,"char":60695,"type":"identifier"},{"text":"eventBus","line":1772,"char":60813,"type":"identifier"},{"text":"postWithoutConfiguring","line":1772,"char":60822,"type":"identifier"},{"text":"configureTestEventAtTime","line":1773,"char":60854,"type":"identifier"},{"text":"StepEvent","line":1774,"char":60892,"type":"identifier"},{"text":"finished","line":1774,"char":60902,"type":"identifier"},{"text":"stepEventStarted","line":1774,"char":60911,"type":"identifier"},{"text":"TimeUnit","line":1776,"char":60964,"type":"identifier"},{"text":"MILLISECONDS","line":1776,"char":60973,"type":"identifier"},{"text":"validateConsole","line":1779,"char":61025,"type":"identifier"},{"text":"listener","line":1780,"char":61050,"type":"identifier"},{"text":"ImmutableList","line":1782,"char":61083,"type":"identifier"},{"text":"of","line":1782,"char":61097,"type":"identifier"},{"text":"parsingLine","line":1783,"char":61113,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1784,"char":61138,"type":"identifier"},{"text":"buildingLine","line":1785,"char":61176,"type":"identifier"},{"text":"UUID","line":1789,"char":61268,"type":"identifier"},{"text":"UUID","line":1789,"char":61288,"type":"identifier"},{"text":"eventBus","line":1791,"char":61305,"type":"identifier"},{"text":"postWithoutConfiguring","line":1791,"char":61314,"type":"identifier"},{"text":"configureTestEventAtTime","line":1792,"char":61346,"type":"identifier"},{"text":"TestSummaryEvent","line":1793,"char":61384,"type":"identifier"},{"text":"started","line":1793,"char":61401,"type":"identifier"},{"text":"testUUID","line":1793,"char":61409,"type":"identifier"},{"text":"TimeUnit","line":1795,"char":61471,"type":"identifier"},{"text":"MILLISECONDS","line":1795,"char":61480,"type":"identifier"},{"text":"validateConsole","line":1798,"char":61532,"type":"identifier"},{"text":"listener","line":1799,"char":61557,"type":"identifier"},{"text":"ImmutableList","line":1801,"char":61590,"type":"identifier"},{"text":"of","line":1801,"char":61604,"type":"identifier"},{"text":"parsingLine","line":1802,"char":61620,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1803,"char":61645,"type":"identifier"},{"text":"buildingLine","line":1804,"char":61683,"type":"identifier"},{"text":"TestResultSummary","line":1808,"char":61795,"type":"identifier"},{"text":"TestResultSummary","line":1809,"char":61845,"type":"identifier"},{"text":"ResultType","line":1812,"char":61920,"type":"identifier"},{"text":"FAILURE","line":1812,"char":61931,"type":"identifier"},{"text":"eventBus","line":1818,"char":62160,"type":"identifier"},{"text":"postWithoutConfiguring","line":1818,"char":62169,"type":"identifier"},{"text":"configureTestEventAtTime","line":1819,"char":62201,"type":"identifier"},{"text":"TestSummaryEvent","line":1820,"char":62239,"type":"identifier"},{"text":"finished","line":1820,"char":62256,"type":"identifier"},{"text":"testUUID","line":1821,"char":62282,"type":"identifier"},{"text":"testResultSummary","line":1822,"char":62308,"type":"identifier"},{"text":"TimeUnit","line":1824,"char":62359,"type":"identifier"},{"text":"MILLISECONDS","line":1824,"char":62368,"type":"identifier"},{"text":"validateConsoleWithLogLines","line":1827,"char":62420,"type":"identifier"},{"text":"listener","line":1828,"char":62457,"type":"identifier"},{"text":"ImmutableList","line":1830,"char":62490,"type":"identifier"},{"text":"of","line":1830,"char":62504,"type":"identifier"},{"text":"parsingLine","line":1831,"char":62520,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1832,"char":62545,"type":"identifier"},{"text":"buildingLine","line":1833,"char":62583,"type":"identifier"},{"text":"ImmutableList","line":1836,"char":62693,"type":"identifier"},{"text":"of","line":1836,"char":62707,"type":"identifier"},{"text":"eventBus","line":1839,"char":62803,"type":"identifier"},{"text":"postWithoutConfiguring","line":1839,"char":62812,"type":"identifier"},{"text":"configureTestEventAtTime","line":1840,"char":62844,"type":"identifier"},{"text":"TestRunEvent","line":1841,"char":62882,"type":"identifier"},{"text":"finished","line":1841,"char":62895,"type":"identifier"},{"text":"ImmutableSet","line":1842,"char":62921,"type":"identifier"},{"text":"copyOf","line":1842,"char":62934,"type":"identifier"},{"text":"testArgs","line":1842,"char":62941,"type":"identifier"},{"text":"ImmutableList","line":1843,"char":62968,"type":"identifier"},{"text":"of","line":1843,"char":62982,"type":"identifier"},{"text":"TestResults","line":1844,"char":63006,"type":"identifier"},{"text":"of","line":1844,"char":63018,"type":"identifier"},{"text":"testTarget","line":1845,"char":63046,"type":"identifier"},{"text":"ImmutableList","line":1846,"char":63082,"type":"identifier"},{"text":"of","line":1846,"char":63096,"type":"identifier"},{"text":"TestCaseSummary","line":1847,"char":63132,"type":"identifier"},{"text":"ImmutableList","line":1849,"char":63226,"type":"identifier"},{"text":"of","line":1849,"char":63240,"type":"identifier"},{"text":"testResultSummary","line":1850,"char":63280,"type":"identifier"},{"text":"ImmutableSet","line":1851,"char":63326,"type":"identifier"},{"text":"of","line":1851,"char":63339,"type":"identifier"},{"text":"ImmutableSet","line":1852,"char":63381,"type":"identifier"},{"text":"of","line":1852,"char":63394,"type":"identifier"},{"text":"TimeUnit","line":1854,"char":63444,"type":"identifier"},{"text":"MILLISECONDS","line":1854,"char":63453,"type":"identifier"},{"text":"String","line":1857,"char":63511,"type":"identifier"},{"text":"validateConsoleWithStdOutAndErr","line":1859,"char":63584,"type":"identifier"},{"text":"listener","line":1860,"char":63625,"type":"identifier"},{"text":"ImmutableList","line":1862,"char":63658,"type":"identifier"},{"text":"of","line":1862,"char":63672,"type":"identifier"},{"text":"parsingLine","line":1863,"char":63688,"type":"identifier"},{"text":"FINISHED_DOWNLOAD_STRING","line":1864,"char":63713,"type":"identifier"},{"text":"buildingLine","line":1865,"char":63751,"type":"identifier"},{"text":"testingLine","line":1866,"char":63777,"type":"identifier"},{"text":"ImmutableList","line":1867,"char":63799,"type":"identifier"},{"text":"of","line":1867,"char":63813,"type":"identifier"},{"text":"Optional","line":1868,"char":63827,"type":"identifier"},{"text":"of","line":1868,"char":63836,"type":"identifier"},{"text":"Joiner","line":1869,"char":63852,"type":"identifier"},{"text":"on","line":1869,"char":63859,"type":"identifier"},{"text":"join","line":1869,"char":63868,"type":"identifier"},{"text":"Optional","line":1882,"char":64469,"type":"identifier"},{"text":"empty","line":1882,"char":64478,"type":"identifier"},{"text":"Clock","line":1887,"char":64556,"type":"identifier"},{"text":"IncrementingFakeClock","line":1887,"char":64578,"type":"identifier"},{"text":"TimeUnit","line":1887,"char":64600,"type":"identifier"},{"text":"SECONDS","line":1887,"char":64609,"type":"identifier"},{"text":"toNanos","line":1887,"char":64617,"type":"identifier"},{"text":"BuckEventBus","line":1888,"char":64634,"type":"identifier"},{"text":"BuckEventBusFactory","line":1888,"char":64658,"type":"identifier"},{"text":"newInstance","line":1888,"char":64678,"type":"identifier"},{"text":"fakeClock","line":1888,"char":64690,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":1889,"char":64706,"type":"identifier"},{"text":"createSuperConsole","line":1889,"char":64746,"type":"identifier"},{"text":"fakeClock","line":1889,"char":64765,"type":"identifier"},{"text":"eventBus","line":1889,"char":64776,"type":"identifier"},{"text":"SourcePathResolver","line":1891,"char":64792,"type":"identifier"},{"text":"SourcePathResolver","line":1891,"char":64830,"type":"identifier"},{"text":"BuildRuleResolver","line":1892,"char":64862,"type":"identifier"},{"text":"TargetGraph","line":1892,"char":64880,"type":"identifier"},{"text":"EMPTY","line":1892,"char":64892,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":1892,"char":64903,"type":"identifier"},{"text":"BuildTarget","line":1895,"char":64958,"type":"identifier"},{"text":"BuildTargetFactory","line":1895,"char":64983,"type":"identifier"},{"text":"newInstance","line":1895,"char":65002,"type":"identifier"},{"text":"ImmutableSet","line":1896,"char":65037,"type":"identifier"},{"text":"BuildTarget","line":1896,"char":65050,"type":"identifier"},{"text":"ImmutableSet","line":1896,"char":65078,"type":"identifier"},{"text":"of","line":1896,"char":65091,"type":"identifier"},{"text":"fakeTarget","line":1896,"char":65094,"type":"identifier"},{"text":"Iterable","line":1897,"char":65111,"type":"identifier"},{"text":"String","line":1897,"char":65120,"type":"identifier"},{"text":"buildArgs","line":1897,"char":65128,"type":"identifier"},{"text":"Iterables","line":1897,"char":65140,"type":"identifier"},{"text":"transform","line":1897,"char":65150,"type":"identifier"},{"text":"buildTargets","line":1897,"char":65160,"type":"identifier"},{"text":"Object","line":1897,"char":65174,"type":"identifier"},{"text":"toString","line":1897,"char":65182,"type":"identifier"},{"text":"FakeBuildRule","line":1898,"char":65197,"type":"identifier"},{"text":"FakeBuildRule","line":1898,"char":65226,"type":"identifier"},{"text":"fakeTarget","line":1899,"char":65249,"type":"identifier"},{"text":"pathResolver","line":1900,"char":65269,"type":"identifier"},{"text":"ImmutableSortedSet","line":1901,"char":65291,"type":"identifier"},{"text":"of","line":1901,"char":65310,"type":"identifier"},{"text":"String","line":1902,"char":65321,"type":"identifier"},{"text":"String","line":1903,"char":65367,"type":"identifier"},{"text":"UUID","line":1904,"char":65412,"type":"identifier"},{"text":"UUID","line":1904,"char":65428,"type":"identifier"},{"text":"randomUUID","line":1904,"char":65433,"type":"identifier"},{"text":"FakeRuleKeyBuilderFactory","line":1906,"char":65452,"type":"identifier"},{"text":"FakeRuleKeyBuilderFactory","line":1906,"char":65506,"type":"identifier"},{"text":"ImmutableMap","line":1907,"char":65541,"type":"identifier"},{"text":"of","line":1907,"char":65554,"type":"identifier"},{"text":"fakeTarget","line":1908,"char":65570,"type":"identifier"},{"text":"RuleKey","line":1908,"char":65586,"type":"identifier"},{"text":"BuildEvent","line":1911,"char":65634,"type":"identifier"},{"text":"Started","line":1911,"char":65645,"type":"identifier"},{"text":"BuildEvent","line":1911,"char":65673,"type":"identifier"},{"text":"started","line":1911,"char":65684,"type":"identifier"},{"text":"buildArgs","line":1911,"char":65692,"type":"identifier"},{"text":"eventBus","line":1912,"char":65708,"type":"identifier"},{"text":"postWithoutConfiguring","line":1912,"char":65717,"type":"identifier"},{"text":"configureTestEventAtTime","line":1913,"char":65749,"type":"identifier"},{"text":"buildEventStarted","line":1914,"char":65787,"type":"identifier"},{"text":"TimeUnit","line":1916,"char":65834,"type":"identifier"},{"text":"MILLISECONDS","line":1916,"char":65843,"type":"identifier"},{"text":"String","line":1920,"char":65926,"type":"identifier"},{"text":"ParseEvent","line":1921,"char":65996,"type":"identifier"},{"text":"Started","line":1921,"char":66007,"type":"identifier"},{"text":"ParseEvent","line":1921,"char":66030,"type":"identifier"},{"text":"started","line":1921,"char":66041,"type":"identifier"},{"text":"buildTargets","line":1921,"char":66049,"type":"identifier"},{"text":"eventBus","line":1922,"char":66068,"type":"identifier"},{"text":"postWithoutConfiguring","line":1922,"char":66077,"type":"identifier"},{"text":"configureTestEventAtTime","line":1923,"char":66109,"type":"identifier"},{"text":"parseStarted","line":1924,"char":66147,"type":"identifier"},{"text":"TimeUnit","line":1926,"char":66189,"type":"identifier"},{"text":"MILLISECONDS","line":1926,"char":66198,"type":"identifier"},{"text":"eventBus","line":1928,"char":66249,"type":"identifier"},{"text":"postWithoutConfiguring","line":1928,"char":66258,"type":"identifier"},{"text":"configureTestEventAtTime","line":1929,"char":66290,"type":"identifier"},{"text":"ParseEvent","line":1930,"char":66328,"type":"identifier"},{"text":"finished","line":1930,"char":66339,"type":"identifier"},{"text":"parseStarted","line":1930,"char":66348,"type":"identifier"},{"text":"Optional","line":1930,"char":66362,"type":"identifier"},{"text":"empty","line":1930,"char":66371,"type":"identifier"},{"text":"TimeUnit","line":1932,"char":66409,"type":"identifier"},{"text":"MILLISECONDS","line":1932,"char":66418,"type":"identifier"},{"text":"eventBus","line":1934,"char":66469,"type":"identifier"},{"text":"postWithoutConfiguring","line":1934,"char":66478,"type":"identifier"},{"text":"configureTestEventAtTime","line":1935,"char":66510,"type":"identifier"},{"text":"ActionGraphEvent","line":1936,"char":66548,"type":"identifier"},{"text":"finished","line":1936,"char":66565,"type":"identifier"},{"text":"ActionGraphEvent","line":1936,"char":66574,"type":"identifier"},{"text":"started","line":1936,"char":66591,"type":"identifier"},{"text":"TimeUnit","line":1938,"char":66631,"type":"identifier"},{"text":"MILLISECONDS","line":1938,"char":66640,"type":"identifier"},{"text":"eventBus","line":1942,"char":66715,"type":"identifier"},{"text":"postWithoutConfiguring","line":1942,"char":66724,"type":"identifier"},{"text":"configureTestEventAtTime","line":1943,"char":66756,"type":"identifier"},{"text":"BuildRuleEvent","line":1944,"char":66794,"type":"identifier"},{"text":"started","line":1944,"char":66809,"type":"identifier"},{"text":"fakeRule","line":1944,"char":66817,"type":"identifier"},{"text":"TimeUnit","line":1946,"char":66856,"type":"identifier"},{"text":"MILLISECONDS","line":1946,"char":66865,"type":"identifier"},{"text":"StepEvent","line":1950,"char":66963,"type":"identifier"},{"text":"Started","line":1950,"char":66973,"type":"identifier"},{"text":"StepEvent","line":1951,"char":67008,"type":"identifier"},{"text":"started","line":1951,"char":67018,"type":"identifier"},{"text":"stepShortName","line":1951,"char":67026,"type":"identifier"},{"text":"stepDescription","line":1951,"char":67041,"type":"identifier"},{"text":"stepUuid","line":1951,"char":67058,"type":"identifier"},{"text":"eventBus","line":1952,"char":67073,"type":"identifier"},{"text":"postWithoutConfiguring","line":1952,"char":67082,"type":"identifier"},{"text":"configureTestEventAtTime","line":1953,"char":67114,"type":"identifier"},{"text":"stepEventStarted","line":1954,"char":67152,"type":"identifier"},{"text":"TimeUnit","line":1956,"char":67198,"type":"identifier"},{"text":"MILLISECONDS","line":1956,"char":67207,"type":"identifier"},{"text":"eventBus","line":1958,"char":67258,"type":"identifier"},{"text":"postWithoutConfiguring","line":1958,"char":67267,"type":"identifier"},{"text":"configureTestEventAtTime","line":1959,"char":67299,"type":"identifier"},{"text":"StepEvent","line":1960,"char":67337,"type":"identifier"},{"text":"finished","line":1960,"char":67347,"type":"identifier"},{"text":"stepEventStarted","line":1960,"char":67356,"type":"identifier"},{"text":"TimeUnit","line":1962,"char":67423,"type":"identifier"},{"text":"MILLISECONDS","line":1962,"char":67432,"type":"identifier"},{"text":"eventBus","line":1966,"char":67509,"type":"identifier"},{"text":"postWithoutConfiguring","line":1966,"char":67518,"type":"identifier"},{"text":"configureTestEventAtTime","line":1967,"char":67550,"type":"identifier"},{"text":"BuildRuleEvent","line":1968,"char":67588,"type":"identifier"},{"text":"suspended","line":1968,"char":67603,"type":"identifier"},{"text":"fakeRule","line":1968,"char":67613,"type":"identifier"},{"text":"ruleKeyBuilderFactory","line":1968,"char":67623,"type":"identifier"},{"text":"TimeUnit","line":1970,"char":67677,"type":"identifier"},{"text":"MILLISECONDS","line":1970,"char":67686,"type":"identifier"},{"text":"validateConsole","line":1974,"char":67805,"type":"identifier"},{"text":"listener","line":1975,"char":67830,"type":"identifier"},{"text":"ImmutableList","line":1977,"char":67862,"type":"identifier"},{"text":"of","line":1977,"char":67876,"type":"identifier"},{"text":"parsingLine","line":1978,"char":67892,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1979,"char":67917,"type":"identifier"},{"text":"eventBus","line":1984,"char":68025,"type":"identifier"},{"text":"postWithoutConfiguring","line":1984,"char":68034,"type":"identifier"},{"text":"configureTestEventAtTime","line":1985,"char":68066,"type":"identifier"},{"text":"BuildRuleEvent","line":1986,"char":68104,"type":"identifier"},{"text":"resumed","line":1986,"char":68119,"type":"identifier"},{"text":"fakeRule","line":1986,"char":68127,"type":"identifier"},{"text":"ruleKeyBuilderFactory","line":1986,"char":68137,"type":"identifier"},{"text":"TimeUnit","line":1988,"char":68191,"type":"identifier"},{"text":"MILLISECONDS","line":1988,"char":68200,"type":"identifier"},{"text":"validateConsole","line":1993,"char":68384,"type":"identifier"},{"text":"listener","line":1994,"char":68409,"type":"identifier"},{"text":"ImmutableList","line":1996,"char":68441,"type":"identifier"},{"text":"of","line":1996,"char":68455,"type":"identifier"},{"text":"parsingLine","line":1997,"char":68471,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":1998,"char":68496,"type":"identifier"},{"text":"StepEvent","line":2003,"char":68658,"type":"identifier"},{"text":"Started","line":2003,"char":68668,"type":"identifier"},{"text":"StepEvent","line":2004,"char":68704,"type":"identifier"},{"text":"started","line":2004,"char":68714,"type":"identifier"},{"text":"stepShortName","line":2004,"char":68722,"type":"identifier"},{"text":"stepDescription","line":2004,"char":68737,"type":"identifier"},{"text":"stepUuid","line":2004,"char":68754,"type":"identifier"},{"text":"eventBus","line":2005,"char":68769,"type":"identifier"},{"text":"postWithoutConfiguring","line":2005,"char":68778,"type":"identifier"},{"text":"configureTestEventAtTime","line":2006,"char":68810,"type":"identifier"},{"text":"step2EventStarted","line":2007,"char":68848,"type":"identifier"},{"text":"TimeUnit","line":2009,"char":68897,"type":"identifier"},{"text":"MILLISECONDS","line":2009,"char":68906,"type":"identifier"},{"text":"validateConsole","line":2013,"char":69019,"type":"identifier"},{"text":"listener","line":2014,"char":69044,"type":"identifier"},{"text":"ImmutableList","line":2016,"char":69076,"type":"identifier"},{"text":"of","line":2016,"char":69090,"type":"identifier"},{"text":"parsingLine","line":2017,"char":69106,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":2018,"char":69131,"type":"identifier"},{"text":"eventBus","line":2023,"char":69299,"type":"identifier"},{"text":"postWithoutConfiguring","line":2023,"char":69308,"type":"identifier"},{"text":"configureTestEventAtTime","line":2024,"char":69340,"type":"identifier"},{"text":"StepEvent","line":2025,"char":69378,"type":"identifier"},{"text":"finished","line":2025,"char":69388,"type":"identifier"},{"text":"step2EventStarted","line":2025,"char":69397,"type":"identifier"},{"text":"TimeUnit","line":2027,"char":69465,"type":"identifier"},{"text":"MILLISECONDS","line":2027,"char":69474,"type":"identifier"},{"text":"eventBus","line":2029,"char":69525,"type":"identifier"},{"text":"postWithoutConfiguring","line":2029,"char":69534,"type":"identifier"},{"text":"configureTestEventAtTime","line":2030,"char":69566,"type":"identifier"},{"text":"BuildRuleEvent","line":2031,"char":69604,"type":"identifier"},{"text":"finished","line":2031,"char":69619,"type":"identifier"},{"text":"fakeRule","line":2032,"char":69645,"type":"identifier"},{"text":"BuildRuleKeys","line":2033,"char":69671,"type":"identifier"},{"text":"of","line":2033,"char":69685,"type":"identifier"},{"text":"RuleKey","line":2033,"char":69692,"type":"identifier"},{"text":"BuildRuleStatus","line":2034,"char":69726,"type":"identifier"},{"text":"SUCCESS","line":2034,"char":69742,"type":"identifier"},{"text":"CacheResult","line":2035,"char":69767,"type":"identifier"},{"text":"miss","line":2035,"char":69779,"type":"identifier"},{"text":"Optional","line":2036,"char":69803,"type":"identifier"},{"text":"of","line":2036,"char":69812,"type":"identifier"},{"text":"BuildRuleSuccessType","line":2036,"char":69815,"type":"identifier"},{"text":"BUILT_LOCALLY","line":2036,"char":69836,"type":"identifier"},{"text":"Optional","line":2037,"char":69868,"type":"identifier"},{"text":"empty","line":2037,"char":69877,"type":"identifier"},{"text":"Optional","line":2038,"char":69902,"type":"identifier"},{"text":"empty","line":2038,"char":69911,"type":"identifier"},{"text":"Optional","line":2039,"char":69936,"type":"identifier"},{"text":"empty","line":2039,"char":69945,"type":"identifier"},{"text":"Optional","line":2040,"char":69970,"type":"identifier"},{"text":"empty","line":2040,"char":69979,"type":"identifier"},{"text":"TimeUnit","line":2042,"char":70019,"type":"identifier"},{"text":"MILLISECONDS","line":2042,"char":70028,"type":"identifier"},{"text":"validateConsole","line":2046,"char":70155,"type":"identifier"},{"text":"listener","line":2047,"char":70180,"type":"identifier"},{"text":"ImmutableList","line":2049,"char":70212,"type":"identifier"},{"text":"of","line":2049,"char":70226,"type":"identifier"},{"text":"parsingLine","line":2050,"char":70242,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":2051,"char":70267,"type":"identifier"},{"text":"Clock","line":2058,"char":70429,"type":"identifier"},{"text":"IncrementingFakeClock","line":2058,"char":70451,"type":"identifier"},{"text":"TimeUnit","line":2058,"char":70473,"type":"identifier"},{"text":"SECONDS","line":2058,"char":70482,"type":"identifier"},{"text":"toNanos","line":2058,"char":70490,"type":"identifier"},{"text":"BuckEventBus","line":2059,"char":70507,"type":"identifier"},{"text":"BuckEventBusFactory","line":2059,"char":70531,"type":"identifier"},{"text":"newInstance","line":2059,"char":70551,"type":"identifier"},{"text":"fakeClock","line":2059,"char":70563,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2060,"char":70579,"type":"identifier"},{"text":"createSuperConsole","line":2060,"char":70619,"type":"identifier"},{"text":"fakeClock","line":2060,"char":70638,"type":"identifier"},{"text":"eventBus","line":2060,"char":70649,"type":"identifier"},{"text":"eventBus","line":2062,"char":70665,"type":"identifier"},{"text":"postWithoutConfiguring","line":2062,"char":70674,"type":"identifier"},{"text":"configureTestEventAtTime","line":2063,"char":70706,"type":"identifier"},{"text":"ConsoleEvent","line":2064,"char":70744,"type":"identifier"},{"text":"fine","line":2064,"char":70757,"type":"identifier"},{"text":"TimeUnit","line":2066,"char":70824,"type":"identifier"},{"text":"MILLISECONDS","line":2066,"char":70833,"type":"identifier"},{"text":"validateConsole","line":2068,"char":70884,"type":"identifier"},{"text":"listener","line":2068,"char":70900,"type":"identifier"},{"text":"ImmutableList","line":2068,"char":70914,"type":"identifier"},{"text":"of","line":2068,"char":70928,"type":"identifier"},{"text":"Clock","line":2073,"char":70988,"type":"identifier"},{"text":"IncrementingFakeClock","line":2073,"char":71010,"type":"identifier"},{"text":"TimeUnit","line":2073,"char":71032,"type":"identifier"},{"text":"SECONDS","line":2073,"char":71041,"type":"identifier"},{"text":"toNanos","line":2073,"char":71049,"type":"identifier"},{"text":"BuckEventBus","line":2074,"char":71066,"type":"identifier"},{"text":"BuckEventBusFactory","line":2074,"char":71090,"type":"identifier"},{"text":"newInstance","line":2074,"char":71110,"type":"identifier"},{"text":"fakeClock","line":2074,"char":71122,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2075,"char":71138,"type":"identifier"},{"text":"createSuperConsole","line":2075,"char":71178,"type":"identifier"},{"text":"fakeClock","line":2075,"char":71197,"type":"identifier"},{"text":"eventBus","line":2075,"char":71208,"type":"identifier"},{"text":"eventBus","line":2078,"char":71277,"type":"identifier"},{"text":"post","line":2078,"char":71286,"type":"identifier"},{"text":"DaemonEvent","line":2078,"char":71291,"type":"identifier"},{"text":"newDaemonInstance","line":2078,"char":71303,"type":"identifier"},{"text":"assertEquals","line":2079,"char":71329,"type":"identifier"},{"text":"NEW_DAEMON_INSTANCE_MSG","line":2079,"char":71342,"type":"identifier"},{"text":"listener","line":2079,"char":71367,"type":"identifier"},{"text":"getParsingStatus","line":2079,"char":71376,"type":"identifier"},{"text":"eventBus","line":2080,"char":71401,"type":"identifier"},{"text":"post","line":2080,"char":71410,"type":"identifier"},{"text":"ActionGraphEvent","line":2080,"char":71415,"type":"identifier"},{"text":"Cache","line":2080,"char":71432,"type":"identifier"},{"text":"miss","line":2080,"char":71438,"type":"identifier"},{"text":"assertEquals","line":2081,"char":71451,"type":"identifier"},{"text":"NEW_DAEMON_INSTANCE_MSG","line":2081,"char":71464,"type":"identifier"},{"text":"listener","line":2081,"char":71489,"type":"identifier"},{"text":"getParsingStatus","line":2081,"char":71498,"type":"identifier"},{"text":"String","line":2084,"char":71549,"type":"identifier"},{"text":"eventBus","line":2085,"char":71611,"type":"identifier"},{"text":"post","line":2085,"char":71620,"type":"identifier"},{"text":"WatchmanStatusEvent","line":2085,"char":71625,"type":"identifier"},{"text":"overflow","line":2085,"char":71645,"type":"identifier"},{"text":"overflowMessage","line":2085,"char":71654,"type":"identifier"},{"text":"assertEquals","line":2086,"char":71677,"type":"identifier"},{"text":"createParsingMessage","line":2086,"char":71690,"type":"identifier"},{"text":"EMOJI_SNAIL","line":2086,"char":71711,"type":"identifier"},{"text":"overflowMessage","line":2086,"char":71724,"type":"identifier"},{"text":"listener","line":2086,"char":71742,"type":"identifier"},{"text":"getParsingStatus","line":2086,"char":71751,"type":"identifier"},{"text":"eventBus","line":2089,"char":71804,"type":"identifier"},{"text":"post","line":2089,"char":71813,"type":"identifier"},{"text":"WatchmanStatusEvent","line":2089,"char":71818,"type":"identifier"},{"text":"fileCreation","line":2089,"char":71838,"type":"identifier"},{"text":"assertEquals","line":2090,"char":71859,"type":"identifier"},{"text":"createParsingMessage","line":2090,"char":71872,"type":"identifier"},{"text":"EMOJI_SNAIL","line":2090,"char":71893,"type":"identifier"},{"text":"listener","line":2090,"char":71921,"type":"identifier"},{"text":"getParsingStatus","line":2090,"char":71930,"type":"identifier"},{"text":"eventBus","line":2093,"char":71985,"type":"identifier"},{"text":"post","line":2093,"char":71994,"type":"identifier"},{"text":"WatchmanStatusEvent","line":2093,"char":71999,"type":"identifier"},{"text":"fileDeletion","line":2093,"char":72019,"type":"identifier"},{"text":"assertEquals","line":2094,"char":72040,"type":"identifier"},{"text":"createParsingMessage","line":2094,"char":72053,"type":"identifier"},{"text":"EMOJI_SNAIL","line":2094,"char":72074,"type":"identifier"},{"text":"listener","line":2094,"char":72104,"type":"identifier"},{"text":"getParsingStatus","line":2094,"char":72113,"type":"identifier"},{"text":"eventBus","line":2097,"char":72176,"type":"identifier"},{"text":"post","line":2097,"char":72185,"type":"identifier"},{"text":"ParsingEvent","line":2097,"char":72190,"type":"identifier"},{"text":"symlinkInvalidation","line":2097,"char":72203,"type":"identifier"},{"text":"assertEquals","line":2098,"char":72231,"type":"identifier"},{"text":"createParsingMessage","line":2099,"char":72253,"type":"identifier"},{"text":"EMOJI_WHALE","line":2099,"char":72274,"type":"identifier"},{"text":"listener","line":2100,"char":72333,"type":"identifier"},{"text":"getParsingStatus","line":2100,"char":72342,"type":"identifier"},{"text":"eventBus","line":2103,"char":72405,"type":"identifier"},{"text":"post","line":2103,"char":72414,"type":"identifier"},{"text":"ParsingEvent","line":2103,"char":72419,"type":"identifier"},{"text":"environmentalChange","line":2103,"char":72432,"type":"identifier"},{"text":"assertEquals","line":2104,"char":72476,"type":"identifier"},{"text":"createParsingMessage","line":2105,"char":72498,"type":"identifier"},{"text":"EMOJI_SNAIL","line":2105,"char":72519,"type":"identifier"},{"text":"listener","line":2106,"char":72589,"type":"identifier"},{"text":"getParsingStatus","line":2106,"char":72598,"type":"identifier"},{"text":"eventBus","line":2109,"char":72663,"type":"identifier"},{"text":"post","line":2109,"char":72672,"type":"identifier"},{"text":"ActionGraphEvent","line":2109,"char":72677,"type":"identifier"},{"text":"Cache","line":2109,"char":72694,"type":"identifier"},{"text":"hit","line":2109,"char":72700,"type":"identifier"},{"text":"assertEquals","line":2110,"char":72712,"type":"identifier"},{"text":"createParsingMessage","line":2110,"char":72725,"type":"identifier"},{"text":"EMOJI_BUNNY","line":2110,"char":72746,"type":"identifier"},{"text":"listener","line":2110,"char":72764,"type":"identifier"},{"text":"getParsingStatus","line":2110,"char":72773,"type":"identifier"},{"text":"Clock","line":2115,"char":72851,"type":"identifier"},{"text":"IncrementingFakeClock","line":2115,"char":72873,"type":"identifier"},{"text":"TimeUnit","line":2115,"char":72895,"type":"identifier"},{"text":"SECONDS","line":2115,"char":72904,"type":"identifier"},{"text":"toNanos","line":2115,"char":72912,"type":"identifier"},{"text":"BuckEventBus","line":2116,"char":72929,"type":"identifier"},{"text":"BuckEventBusFactory","line":2116,"char":72953,"type":"identifier"},{"text":"newInstance","line":2116,"char":72973,"type":"identifier"},{"text":"fakeClock","line":2116,"char":72985,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2117,"char":73001,"type":"identifier"},{"text":"createSuperConsole","line":2117,"char":73041,"type":"identifier"},{"text":"fakeClock","line":2117,"char":73060,"type":"identifier"},{"text":"eventBus","line":2117,"char":73071,"type":"identifier"},{"text":"eventBus","line":2119,"char":73087,"type":"identifier"},{"text":"postWithoutConfiguring","line":2119,"char":73096,"type":"identifier"},{"text":"configureTestEventAtTime","line":2120,"char":73128,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2121,"char":73166,"type":"identifier"},{"text":"started","line":2121,"char":73189,"type":"identifier"},{"text":"TimeUnit","line":2123,"char":73228,"type":"identifier"},{"text":"MILLISECONDS","line":2123,"char":73237,"type":"identifier"},{"text":"validateConsole","line":2126,"char":73289,"type":"identifier"},{"text":"listener","line":2126,"char":73305,"type":"identifier"},{"text":"ImmutableList","line":2126,"char":73319,"type":"identifier"},{"text":"of","line":2126,"char":73333,"type":"identifier"},{"text":"eventBus","line":2128,"char":73376,"type":"identifier"},{"text":"postWithoutConfiguring","line":2128,"char":73385,"type":"identifier"},{"text":"configureTestEventAtTime","line":2129,"char":73417,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2130,"char":73459,"type":"identifier"},{"text":"Finished","line":2130,"char":73482,"type":"identifier"},{"text":"TimeUnit","line":2132,"char":73522,"type":"identifier"},{"text":"MILLISECONDS","line":2132,"char":73531,"type":"identifier"},{"text":"validateConsole","line":2135,"char":73568,"type":"identifier"},{"text":"listener","line":2135,"char":73584,"type":"identifier"},{"text":"ImmutableList","line":2135,"char":73598,"type":"identifier"},{"text":"of","line":2135,"char":73612,"type":"identifier"},{"text":"IOException","line":2139,"char":73729,"type":"identifier"},{"text":"Clock","line":2140,"char":73747,"type":"identifier"},{"text":"IncrementingFakeClock","line":2140,"char":73769,"type":"identifier"},{"text":"TimeUnit","line":2140,"char":73791,"type":"identifier"},{"text":"SECONDS","line":2140,"char":73800,"type":"identifier"},{"text":"toNanos","line":2140,"char":73808,"type":"identifier"},{"text":"BuckEventBus","line":2141,"char":73825,"type":"identifier"},{"text":"BuckEventBusFactory","line":2141,"char":73849,"type":"identifier"},{"text":"newInstance","line":2141,"char":73869,"type":"identifier"},{"text":"fakeClock","line":2141,"char":73881,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2142,"char":73897,"type":"identifier"},{"text":"createSuperConsole","line":2142,"char":73937,"type":"identifier"},{"text":"fakeClock","line":2142,"char":73956,"type":"identifier"},{"text":"eventBus","line":2142,"char":73967,"type":"identifier"},{"text":"Path","line":2144,"char":73983,"type":"identifier"},{"text":"getStorageForTest","line":2144,"char":74002,"type":"identifier"},{"text":"Map","line":2145,"char":74027,"type":"identifier"},{"text":"String","line":2145,"char":74031,"type":"identifier"},{"text":"Object","line":2145,"char":74039,"type":"identifier"},{"text":"ImmutableSortedMap","line":2145,"char":74065,"type":"identifier"},{"text":"String","line":2145,"char":74085,"type":"identifier"},{"text":"Object","line":2145,"char":74093,"type":"identifier"},{"text":"naturalOrder","line":2145,"char":74100,"type":"identifier"},{"text":"put","line":2146,"char":74124,"type":"identifier"},{"text":"ImmutableSortedMap","line":2148,"char":74174,"type":"identifier"},{"text":"String","line":2148,"char":74194,"type":"identifier"},{"text":"Number","line":2148,"char":74202,"type":"identifier"},{"text":"naturalOrder","line":2148,"char":74209,"type":"identifier"},{"text":"put","line":2149,"char":74241,"type":"identifier"},{"text":"ProgressEstimator","line":2149,"char":74245,"type":"identifier"},{"text":"EXPECTED_NUMBER_OF_GENERATED_PROJECT_FILES","line":2149,"char":74263,"type":"identifier"},{"text":"build","line":2150,"char":74328,"type":"identifier"},{"text":"build","line":2151,"char":74346,"type":"identifier"},{"text":"String","line":2152,"char":74359,"type":"identifier"},{"text":"Gson","line":2152,"char":74381,"type":"identifier"},{"text":"toJson","line":2152,"char":74388,"type":"identifier"},{"text":"storageContents","line":2152,"char":74395,"type":"identifier"},{"text":"Files","line":2153,"char":74417,"type":"identifier"},{"text":"createDirectories","line":2153,"char":74423,"type":"identifier"},{"text":"storagePath","line":2153,"char":74441,"type":"identifier"},{"text":"getParent","line":2153,"char":74453,"type":"identifier"},{"text":"Files","line":2154,"char":74471,"type":"identifier"},{"text":"write","line":2154,"char":74477,"type":"identifier"},{"text":"storagePath","line":2154,"char":74483,"type":"identifier"},{"text":"contents","line":2154,"char":74496,"type":"identifier"},{"text":"getBytes","line":2154,"char":74505,"type":"identifier"},{"text":"StandardCharsets","line":2154,"char":74514,"type":"identifier"},{"text":"UTF_8","line":2154,"char":74531,"type":"identifier"},{"text":"ProgressEstimator","line":2156,"char":74545,"type":"identifier"},{"text":"ProgressEstimator","line":2156,"char":74571,"type":"identifier"},{"text":"storagePath","line":2157,"char":74598,"type":"identifier"},{"text":"eventBus","line":2158,"char":74619,"type":"identifier"},{"text":"ObjectMappers","line":2159,"char":74637,"type":"identifier"},{"text":"newDefaultInstance","line":2159,"char":74651,"type":"identifier"},{"text":"listener","line":2160,"char":74678,"type":"identifier"},{"text":"setProgressEstimator","line":2160,"char":74687,"type":"identifier"},{"text":"e","line":2160,"char":74708,"type":"identifier"},{"text":"eventBus","line":2162,"char":74717,"type":"identifier"},{"text":"post","line":2162,"char":74726,"type":"identifier"},{"text":"CommandEvent","line":2163,"char":74740,"type":"identifier"},{"text":"started","line":2163,"char":74753,"type":"identifier"},{"text":"ImmutableList","line":2165,"char":74797,"type":"identifier"},{"text":"of","line":2165,"char":74811,"type":"identifier"},{"text":"eventBus","line":2168,"char":74857,"type":"identifier"},{"text":"postWithoutConfiguring","line":2168,"char":74866,"type":"identifier"},{"text":"configureTestEventAtTime","line":2169,"char":74898,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2170,"char":74936,"type":"identifier"},{"text":"started","line":2170,"char":74959,"type":"identifier"},{"text":"TimeUnit","line":2172,"char":74998,"type":"identifier"},{"text":"MILLISECONDS","line":2172,"char":75007,"type":"identifier"},{"text":"validateConsole","line":2175,"char":75059,"type":"identifier"},{"text":"listener","line":2175,"char":75075,"type":"identifier"},{"text":"ImmutableList","line":2175,"char":75089,"type":"identifier"},{"text":"of","line":2175,"char":75103,"type":"identifier"},{"text":"eventBus","line":2177,"char":75146,"type":"identifier"},{"text":"postWithoutConfiguring","line":2177,"char":75155,"type":"identifier"},{"text":"configureTestEventAtTime","line":2178,"char":75187,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2179,"char":75225,"type":"identifier"},{"text":"processed","line":2179,"char":75248,"type":"identifier"},{"text":"TimeUnit","line":2181,"char":75289,"type":"identifier"},{"text":"MILLISECONDS","line":2181,"char":75298,"type":"identifier"},{"text":"eventBus","line":2183,"char":75349,"type":"identifier"},{"text":"postWithoutConfiguring","line":2183,"char":75358,"type":"identifier"},{"text":"configureTestEventAtTime","line":2184,"char":75390,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2185,"char":75428,"type":"identifier"},{"text":"processed","line":2185,"char":75451,"type":"identifier"},{"text":"TimeUnit","line":2187,"char":75494,"type":"identifier"},{"text":"MILLISECONDS","line":2187,"char":75503,"type":"identifier"},{"text":"validateConsole","line":2190,"char":75555,"type":"identifier"},{"text":"listener","line":2190,"char":75571,"type":"identifier"},{"text":"ImmutableList","line":2190,"char":75587,"type":"identifier"},{"text":"of","line":2190,"char":75601,"type":"identifier"},{"text":"eventBus","line":2192,"char":75650,"type":"identifier"},{"text":"postWithoutConfiguring","line":2192,"char":75659,"type":"identifier"},{"text":"configureTestEventAtTime","line":2193,"char":75691,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2194,"char":75733,"type":"identifier"},{"text":"Finished","line":2194,"char":75756,"type":"identifier"},{"text":"TimeUnit","line":2196,"char":75798,"type":"identifier"},{"text":"MILLISECONDS","line":2196,"char":75807,"type":"identifier"},{"text":"validateConsole","line":2199,"char":75844,"type":"identifier"},{"text":"listener","line":2199,"char":75860,"type":"identifier"},{"text":"ImmutableList","line":2199,"char":75874,"type":"identifier"},{"text":"of","line":2199,"char":75888,"type":"identifier"},{"text":"Clock","line":2205,"char":76017,"type":"identifier"},{"text":"IncrementingFakeClock","line":2205,"char":76039,"type":"identifier"},{"text":"TimeUnit","line":2205,"char":76061,"type":"identifier"},{"text":"SECONDS","line":2205,"char":76070,"type":"identifier"},{"text":"toNanos","line":2205,"char":76078,"type":"identifier"},{"text":"BuckEventBus","line":2206,"char":76095,"type":"identifier"},{"text":"BuckEventBusFactory","line":2206,"char":76119,"type":"identifier"},{"text":"newInstance","line":2206,"char":76139,"type":"identifier"},{"text":"fakeClock","line":2206,"char":76151,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2207,"char":76167,"type":"identifier"},{"text":"createSuperConsole","line":2207,"char":76207,"type":"identifier"},{"text":"fakeClock","line":2207,"char":76226,"type":"identifier"},{"text":"eventBus","line":2207,"char":76237,"type":"identifier"},{"text":"eventBus","line":2209,"char":76253,"type":"identifier"},{"text":"post","line":2209,"char":76262,"type":"identifier"},{"text":"ConsoleEvent","line":2209,"char":76267,"type":"identifier"},{"text":"info","line":2209,"char":76280,"type":"identifier"},{"text":"validateConsoleWithLogLines","line":2211,"char":76308,"type":"identifier"},{"text":"listener","line":2212,"char":76345,"type":"identifier"},{"text":"ImmutableList","line":2214,"char":76375,"type":"identifier"},{"text":"of","line":2214,"char":76389,"type":"identifier"},{"text":"ImmutableList","line":2215,"char":76403,"type":"identifier"},{"text":"of","line":2215,"char":76417,"type":"identifier"},{"text":"eventBus","line":2217,"char":76443,"type":"identifier"},{"text":"postWithoutConfiguring","line":2217,"char":76452,"type":"identifier"},{"text":"configureTestEventAtTime","line":2218,"char":76484,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2219,"char":76522,"type":"identifier"},{"text":"started","line":2219,"char":76545,"type":"identifier"},{"text":"TimeUnit","line":2221,"char":76584,"type":"identifier"},{"text":"MILLISECONDS","line":2221,"char":76593,"type":"identifier"},{"text":"validateConsole","line":2224,"char":76645,"type":"identifier"},{"text":"listener","line":2224,"char":76661,"type":"identifier"},{"text":"ImmutableList","line":2224,"char":76675,"type":"identifier"},{"text":"of","line":2224,"char":76689,"type":"identifier"},{"text":"eventBus","line":2226,"char":76732,"type":"identifier"},{"text":"postWithoutConfiguring","line":2226,"char":76741,"type":"identifier"},{"text":"configureTestEventAtTime","line":2227,"char":76773,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2228,"char":76815,"type":"identifier"},{"text":"Finished","line":2228,"char":76838,"type":"identifier"},{"text":"TimeUnit","line":2230,"char":76878,"type":"identifier"},{"text":"MILLISECONDS","line":2230,"char":76887,"type":"identifier"},{"text":"validateConsole","line":2233,"char":76924,"type":"identifier"},{"text":"listener","line":2233,"char":76940,"type":"identifier"},{"text":"ImmutableList","line":2233,"char":76954,"type":"identifier"},{"text":"of","line":2233,"char":76968,"type":"identifier"},{"text":"IOException","line":2237,"char":77076,"type":"identifier"},{"text":"Clock","line":2238,"char":77094,"type":"identifier"},{"text":"IncrementingFakeClock","line":2238,"char":77116,"type":"identifier"},{"text":"TimeUnit","line":2238,"char":77138,"type":"identifier"},{"text":"SECONDS","line":2238,"char":77147,"type":"identifier"},{"text":"toNanos","line":2238,"char":77155,"type":"identifier"},{"text":"BuckEventBus","line":2239,"char":77172,"type":"identifier"},{"text":"BuckEventBusFactory","line":2239,"char":77196,"type":"identifier"},{"text":"newInstance","line":2239,"char":77216,"type":"identifier"},{"text":"fakeClock","line":2239,"char":77228,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2240,"char":77249,"type":"identifier"},{"text":"createSuperConsole","line":2240,"char":77289,"type":"identifier"},{"text":"fakeClock","line":2240,"char":77308,"type":"identifier"},{"text":"eventBus","line":2240,"char":77319,"type":"identifier"},{"text":"FakeThreadStateRenderer","line":2242,"char":77339,"type":"identifier"},{"text":"FakeThreadStateRenderer","line":2243,"char":77392,"type":"identifier"},{"text":"ImmutableList","line":2243,"char":77416,"type":"identifier"},{"text":"of","line":2243,"char":77430,"type":"identifier"},{"text":"ImmutableList","line":2244,"char":77461,"type":"identifier"},{"text":"Builder","line":2244,"char":77475,"type":"identifier"},{"text":"String","line":2244,"char":77483,"type":"identifier"},{"text":"ImmutableList","line":2246,"char":77505,"type":"identifier"},{"text":"String","line":2246,"char":77519,"type":"identifier"},{"text":"ImmutableList","line":2246,"char":77540,"type":"identifier"},{"text":"of","line":2246,"char":77554,"type":"identifier"},{"text":"compareOutput","line":2253,"char":77751,"type":"identifier"},{"text":"listener","line":2253,"char":77765,"type":"identifier"},{"text":"fakeRenderer","line":2253,"char":77775,"type":"identifier"},{"text":"fullOutput","line":2253,"char":77789,"type":"identifier"},{"text":"compareOutput","line":2254,"char":77815,"type":"identifier"},{"text":"listener","line":2254,"char":77829,"type":"identifier"},{"text":"fakeRenderer","line":2254,"char":77839,"type":"identifier"},{"text":"fullOutput","line":2254,"char":77853,"type":"identifier"},{"text":"compareOutput","line":2255,"char":77879,"type":"identifier"},{"text":"listener","line":2255,"char":77893,"type":"identifier"},{"text":"fakeRenderer","line":2255,"char":77903,"type":"identifier"},{"text":"fullOutput","line":2255,"char":77917,"type":"identifier"},{"text":"compareOutput","line":2256,"char":77939,"type":"identifier"},{"text":"listener","line":2256,"char":77953,"type":"identifier"},{"text":"fakeRenderer","line":2256,"char":77963,"type":"identifier"},{"text":"fullOutput","line":2256,"char":77977,"type":"identifier"},{"text":"lines","line":2258,"char":78000,"type":"identifier"},{"text":"ImmutableList","line":2258,"char":78008,"type":"identifier"},{"text":"builder","line":2258,"char":78022,"type":"identifier"},{"text":"listener","line":2259,"char":78039,"type":"identifier"},{"text":"renderLines","line":2259,"char":78048,"type":"identifier"},{"text":"fakeRenderer","line":2259,"char":78060,"type":"identifier"},{"text":"lines","line":2259,"char":78074,"type":"identifier"},{"text":"assertThat","line":2260,"char":78098,"type":"identifier"},{"text":"lines","line":2261,"char":78120,"type":"identifier"},{"text":"build","line":2261,"char":78126,"type":"identifier"},{"text":"equalTo","line":2262,"char":78145,"type":"identifier"},{"text":"ImmutableList","line":2263,"char":78168,"type":"identifier"},{"text":"of","line":2263,"char":78182,"type":"identifier"},{"text":"assertThat","line":2268,"char":78378,"type":"identifier"},{"text":"fakeRenderer","line":2268,"char":78389,"type":"identifier"},{"text":"lastSortWasByTime","line":2268,"char":78402,"type":"identifier"},{"text":"is","line":2268,"char":78423,"type":"identifier"},{"text":"lines","line":2270,"char":78441,"type":"identifier"},{"text":"ImmutableList","line":2270,"char":78449,"type":"identifier"},{"text":"builder","line":2270,"char":78463,"type":"identifier"},{"text":"listener","line":2271,"char":78480,"type":"identifier"},{"text":"renderLines","line":2271,"char":78489,"type":"identifier"},{"text":"fakeRenderer","line":2271,"char":78501,"type":"identifier"},{"text":"lines","line":2271,"char":78515,"type":"identifier"},{"text":"assertThat","line":2272,"char":78539,"type":"identifier"},{"text":"lines","line":2273,"char":78561,"type":"identifier"},{"text":"build","line":2273,"char":78567,"type":"identifier"},{"text":"equalTo","line":2274,"char":78586,"type":"identifier"},{"text":"ImmutableList","line":2275,"char":78609,"type":"identifier"},{"text":"of","line":2275,"char":78623,"type":"identifier"},{"text":"assertThat","line":2278,"char":78735,"type":"identifier"},{"text":"fakeRenderer","line":2278,"char":78746,"type":"identifier"},{"text":"lastSortWasByTime","line":2278,"char":78759,"type":"identifier"},{"text":"is","line":2278,"char":78780,"type":"identifier"},{"text":"lines","line":2280,"char":78798,"type":"identifier"},{"text":"ImmutableList","line":2280,"char":78806,"type":"identifier"},{"text":"builder","line":2280,"char":78820,"type":"identifier"},{"text":"listener","line":2281,"char":78837,"type":"identifier"},{"text":"renderLines","line":2281,"char":78846,"type":"identifier"},{"text":"fakeRenderer","line":2281,"char":78858,"type":"identifier"},{"text":"lines","line":2281,"char":78872,"type":"identifier"},{"text":"assertThat","line":2282,"char":78896,"type":"identifier"},{"text":"lines","line":2283,"char":78918,"type":"identifier"},{"text":"build","line":2283,"char":78924,"type":"identifier"},{"text":"equalTo","line":2284,"char":78943,"type":"identifier"},{"text":"ImmutableList","line":2285,"char":78966,"type":"identifier"},{"text":"of","line":2285,"char":78980,"type":"identifier"},{"text":"assertThat","line":2287,"char":79045,"type":"identifier"},{"text":"fakeRenderer","line":2287,"char":79056,"type":"identifier"},{"text":"lastSortWasByTime","line":2287,"char":79069,"type":"identifier"},{"text":"is","line":2287,"char":79090,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2292,"char":79150,"type":"identifier"},{"text":"ImmutableList","line":2294,"char":79214,"type":"identifier"},{"text":"String","line":2294,"char":79228,"type":"identifier"},{"text":"validateConsoleWithLogLines","line":2295,"char":79249,"type":"identifier"},{"text":"listener","line":2295,"char":79277,"type":"identifier"},{"text":"timeMs","line":2295,"char":79287,"type":"identifier"},{"text":"lines","line":2295,"char":79295,"type":"identifier"},{"text":"ImmutableList","line":2295,"char":79302,"type":"identifier"},{"text":"of","line":2295,"char":79316,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2299,"char":79378,"type":"identifier"},{"text":"ImmutableList","line":2301,"char":79442,"type":"identifier"},{"text":"String","line":2301,"char":79456,"type":"identifier"},{"text":"ImmutableList","line":2302,"char":79477,"type":"identifier"},{"text":"String","line":2302,"char":79491,"type":"identifier"},{"text":"validateConsoleWithStdOutAndErr","line":2303,"char":79515,"type":"identifier"},{"text":"listener","line":2304,"char":79556,"type":"identifier"},{"text":"timeMs","line":2305,"char":79574,"type":"identifier"},{"text":"lines","line":2306,"char":79590,"type":"identifier"},{"text":"logLines","line":2307,"char":79605,"type":"identifier"},{"text":"Optional","line":2308,"char":79623,"type":"identifier"},{"text":"of","line":2308,"char":79632,"type":"identifier"},{"text":"Optional","line":2309,"char":79648,"type":"identifier"},{"text":"of","line":2309,"char":79657,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2313,"char":79725,"type":"identifier"},{"text":"ImmutableList","line":2315,"char":79789,"type":"identifier"},{"text":"String","line":2315,"char":79803,"type":"identifier"},{"text":"ImmutableList","line":2316,"char":79824,"type":"identifier"},{"text":"String","line":2316,"char":79838,"type":"identifier"},{"text":"Optional","line":2317,"char":79862,"type":"identifier"},{"text":"String","line":2317,"char":79871,"type":"identifier"},{"text":"Optional","line":2318,"char":79893,"type":"identifier"},{"text":"String","line":2318,"char":79902,"type":"identifier"},{"text":"stdout","line":2320,"char":79929,"type":"identifier"},{"text":"isPresent","line":2320,"char":79936,"type":"identifier"},{"text":"assertThat","line":2321,"char":79957,"type":"identifier"},{"text":"TestConsole","line":2321,"char":79970,"type":"identifier"},{"text":"listener","line":2321,"char":79983,"type":"identifier"},{"text":"console","line":2321,"char":79992,"type":"identifier"},{"text":"getTextWrittenToStdOut","line":2321,"char":80001,"type":"identifier"},{"text":"equalTo","line":2321,"char":80027,"type":"identifier"},{"text":"stdout","line":2321,"char":80035,"type":"identifier"},{"text":"get","line":2321,"char":80042,"type":"identifier"},{"text":"stderr","line":2323,"char":80065,"type":"identifier"},{"text":"isPresent","line":2323,"char":80072,"type":"identifier"},{"text":"assertThat","line":2324,"char":80093,"type":"identifier"},{"text":"TestConsole","line":2324,"char":80106,"type":"identifier"},{"text":"listener","line":2324,"char":80119,"type":"identifier"},{"text":"console","line":2324,"char":80128,"type":"identifier"},{"text":"getTextWrittenToStdErr","line":2324,"char":80137,"type":"identifier"},{"text":"equalTo","line":2324,"char":80163,"type":"identifier"},{"text":"stderr","line":2324,"char":80171,"type":"identifier"},{"text":"get","line":2324,"char":80178,"type":"identifier"},{"text":"assertThat","line":2326,"char":80197,"type":"identifier"},{"text":"listener","line":2326,"char":80208,"type":"identifier"},{"text":"createRenderLinesAtTime","line":2326,"char":80217,"type":"identifier"},{"text":"timeMs","line":2326,"char":80241,"type":"identifier"},{"text":"equalTo","line":2326,"char":80250,"type":"identifier"},{"text":"lines","line":2326,"char":80258,"type":"identifier"},{"text":"assertThat","line":2327,"char":80271,"type":"identifier"},{"text":"listener","line":2327,"char":80282,"type":"identifier"},{"text":"createLogRenderLines","line":2327,"char":80291,"type":"identifier"},{"text":"equalTo","line":2327,"char":80315,"type":"identifier"},{"text":"logLines","line":2327,"char":80323,"type":"identifier"},{"text":"Clock","line":2332,"char":80420,"type":"identifier"},{"text":"IncrementingFakeClock","line":2332,"char":80442,"type":"identifier"},{"text":"TimeUnit","line":2332,"char":80464,"type":"identifier"},{"text":"SECONDS","line":2332,"char":80473,"type":"identifier"},{"text":"toNanos","line":2332,"char":80481,"type":"identifier"},{"text":"BuckEventBus","line":2333,"char":80498,"type":"identifier"},{"text":"BuckEventBusFactory","line":2333,"char":80522,"type":"identifier"},{"text":"newInstance","line":2333,"char":80542,"type":"identifier"},{"text":"fakeClock","line":2333,"char":80554,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2334,"char":80570,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2335,"char":80622,"type":"identifier"},{"text":"SuperConsoleConfig","line":2336,"char":80668,"type":"identifier"},{"text":"FakeBuckConfig","line":2336,"char":80687,"type":"identifier"},{"text":"builder","line":2336,"char":80702,"type":"identifier"},{"text":"build","line":2336,"char":80712,"type":"identifier"},{"text":"TestConsole","line":2337,"char":80738,"type":"identifier"},{"text":"fakeClock","line":2338,"char":80765,"type":"identifier"},{"text":"silentSummaryVerbosity","line":2339,"char":80788,"type":"identifier"},{"text":"DefaultExecutionEnvironment","line":2340,"char":80828,"type":"identifier"},{"text":"ImmutableMap","line":2341,"char":80873,"type":"identifier"},{"text":"copyOf","line":2341,"char":80886,"type":"identifier"},{"text":"System","line":2341,"char":80893,"type":"identifier"},{"text":"getenv","line":2341,"char":80900,"type":"identifier"},{"text":"System","line":2342,"char":80927,"type":"identifier"},{"text":"getProperties","line":2342,"char":80934,"type":"identifier"},{"text":"Optional","line":2343,"char":80964,"type":"identifier"},{"text":"empty","line":2343,"char":80973,"type":"identifier"},{"text":"Locale","line":2345,"char":81075,"type":"identifier"},{"text":"GERMAN","line":2345,"char":81082,"type":"identifier"},{"text":"logPath","line":2346,"char":81102,"type":"identifier"},{"text":"timeZone","line":2347,"char":81123,"type":"identifier"},{"text":"eventBus","line":2348,"char":81138,"type":"identifier"},{"text":"register","line":2348,"char":81147,"type":"identifier"},{"text":"listener","line":2348,"char":81156,"type":"identifier"},{"text":"eventBus","line":2350,"char":81172,"type":"identifier"},{"text":"postWithoutConfiguring","line":2350,"char":81181,"type":"identifier"},{"text":"configureTestEventAtTime","line":2351,"char":81213,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2352,"char":81251,"type":"identifier"},{"text":"started","line":2352,"char":81274,"type":"identifier"},{"text":"TimeUnit","line":2354,"char":81313,"type":"identifier"},{"text":"MILLISECONDS","line":2354,"char":81322,"type":"identifier"},{"text":"validateConsole","line":2357,"char":81374,"type":"identifier"},{"text":"listener","line":2357,"char":81390,"type":"identifier"},{"text":"ImmutableList","line":2357,"char":81404,"type":"identifier"},{"text":"of","line":2357,"char":81418,"type":"identifier"},{"text":"eventBus","line":2359,"char":81461,"type":"identifier"},{"text":"postWithoutConfiguring","line":2359,"char":81470,"type":"identifier"},{"text":"configureTestEventAtTime","line":2360,"char":81502,"type":"identifier"},{"text":"ProjectGenerationEvent","line":2361,"char":81544,"type":"identifier"},{"text":"Finished","line":2361,"char":81567,"type":"identifier"},{"text":"TimeUnit","line":2363,"char":81607,"type":"identifier"},{"text":"MILLISECONDS","line":2363,"char":81616,"type":"identifier"},{"text":"validateConsole","line":2366,"char":81653,"type":"identifier"},{"text":"listener","line":2366,"char":81669,"type":"identifier"},{"text":"ImmutableList","line":2366,"char":81683,"type":"identifier"},{"text":"of","line":2366,"char":81697,"type":"identifier"},{"text":"Clock","line":2371,"char":81821,"type":"identifier"},{"text":"IncrementingFakeClock","line":2371,"char":81843,"type":"identifier"},{"text":"TimeUnit","line":2371,"char":81865,"type":"identifier"},{"text":"SECONDS","line":2371,"char":81874,"type":"identifier"},{"text":"toNanos","line":2371,"char":81882,"type":"identifier"},{"text":"BuckEventBus","line":2372,"char":81899,"type":"identifier"},{"text":"BuckEventBusFactory","line":2372,"char":81923,"type":"identifier"},{"text":"newInstance","line":2372,"char":81943,"type":"identifier"},{"text":"fakeClock","line":2372,"char":81955,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2373,"char":81971,"type":"identifier"},{"text":"createSuperConsole","line":2373,"char":82011,"type":"identifier"},{"text":"fakeClock","line":2373,"char":82030,"type":"identifier"},{"text":"eventBus","line":2373,"char":82041,"type":"identifier"},{"text":"BuildTarget","line":2375,"char":82057,"type":"identifier"},{"text":"BuildTargetFactory","line":2375,"char":82082,"type":"identifier"},{"text":"newInstance","line":2375,"char":82101,"type":"identifier"},{"text":"ImmutableSet","line":2376,"char":82136,"type":"identifier"},{"text":"BuildTarget","line":2376,"char":82149,"type":"identifier"},{"text":"ImmutableSet","line":2376,"char":82177,"type":"identifier"},{"text":"of","line":2376,"char":82190,"type":"identifier"},{"text":"fakeTarget","line":2376,"char":82193,"type":"identifier"},{"text":"Iterable","line":2377,"char":82210,"type":"identifier"},{"text":"String","line":2377,"char":82219,"type":"identifier"},{"text":"buildArgs","line":2377,"char":82227,"type":"identifier"},{"text":"Iterables","line":2377,"char":82239,"type":"identifier"},{"text":"transform","line":2377,"char":82249,"type":"identifier"},{"text":"buildTargets","line":2377,"char":82259,"type":"identifier"},{"text":"Object","line":2377,"char":82273,"type":"identifier"},{"text":"toString","line":2377,"char":82281,"type":"identifier"},{"text":"ParseEvent","line":2381,"char":82431,"type":"identifier"},{"text":"Started","line":2381,"char":82442,"type":"identifier"},{"text":"ParseEvent","line":2381,"char":82465,"type":"identifier"},{"text":"started","line":2381,"char":82476,"type":"identifier"},{"text":"buildTargets","line":2381,"char":82484,"type":"identifier"},{"text":"eventBus","line":2382,"char":82503,"type":"identifier"},{"text":"postWithoutConfiguring","line":2382,"char":82512,"type":"identifier"},{"text":"configureTestEventAtTime","line":2383,"char":82544,"type":"identifier"},{"text":"parseStarted","line":2384,"char":82582,"type":"identifier"},{"text":"TimeUnit","line":2386,"char":82626,"type":"identifier"},{"text":"MILLISECONDS","line":2386,"char":82635,"type":"identifier"},{"text":"eventBus","line":2388,"char":82686,"type":"identifier"},{"text":"postWithoutConfiguring","line":2388,"char":82695,"type":"identifier"},{"text":"configureTestEventAtTime","line":2389,"char":82727,"type":"identifier"},{"text":"ParseEvent","line":2390,"char":82765,"type":"identifier"},{"text":"finished","line":2390,"char":82776,"type":"identifier"},{"text":"parseStarted","line":2390,"char":82785,"type":"identifier"},{"text":"Optional","line":2390,"char":82799,"type":"identifier"},{"text":"empty","line":2390,"char":82808,"type":"identifier"},{"text":"TimeUnit","line":2392,"char":82848,"type":"identifier"},{"text":"MILLISECONDS","line":2392,"char":82857,"type":"identifier"},{"text":"ActionGraphEvent","line":2395,"char":82909,"type":"identifier"},{"text":"Started","line":2395,"char":82926,"type":"identifier"},{"text":"ActionGraphEvent","line":2395,"char":82955,"type":"identifier"},{"text":"started","line":2395,"char":82972,"type":"identifier"},{"text":"eventBus","line":2396,"char":82987,"type":"identifier"},{"text":"postWithoutConfiguring","line":2396,"char":82996,"type":"identifier"},{"text":"configureTestEventAtTime","line":2397,"char":83028,"type":"identifier"},{"text":"actionGraphStarted","line":2398,"char":83066,"type":"identifier"},{"text":"TimeUnit","line":2400,"char":83116,"type":"identifier"},{"text":"MILLISECONDS","line":2400,"char":83125,"type":"identifier"},{"text":"validateConsole","line":2403,"char":83177,"type":"identifier"},{"text":"listener","line":2403,"char":83193,"type":"identifier"},{"text":"ImmutableList","line":2403,"char":83209,"type":"identifier"},{"text":"of","line":2403,"char":83223,"type":"identifier"},{"text":"eventBus","line":2405,"char":83269,"type":"identifier"},{"text":"postWithoutConfiguring","line":2405,"char":83278,"type":"identifier"},{"text":"configureTestEventAtTime","line":2406,"char":83310,"type":"identifier"},{"text":"ActionGraphEvent","line":2407,"char":83348,"type":"identifier"},{"text":"finished","line":2407,"char":83365,"type":"identifier"},{"text":"actionGraphStarted","line":2407,"char":83374,"type":"identifier"},{"text":"TimeUnit","line":2409,"char":83425,"type":"identifier"},{"text":"MILLISECONDS","line":2409,"char":83434,"type":"identifier"},{"text":"BuildEvent","line":2412,"char":83486,"type":"identifier"},{"text":"Started","line":2412,"char":83497,"type":"identifier"},{"text":"BuildEvent","line":2412,"char":83525,"type":"identifier"},{"text":"started","line":2412,"char":83536,"type":"identifier"},{"text":"buildArgs","line":2412,"char":83544,"type":"identifier"},{"text":"eventBus","line":2413,"char":83560,"type":"identifier"},{"text":"postWithoutConfiguring","line":2413,"char":83569,"type":"identifier"},{"text":"configureTestEventAtTime","line":2414,"char":83601,"type":"identifier"},{"text":"buildEventStarted","line":2415,"char":83639,"type":"identifier"},{"text":"TimeUnit","line":2417,"char":83688,"type":"identifier"},{"text":"MILLISECONDS","line":2417,"char":83697,"type":"identifier"},{"text":"String","line":2421,"char":83756,"type":"identifier"},{"text":"validateConsole","line":2423,"char":83827,"type":"identifier"},{"text":"listener","line":2423,"char":83843,"type":"identifier"},{"text":"ImmutableList","line":2423,"char":83859,"type":"identifier"},{"text":"of","line":2423,"char":83873,"type":"identifier"},{"text":"parsingLine","line":2424,"char":83885,"type":"identifier"},{"text":"DOWNLOAD_STRING","line":2425,"char":83906,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2429,"char":83971,"type":"identifier"},{"text":"Clock","line":2429,"char":84019,"type":"identifier"},{"text":"BuckEventBus","line":2429,"char":84032,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2430,"char":84061,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2431,"char":84113,"type":"identifier"},{"text":"emptySuperConsoleConfig","line":2432,"char":84155,"type":"identifier"},{"text":"TestConsole","line":2433,"char":84196,"type":"identifier"},{"text":"clock","line":2434,"char":84223,"type":"identifier"},{"text":"silentSummaryVerbosity","line":2435,"char":84242,"type":"identifier"},{"text":"DefaultExecutionEnvironment","line":2436,"char":84282,"type":"identifier"},{"text":"ImmutableMap","line":2437,"char":84327,"type":"identifier"},{"text":"copyOf","line":2437,"char":84340,"type":"identifier"},{"text":"System","line":2437,"char":84347,"type":"identifier"},{"text":"getenv","line":2437,"char":84354,"type":"identifier"},{"text":"System","line":2438,"char":84381,"type":"identifier"},{"text":"getProperties","line":2438,"char":84388,"type":"identifier"},{"text":"Optional","line":2439,"char":84418,"type":"identifier"},{"text":"empty","line":2439,"char":84427,"type":"identifier"},{"text":"Locale","line":2440,"char":84448,"type":"identifier"},{"text":"US","line":2440,"char":84455,"type":"identifier"},{"text":"logPath","line":2441,"char":84471,"type":"identifier"},{"text":"timeZone","line":2442,"char":84492,"type":"identifier"},{"text":"eventBus","line":2443,"char":84507,"type":"identifier"},{"text":"register","line":2443,"char":84516,"type":"identifier"},{"text":"listener","line":2443,"char":84525,"type":"identifier"},{"text":"listener","line":2444,"char":84547,"type":"identifier"},{"text":"Path","line":2447,"char":84572,"type":"identifier"},{"text":"IOException","line":2447,"char":84604,"type":"identifier"},{"text":"tmp","line":2448,"char":84629,"type":"identifier"},{"text":"newFile","line":2448,"char":84633,"type":"identifier"},{"text":"SuperConsoleEventBusListener","line":2452,"char":84685,"type":"identifier"},{"text":"FakeThreadStateRenderer","line":2453,"char":84730,"type":"identifier"},{"text":"ImmutableList","line":2454,"char":84774,"type":"identifier"},{"text":"String","line":2454,"char":84788,"type":"identifier"},{"text":"ImmutableList","line":2456,"char":84834,"type":"identifier"},{"text":"Builder","line":2456,"char":84848,"type":"identifier"},{"text":"String","line":2456,"char":84856,"type":"identifier"},{"text":"lines","line":2457,"char":84875,"type":"identifier"},{"text":"ImmutableList","line":2457,"char":84883,"type":"identifier"},{"text":"builder","line":2457,"char":84897,"type":"identifier"},{"text":"listener","line":2458,"char":84912,"type":"identifier"},{"text":"renderLines","line":2458,"char":84921,"type":"identifier"},{"text":"fakeRenderer","line":2458,"char":84933,"type":"identifier"},{"text":"lines","line":2458,"char":84947,"type":"identifier"},{"text":"maxLines","line":2458,"char":84954,"type":"identifier"},{"text":"assertThat","line":2459,"char":84976,"type":"identifier"},{"text":"lines","line":2459,"char":84987,"type":"identifier"},{"text":"build","line":2459,"char":84993,"type":"identifier"},{"text":"equalTo","line":2459,"char":85002,"type":"identifier"},{"text":"fullOutput","line":2459,"char":85010,"type":"identifier"},{"text":"assertThat","line":2460,"char":85028,"type":"identifier"},{"text":"fakeRenderer","line":2460,"char":85039,"type":"identifier"},{"text":"lastSortWasByTime","line":2460,"char":85052,"type":"identifier"},{"text":"is","line":2460,"char":85073,"type":"identifier"}]},"highlight":{"content":[" listener = createSuperConsole(fakeClock, eventBus);\n\n    eventBus.post(ConsoleEvent.info(\"<em>Hello</em> world","(),\n        ImmutableList.of(\"<em>Hello</em> world!\"));\n\n    eventBus.postWithoutConfiguring"]}},{"_index":"codesearch","_type":"code","_id":"e1f75a4979e2352a25de95b179b598a5a491f1c4","_score":0.0,"_source":{"filename":"test/com/facebook/buck/util/cache/WatchedFileHashCacheTest.java","content":"/*\n * Copyright 2015-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.util.cache;\n\nimport static com.facebook.buck.testutil.WatchEventsForTests.createOverflowEvent;\nimport static com.facebook.buck.testutil.WatchEventsForTests.createPathEvent;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertThat;\n\nimport com.facebook.buck.io.ProjectFilesystem;\nimport com.facebook.buck.testutil.FakeProjectFilesystem;\nimport com.facebook.buck.testutil.integration.TemporaryPaths;\nimport com.google.common.base.Charsets;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.hash.HashCode;\n\nimport org.hamcrest.junit.ExpectedException;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardWatchEventKinds;\n\npublic class WatchedFileHashCacheTest {\n\n  @Rule\n  public TemporaryPaths tmp = new TemporaryPaths();\n\n  @Rule\n  public ExpectedException expectedException = ExpectedException.none();\n\n  @Test\n  public void whenNotifiedOfOverflowEventCacheIsCleared() throws IOException {\n    WatchedFileHashCache cache = new WatchedFileHashCache(\n        new FakeProjectFilesystem());\n    Path path = new File(\"SomeClass.java\").toPath();\n    HashCodeAndFileType value = HashCodeAndFileType.ofFile(HashCode.fromInt(42));\n    cache.loadingCache.put(path, value);\n    cache.sizeCache.put(path, 1234L);\n    cache.onFileSystemChange(createOverflowEvent());\n    assertFalse(\"Cache should not contain path\", cache.willGet(path));\n    assertThat(\"Cache should not contain path\", cache.sizeCache.getIfPresent(path), nullValue());\n  }\n\n  @Test\n  public void whenNotifiedOfCreateEventCacheEntryIsRemoved() throws IOException {\n    WatchedFileHashCache cache = new WatchedFileHashCache(\n        new FakeProjectFilesystem());\n    Path path = Paths.get(\"SomeClass.java\");\n    HashCodeAndFileType value = HashCodeAndFileType.ofFile(HashCode.fromInt(42));\n    cache.loadingCache.put(path, value);\n    cache.sizeCache.put(path, 1234L);\n    cache.onFileSystemChange(createPathEvent(path, StandardWatchEventKinds.ENTRY_CREATE));\n    assertFalse(\"Cache should not contain path\", cache.willGet(path));\n    assertThat(\"Cache should not contain path\", cache.sizeCache.getIfPresent(path), nullValue());\n  }\n\n  @Test\n  public void whenNotifiedOfChangeEventCacheEntryIsRemoved() throws IOException {\n    WatchedFileHashCache cache =\n        new WatchedFileHashCache(new FakeProjectFilesystem());\n    Path path = Paths.get(\"SomeClass.java\");\n    HashCodeAndFileType value = HashCodeAndFileType.ofFile(HashCode.fromInt(42));\n    cache.loadingCache.put(path, value);\n    cache.sizeCache.put(path, 1234L);\n    cache.onFileSystemChange(createPathEvent(path, StandardWatchEventKinds.ENTRY_MODIFY));\n    assertFalse(\"Cache should not contain path\", cache.willGet(path));\n    assertThat(\"Cache should not contain path\", cache.sizeCache.getIfPresent(path), nullValue());\n  }\n\n  @Test\n  public void whenNotifiedOfDeleteEventCacheEntryIsRemoved() throws IOException {\n    WatchedFileHashCache cache =\n        new WatchedFileHashCache(new FakeProjectFilesystem());\n    Path path = Paths.get(\"SomeClass.java\");\n    HashCodeAndFileType value = HashCodeAndFileType.ofFile(HashCode.fromInt(42));\n    cache.loadingCache.put(path, value);\n    cache.sizeCache.put(path, 1234L);\n    cache.onFileSystemChange(createPathEvent(path, StandardWatchEventKinds.ENTRY_DELETE));\n    assertFalse(\"Cache should not contain path\", cache.willGet(path));\n    assertThat(\"Cache should not contain path\", cache.sizeCache.getIfPresent(path), nullValue());\n  }\n\n  @Test\n  public void directoryHashChangesWhenFileInsideDirectoryChanges() throws IOException {\n    ProjectFilesystem filesystem = new ProjectFilesystem(tmp.getRoot());\n    WatchedFileHashCache cache = new WatchedFileHashCache(filesystem);\n    tmp.newFolder(\"foo\", \"bar\");\n    Path inputFile = tmp.newFile(\"foo/bar/baz\");\n    Files.write(inputFile, \"Hello world\".getBytes(Charsets.UTF_8));\n\n    Path dir = Paths.get(\"foo/bar\");\n    HashCode dirHash = cache.get(filesystem.resolve(dir));\n    Files.write(inputFile, \"Goodbye world\".getBytes(Charsets.UTF_8));\n    cache.onFileSystemChange(\n        createPathEvent(\n            dir.resolve(\"baz\"),\n            StandardWatchEventKinds.ENTRY_MODIFY));\n    HashCode dirHash2 = cache.get(filesystem.resolve(dir));\n    assertNotEquals(dirHash, dirHash2);\n  }\n\n  @Test\n  public void whenNotifiedOfChangeToSubPathThenDirCacheEntryIsRemoved() throws IOException {\n    WatchedFileHashCache cache =\n        new WatchedFileHashCache(new FakeProjectFilesystem());\n    Path dir = Paths.get(\"foo/bar/baz\");\n    HashCodeAndFileType value =\n        HashCodeAndFileType.ofDirectory(HashCode.fromInt(42), ImmutableSet.of());\n    cache.loadingCache.put(dir, value);\n    cache.sizeCache.put(dir, 1234L);\n    cache.onFileSystemChange(\n        createPathEvent(\n            dir.resolve(\"blech\"),\n            StandardWatchEventKinds.ENTRY_CREATE));\n    assertFalse(\"Cache should not contain path\", cache.willGet(dir));\n    assertThat(\"Cache should not contain path\", cache.sizeCache.getIfPresent(dir), nullValue());\n  }\n\n}\n","repository":"https://github.com/facebook/buck.git","language":"java","tokens":[{"text":"com","line":17,"char":615,"type":"package"},{"text":"facebook","line":17,"char":619,"type":"package"},{"text":"buck","line":17,"char":628,"type":"package"},{"text":"util","line":17,"char":633,"type":"package"},{"text":"cache","line":17,"char":638,"type":"package"},{"text":"com","line":19,"char":660,"type":"import"},{"text":"facebook","line":19,"char":664,"type":"import"},{"text":"buck","line":19,"char":673,"type":"import"},{"text":"testutil","line":19,"char":678,"type":"import"},{"text":"WatchEventsForTests","line":19,"char":687,"type":"import"},{"text":"createOverflowEvent","line":19,"char":707,"type":"import"},{"text":"com","line":20,"char":742,"type":"import"},{"text":"facebook","line":20,"char":746,"type":"import"},{"text":"buck","line":20,"char":755,"type":"import"},{"text":"testutil","line":20,"char":760,"type":"import"},{"text":"WatchEventsForTests","line":20,"char":769,"type":"import"},{"text":"createPathEvent","line":20,"char":789,"type":"import"},{"text":"org","line":21,"char":820,"type":"import"},{"text":"hamcrest","line":21,"char":824,"type":"import"},{"text":"Matchers","line":21,"char":833,"type":"import"},{"text":"nullValue","line":21,"char":842,"type":"import"},{"text":"org","line":22,"char":867,"type":"import"},{"text":"junit","line":22,"char":871,"type":"import"},{"text":"Assert","line":22,"char":877,"type":"import"},{"text":"assertFalse","line":22,"char":884,"type":"import"},{"text":"org","line":23,"char":911,"type":"import"},{"text":"junit","line":23,"char":915,"type":"import"},{"text":"Assert","line":23,"char":921,"type":"import"},{"text":"assertNotEquals","line":23,"char":928,"type":"import"},{"text":"org","line":24,"char":959,"type":"import"},{"text":"junit","line":24,"char":963,"type":"import"},{"text":"Assert","line":24,"char":969,"type":"import"},{"text":"assertThat","line":24,"char":976,"type":"import"},{"text":"com","line":26,"char":996,"type":"import"},{"text":"facebook","line":26,"char":1000,"type":"import"},{"text":"buck","line":26,"char":1009,"type":"import"},{"text":"io","line":26,"char":1014,"type":"import"},{"text":"ProjectFilesystem","line":26,"char":1017,"type":"import"},{"text":"com","line":27,"char":1043,"type":"import"},{"text":"facebook","line":27,"char":1047,"type":"import"},{"text":"buck","line":27,"char":1056,"type":"import"},{"text":"testutil","line":27,"char":1061,"type":"import"},{"text":"FakeProjectFilesystem","line":27,"char":1070,"type":"import"},{"text":"com","line":28,"char":1100,"type":"import"},{"text":"facebook","line":28,"char":1104,"type":"import"},{"text":"buck","line":28,"char":1113,"type":"import"},{"text":"testutil","line":28,"char":1118,"type":"import"},{"text":"integration","line":28,"char":1127,"type":"import"},{"text":"TemporaryPaths","line":28,"char":1139,"type":"import"},{"text":"com","line":29,"char":1162,"type":"import"},{"text":"google","line":29,"char":1166,"type":"import"},{"text":"common","line":29,"char":1173,"type":"import"},{"text":"base","line":29,"char":1180,"type":"import"},{"text":"Charsets","line":29,"char":1185,"type":"import"},{"text":"com","line":30,"char":1202,"type":"import"},{"text":"google","line":30,"char":1206,"type":"import"},{"text":"common","line":30,"char":1213,"type":"import"},{"text":"collect","line":30,"char":1220,"type":"import"},{"text":"ImmutableSet","line":30,"char":1228,"type":"import"},{"text":"com","line":31,"char":1249,"type":"import"},{"text":"google","line":31,"char":1253,"type":"import"},{"text":"common","line":31,"char":1260,"type":"import"},{"text":"hash","line":31,"char":1267,"type":"import"},{"text":"HashCode","line":31,"char":1272,"type":"import"},{"text":"org","line":33,"char":1290,"type":"import"},{"text":"hamcrest","line":33,"char":1294,"type":"import"},{"text":"junit","line":33,"char":1303,"type":"import"},{"text":"ExpectedException","line":33,"char":1309,"type":"import"},{"text":"org","line":34,"char":1335,"type":"import"},{"text":"junit","line":34,"char":1339,"type":"import"},{"text":"Rule","line":34,"char":1345,"type":"import"},{"text":"org","line":35,"char":1358,"type":"import"},{"text":"junit","line":35,"char":1362,"type":"import"},{"text":"Test","line":35,"char":1368,"type":"import"},{"text":"java","line":37,"char":1382,"type":"import"},{"text":"io","line":37,"char":1387,"type":"import"},{"text":"File","line":37,"char":1390,"type":"import"},{"text":"java","line":38,"char":1403,"type":"import"},{"text":"io","line":38,"char":1408,"type":"import"},{"text":"IOException","line":38,"char":1411,"type":"import"},{"text":"java","line":39,"char":1431,"type":"import"},{"text":"nio","line":39,"char":1436,"type":"import"},{"text":"file","line":39,"char":1440,"type":"import"},{"text":"Files","line":39,"char":1445,"type":"import"},{"text":"java","line":40,"char":1459,"type":"import"},{"text":"nio","line":40,"char":1464,"type":"import"},{"text":"file","line":40,"char":1468,"type":"import"},{"text":"Path","line":40,"char":1473,"type":"import"},{"text":"java","line":41,"char":1486,"type":"import"},{"text":"nio","line":41,"char":1491,"type":"import"},{"text":"file","line":41,"char":1495,"type":"import"},{"text":"Paths","line":41,"char":1500,"type":"import"},{"text":"java","line":42,"char":1514,"type":"import"},{"text":"nio","line":42,"char":1519,"type":"import"},{"text":"file","line":42,"char":1523,"type":"import"},{"text":"StandardWatchEventKinds","line":42,"char":1528,"type":"import"},{"text":"WatchedFileHashCacheTest","line":44,"char":1567,"type":"class"},{"text":"Rule","line":46,"char":1598,"type":"annotation"},{"text":"Rule","line":49,"char":1659,"type":"annotation"},{"text":"Test","line":52,"char":1741,"type":"annotation"},{"text":"Test","line":65,"char":2366,"type":"annotation"},{"text":"Test","line":78,"char":3024,"type":"annotation"},{"text":"Test","line":91,"char":3681,"type":"annotation"},{"text":"Test","line":104,"char":4338,"type":"annotation"},{"text":"Test","line":123,"char":5139,"type":"annotation"},{"text":"tmp","line":47,"char":1627,"type":"variable"},{"text":"expectedException","line":50,"char":1691,"type":"variable"},{"text":"cache","line":54,"char":1850,"type":"variable"},{"text":"path","line":56,"char":1931,"type":"variable"},{"text":"value","line":57,"char":1999,"type":"variable"},{"text":"cache","line":67,"char":2478,"type":"variable"},{"text":"path","line":69,"char":2559,"type":"variable"},{"text":"value","line":70,"char":2619,"type":"variable"},{"text":"cache","line":80,"char":3136,"type":"variable"},{"text":"path","line":82,"char":3216,"type":"variable"},{"text":"value","line":83,"char":3276,"type":"variable"},{"text":"cache","line":93,"char":3793,"type":"variable"},{"text":"path","line":95,"char":3873,"type":"variable"},{"text":"value","line":96,"char":3933,"type":"variable"},{"text":"filesystem","line":106,"char":4453,"type":"variable"},{"text":"cache","line":107,"char":4529,"type":"variable"},{"text":"inputFile","line":109,"char":4617,"type":"variable"},{"text":"dir","line":112,"char":4735,"type":"variable"},{"text":"dirHash","line":113,"char":4776,"type":"variable"},{"text":"dirHash2","line":119,"char":5044,"type":"variable"},{"text":"cache","line":125,"char":5262,"type":"variable"},{"text":"dir","line":127,"char":5342,"type":"variable"},{"text":"value","line":128,"char":5398,"type":"variable"},{"text":"whenNotifiedOfOverflowEventCacheIsCleared","line":53,"char":1760,"type":"method"},{"text":"whenNotifiedOfCreateEventCacheEntryIsRemoved","line":66,"char":2385,"type":"method"},{"text":"whenNotifiedOfChangeEventCacheEntryIsRemoved","line":79,"char":3043,"type":"method"},{"text":"whenNotifiedOfDeleteEventCacheEntryIsRemoved","line":92,"char":3700,"type":"method"},{"text":"directoryHashChangesWhenFileInsideDirectoryChanges","line":105,"char":4357,"type":"method"},{"text":"whenNotifiedOfChangeToSubPathThenDirCacheEntryIsRemoved","line":124,"char":5158,"type":"method"},{"text":"TemporaryPaths","line":47,"char":1612,"type":"identifier"},{"text":"TemporaryPaths","line":47,"char":1637,"type":"identifier"},{"text":"ExpectedException","line":50,"char":1673,"type":"identifier"},{"text":"ExpectedException","line":50,"char":1711,"type":"identifier"},{"text":"none","line":50,"char":1729,"type":"identifier"},{"text":"IOException","line":53,"char":1811,"type":"identifier"},{"text":"WatchedFileHashCache","line":54,"char":1829,"type":"identifier"},{"text":"WatchedFileHashCache","line":54,"char":1862,"type":"identifier"},{"text":"FakeProjectFilesystem","line":55,"char":1896,"type":"identifier"},{"text":"Path","line":56,"char":1926,"type":"identifier"},{"text":"File","line":56,"char":1942,"type":"identifier"},{"text":"toPath","line":56,"char":1965,"type":"identifier"},{"text":"HashCodeAndFileType","line":57,"char":1979,"type":"identifier"},{"text":"HashCodeAndFileType","line":57,"char":2007,"type":"identifier"},{"text":"ofFile","line":57,"char":2027,"type":"identifier"},{"text":"HashCode","line":57,"char":2034,"type":"identifier"},{"text":"fromInt","line":57,"char":2043,"type":"identifier"},{"text":"cache","line":58,"char":2061,"type":"identifier"},{"text":"loadingCache","line":58,"char":2067,"type":"identifier"},{"text":"put","line":58,"char":2080,"type":"identifier"},{"text":"path","line":58,"char":2084,"type":"identifier"},{"text":"value","line":58,"char":2090,"type":"identifier"},{"text":"cache","line":59,"char":2102,"type":"identifier"},{"text":"sizeCache","line":59,"char":2108,"type":"identifier"},{"text":"put","line":59,"char":2118,"type":"identifier"},{"text":"path","line":59,"char":2122,"type":"identifier"},{"text":"cache","line":60,"char":2140,"type":"identifier"},{"text":"onFileSystemChange","line":60,"char":2146,"type":"identifier"},{"text":"createOverflowEvent","line":60,"char":2165,"type":"identifier"},{"text":"assertFalse","line":61,"char":2193,"type":"identifier"},{"text":"cache","line":61,"char":2238,"type":"identifier"},{"text":"willGet","line":61,"char":2244,"type":"identifier"},{"text":"path","line":61,"char":2252,"type":"identifier"},{"text":"assertThat","line":62,"char":2264,"type":"identifier"},{"text":"cache","line":62,"char":2308,"type":"identifier"},{"text":"sizeCache","line":62,"char":2314,"type":"identifier"},{"text":"getIfPresent","line":62,"char":2324,"type":"identifier"},{"text":"path","line":62,"char":2337,"type":"identifier"},{"text":"nullValue","line":62,"char":2344,"type":"identifier"},{"text":"IOException","line":66,"char":2439,"type":"identifier"},{"text":"WatchedFileHashCache","line":67,"char":2457,"type":"identifier"},{"text":"WatchedFileHashCache","line":67,"char":2490,"type":"identifier"},{"text":"FakeProjectFilesystem","line":68,"char":2524,"type":"identifier"},{"text":"Path","line":69,"char":2554,"type":"identifier"},{"text":"Paths","line":69,"char":2566,"type":"identifier"},{"text":"get","line":69,"char":2572,"type":"identifier"},{"text":"HashCodeAndFileType","line":70,"char":2599,"type":"identifier"},{"text":"HashCodeAndFileType","line":70,"char":2627,"type":"identifier"},{"text":"ofFile","line":70,"char":2647,"type":"identifier"},{"text":"HashCode","line":70,"char":2654,"type":"identifier"},{"text":"fromInt","line":70,"char":2663,"type":"identifier"},{"text":"cache","line":71,"char":2681,"type":"identifier"},{"text":"loadingCache","line":71,"char":2687,"type":"identifier"},{"text":"put","line":71,"char":2700,"type":"identifier"},{"text":"path","line":71,"char":2704,"type":"identifier"},{"text":"value","line":71,"char":2710,"type":"identifier"},{"text":"cache","line":72,"char":2722,"type":"identifier"},{"text":"sizeCache","line":72,"char":2728,"type":"identifier"},{"text":"put","line":72,"char":2738,"type":"identifier"},{"text":"path","line":72,"char":2742,"type":"identifier"},{"text":"cache","line":73,"char":2760,"type":"identifier"},{"text":"onFileSystemChange","line":73,"char":2766,"type":"identifier"},{"text":"createPathEvent","line":73,"char":2785,"type":"identifier"},{"text":"path","line":73,"char":2801,"type":"identifier"},{"text":"StandardWatchEventKinds","line":73,"char":2807,"type":"identifier"},{"text":"ENTRY_CREATE","line":73,"char":2831,"type":"identifier"},{"text":"assertFalse","line":74,"char":2851,"type":"identifier"},{"text":"cache","line":74,"char":2896,"type":"identifier"},{"text":"willGet","line":74,"char":2902,"type":"identifier"},{"text":"path","line":74,"char":2910,"type":"identifier"},{"text":"assertThat","line":75,"char":2922,"type":"identifier"},{"text":"cache","line":75,"char":2966,"type":"identifier"},{"text":"sizeCache","line":75,"char":2972,"type":"identifier"},{"text":"getIfPresent","line":75,"char":2982,"type":"identifier"},{"text":"path","line":75,"char":2995,"type":"identifier"},{"text":"nullValue","line":75,"char":3002,"type":"identifier"},{"text":"IOException","line":79,"char":3097,"type":"identifier"},{"text":"WatchedFileHashCache","line":80,"char":3115,"type":"identifier"},{"text":"WatchedFileHashCache","line":81,"char":3156,"type":"identifier"},{"text":"FakeProjectFilesystem","line":81,"char":3181,"type":"identifier"},{"text":"Path","line":82,"char":3211,"type":"identifier"},{"text":"Paths","line":82,"char":3223,"type":"identifier"},{"text":"get","line":82,"char":3229,"type":"identifier"},{"text":"HashCodeAndFileType","line":83,"char":3256,"type":"identifier"},{"text":"HashCodeAndFileType","line":83,"char":3284,"type":"identifier"},{"text":"ofFile","line":83,"char":3304,"type":"identifier"},{"text":"HashCode","line":83,"char":3311,"type":"identifier"},{"text":"fromInt","line":83,"char":3320,"type":"identifier"},{"text":"cache","line":84,"char":3338,"type":"identifier"},{"text":"loadingCache","line":84,"char":3344,"type":"identifier"},{"text":"put","line":84,"char":3357,"type":"identifier"},{"text":"path","line":84,"char":3361,"type":"identifier"},{"text":"value","line":84,"char":3367,"type":"identifier"},{"text":"cache","line":85,"char":3379,"type":"identifier"},{"text":"sizeCache","line":85,"char":3385,"type":"identifier"},{"text":"put","line":85,"char":3395,"type":"identifier"},{"text":"path","line":85,"char":3399,"type":"identifier"},{"text":"cache","line":86,"char":3417,"type":"identifier"},{"text":"onFileSystemChange","line":86,"char":3423,"type":"identifier"},{"text":"createPathEvent","line":86,"char":3442,"type":"identifier"},{"text":"path","line":86,"char":3458,"type":"identifier"},{"text":"StandardWatchEventKinds","line":86,"char":3464,"type":"identifier"},{"text":"ENTRY_MODIFY","line":86,"char":3488,"type":"identifier"},{"text":"assertFalse","line":87,"char":3508,"type":"identifier"},{"text":"cache","line":87,"char":3553,"type":"identifier"},{"text":"willGet","line":87,"char":3559,"type":"identifier"},{"text":"path","line":87,"char":3567,"type":"identifier"},{"text":"assertThat","line":88,"char":3579,"type":"identifier"},{"text":"cache","line":88,"char":3623,"type":"identifier"},{"text":"sizeCache","line":88,"char":3629,"type":"identifier"},{"text":"getIfPresent","line":88,"char":3639,"type":"identifier"},{"text":"path","line":88,"char":3652,"type":"identifier"},{"text":"nullValue","line":88,"char":3659,"type":"identifier"},{"text":"IOException","line":92,"char":3754,"type":"identifier"},{"text":"WatchedFileHashCache","line":93,"char":3772,"type":"identifier"},{"text":"WatchedFileHashCache","line":94,"char":3813,"type":"identifier"},{"text":"FakeProjectFilesystem","line":94,"char":3838,"type":"identifier"},{"text":"Path","line":95,"char":3868,"type":"identifier"},{"text":"Paths","line":95,"char":3880,"type":"identifier"},{"text":"get","line":95,"char":3886,"type":"identifier"},{"text":"HashCodeAndFileType","line":96,"char":3913,"type":"identifier"},{"text":"HashCodeAndFileType","line":96,"char":3941,"type":"identifier"},{"text":"ofFile","line":96,"char":3961,"type":"identifier"},{"text":"HashCode","line":96,"char":3968,"type":"identifier"},{"text":"fromInt","line":96,"char":3977,"type":"identifier"},{"text":"cache","line":97,"char":3995,"type":"identifier"},{"text":"loadingCache","line":97,"char":4001,"type":"identifier"},{"text":"put","line":97,"char":4014,"type":"identifier"},{"text":"path","line":97,"char":4018,"type":"identifier"},{"text":"value","line":97,"char":4024,"type":"identifier"},{"text":"cache","line":98,"char":4036,"type":"identifier"},{"text":"sizeCache","line":98,"char":4042,"type":"identifier"},{"text":"put","line":98,"char":4052,"type":"identifier"},{"text":"path","line":98,"char":4056,"type":"identifier"},{"text":"cache","line":99,"char":4074,"type":"identifier"},{"text":"onFileSystemChange","line":99,"char":4080,"type":"identifier"},{"text":"createPathEvent","line":99,"char":4099,"type":"identifier"},{"text":"path","line":99,"char":4115,"type":"identifier"},{"text":"StandardWatchEventKinds","line":99,"char":4121,"type":"identifier"},{"text":"ENTRY_DELETE","line":99,"char":4145,"type":"identifier"},{"text":"assertFalse","line":100,"char":4165,"type":"identifier"},{"text":"cache","line":100,"char":4210,"type":"identifier"},{"text":"willGet","line":100,"char":4216,"type":"identifier"},{"text":"path","line":100,"char":4224,"type":"identifier"},{"text":"assertThat","line":101,"char":4236,"type":"identifier"},{"text":"cache","line":101,"char":4280,"type":"identifier"},{"text":"sizeCache","line":101,"char":4286,"type":"identifier"},{"text":"getIfPresent","line":101,"char":4296,"type":"identifier"},{"text":"path","line":101,"char":4309,"type":"identifier"},{"text":"nullValue","line":101,"char":4316,"type":"identifier"},{"text":"IOException","line":105,"char":4417,"type":"identifier"},{"text":"ProjectFilesystem","line":106,"char":4435,"type":"identifier"},{"text":"ProjectFilesystem","line":106,"char":4470,"type":"identifier"},{"text":"tmp","line":106,"char":4488,"type":"identifier"},{"text":"getRoot","line":106,"char":4492,"type":"identifier"},{"text":"WatchedFileHashCache","line":107,"char":4508,"type":"identifier"},{"text":"WatchedFileHashCache","line":107,"char":4541,"type":"identifier"},{"text":"filesystem","line":107,"char":4562,"type":"identifier"},{"text":"tmp","line":108,"char":4579,"type":"identifier"},{"text":"newFolder","line":108,"char":4583,"type":"identifier"},{"text":"Path","line":109,"char":4612,"type":"identifier"},{"text":"tmp","line":109,"char":4629,"type":"identifier"},{"text":"newFile","line":109,"char":4633,"type":"identifier"},{"text":"Files","line":110,"char":4661,"type":"identifier"},{"text":"write","line":110,"char":4667,"type":"identifier"},{"text":"inputFile","line":110,"char":4673,"type":"identifier"},{"text":"getBytes","line":110,"char":4698,"type":"identifier"},{"text":"Charsets","line":110,"char":4707,"type":"identifier"},{"text":"UTF_8","line":110,"char":4716,"type":"identifier"},{"text":"Path","line":112,"char":4730,"type":"identifier"},{"text":"Paths","line":112,"char":4741,"type":"identifier"},{"text":"get","line":112,"char":4747,"type":"identifier"},{"text":"HashCode","line":113,"char":4767,"type":"identifier"},{"text":"cache","line":113,"char":4786,"type":"identifier"},{"text":"get","line":113,"char":4792,"type":"identifier"},{"text":"filesystem","line":113,"char":4796,"type":"identifier"},{"text":"resolve","line":113,"char":4807,"type":"identifier"},{"text":"dir","line":113,"char":4815,"type":"identifier"},{"text":"Files","line":114,"char":4826,"type":"identifier"},{"text":"write","line":114,"char":4832,"type":"identifier"},{"text":"inputFile","line":114,"char":4838,"type":"identifier"},{"text":"getBytes","line":114,"char":4865,"type":"identifier"},{"text":"Charsets","line":114,"char":4874,"type":"identifier"},{"text":"UTF_8","line":114,"char":4883,"type":"identifier"},{"text":"cache","line":115,"char":4896,"type":"identifier"},{"text":"onFileSystemChange","line":115,"char":4902,"type":"identifier"},{"text":"createPathEvent","line":116,"char":4930,"type":"identifier"},{"text":"dir","line":117,"char":4959,"type":"identifier"},{"text":"resolve","line":117,"char":4963,"type":"identifier"},{"text":"StandardWatchEventKinds","line":118,"char":4991,"type":"identifier"},{"text":"ENTRY_MODIFY","line":118,"char":5015,"type":"identifier"},{"text":"HashCode","line":119,"char":5035,"type":"identifier"},{"text":"cache","line":119,"char":5055,"type":"identifier"},{"text":"get","line":119,"char":5061,"type":"identifier"},{"text":"filesystem","line":119,"char":5065,"type":"identifier"},{"text":"resolve","line":119,"char":5076,"type":"identifier"},{"text":"dir","line":119,"char":5084,"type":"identifier"},{"text":"assertNotEquals","line":120,"char":5095,"type":"identifier"},{"text":"dirHash","line":120,"char":5111,"type":"identifier"},{"text":"dirHash2","line":120,"char":5120,"type":"identifier"},{"text":"IOException","line":124,"char":5223,"type":"identifier"},{"text":"WatchedFileHashCache","line":125,"char":5241,"type":"identifier"},{"text":"WatchedFileHashCache","line":126,"char":5282,"type":"identifier"},{"text":"FakeProjectFilesystem","line":126,"char":5307,"type":"identifier"},{"text":"Path","line":127,"char":5337,"type":"identifier"},{"text":"Paths","line":127,"char":5348,"type":"identifier"},{"text":"get","line":127,"char":5354,"type":"identifier"},{"text":"HashCodeAndFileType","line":128,"char":5378,"type":"identifier"},{"text":"HashCodeAndFileType","line":129,"char":5414,"type":"identifier"},{"text":"ofDirectory","line":129,"char":5434,"type":"identifier"},{"text":"HashCode","line":129,"char":5446,"type":"identifier"},{"text":"fromInt","line":129,"char":5455,"type":"identifier"},{"text":"ImmutableSet","line":129,"char":5468,"type":"identifier"},{"text":"of","line":129,"char":5481,"type":"identifier"},{"text":"cache","line":130,"char":5492,"type":"identifier"},{"text":"loadingCache","line":130,"char":5498,"type":"identifier"},{"text":"put","line":130,"char":5511,"type":"identifier"},{"text":"dir","line":130,"char":5515,"type":"identifier"},{"text":"value","line":130,"char":5520,"type":"identifier"},{"text":"cache","line":131,"char":5532,"type":"identifier"},{"text":"sizeCache","line":131,"char":5538,"type":"identifier"},{"text":"put","line":131,"char":5548,"type":"identifier"},{"text":"dir","line":131,"char":5552,"type":"identifier"},{"text":"cache","line":132,"char":5569,"type":"identifier"},{"text":"onFileSystemChange","line":132,"char":5575,"type":"identifier"},{"text":"createPathEvent","line":133,"char":5603,"type":"identifier"},{"text":"dir","line":134,"char":5632,"type":"identifier"},{"text":"resolve","line":134,"char":5636,"type":"identifier"},{"text":"StandardWatchEventKinds","line":135,"char":5666,"type":"identifier"},{"text":"ENTRY_CREATE","line":135,"char":5690,"type":"identifier"},{"text":"assertFalse","line":136,"char":5710,"type":"identifier"},{"text":"cache","line":136,"char":5755,"type":"identifier"},{"text":"willGet","line":136,"char":5761,"type":"identifier"},{"text":"dir","line":136,"char":5769,"type":"identifier"},{"text":"assertThat","line":137,"char":5780,"type":"identifier"},{"text":"cache","line":137,"char":5824,"type":"identifier"},{"text":"sizeCache","line":137,"char":5830,"type":"identifier"},{"text":"getIfPresent","line":137,"char":5840,"type":"identifier"},{"text":"dir","line":137,"char":5853,"type":"identifier"},{"text":"nullValue","line":137,"char":5859,"type":"identifier"}]},"highlight":{"content":["\", \"bar\");\n    Path inputFile = tmp.newFile(\"foo/bar/baz\");\n    Files.write(inputFile, \"<em>Hello</em> world"]}},{"_index":"codesearch","_type":"code","_id":"234d35614091fc06a0a79fa13e0e832a83586213","_score":0.0,"_source":{"filename":"test/com/facebook/buck/cxx/CxxGenruleIntegrationTest.java","content":"/*\n * Copyright 2016-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.cxx;\n\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assume.assumeThat;\n\nimport com.facebook.buck.model.BuildTargetFactory;\nimport com.facebook.buck.model.BuildTargets;\nimport com.facebook.buck.testutil.integration.TemporaryPaths;\nimport com.facebook.buck.testutil.integration.ProjectWorkspace;\nimport com.facebook.buck.testutil.integration.TestDataHelper;\nimport com.facebook.buck.util.environment.Platform;\n\nimport org.hamcrest.Matchers;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\n\npublic class CxxGenruleIntegrationTest {\n\n  private ProjectWorkspace workspace;\n\n  @Rule\n  public TemporaryPaths tmp = new TemporaryPaths();\n\n  @Before\n  public void setUp() throws IOException {\n    assumeThat(Platform.detect(), Matchers.not(Matchers.is(Platform.WINDOWS)));\n    workspace = TestDataHelper.createProjectWorkspaceForScenario(this, \"cxx_genrule\", tmp);\n    workspace.setUp();\n  }\n\n  @Test\n  public void cppflags() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(cppflags :c)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.containsString(\"-DC_CFLAG\"));\n  }\n\n  @Test\n  public void cxxppflags() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(cxxppflags :c)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.containsString(\"-DC_CXXFLAG\"));\n  }\n\n  @Test\n  public void cppflagsTransitiveDeps() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(cppflags :a)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.allOf(\n            Matchers.containsString(\"-DA_CFLAG\"),\n            Matchers.containsString(\"-DB_CFLAG\")));\n  }\n\n  @Test\n  public void cppflagsMultipleDeps() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(cppflags :a :c)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.allOf(\n            Matchers.containsString(\"-DA_CFLAG\"),\n            Matchers.containsString(\"-DC_CFLAG\")));\n  }\n\n  @Test\n  public void cppflagsNoopBuild() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo $(cppflags :header)\");\n    workspace.runBuckBuild(\"//:rule#default\").assertSuccess();\n    workspace.runBuckBuild(\"//:rule#default\").assertSuccess();\n    workspace.getBuildLog().assertNotTargetBuiltLocally(\"//:rule#default\");\n  }\n\n  @Test\n  public void cppflagsChangingHeaderCausesRebuild() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo $(cppflags :header)\");\n    workspace.runBuckBuild(\"//:rule#default\").assertSuccess();\n    workspace.writeContentsToPath(\"#define HELLO\", \"real_header.h\");\n    workspace.runBuckBuild(\"//:rule#default\").assertSuccess();\n    workspace.getBuildLog().assertTargetBuiltLocally(\"//:rule#default\");\n  }\n\n  @Test\n  public void headers() throws IOException {\n    workspace.replaceFileContents(\n        \"BUCK\",\n        \"@CMD@\",\n        \"gcc -E $(cppflags :header) -include header.h - < /dev/null\");\n    workspace.runBuckBuild(\"//:rule#default\").assertSuccess();\n  }\n\n  @Test\n  public void ldflags() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(ldflags-static :c)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.allOf(\n            Matchers.containsString(\"libc.a\"),\n            Matchers.containsString(\"-c-ld-flag\")));\n  }\n\n  @Test\n  public void ldflagsTransitiveDeps() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(ldflags-static :a)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.allOf(\n            Matchers.containsString(\"liba.a\"),\n            Matchers.containsString(\"-a-ld-flag\"),\n            Matchers.containsString(\"libb.a\"),\n            Matchers.containsString(\"-b-ld-flag\")));\n  }\n\n  @Test\n  public void ldflagsMultipleDeps() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(ldflags-static :a :c)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.allOf(\n            Matchers.containsString(\"liba.a\"),\n            Matchers.containsString(\"-a-ld-flag\"),\n            Matchers.containsString(\"libc.a\"),\n            Matchers.containsString(\"-c-ld-flag\")));\n  }\n\n  @Test\n  public void platformName() throws IOException {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(platform-name)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.containsString(\"default\"));\n  }\n\n  @Test\n  public void locationPlatform() throws Exception {\n    workspace.replaceFileContents(\"BUCK\", \"@CMD@\", \"echo -- $(location-platform :binary)\");\n    Path output = workspace.buildAndReturnOutput(\"//:rule#default\");\n    assertThat(\n        workspace.getFileContents(output),\n        Matchers.containsString(\n            BuildTargets\n                .getGenPath(\n                    workspace.asCell().getFilesystem(),\n                    BuildTargetFactory.newInstance(\"//:binary#default\"),\n                    \"%s\")\n                .toString()));\n  }\n\n}\n","repository":"https://github.com/facebook/buck.git","language":"java","tokens":[{"text":"com","line":17,"char":615,"type":"package"},{"text":"facebook","line":17,"char":619,"type":"package"},{"text":"buck","line":17,"char":628,"type":"package"},{"text":"cxx","line":17,"char":633,"type":"package"},{"text":"org","line":19,"char":653,"type":"import"},{"text":"junit","line":19,"char":657,"type":"import"},{"text":"Assert","line":19,"char":663,"type":"import"},{"text":"assertThat","line":19,"char":670,"type":"import"},{"text":"org","line":20,"char":696,"type":"import"},{"text":"junit","line":20,"char":700,"type":"import"},{"text":"Assume","line":20,"char":706,"type":"import"},{"text":"assumeThat","line":20,"char":713,"type":"import"},{"text":"com","line":22,"char":733,"type":"import"},{"text":"facebook","line":22,"char":737,"type":"import"},{"text":"buck","line":22,"char":746,"type":"import"},{"text":"model","line":22,"char":751,"type":"import"},{"text":"BuildTargetFactory","line":22,"char":757,"type":"import"},{"text":"com","line":23,"char":784,"type":"import"},{"text":"facebook","line":23,"char":788,"type":"import"},{"text":"buck","line":23,"char":797,"type":"import"},{"text":"model","line":23,"char":802,"type":"import"},{"text":"BuildTargets","line":23,"char":808,"type":"import"},{"text":"com","line":24,"char":829,"type":"import"},{"text":"facebook","line":24,"char":833,"type":"import"},{"text":"buck","line":24,"char":842,"type":"import"},{"text":"testutil","line":24,"char":847,"type":"import"},{"text":"integration","line":24,"char":856,"type":"import"},{"text":"TemporaryPaths","line":24,"char":868,"type":"import"},{"text":"com","line":25,"char":891,"type":"import"},{"text":"facebook","line":25,"char":895,"type":"import"},{"text":"buck","line":25,"char":904,"type":"import"},{"text":"testutil","line":25,"char":909,"type":"import"},{"text":"integration","line":25,"char":918,"type":"import"},{"text":"ProjectWorkspace","line":25,"char":930,"type":"import"},{"text":"com","line":26,"char":955,"type":"import"},{"text":"facebook","line":26,"char":959,"type":"import"},{"text":"buck","line":26,"char":968,"type":"import"},{"text":"testutil","line":26,"char":973,"type":"import"},{"text":"integration","line":26,"char":982,"type":"import"},{"text":"TestDataHelper","line":26,"char":994,"type":"import"},{"text":"com","line":27,"char":1017,"type":"import"},{"text":"facebook","line":27,"char":1021,"type":"import"},{"text":"buck","line":27,"char":1030,"type":"import"},{"text":"util","line":27,"char":1035,"type":"import"},{"text":"environment","line":27,"char":1040,"type":"import"},{"text":"Platform","line":27,"char":1052,"type":"import"},{"text":"org","line":29,"char":1070,"type":"import"},{"text":"hamcrest","line":29,"char":1074,"type":"import"},{"text":"Matchers","line":29,"char":1083,"type":"import"},{"text":"org","line":30,"char":1100,"type":"import"},{"text":"junit","line":30,"char":1104,"type":"import"},{"text":"Before","line":30,"char":1110,"type":"import"},{"text":"org","line":31,"char":1125,"type":"import"},{"text":"junit","line":31,"char":1129,"type":"import"},{"text":"Rule","line":31,"char":1135,"type":"import"},{"text":"org","line":32,"char":1148,"type":"import"},{"text":"junit","line":32,"char":1152,"type":"import"},{"text":"Test","line":32,"char":1158,"type":"import"},{"text":"java","line":34,"char":1172,"type":"import"},{"text":"io","line":34,"char":1177,"type":"import"},{"text":"IOException","line":34,"char":1180,"type":"import"},{"text":"java","line":35,"char":1200,"type":"import"},{"text":"nio","line":35,"char":1205,"type":"import"},{"text":"file","line":35,"char":1209,"type":"import"},{"text":"Path","line":35,"char":1214,"type":"import"},{"text":"CxxGenruleIntegrationTest","line":37,"char":1234,"type":"class"},{"text":"workspace","line":39,"char":1290,"type":"variable"},{"text":"tmp","line":42,"char":1334,"type":"variable"},{"text":"output","line":54,"char":1757,"type":"variable"},{"text":"output","line":63,"char":2073,"type":"variable"},{"text":"output","line":72,"char":2401,"type":"variable"},{"text":"output","line":83,"char":2807,"type":"variable"},{"text":"output","line":120,"char":4247,"type":"variable"},{"text":"output","line":131,"char":4655,"type":"variable"},{"text":"output","line":144,"char":5162,"type":"variable"},{"text":"output","line":157,"char":5655,"type":"variable"},{"text":"output","line":166,"char":5985,"type":"variable"},{"text":"Rule","line":41,"char":1305,"type":"annotation"},{"text":"Before","line":44,"char":1366,"type":"annotation"},{"text":"Test","line":51,"char":1619,"type":"annotation"},{"text":"Test","line":60,"char":1931,"type":"annotation"},{"text":"Test","line":69,"char":2249,"type":"annotation"},{"text":"Test","line":80,"char":2654,"type":"annotation"},{"text":"Test","line":91,"char":3060,"type":"annotation"},{"text":"Test","line":99,"char":3410,"type":"annotation"},{"text":"Test","line":108,"char":3844,"type":"annotation"},{"text":"Test","line":117,"char":4104,"type":"annotation"},{"text":"Test","line":128,"char":4498,"type":"annotation"},{"text":"Test","line":141,"char":5004,"type":"annotation"},{"text":"Test","line":154,"char":5511,"type":"annotation"},{"text":"Test","line":163,"char":5827,"type":"annotation"},{"text":"setUp","line":45,"char":1387,"type":"method"},{"text":"cppflags","line":52,"char":1638,"type":"method"},{"text":"cxxppflags","line":61,"char":1950,"type":"method"},{"text":"cppflagsTransitiveDeps","line":70,"char":2268,"type":"method"},{"text":"cppflagsMultipleDeps","line":81,"char":2673,"type":"method"},{"text":"cppflagsNoopBuild","line":92,"char":3079,"type":"method"},{"text":"cppflagsChangingHeaderCausesRebuild","line":100,"char":3429,"type":"method"},{"text":"headers","line":109,"char":3863,"type":"method"},{"text":"ldflags","line":118,"char":4123,"type":"method"},{"text":"ldflagsTransitiveDeps","line":129,"char":4517,"type":"method"},{"text":"ldflagsMultipleDeps","line":142,"char":5023,"type":"method"},{"text":"platformName","line":155,"char":5530,"type":"method"},{"text":"locationPlatform","line":164,"char":5846,"type":"method"},{"text":"ProjectWorkspace","line":39,"char":1273,"type":"identifier"},{"text":"TemporaryPaths","line":42,"char":1319,"type":"identifier"},{"text":"TemporaryPaths","line":42,"char":1344,"type":"identifier"},{"text":"IOException","line":45,"char":1402,"type":"identifier"},{"text":"assumeThat","line":46,"char":1420,"type":"identifier"},{"text":"Platform","line":46,"char":1431,"type":"identifier"},{"text":"detect","line":46,"char":1440,"type":"identifier"},{"text":"Matchers","line":46,"char":1450,"type":"identifier"},{"text":"not","line":46,"char":1459,"type":"identifier"},{"text":"Matchers","line":46,"char":1463,"type":"identifier"},{"text":"is","line":46,"char":1472,"type":"identifier"},{"text":"Platform","line":46,"char":1475,"type":"identifier"},{"text":"WINDOWS","line":46,"char":1484,"type":"identifier"},{"text":"workspace","line":47,"char":1500,"type":"identifier"},{"text":"TestDataHelper","line":47,"char":1512,"type":"identifier"},{"text":"createProjectWorkspaceForScenario","line":47,"char":1527,"type":"identifier"},{"text":"tmp","line":47,"char":1582,"type":"identifier"},{"text":"workspace","line":48,"char":1592,"type":"identifier"},{"text":"setUp","line":48,"char":1602,"type":"identifier"},{"text":"IOException","line":52,"char":1656,"type":"identifier"},{"text":"workspace","line":53,"char":1674,"type":"identifier"},{"text":"replaceFileContents","line":53,"char":1684,"type":"identifier"},{"text":"Path","line":54,"char":1752,"type":"identifier"},{"text":"workspace","line":54,"char":1766,"type":"identifier"},{"text":"buildAndReturnOutput","line":54,"char":1776,"type":"identifier"},{"text":"assertThat","line":55,"char":1821,"type":"identifier"},{"text":"workspace","line":56,"char":1841,"type":"identifier"},{"text":"getFileContents","line":56,"char":1851,"type":"identifier"},{"text":"output","line":56,"char":1867,"type":"identifier"},{"text":"Matchers","line":57,"char":1884,"type":"identifier"},{"text":"containsString","line":57,"char":1893,"type":"identifier"},{"text":"IOException","line":61,"char":1970,"type":"identifier"},{"text":"workspace","line":62,"char":1988,"type":"identifier"},{"text":"replaceFileContents","line":62,"char":1998,"type":"identifier"},{"text":"Path","line":63,"char":2068,"type":"identifier"},{"text":"workspace","line":63,"char":2082,"type":"identifier"},{"text":"buildAndReturnOutput","line":63,"char":2092,"type":"identifier"},{"text":"assertThat","line":64,"char":2137,"type":"identifier"},{"text":"workspace","line":65,"char":2157,"type":"identifier"},{"text":"getFileContents","line":65,"char":2167,"type":"identifier"},{"text":"output","line":65,"char":2183,"type":"identifier"},{"text":"Matchers","line":66,"char":2200,"type":"identifier"},{"text":"containsString","line":66,"char":2209,"type":"identifier"},{"text":"IOException","line":70,"char":2300,"type":"identifier"},{"text":"workspace","line":71,"char":2318,"type":"identifier"},{"text":"replaceFileContents","line":71,"char":2328,"type":"identifier"},{"text":"Path","line":72,"char":2396,"type":"identifier"},{"text":"workspace","line":72,"char":2410,"type":"identifier"},{"text":"buildAndReturnOutput","line":72,"char":2420,"type":"identifier"},{"text":"assertThat","line":73,"char":2465,"type":"identifier"},{"text":"workspace","line":74,"char":2485,"type":"identifier"},{"text":"getFileContents","line":74,"char":2495,"type":"identifier"},{"text":"output","line":74,"char":2511,"type":"identifier"},{"text":"Matchers","line":75,"char":2528,"type":"identifier"},{"text":"allOf","line":75,"char":2537,"type":"identifier"},{"text":"Matchers","line":76,"char":2556,"type":"identifier"},{"text":"containsString","line":76,"char":2565,"type":"identifier"},{"text":"Matchers","line":77,"char":2606,"type":"identifier"},{"text":"containsString","line":77,"char":2615,"type":"identifier"},{"text":"IOException","line":81,"char":2703,"type":"identifier"},{"text":"workspace","line":82,"char":2721,"type":"identifier"},{"text":"replaceFileContents","line":82,"char":2731,"type":"identifier"},{"text":"Path","line":83,"char":2802,"type":"identifier"},{"text":"workspace","line":83,"char":2816,"type":"identifier"},{"text":"buildAndReturnOutput","line":83,"char":2826,"type":"identifier"},{"text":"assertThat","line":84,"char":2871,"type":"identifier"},{"text":"workspace","line":85,"char":2891,"type":"identifier"},{"text":"getFileContents","line":85,"char":2901,"type":"identifier"},{"text":"output","line":85,"char":2917,"type":"identifier"},{"text":"Matchers","line":86,"char":2934,"type":"identifier"},{"text":"allOf","line":86,"char":2943,"type":"identifier"},{"text":"Matchers","line":87,"char":2962,"type":"identifier"},{"text":"containsString","line":87,"char":2971,"type":"identifier"},{"text":"Matchers","line":88,"char":3012,"type":"identifier"},{"text":"containsString","line":88,"char":3021,"type":"identifier"},{"text":"IOException","line":92,"char":3106,"type":"identifier"},{"text":"workspace","line":93,"char":3124,"type":"identifier"},{"text":"replaceFileContents","line":93,"char":3134,"type":"identifier"},{"text":"workspace","line":94,"char":3204,"type":"identifier"},{"text":"runBuckBuild","line":94,"char":3214,"type":"identifier"},{"text":"assertSuccess","line":94,"char":3246,"type":"identifier"},{"text":"workspace","line":95,"char":3267,"type":"identifier"},{"text":"runBuckBuild","line":95,"char":3277,"type":"identifier"},{"text":"assertSuccess","line":95,"char":3309,"type":"identifier"},{"text":"workspace","line":96,"char":3330,"type":"identifier"},{"text":"getBuildLog","line":96,"char":3340,"type":"identifier"},{"text":"assertNotTargetBuiltLocally","line":96,"char":3354,"type":"identifier"},{"text":"IOException","line":100,"char":3474,"type":"identifier"},{"text":"workspace","line":101,"char":3492,"type":"identifier"},{"text":"replaceFileContents","line":101,"char":3502,"type":"identifier"},{"text":"workspace","line":102,"char":3572,"type":"identifier"},{"text":"runBuckBuild","line":102,"char":3582,"type":"identifier"},{"text":"assertSuccess","line":102,"char":3614,"type":"identifier"},{"text":"workspace","line":103,"char":3635,"type":"identifier"},{"text":"writeContentsToPath","line":103,"char":3645,"type":"identifier"},{"text":"workspace","line":104,"char":3704,"type":"identifier"},{"text":"runBuckBuild","line":104,"char":3714,"type":"identifier"},{"text":"assertSuccess","line":104,"char":3746,"type":"identifier"},{"text":"workspace","line":105,"char":3767,"type":"identifier"},{"text":"getBuildLog","line":105,"char":3777,"type":"identifier"},{"text":"assertTargetBuiltLocally","line":105,"char":3791,"type":"identifier"},{"text":"IOException","line":109,"char":3880,"type":"identifier"},{"text":"workspace","line":110,"char":3898,"type":"identifier"},{"text":"replaceFileContents","line":110,"char":3908,"type":"identifier"},{"text":"workspace","line":114,"char":4037,"type":"identifier"},{"text":"runBuckBuild","line":114,"char":4047,"type":"identifier"},{"text":"assertSuccess","line":114,"char":4079,"type":"identifier"},{"text":"IOException","line":118,"char":4140,"type":"identifier"},{"text":"workspace","line":119,"char":4158,"type":"identifier"},{"text":"replaceFileContents","line":119,"char":4168,"type":"identifier"},{"text":"Path","line":120,"char":4242,"type":"identifier"},{"text":"workspace","line":120,"char":4256,"type":"identifier"},{"text":"buildAndReturnOutput","line":120,"char":4266,"type":"identifier"},{"text":"assertThat","line":121,"char":4311,"type":"identifier"},{"text":"workspace","line":122,"char":4331,"type":"identifier"},{"text":"getFileContents","line":122,"char":4341,"type":"identifier"},{"text":"output","line":122,"char":4357,"type":"identifier"},{"text":"Matchers","line":123,"char":4374,"type":"identifier"},{"text":"allOf","line":123,"char":4383,"type":"identifier"},{"text":"Matchers","line":124,"char":4402,"type":"identifier"},{"text":"containsString","line":124,"char":4411,"type":"identifier"},{"text":"Matchers","line":125,"char":4449,"type":"identifier"},{"text":"containsString","line":125,"char":4458,"type":"identifier"},{"text":"IOException","line":129,"char":4548,"type":"identifier"},{"text":"workspace","line":130,"char":4566,"type":"identifier"},{"text":"replaceFileContents","line":130,"char":4576,"type":"identifier"},{"text":"Path","line":131,"char":4650,"type":"identifier"},{"text":"workspace","line":131,"char":4664,"type":"identifier"},{"text":"buildAndReturnOutput","line":131,"char":4674,"type":"identifier"},{"text":"assertThat","line":132,"char":4719,"type":"identifier"},{"text":"workspace","line":133,"char":4739,"type":"identifier"},{"text":"getFileContents","line":133,"char":4749,"type":"identifier"},{"text":"output","line":133,"char":4765,"type":"identifier"},{"text":"Matchers","line":134,"char":4782,"type":"identifier"},{"text":"allOf","line":134,"char":4791,"type":"identifier"},{"text":"Matchers","line":135,"char":4810,"type":"identifier"},{"text":"containsString","line":135,"char":4819,"type":"identifier"},{"text":"Matchers","line":136,"char":4857,"type":"identifier"},{"text":"containsString","line":136,"char":4866,"type":"identifier"},{"text":"Matchers","line":137,"char":4908,"type":"identifier"},{"text":"containsString","line":137,"char":4917,"type":"identifier"},{"text":"Matchers","line":138,"char":4955,"type":"identifier"},{"text":"containsString","line":138,"char":4964,"type":"identifier"},{"text":"IOException","line":142,"char":5052,"type":"identifier"},{"text":"workspace","line":143,"char":5070,"type":"identifier"},{"text":"replaceFileContents","line":143,"char":5080,"type":"identifier"},{"text":"Path","line":144,"char":5157,"type":"identifier"},{"text":"workspace","line":144,"char":5171,"type":"identifier"},{"text":"buildAndReturnOutput","line":144,"char":5181,"type":"identifier"},{"text":"assertThat","line":145,"char":5226,"type":"identifier"},{"text":"workspace","line":146,"char":5246,"type":"identifier"},{"text":"getFileContents","line":146,"char":5256,"type":"identifier"},{"text":"output","line":146,"char":5272,"type":"identifier"},{"text":"Matchers","line":147,"char":5289,"type":"identifier"},{"text":"allOf","line":147,"char":5298,"type":"identifier"},{"text":"Matchers","line":148,"char":5317,"type":"identifier"},{"text":"containsString","line":148,"char":5326,"type":"identifier"},{"text":"Matchers","line":149,"char":5364,"type":"identifier"},{"text":"containsString","line":149,"char":5373,"type":"identifier"},{"text":"Matchers","line":150,"char":5415,"type":"identifier"},{"text":"containsString","line":150,"char":5424,"type":"identifier"},{"text":"Matchers","line":151,"char":5462,"type":"identifier"},{"text":"containsString","line":151,"char":5471,"type":"identifier"},{"text":"IOException","line":155,"char":5552,"type":"identifier"},{"text":"workspace","line":156,"char":5570,"type":"identifier"},{"text":"replaceFileContents","line":156,"char":5580,"type":"identifier"},{"text":"Path","line":157,"char":5650,"type":"identifier"},{"text":"workspace","line":157,"char":5664,"type":"identifier"},{"text":"buildAndReturnOutput","line":157,"char":5674,"type":"identifier"},{"text":"assertThat","line":158,"char":5719,"type":"identifier"},{"text":"workspace","line":159,"char":5739,"type":"identifier"},{"text":"getFileContents","line":159,"char":5749,"type":"identifier"},{"text":"output","line":159,"char":5765,"type":"identifier"},{"text":"Matchers","line":160,"char":5782,"type":"identifier"},{"text":"containsString","line":160,"char":5791,"type":"identifier"},{"text":"Exception","line":164,"char":5872,"type":"identifier"},{"text":"workspace","line":165,"char":5888,"type":"identifier"},{"text":"replaceFileContents","line":165,"char":5898,"type":"identifier"},{"text":"Path","line":166,"char":5980,"type":"identifier"},{"text":"workspace","line":166,"char":5994,"type":"identifier"},{"text":"buildAndReturnOutput","line":166,"char":6004,"type":"identifier"},{"text":"assertThat","line":167,"char":6049,"type":"identifier"},{"text":"workspace","line":168,"char":6069,"type":"identifier"},{"text":"getFileContents","line":168,"char":6079,"type":"identifier"},{"text":"output","line":168,"char":6095,"type":"identifier"},{"text":"Matchers","line":169,"char":6112,"type":"identifier"},{"text":"containsString","line":169,"char":6121,"type":"identifier"},{"text":"BuildTargets","line":170,"char":6149,"type":"identifier"},{"text":"getGenPath","line":171,"char":6179,"type":"identifier"},{"text":"workspace","line":172,"char":6211,"type":"identifier"},{"text":"asCell","line":172,"char":6221,"type":"identifier"},{"text":"getFilesystem","line":172,"char":6230,"type":"identifier"},{"text":"BuildTargetFactory","line":173,"char":6267,"type":"identifier"},{"text":"newInstance","line":173,"char":6286,"type":"identifier"},{"text":"toString","line":175,"char":6363,"type":"identifier"}]},"highlight":{"content":["(\"//:rule#default\").assertSuccess();\n    workspace.writeContentsToPath(\"#define <em>HELLO</em>\", \"real_header.h"]}},{"_index":"codesearch","_type":"code","_id":"dfcdf2aa065490f093200ccafee19ab92dfe6af8","_score":0.0,"_source":{"filename":"wsagent/che-core-api-project/src/test/java/org/eclipse/che/api/project/server/ProjectServiceTest.java","content":"/*******************************************************************************\n * Copyright (c) 2012-2016 Codenvy, S.A.\n * All rights reserved. This program and the accompanying materials\n * are made available under the terms of the Eclipse Public License v1.0\n * which accompanies this distribution, and is available at\n * http://www.eclipse.org/legal/epl-v10.html\n *\n * Contributors:\n *   Codenvy, S.A. - initial API and implementation\n *******************************************************************************/\npackage org.eclipse.che.api.project.server;\n\nimport org.eclipse.che.api.core.ConflictException;\nimport org.eclipse.che.api.core.ForbiddenException;\nimport org.eclipse.che.api.core.NotFoundException;\nimport org.eclipse.che.api.core.ServerException;\nimport org.eclipse.che.api.core.model.project.SourceStorage;\nimport org.eclipse.che.api.core.model.project.type.Attribute;\nimport org.eclipse.che.api.core.notification.EventService;\nimport org.eclipse.che.api.core.rest.ApiExceptionMapper;\nimport org.eclipse.che.api.core.rest.HttpJsonRequest;\nimport org.eclipse.che.api.core.rest.HttpJsonRequestFactory;\nimport org.eclipse.che.api.core.rest.HttpJsonResponse;\nimport org.eclipse.che.api.core.rest.shared.dto.Link;\nimport org.eclipse.che.api.core.util.LineConsumerFactory;\nimport org.eclipse.che.api.core.util.ValueHolder;\nimport org.eclipse.che.api.project.server.handlers.CreateProjectHandler;\nimport org.eclipse.che.api.project.server.handlers.ProjectHandlerRegistry;\nimport org.eclipse.che.api.project.server.importer.ProjectImporter;\nimport org.eclipse.che.api.project.server.importer.ProjectImporterRegistry;\nimport org.eclipse.che.api.project.server.type.AttributeValue;\nimport org.eclipse.che.api.project.server.type.ProjectTypeDef;\nimport org.eclipse.che.api.project.server.type.ProjectTypeRegistry;\nimport org.eclipse.che.api.project.server.type.ReadonlyValueProvider;\nimport org.eclipse.che.api.project.server.type.ValueProviderFactory;\nimport org.eclipse.che.api.project.server.type.ValueStorageException;\nimport org.eclipse.che.api.project.shared.dto.CopyOptions;\nimport org.eclipse.che.api.project.shared.dto.ItemReference;\nimport org.eclipse.che.api.project.shared.dto.MoveOptions;\nimport org.eclipse.che.api.project.shared.dto.SourceEstimation;\nimport org.eclipse.che.api.project.shared.dto.TreeElement;\nimport org.eclipse.che.api.user.server.spi.UserDao;\nimport org.eclipse.che.api.vfs.Path;\nimport org.eclipse.che.api.vfs.VirtualFile;\nimport org.eclipse.che.api.vfs.impl.file.DefaultFileWatcherNotificationHandler;\nimport org.eclipse.che.api.vfs.impl.file.FileTreeWatcher;\nimport org.eclipse.che.api.vfs.impl.file.FileWatcherNotificationHandler;\nimport org.eclipse.che.api.vfs.impl.file.LocalVirtualFileSystemProvider;\nimport org.eclipse.che.api.vfs.impl.file.event.detectors.ProjectTreeChangesDetector;\nimport org.eclipse.che.api.vfs.search.impl.FSLuceneSearcherProvider;\nimport org.eclipse.che.api.workspace.shared.dto.ProjectConfigDto;\nimport org.eclipse.che.api.workspace.shared.dto.SourceStorageDto;\nimport org.eclipse.che.api.workspace.shared.dto.WorkspaceConfigDto;\nimport org.eclipse.che.api.workspace.shared.dto.WorkspaceDto;\nimport org.eclipse.che.commons.json.JsonHelper;\nimport org.eclipse.che.commons.lang.IoUtil;\nimport org.eclipse.che.commons.lang.ws.rs.ExtMediaType;\nimport org.eclipse.che.commons.subject.SubjectImpl;\nimport org.eclipse.che.commons.test.mockito.answer.SelfReturningAnswer;\nimport org.eclipse.che.dto.server.DtoFactory;\nimport org.everrest.core.ApplicationContext;\nimport org.everrest.core.ResourceBinder;\nimport org.everrest.core.impl.ContainerResponse;\nimport org.everrest.core.impl.EverrestConfiguration;\nimport org.everrest.core.impl.EverrestProcessor;\nimport org.everrest.core.impl.ProviderBinder;\nimport org.everrest.core.impl.RequestDispatcher;\nimport org.everrest.core.impl.RequestHandlerImpl;\nimport org.everrest.core.impl.ResourceBinderImpl;\nimport org.everrest.core.tools.ByteArrayContainerResponseWriter;\nimport org.everrest.core.tools.DependencySupplierImpl;\nimport org.everrest.core.tools.ResourceLauncher;\nimport org.junit.Assert;\nimport org.mockito.Mock;\nimport org.mockito.testng.MockitoTestNGListener;\nimport org.testng.annotations.BeforeMethod;\nimport org.testng.annotations.Listeners;\nimport org.testng.annotations.Test;\n\nimport javax.ws.rs.core.Application;\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.nio.charset.Charset;\nimport java.nio.file.PathMatcher;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport static java.util.Collections.singletonList;\nimport static javax.ws.rs.HttpMethod.DELETE;\nimport static javax.ws.rs.HttpMethod.GET;\nimport static javax.ws.rs.HttpMethod.POST;\nimport static javax.ws.rs.HttpMethod.PUT;\nimport static javax.ws.rs.core.MediaType.APPLICATION_JSON;\nimport static javax.ws.rs.core.MediaType.TEXT_PLAIN;\nimport static org.eclipse.che.commons.lang.ws.rs.ExtMediaType.APPLICATION_ZIP;\nimport static org.everrest.core.ApplicationContext.anApplicationContext;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.testng.Assert.assertEquals;\nimport static org.testng.Assert.assertEqualsNoOrder;\nimport static org.testng.Assert.assertNotNull;\n\n/**\n * @author andrew00x\n * @author Eugene Voevodin\n * @author Artem Zatsarynnyi\n * @author Dmitry Shnurenko\n */\n@Listeners(value = {MockitoTestNGListener.class})\npublic class ProjectServiceTest {\n    private static final String CONTENT_TYPE = \"Content-Type\";\n\n    private static final String vfsUser = \"dev\";\n\n    protected final static String FS_PATH    = \"target/fss\";\n    protected final static String INDEX_PATH = \"target/fss_index\";\n\n    private static final String URL_ENCODED_QUOTES            = \"%22\";\n    private static final String URL_ENCODED_SPACE             = \"%20\";\n    private static final String URL_ENCODED_BACKSLASH         = \"%5C\";\n    private static final String URL_ENCODED_ASTERISK          = \"%2A\";\n\n    private static final String AND_OPERATOR = \"AND\";\n    private static final String NOT_OPERATOR = \"NOT\";\n\n    private static final String EXCLUDE_SEARCH_PATH = \".codenvy\";\n\n    private ProjectManager         pm;\n    private ResourceLauncher       launcher;\n    private ProjectHandlerRegistry phRegistry;\n\n    private org.eclipse.che.commons.env.EnvironmentContext env;\n\n    private List<ProjectConfigDto> projects;\n\n    @Mock\n    private UserDao                    userDao;\n    @Mock\n    private WorkspaceDto               usersWorkspaceMock;\n    @Mock\n    private WorkspaceConfigDto         workspaceConfigMock;\n    @Mock\n    private HttpJsonRequestFactory     httpJsonRequestFactory;\n    @Mock\n    private HttpJsonResponse           httpJsonResponse;\n    @Mock\n    private ProjectTreeChangesDetector projectTreeChangesDetector;\n\n    protected LocalVirtualFileSystemProvider vfsProvider;\n\n    private ProjectImporterRegistry importerRegistry;\n\n    protected ProjectRegistry projectRegistry;\n\n    protected ProjectTypeRegistry ptRegistry;\n\n    @BeforeMethod\n    public void setUp() throws Exception {\n\n        WorkspaceProjectsSyncer workspaceHolder = new WsAgentTestBase.TestWorkspaceHolder();\n\n        File root = new File(FS_PATH);\n\n        if (root.exists()) {\n            IoUtil.deleteRecursive(root);\n        }\n        root.mkdir();\n\n\n        File indexDir = new File(INDEX_PATH);\n\n        if (indexDir.exists()) {\n            IoUtil.deleteRecursive(indexDir);\n        }\n        indexDir.mkdir();\n\n        Set<PathMatcher> filters = new HashSet<>();\n        filters.add(path -> {\n            for (java.nio.file.Path pathElement : path) {\n                if (pathElement == null || EXCLUDE_SEARCH_PATH.equals(pathElement.toString())) {\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        FSLuceneSearcherProvider sProvider = new FSLuceneSearcherProvider(indexDir, filters);\n\n        vfsProvider = new LocalVirtualFileSystemProvider(root, sProvider);\n\n        final EventService eventService = new EventService();\n\n        // PTs for test\n        ProjectTypeDef chuck = new ProjectTypeDef(\"chuck_project_type\", \"chuck_project_type\", true, false) {\n            {\n                addConstantDefinition(\"x\", \"attr description\", new AttributeValue(Arrays.asList(\"a\", \"b\")));\n            }\n        };\n\n        Set<ProjectTypeDef> projectTypes = new HashSet<>();\n        final LocalProjectType myProjectType = new LocalProjectType(\"my_project_type\", \"my project type\");\n        projectTypes.add(myProjectType);\n        projectTypes.add(new LocalProjectType(\"module_type\", \"module type\"));\n        projectTypes.add(chuck);\n\n        ptRegistry = new ProjectTypeRegistry(projectTypes);\n\n        phRegistry = new ProjectHandlerRegistry(new HashSet<>());\n\n        importerRegistry = new ProjectImporterRegistry(Collections.<ProjectImporter>emptySet());\n\n        projectRegistry = new ProjectRegistry(workspaceHolder, vfsProvider, ptRegistry, phRegistry, eventService);\n        projectRegistry.initProjects();\n\n        FileWatcherNotificationHandler fileWatcherNotificationHandler = new DefaultFileWatcherNotificationHandler(vfsProvider);\n        FileTreeWatcher fileTreeWatcher = new FileTreeWatcher(root, new HashSet<>(), fileWatcherNotificationHandler);\n\n        pm = new ProjectManager(vfsProvider, new EventService(), ptRegistry, projectRegistry, phRegistry,\n                                importerRegistry, fileWatcherNotificationHandler, fileTreeWatcher, workspaceHolder,\n                                projectTreeChangesDetector);\n        pm.initWatcher();\n\n        HttpJsonRequest httpJsonRequest = mock(HttpJsonRequest.class, new SelfReturningAnswer());\n\n        //List<ProjectConfigDto> modules = new ArrayList<>();\n\n        projects = new ArrayList<>();\n        addMockedProjectConfigDto(myProjectType, \"my_project\");\n\n        when(httpJsonRequestFactory.fromLink(any())).thenReturn(httpJsonRequest);\n        when(httpJsonRequest.request()).thenReturn(httpJsonResponse);\n        when(httpJsonResponse.asDto(WorkspaceDto.class)).thenReturn(usersWorkspaceMock);\n        when(usersWorkspaceMock.getConfig()).thenReturn(workspaceConfigMock);\n        when(workspaceConfigMock.getProjects()).thenReturn(projects);\n\n//        verify(httpJsonRequestFactory).fromLink(eq(DtoFactory.newDto(Link.class)\n//                                                             .withHref(apiEndpoint + \"/workspace/\" + workspace + \"/project\")\n//                                                             .withMethod(PUT)));\n\n        DependencySupplierImpl dependencies = new DependencySupplierImpl();\n\n\n        dependencies.addInstance(ProjectTypeRegistry.class, ptRegistry);\n        dependencies.addInstance(UserDao.class, userDao);\n        dependencies.addInstance(ProjectManager.class, pm);\n        dependencies.addInstance(ProjectImporterRegistry.class, importerRegistry);\n        dependencies.addInstance(ProjectHandlerRegistry.class, phRegistry);\n        dependencies.addInstance(EventService.class, eventService);\n\n        ResourceBinder resources = new ResourceBinderImpl();\n        ProviderBinder providers = ProviderBinder.getInstance();\n        EverrestProcessor processor = new EverrestProcessor(new EverrestConfiguration(),\n                                                            dependencies,\n                                                            new RequestHandlerImpl(new RequestDispatcher(resources), providers),\n                                                            null);\n        launcher = new ResourceLauncher(processor);\n\n        processor.addApplication(new Application() {\n            @Override\n            public Set<Class<?>> getClasses() {\n                return java.util.Collections.<Class<?>>singleton(ProjectService.class);\n            }\n\n            @Override\n            public Set<Object> getSingletons() {\n                return new HashSet<>(Arrays.asList(new ApiExceptionMapper()));\n            }\n        });\n\n        ApplicationContext.setCurrent(anApplicationContext().withProviders(providers).build());\n\n        env = org.eclipse.che.commons.env.EnvironmentContext.getCurrent();\n    }\n\n    private void addMockedProjectConfigDto(org.eclipse.che.api.project.server.type.ProjectTypeDef myProjectType, String projectName)\n            throws ForbiddenException, ServerException, NotFoundException, ConflictException {\n        final ProjectConfigDto testProjectConfigMock = mock(ProjectConfigDto.class);\n        when(testProjectConfigMock.getPath()).thenReturn(\"/\" + projectName);\n        when(testProjectConfigMock.getName()).thenReturn(projectName);\n        when(testProjectConfigMock.getDescription()).thenReturn(\"my test project\");\n        when(testProjectConfigMock.getType()).thenReturn(\"my_project_type\");\n        when(testProjectConfigMock.getSource()).thenReturn(DtoFactory.getInstance().createDto(SourceStorageDto.class));\n        //        when(testProjectConfigMock.getModules()).thenReturn(modules);\n        //        when(testProjectConfigMock.findModule(anyString())).thenReturn(testProjectConfigMock);\n\n        Map<String, List<String>> attr = new HashMap<>();\n        for (Attribute attribute : myProjectType.getAttributes()) {\n            attr.put(attribute.getName(), attribute.getValue().getList());\n        }\n        when(testProjectConfigMock.getAttributes()).thenReturn(attr);\n\n        projects.add(testProjectConfigMock);\n\n        pm.createProject(testProjectConfigMock, null);\n    }\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetProjects() throws Exception {\n        List<RegisteredProject> p = pm.getProjects();\n\n        assertEquals(p.size(), 1);\n\n        vfsProvider.getVirtualFileSystem().getRoot().createFolder(\"not_project\");\n\n        // to refresh\n        projectRegistry.initProjects();\n\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project\", \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ProjectConfigDto> result = (List<ProjectConfigDto>)response.getEntity();\n        assertNotNull(result);\n        assertEquals(result.size(), 2);\n        int good, bad;\n\n        if (result.get(0).getName().equals(\"my_project\")) {\n            good = 0; bad = 1;\n        } else {\n            good = 1; bad = 0;\n        }\n\n        ProjectConfigDto projectDescriptor = result.get(good);\n\n        assertEquals(projectDescriptor.getName(), \"my_project\");\n        assertEquals(projectDescriptor.getDescription(), \"my test project\");\n\n        assertEquals(projectDescriptor.getType(), \"my_project_type\");\n\n        ProjectConfigDto badProject = result.get(bad);\n        assertEquals(badProject.getName(), \"not_project\");\n        assertNotNull(badProject.getProblems());\n    }\n\n\n    @Test\n    public void testGetProject() throws Exception {\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project/my_project\",\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        ProjectConfigDto result = (ProjectConfigDto)response.getEntity();\n        assertNotNull(result);\n        assertEquals(result.getDescription(), \"my test project\");\n        assertEquals(result.getType(), \"my_project_type\");\n        Map<String, List<String>> attributes = result.getAttributes();\n        assertNotNull(attributes);\n        assertEquals(attributes.size(), 1);\n        assertEquals(attributes.get(\"my_attribute\"), singletonList(\"attribute value 1\"));\n        validateProjectLinks(result);\n    }\n\n    @Test\n    public void testGetNotValidProject() throws Exception {\n        //MountPoint mountPoint = pm.getProjectsRoot(workspace).getVirtualFile().getMountPoint();\n        vfsProvider.getVirtualFileSystem().getRoot().createFolder(\"not_project\");\n        // to refresh\n        projectRegistry.initProjects();\n        ContainerResponse response = launcher.service(GET, \"http://localhost:8080/api/project/not_project\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        ProjectConfigDto badProject = (ProjectConfigDto)response.getEntity();\n        assertNotNull(badProject);\n        assertEquals(badProject.getName(), \"not_project\");\n        assertNotNull(badProject.getProblems());\n        assertTrue(badProject.getProblems().size() > 0);\n        assertEquals(11, badProject.getProblems().get(0).getCode());\n        validateProjectLinks(badProject);\n    }\n\n    @Test\n    public void testGetProjectCheckUserPermissions() throws Exception {\n        // Without roles Collections.<String>emptySet() should get default set of permissions\n        env.setSubject(new SubjectImpl(vfsUser, vfsUser, \"dummy_token\", false));\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project/my_project\",\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        ProjectConfigDto result = (ProjectConfigDto)response.getEntity();\n        assertNotNull(result);\n    }\n\n\n    @Test\n    public void testGetProjectInvalidPath() throws Exception {\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/my_project_invalid\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 404);\n    }\n\n    @Test\n    public void testCreateProject() throws Exception {\n\n\n\n        phRegistry.register(new CreateProjectHandler() {\n            @Override\n            public void onCreateProject(Path projectPath, Map<String, AttributeValue> attributes, Map<String, String> options)\n                    throws ForbiddenException, ConflictException, ServerException {\n                FolderEntry projectFolder = new FolderEntry(vfsProvider.getVirtualFileSystem().getRoot().createFolder(\"new_project\"));\n                projectFolder.createFolder(\"a\");\n                projectFolder.createFolder(\"b\");\n                projectFolder.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n            }\n\n            @Override\n            public String getProjectType() {\n                return \"testCreateProject\";\n            }\n        });\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Content-Type\", singletonList(APPLICATION_JSON));\n\n        ProjectTypeDef pt = new ProjectTypeDef(\"testCreateProject\", \"my project type\", true, false) {\n            {\n                addConstantDefinition(\"new_project_attribute\", \"attr description\", \"to be or not to be\");\n            }\n        };\n\n        ptRegistry.registerProjectType(pt);\n\n        Map<String, List<String>> attributeValues = new LinkedHashMap<>();\n        attributeValues.put(\"new_project_attribute\", singletonList(\"to be or not to be\"));\n\n\n        final ProjectConfigDto newProjectConfig = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                            .withPath(\"/new_project\")\n                                                            .withName(\"new_project\")\n                                                            .withDescription(\"new project\")\n                                                            .withType(\"testCreateProject\")\n                                                            .withAttributes(attributeValues)\n                                                            .withSource(DtoFactory.getInstance().createDto(SourceStorageDto.class));\n        projects.add(newProjectConfig);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project\",\n                                                      \"http://localhost:8080/api\",\n                                                      headers,\n                                                      DtoFactory.getInstance().toJson(newProjectConfig).getBytes(Charset.defaultCharset()),\n                                                      null);\n\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        ProjectConfigDto result = (ProjectConfigDto)response.getEntity();\n        assertNotNull(result);\n        assertEquals(result.getName(), \"new_project\");\n        assertEquals(result.getPath(), \"/new_project\");\n        assertEquals(result.getDescription(), newProjectConfig.getDescription());\n        assertEquals(result.getType(), newProjectConfig.getType());\n        assertEquals(result.getType(), \"testCreateProject\");\n        Map<String, List<String>> attributes = result.getAttributes();\n        assertNotNull(attributes);\n        assertEquals(attributes.size(), 1);\n        assertEquals(attributes.get(\"new_project_attribute\"), singletonList(\"to be or not to be\"));\n        validateProjectLinks(result);\n\n        RegisteredProject project = pm.getProject(\"new_project\");\n        assertNotNull(project);\n\n        //ProjectConfig config = project.getConfig();\n\n        assertEquals(project.getDescription(), newProjectConfig.getDescription());\n        assertEquals(project.getProjectType().getId(), newProjectConfig.getType());\n        String attributeVal = project.getAttributeEntries().get(\"new_project_attribute\").getString();\n        assertNotNull(attributeVal);\n        assertEquals(attributeVal, \"to be or not to be\");\n\n        assertNotNull(project.getBaseFolder().getChild(\"a\"));\n        assertNotNull(project.getBaseFolder().getChild(\"b\"));\n        assertNotNull(project.getBaseFolder().getChild(\"test.txt\"));\n\n\n    }\n\n\n\n    @Test\n    public void testUpdateProject() throws Exception {\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Content-Type\", singletonList(APPLICATION_JSON));\n\n        ProjectTypeDef pt = new ProjectTypeDef(\"testUpdateProject\", \"my project type\", true, false) {\n        };\n        ptRegistry.registerProjectType(pt);\n\n        pm.createProject(DtoFactory.getInstance().createDto(ProjectConfigDto.class).withDescription(\"created project\").withType(\n                                 \"testUpdateProject\").withPath(\"/testUpdateProject\"), null);\n\n        Map<String, List<String>> attributeValues = new LinkedHashMap<>();\n        attributeValues.put(\"my_attribute\", singletonList(\"to be or not to be\"));\n\n        ProjectConfigDto descriptor = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                .withName(\"module1\")\n                                                .withType(\"testUpdateProject\")\n                                                .withDescription(\"updated project\")\n                                                .withAttributes(attributeValues);\n\n\n        ContainerResponse response = launcher.service(PUT,\n                                                      \"http://localhost:8080/api/project/testUpdateProject\",\n                                                      \"http://localhost:8080/api\",\n                                                      headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()),\n                                                      null);\n\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n\n        RegisteredProject project = pm.getProject(\"/testUpdateProject\");\n        assertNotNull(project);\n        //ProjectConfig config = project.getConfig();\n\n        assertEquals(project.getDescription(), \"updated project\");\n        assertEquals(project.getProjectType().getId(), \"testUpdateProject\");\n    }\n\n    @Test\n    public void testUpdateBadProject() throws Exception {\n        //MountPoint mountPoint = pm.getProjectsRoot(workspace).getVirtualFile().getMountPoint();\n        //mountPoint.getRoot().createFolder(\"not_project\");\n        pm.getProjectsRoot().createFolder(\"not_project\");\n        projectRegistry.initProjects();\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Content-Type\", singletonList(APPLICATION_JSON));\n        Map<String, List<String>> attributeValues = new LinkedHashMap<>();\n        attributeValues.put(\"my_attribute\", singletonList(\"to be or not to be\"));\n        ProjectConfigDto descriptor = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                .withType(\"my_project_type\")\n                                                .withDescription(\"updated project\")\n                                                .withAttributes(attributeValues);\n\n        final ProjectConfigDto newProjectConfig = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                            .withPath(\"/not_project\")\n                                                            .withName(\"not_project\")\n                                                            .withDescription(\"updated project\")\n                                                            .withType(\"my_project_type\")\n                                                            .withAttributes(attributeValues)\n                                                            .withSource(DtoFactory.getInstance().createDto(SourceStorageDto.class));\n        projects.add(newProjectConfig);\n\n        ContainerResponse response = launcher.service(PUT,\n                                                      \"http://localhost:8080/api/project/not_project\",\n                                                      \"http://localhost:8080/api\",\n                                                      headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()),\n                                                      null);\n\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        RegisteredProject project = pm.getProject(\"not_project\");\n        assertNotNull(project);\n        //ProjectConfig description = project.getConfig();\n\n        assertEquals(project.getDescription(), \"updated project\");\n        assertEquals(project.getProjectType().getId(), \"my_project_type\");\n    }\n\n    @Test\n    public void testUpdateProjectInvalidPath() throws Exception {\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Content-Type\", singletonList(APPLICATION_JSON));\n        Map<String, List<String>> attributeValues = new LinkedHashMap<>();\n        attributeValues.put(\"my_attribute\", singletonList(\"to be or not to be\"));\n        ProjectConfigDto descriptor = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                .withType(\"my_project_type\")\n                                                .withDescription(\"updated project\")\n                                                .withAttributes(attributeValues);\n        ContainerResponse response = launcher.service(PUT,\n                                                      \"http://localhost:8080/api/project/my_project_invalid\",\n                                                      \"http://localhost:8080/api\",\n                                                      headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()),\n                                                      null);\n        assertEquals(response.getStatus(), 404);\n    }\n\n    @Test\n    public void testEstimateProject() throws Exception {\n        VirtualFile root = pm.getProjectsRoot().getVirtualFile();\n\n                                     //getVirtualFileSystemRegistry().getProvider(\"my_ws\").getMountPoint(false).getRoot();\n        root.createFolder(\"testEstimateProjectGood\").createFolder(\"check\");\n        root.createFolder(\"testEstimateProjectBad\");\n\n        String errMessage = \"File /check not found\";\n\n        final ValueProviderFactory vpf1 = projectFolder -> new ReadonlyValueProvider() {\n            @Override\n            public List<String> getValues(String attributeName) throws ValueStorageException {\n\n                VirtualFileEntry file;\n                try {\n                    file = projectFolder.getChild(\"check\");\n                } catch (ServerException e) {\n                    throw new ValueStorageException(e.getMessage());\n                }\n\n                if (file == null) {\n                    throw new ValueStorageException(errMessage);\n                }\n                return (List <String>)singletonList(\"checked\");\n            }\n\n        };\n\n        ProjectTypeDef pt = new ProjectTypeDef(\"testEstimateProjectPT\", \"my testEstimateProject type\", true, false) {\n            {\n                addVariableDefinition(\"calculated_attribute\", \"attr description\", true, vpf1);\n                addVariableDefinition(\"my_property_1\", \"attr description\", true);\n                addVariableDefinition(\"my_property_2\", \"attr description\", false);\n            }\n        };\n\n        ptRegistry.registerProjectType(pt);\n\n        ContainerResponse response =\n                launcher.service(GET, String.format(\"http://localhost:8080/api/project/estimate/%s?type=%s\",\n                                                    \"testEstimateProjectGood\", \"testEstimateProjectPT\"),\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        //noinspection unchecked\n        SourceEstimation result = (SourceEstimation)response.getEntity();\n        assertTrue(result.isMatched());\n        assertEquals(result.getAttributes().size(), 1);\n        assertEquals(result.getAttributes().get(\"calculated_attribute\").get(0), \"checked\");\n\n        // if project not matched\n        response = launcher.service(GET, String.format(\"http://localhost:8080/api/project/estimate/%s?type=%s\",\n                                                       \"testEstimateProjectBad\", \"testEstimateProjectPT\"),\n                                    \"http://localhost:8080/api\", null, null, null);\n\n        assertEquals(response.getStatus(), 409, \"Error: \" + response.getEntity());\n        String msg = JsonHelper.parseJson(response.getEntity().toString()).getElement(\"message\").getStringValue();\n        assertEquals(errMessage, msg);\n\n    }\n\n\n\n    @Test\n    public void testResolveSources() throws Exception {\n\n        VirtualFile root = pm.getProjectsRoot().getVirtualFile();\n        root.createFolder(\"testEstimateProjectGood\").createFolder(\"check\");\n        root.createFolder(\"testEstimateProjectBad\");\n\n        final ValueProviderFactory vpf1 = projectFolder -> new ReadonlyValueProvider() {\n            @Override\n            public List<String> getValues(String attributeName) throws ValueStorageException {\n\n                VirtualFileEntry file;\n                try {\n                    file = projectFolder.getChild(\"check\");\n                } catch (ServerException e) {\n                    throw new ValueStorageException(e.getMessage());\n                }\n\n                if (file == null) {\n                    throw new ValueStorageException(\"Check not found\");\n                }\n                return (List<String>)singletonList(\"checked\");\n            }\n\n        };\n\n        ProjectTypeDef pt = new ProjectTypeDef(\"testEstimateProjectPT\", \"my testEstimateProject type\", true, false) {\n            {\n                addVariableDefinition(\"calculated_attribute\", \"attr description\", true, vpf1);\n                addVariableDefinition(\"my_property_1\", \"attr description\", true);\n                addVariableDefinition(\"my_property_2\", \"attr description\", false);\n            }\n        };\n\n        ptRegistry.registerProjectType(pt);\n\n        ContainerResponse response =\n                launcher.service(GET, String.format(\"http://localhost:8080/api/project/resolve/%s\",\n                                                    \"testEstimateProjectGood\"),\n                                                    \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<SourceEstimation> result = (List<SourceEstimation>) response.getEntity();\n\n        assertTrue(result.size() > 0);\n        boolean m = false;\n        for(SourceEstimation est : result) {\n            if(est.getType().equals(\"testEstimateProjectPT\")) {\n                assertTrue(est.isMatched());\n                m = true;\n            }\n\n        }\n        assertTrue(m);\n\n    }\n\n\n    @Test\n    public void testImportProject() throws Exception {\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        ZipOutputStream zipOut = new ZipOutputStream(bout);\n        zipOut.putNextEntry(new ZipEntry(\"folder1/\"));\n        zipOut.putNextEntry(new ZipEntry(\"folder1/file1.txt\"));\n        zipOut.write(\"to be or not to be\".getBytes(Charset.defaultCharset()));\n        zipOut.close();\n        final InputStream zip = new ByteArrayInputStream(bout.toByteArray());\n        final String importType = \"_123_\";\n        registerImporter(importType, zip);\n\n        final String myType = \"chuck_project_type\";\n\n        final ProjectConfigDto newProjectConfig = DtoFactory.getInstance().createDto(ProjectConfigDto.class)\n                                                            .withPath(\"/new_project\")\n                                                            .withName(\"new_project\")\n                                                            .withDescription(\"import test\")\n                                                            .withType(myType);\n        projects.add(newProjectConfig);\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(\"Content-Type\", singletonList(APPLICATION_JSON));\n\n        String json = \"{\\n\" +\n                      \"            \\\"location\\\": null,\\n\" +\n                      \"            \\\"type\\\": \\\"%s\\\"\\n\" +\n                      \"}\";\n\n        byte[] b = String.format(json, importType).getBytes(Charset.defaultCharset());\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/import/new_project\",\n                                                      \"http://localhost:8080/api\", headers, b, null);\n        assertEquals(response.getStatus(), 204);\n\n        RegisteredProject newProject = pm.getProject(\"new_project\");\n        assertNotNull(newProject);\n\n        //assertNotNull(newProject.getConfig());\n    }\n\n    private void registerImporter(String importType, InputStream zip) throws Exception {\n        final ValueHolder<FolderEntry> folderHolder = new ValueHolder<>();\n        importerRegistry.register(new ProjectImporter() {\n            @Override\n            public String getId() {\n                return importType;\n            }\n\n            @Override\n            public boolean isInternal() {\n                return false;\n            }\n\n            @Override\n            public String getDescription() {\n                return \"Chuck importer\";\n            }\n\n            @Override\n            public void importSources(FolderEntry baseFolder, SourceStorage storage) throws ConflictException,\n                                                                                            ServerException,\n                                                                                            ForbiddenException {\n                importSources(baseFolder, storage, LineConsumerFactory.NULL);\n            }\n\n            @Override\n            public void importSources(FolderEntry baseFolder,\n                                      SourceStorage storage,\n                                      LineConsumerFactory importOutputConsumerFactory) throws ConflictException,\n                                                                                              ServerException,\n                                                                                              ForbiddenException {\n                // Don't really use location in this test.\n                baseFolder.getVirtualFile().unzip(zip, true, 0);\n                folderHolder.set(baseFolder);\n            }\n\n            @Override\n            public ImporterCategory getCategory() {\n                return ImporterCategory.ARCHIVE;\n            }\n        });\n    }\n\n\n\n\n    @Test\n    public void testCreateFile() throws Exception {\n        String myContent = \"to be or not to be\";\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/file/my_project?name=test.txt\",\n                                                      \"http://localhost:8080/api\",\n                                                      null,\n                                                      myContent.getBytes(Charset.defaultCharset()),\n                                                      null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        ItemReference fileItem = (ItemReference)response.getEntity();\n        assertEquals(fileItem.getType(), \"file\");\n//        assertEquals(fileItem.getMediaType(), TEXT_PLAIN);\n        assertEquals(fileItem.getName(), \"test.txt\");\n        assertEquals(fileItem.getPath(), \"/my_project/test.txt\");\n        validateFileLinks(fileItem);\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/test.txt\"));\n        VirtualFileEntry file = pm.getProject(\"my_project\").getBaseFolder().getChild(\"test.txt\");\n        Assert.assertTrue(file.isFile());\n        FileEntry _file = (FileEntry)file;\n        //assertEquals(_file.getMediaType(), TEXT_PLAIN);\n        assertEquals(new String(_file.contentAsBytes()), myContent);\n    }\n\n\n    @Test\n    public void testGetFileContent() throws Exception {\n        String myContent = \"to be or not to be\";\n        pm.getProject(\"my_project\").getBaseFolder().createFile(\"test.txt\", myContent.getBytes(Charset.defaultCharset()));\n        ByteArrayContainerResponseWriter writer = new ByteArrayContainerResponseWriter();\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/file/my_project/test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, writer, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        assertEquals(response.getContentType().toString(), TEXT_PLAIN);\n        assertEquals(new String(writer.getBody()), myContent);\n    }\n\n    @Test\n    public void testUpdateFileContent() throws Exception {\n        String myContent = \"<test>hello</test>\";\n        pm.getProject(\"my_project\").getBaseFolder().createFile(\"test.xml\", \"to be or not to be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(PUT,\n                                                      \"http://localhost:8080/api/project/file/my_project/test.xml\",\n                                                      \"http://localhost:8080/api\", null, myContent.getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        VirtualFileEntry file = pm.getProject(\"my_project\").getBaseFolder().getChild(\"test.xml\");\n        Assert.assertTrue(file.isFile());\n        FileEntry _file = (FileEntry)file;\n        assertEquals(new String(_file.contentAsBytes()), myContent);\n    }\n\n    @Test\n    public void testCreateFolder() throws Exception {\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/folder/my_project/test\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        ItemReference fileItem = (ItemReference)response.getEntity();\n        assertEquals(fileItem.getName(), \"test\");\n        assertEquals(fileItem.getPath(), \"/my_project/test\");\n        validateFolderLinks(fileItem);\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/test\"));\n        VirtualFileEntry folder = pm.getProject(\"my_project\").getBaseFolder().getChild(\"test\");\n        Assert.assertTrue(folder.isFolder());\n    }\n\n    // any folder created in the root of the workspace automatically becomes project\n    @Test\n    public void testCreateFolderInRoot() throws Exception {\n        String folder = \"my_folder\";\n        ContainerResponse response = launcher.service(POST,\n                                                      String.format(\"http://localhost:8080/api/project/folder/%s\", folder),\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        ItemReference fileItem = (ItemReference)response.getEntity();\n        assertEquals(fileItem.getType(), \"project\");\n        assertEquals(fileItem.getName(), folder);\n        assertEquals(fileItem.getPath(), \"/\" + folder);\n        validateFolderLinks(fileItem);\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(String.format(\"http://localhost:8080/api/project/children/%s\", folder)));\n    }\n\n    @Test\n    public void testCreatePath() throws Exception {\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/folder/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/a/b/c\"));\n        VirtualFileEntry folder = pm.getProject(\"my_project\").getBaseFolder().getChild(\"a/b/c\");\n        Assert.assertTrue(folder.isFolder());\n    }\n\n    @Test\n    public void testDeleteFile() throws Exception {\n        pm.getProject(\"my_project\").getBaseFolder().createFile(\"test.txt\", \"to be or not to be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(DELETE,\n                                                      \"http://localhost:8080/api/project/my_project/test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 204, \"Error: \" + response.getEntity());\n        Assert.assertNull(pm.getProject(\"my_project\").getBaseFolder().getChild(\"test.txt\"));\n    }\n\n    @Test\n    public void testDeleteFolder() throws Exception {\n        pm.getProject(\"my_project\").getBaseFolder().createFolder(\"test\");\n        ContainerResponse response = launcher.service(DELETE,\n                                                      \"http://localhost:8080/api/project/my_project/test\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 204, \"Error: \" + response.getEntity());\n        Assert.assertNull(pm.getProject(\"my_project\").getBaseFolder().getChild(\"test\"));\n    }\n\n    @Test\n    public void testDeletePath() throws Exception {\n        pm.getProject(\"my_project\").getBaseFolder().createFolder(\"a/b/c\");\n        ContainerResponse response = launcher.service(DELETE,\n                                                      \"http://localhost:8080/api/project/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 204, \"Error: \" + response.getEntity());\n        Assert.assertNull(pm.getProject(\"my_project\").getBaseFolder().getChild(\"a/b/c\"));\n    }\n\n    @Test\n    public void testDeleteInvalidPath() throws Exception {\n        ContainerResponse response = launcher.service(DELETE,\n                                                      \"http://localhost:8080/api/project/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 204);\n        assertNotNull(pm.getProject(\"my_project\"));\n    }\n\n    @Test(expectedExceptions = NotFoundException.class)\n    public void testDeleteProject() throws Exception {\n\n\n        ContainerResponse response = launcher.service(DELETE,\n                                                      \"http://localhost:8080/api/project/my_project\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 204, \"Error: \" + response.getEntity());\n\n        pm.getProject(\"my_project\");\n    }\n\n    @Test\n    public void testDeleteProjectsConcurrently() throws Exception {\n        int threadNumber = 5 * (Runtime.getRuntime().availableProcessors() + 1);\n        ExecutorService executor = Executors.newFixedThreadPool(threadNumber);\n        CountDownLatch countDownLatch = new CountDownLatch(threadNumber);\n        List<Future<ContainerResponse>> futures = new LinkedList<>();\n\n\n        for (int i = 0; i < threadNumber; i++) {\n            addMockedProjectConfigDto(ptRegistry.getProjectType(\"my_project_type\"), \"my_project_name\" + i);\n        }\n\n        IntStream.range(0, threadNumber).forEach(\n                i -> {\n                    futures.add(executor.submit(() -> {\n                        countDownLatch.countDown();\n                        countDownLatch.await();\n\n                        try {\n                            return launcher.service(DELETE,\n                                                    \"http://localhost:8080/api/project/my_project_name\" + i,\n                                                    \"http://localhost:8080/api\", null, null, null);\n                        } catch (Exception e) {\n                            throw new IllegalStateException(e);\n                        }\n                    }));\n                }\n                                                );\n\n        boolean isNotDone;\n        do {\n            isNotDone = false;\n            for (Future<ContainerResponse> future : futures) {\n                if (!future.isDone()) {\n                    isNotDone = true;\n                }\n            }\n        } while (isNotDone);\n\n        for (Future<ContainerResponse> future : futures) {\n            assertEquals(future.get().getStatus(), 204, \"Error: \" + future.get().getEntity());\n        }\n\n        executor.shutdown();\n    }\n\n    @Test\n    public void testCopyFile() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b/test.txt?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/a/b/c/test.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/test.txt\")); // new\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\")); // old\n    }\n\n    @Test\n    public void testCopyFileWithRename() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        CopyOptions descriptor = DtoFactory.getInstance().createDto(CopyOptions.class);\n        descriptor.setName(\"copyOfTest.txt\");\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b/test.txt?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/a/b/c/copyOfTest.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/copyOfTest.txt\")); // new\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\")); // old\n    }\n\n    @Test\n    public void testCopyFileWithRenameAndOverwrite() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n\n        // File names\n        String originFileName = \"test.txt\";\n        String destinationFileName = \"overwriteMe.txt\";\n\n        // File contents\n        String originContent = \"to be or not no be\";\n        String overwrittenContent = \"that is the question\";\n\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(originFileName, originContent.getBytes(Charset.defaultCharset()));\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b/c\")).createFile(destinationFileName, overwrittenContent.getBytes(Charset.defaultCharset()));\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        CopyOptions descriptor = DtoFactory.getInstance().createDto(CopyOptions.class);\n        descriptor.setName(destinationFileName);\n        descriptor.setOverWrite(true);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b/\" + originFileName + \"?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/a/b/c/\" + destinationFileName));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/\" + destinationFileName)); // new\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/\" + originFileName)); // old\n\n        Scanner inputStreamScanner = null;\n        String theFirstLineFromDestinationFile;\n\n        try {\n            inputStreamScanner = new Scanner(\n                    myProject.getBaseFolder().getChild(\"a/b/c/\" + destinationFileName).getVirtualFile().getContent());\n            theFirstLineFromDestinationFile = inputStreamScanner.nextLine();\n            // destination should contain original file's content\n            assertEquals(theFirstLineFromDestinationFile, originContent);\n        } catch (ForbiddenException | ServerException e) {\n            Assert.fail(e.getMessage());\n        } finally {\n            if (inputStreamScanner != null) {\n                inputStreamScanner.close();\n            }\n        }\n    }\n\n    @Test\n    public void testCopyFolder() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/a/b/c/b\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/b/test.txt\"));\n    }\n\n    @Test\n    public void testCopyFolderWithRename() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        // new name for folder\n        final String renamedFolder = \"renamedFolder\";\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        CopyOptions descriptor = DtoFactory.getInstance().createDto(CopyOptions.class);\n        descriptor.setName(renamedFolder);\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/children/my_project/a/b/c/%s\", renamedFolder)));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s/test.txt\", renamedFolder)));\n    }\n\n    @Test\n    public void testCopyFolderWithRenameAndOverwrite() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n\n        // File names\n        String originFileName = \"test.txt\";\n        String destinationFileName = \"overwriteMe.txt\";\n\n        // File contents\n        String originContent = \"to be or not no be\";\n        String overwrittenContent = \"that is the question\";\n\n        // new name for folder\n        final String renamedFolder = \"renamedFolder\";\n\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(originFileName, originContent.getBytes(Charset.defaultCharset()));\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b/c\")).createFile(destinationFileName, overwrittenContent.getBytes(Charset.defaultCharset()));\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        CopyOptions descriptor = DtoFactory.getInstance().createDto(CopyOptions.class);\n        descriptor.setName(renamedFolder);\n        descriptor.setOverWrite(true);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/children/my_project/a/b/c/%s\", renamedFolder)));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s/test.txt\", renamedFolder)));\n        assertEquals(myProject.getBaseFolder().getChild(\"a/b/test.txt\").getName(),\n                     myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s/%s\", renamedFolder, originFileName)).getName());\n    }\n\n    @Test\n    public void testMoveFile() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b/test.txt?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/a/b/c/test.txt\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/test.txt\")); // new\n        Assert.assertNull(myProject.getBaseFolder().getChild(\"a/b/test.txt\")); // old\n    }\n\n    @Test\n    public void testMoveFileWithRename() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        // name for file after move\n        final String destinationName = \"copyOfTestForMove.txt\";\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(destinationName);\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b/test.txt?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/file/my_project/a/b/c/%s\", destinationName)));\n        VirtualFileEntry theTargetFile = myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s\", destinationName));\n        assertNotNull(theTargetFile); // new\n    }\n\n    @Test\n    public void testRenameFile() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        // name for file after move\n        final String destinationName = \"copyOfTestForMove.txt\";\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(destinationName);\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b/test.txt\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/file/my_project/a/b/%s\", destinationName)));\n        VirtualFileEntry theTargetFile = myProject.getBaseFolder().getChild(String.format(\"a/b/%s\", destinationName));\n        assertNotNull(theTargetFile); // new\n    }\n\n    @Test\n    public void testMoveFileWithRenameAndOverwrite() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n\n        // File names\n        String originFileName = \"test.txt\";\n        String destinationFileName = \"overwriteMe.txt\";\n\n        // File contents\n        String originContent = \"to be or not no be\";\n        String overwrittenContent = \"that is the question\";\n\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(originFileName, originContent.getBytes(Charset.defaultCharset()));\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b/c\")).createFile(destinationFileName, overwrittenContent.getBytes(Charset.defaultCharset()));\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(destinationFileName);\n        descriptor.setOverWrite(true);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b/\" + originFileName +\n                                                      \"?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/file/my_project/a/b/c/\" + destinationFileName));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/c/\" + destinationFileName)); // new\n\n        Scanner inputStreamScanner = null;\n        String theFirstLineFromDestinationFile;\n\n        try {\n            inputStreamScanner = new Scanner(\n                    myProject.getBaseFolder().getChild(\"a/b/c/\" + destinationFileName).getVirtualFile().getContent());\n            theFirstLineFromDestinationFile = inputStreamScanner.nextLine();\n            // destination should contain original file's content\n            assertEquals(theFirstLineFromDestinationFile, originContent);\n        } catch (ForbiddenException | ServerException e) {\n            Assert.fail(e.getMessage());\n        } finally {\n            if (inputStreamScanner != null) {\n                inputStreamScanner.close();\n            }\n        }\n    }\n\n    @Test\n    public void testMoveFolder() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b/c\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b/c?to=/my_project/a\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/a/c\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/c/test.txt\"));\n        Assert.assertNull(myProject.getBaseFolder().getChild(\"a/b/c/test.txt\"));\n        Assert.assertNull(myProject.getBaseFolder().getChild(\"a/b/c\"));\n    }\n\n    @Test\n    public void testMoveFolderWithRename() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        // new name for folder\n        final String renamedFolder = \"renamedFolder\";\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(renamedFolder);\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/children/my_project/a/b/c/%s\", renamedFolder)));\n        assertNotNull(myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s/test.txt\", renamedFolder)));\n    }\n\n    @Test\n    public void testRenameFolder() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\");\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(\"test.txt\", \"to be or not no be\".getBytes(Charset.defaultCharset()));\n\n        // new name for folder\n        final String renamedFolder = \"renamedFolder\";\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(renamedFolder);\n        descriptor.setOverWrite(false);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/move/my_project/a/b\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/children/my_project/a/%s\", renamedFolder)));\n        assertNotNull(myProject.getBaseFolder().getChild(String.format(\"a/%s/test.txt\", renamedFolder)));\n    }\n\n    @Test\n    public void testMoveFolderWithRenameAndOverwrite() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b/c\");\n\n        // File names\n        String originFileName = \"test.txt\";\n        String destinationFileName = \"overwriteMe.txt\";\n\n        // File contents\n        String originContent = \"to be or not no be\";\n        String overwritenContent = \"that is the question\";\n\n        // new name for folder\n        final String renamedFolder = \"renamedFolder\";\n\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b\")).createFile(originFileName, originContent.getBytes(Charset.defaultCharset()));\n        ((FolderEntry)myProject.getBaseFolder().getChild(\"a/b/c\")).createFile(destinationFileName, overwritenContent.getBytes(Charset.defaultCharset()));\n\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));\n\n        MoveOptions descriptor = DtoFactory.getInstance().createDto(MoveOptions.class);\n        descriptor.setName(renamedFolder);\n        descriptor.setOverWrite(true);\n\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/copy/my_project/a/b?to=/my_project/a/b/c\",\n                                                      \"http://localhost:8080/api\", headers,\n                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()), null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\n                             String.format(\"http://localhost:8080/api/project/children/my_project/a/b/c/%s\", renamedFolder)));\n        assertNotNull(myProject.getBaseFolder().getChild(String.format(\"a/b/c/%s/test.txt\", renamedFolder)));\n    }\n\n    @Test\n    public void testImportZip() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\");\n\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        ZipOutputStream zipOut = new ZipOutputStream(bout);\n        zipOut.putNextEntry(new ZipEntry(\"folder1/\"));\n        zipOut.putNextEntry(new ZipEntry(\"folder1/file1.txt\"));\n        zipOut.write(\"to be or not to be\".getBytes(Charset.defaultCharset()));\n        zipOut.close();\n        byte[] zip = bout.toByteArray();\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(ExtMediaType.APPLICATION_ZIP));\n        ContainerResponse response = launcher.service(POST,\n                                                      String.format(\"http://localhost:8080/api/project/import/my_project/a/b\"),\n                                                      \"http://localhost:8080/api\", headers, zip, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/a/b\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/folder1/file1.txt\"));\n    }\n\n    @Test\n    public void testImportZipWithoutSkipFirstLevel() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\");\n\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        ZipOutputStream zipOut = new ZipOutputStream(bout);\n        zipOut.putNextEntry(new ZipEntry(\"folder1/\"));\n        zipOut.putNextEntry(new ZipEntry(\"folder1/folder2/\"));\n        zipOut.putNextEntry(new ZipEntry(\"folder1/folder2/file1.txt\"));\n        zipOut.write(\"to be or not to be\".getBytes(Charset.defaultCharset()));\n        zipOut.close();\n        byte[] zip = bout.toByteArray();\n        Map<String, List<String>> headers = new HashMap<>();\n        headers.put(CONTENT_TYPE, singletonList(ExtMediaType.APPLICATION_ZIP));\n        ContainerResponse response = launcher.service(POST,\n                                                      \"http://localhost:8080/api/project/import/my_project/a/b?skipFirstLevel=false\",\n                                                      \"http://localhost:8080/api\", headers, zip, null);\n        assertEquals(response.getStatus(), 201, \"Error: \" + response.getEntity());\n        assertEquals(response.getHttpHeaders().getFirst(\"Location\"),\n                     URI.create(\"http://localhost:8080/api/project/children/my_project/a/b\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/folder1/\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/folder1/folder2\"));\n        assertNotNull(myProject.getBaseFolder().getChild(\"a/b/folder1/folder2/file1.txt\"));\n    }\n\n    @Test\n    public void testExportZip() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"hello\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/export/my_project\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        assertEquals(response.getContentType().toString(), ExtMediaType.APPLICATION_ZIP);\n    }\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetChildren() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b\");\n        a.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/children/my_project/a\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        Set<String> names = new LinkedHashSet<>(2);\n        names.addAll(result.stream().map(ItemReference::getName).collect(Collectors.toList()));\n        Assert.assertTrue(names.contains(\"b\"));\n        Assert.assertTrue(names.contains(\"test.txt\"));\n    }\n\n    @Test\n    @SuppressWarnings(\"unchecked\")\n    public void testGetItem() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b\");\n        a.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/item/my_project/a/b\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n\n        ItemReference result = (ItemReference)response.getEntity();\n        assertEquals(result.getName(), \"b\");\n\n        response = launcher.service(GET,\n                                    \"http://localhost:8080/api/project/item/my_project/a/test.txt\",\n                                    \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        result = (ItemReference)response.getEntity();\n        assertEquals(result.getType(), \"file\");\n        //assertEquals(result.getMediaType(), TEXT_PLAIN);\n    }\n\n    @Test\n    public void testGetItemWithoutParentProject() throws Exception {\n        FolderEntry a = pm.getProjectsRoot().createFolder(\"a\");\n        a.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/item/a/test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        ItemReference result = (ItemReference)response.getEntity();\n        assertEquals(result.getType(), \"file\");\n        //assertEquals(result.getMediaType(), TEXT_PLAIN);\n    }\n\n    @Test\n    public void testGetMissingItem() throws Exception {\n        ContainerResponse response = launcher.service(GET,\n                                                     \"http://localhost:8080/api/project/item/some_missing_project/a/b\",\n                                                     \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 404, \"Error: \" + response.getEntity());\n    }\n\n    @Test\n    public void testGetTree() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b/c\");\n        a.createFolder(\"x/y\");\n        a.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/tree/my_project/a\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        TreeElement tree = (TreeElement)response.getEntity();\n        ItemReference a_node = tree.getNode();\n        assertEquals(a_node.getName(), \"a\");\n        validateFolderLinks(a_node);\n        List<TreeElement> children = tree.getChildren();\n        assertNotNull(children);\n        assertEquals(children.size(), 2);\n        Set<String> names = new LinkedHashSet<>(2);\n        for (TreeElement subTree : children) {\n            ItemReference _node = subTree.getNode();\n            validateFolderLinks(_node);\n            names.add(_node.getName());\n            Assert.assertTrue(subTree.getChildren().isEmpty()); // default depth is 1\n        }\n        Assert.assertTrue(names.contains(\"b\"));\n        Assert.assertTrue(names.contains(\"x\"));\n    }\n\n    @Test\n    public void testGetTreeWithDepth() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b/c\");\n        a.createFolder(\"x/y\");\n        a.createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/tree/my_project/a?depth=2\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        TreeElement tree = (TreeElement)response.getEntity();\n        ItemReference a_node = tree.getNode();\n        assertEquals(a_node.getName(), \"a\");\n        List<TreeElement> children = tree.getChildren();\n        assertNotNull(children);\n        Set<String> names = new LinkedHashSet<>(4);\n        for (TreeElement subTree : children) {\n            ItemReference _node = subTree.getNode();\n            validateFolderLinks(_node);\n            String name = _node.getName();\n            names.add(name);\n            for (TreeElement subSubTree : subTree.getChildren()) {\n                ItemReference __node = subSubTree.getNode();\n                validateFolderLinks(__node);\n                names.add(name + \"/\" + __node.getName());\n            }\n        }\n        Assert.assertTrue(names.contains(\"b\"));\n        Assert.assertTrue(names.contains(\"x\"));\n        Assert.assertTrue(names.contains(\"b/c\"));\n        Assert.assertTrue(names.contains(\"x/y\"));\n    }\n\n    @Test\n    public void testGetTreeWithDepthAndIncludeFiles() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b/c\");\n        a.createFolder(\"x\").createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/tree/my_project/a?depth=100&includeFiles=true\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        TreeElement tree = (TreeElement)response.getEntity();\n        ItemReference a_node = tree.getNode();\n        assertEquals(a_node.getName(), \"a\");\n        List<TreeElement> children = tree.getChildren();\n        assertNotNull(children);\n        Set<String> names = new LinkedHashSet<>(4);\n        for (TreeElement subTree : children) {\n            ItemReference _node = subTree.getNode();\n            validateFolderLinks(_node);\n            String name = _node.getName();\n            names.add(name);\n            for (TreeElement subSubTree : subTree.getChildren()) {\n                ItemReference __node = subSubTree.getNode();\n                if (__node.getType().equals(\"folder\")) {\n                    validateFolderLinks(__node);\n                } else if (__node.getType().equals(\"file\")) {\n                    validateFileLinks(__node);\n                }\n                names.add(name + \"/\" + __node.getName());\n            }\n        }\n        Assert.assertTrue(names.contains(\"b\"));\n        Assert.assertTrue(names.contains(\"x\"));\n        Assert.assertTrue(names.contains(\"b/c\"));\n        Assert.assertTrue(names.contains(\"x/test.txt\"));\n    }\n\n    @Test\n    public void testGetTreeWithDepthAndIncludeFilesNoFiles() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        FolderEntry a = myProject.getBaseFolder().createFolder(\"a\");\n        a.createFolder(\"b/c\");\n        a.createFolder(\"x\");\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/tree/my_project/a?depth=100&includeFiles=true\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        TreeElement tree = (TreeElement)response.getEntity();\n        ItemReference a_node = tree.getNode();\n        assertEquals(a_node.getName(), \"a\");\n        List<TreeElement> children = tree.getChildren();\n        assertNotNull(children);\n        Set<String> names = new LinkedHashSet<>(4);\n        for (TreeElement subTree : children) {\n            ItemReference _node = subTree.getNode();\n            validateFolderLinks(_node);\n            String name = _node.getName();\n            names.add(name);\n            for (TreeElement subSubTree : subTree.getChildren()) {\n                ItemReference __node = subSubTree.getNode();\n                validateFolderLinks(__node);\n                names.add(name + \"/\" + __node.getName());\n            }\n        }\n        Assert.assertTrue(names.contains(\"b\"));\n        Assert.assertTrue(names.contains(\"x\"));\n        Assert.assertTrue(names.contains(\"b/c\"));\n        Assert.assertFalse(names.contains(\"x/test.txt\"));\n    }\n\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchByName() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"hello\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"exclude\", \"test\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/search/my_project?name=test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        Set<String> paths = new LinkedHashSet<>(2);\n        for (ItemReference itemReference : result) {\n            paths.add(itemReference.getPath());\n        }\n        Assert.assertTrue(paths.contains(\"/my_project/a/b/test.txt\"));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/test.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchByText() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"hello\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"__test.txt\", \"searchhit\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"_test\", \"searchhit\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/search/my_project?text=searchhit\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        Set<String> paths = new LinkedHashSet<>(1);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/__test.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchByTextWhenFileWasNotIndexed() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"hello\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"__test.txt\", \"searchhit\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(EXCLUDE_SEARCH_PATH).createFile(\"_test\", \"searchhit\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/search/my_project?text=searchhit\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 1);\n        Set<String> paths = new LinkedHashSet<>(1);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/__test.txt\"));\n        Assert.assertFalse(paths.contains(\"/my_project/\" + EXCLUDE_SEARCH_PATH + \"/_test\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchParticularSequenceWords() throws Exception {\n        String queryToSearch = \"?text=\" + URL_ENCODED_QUOTES +\n                               \"To\" + URL_ENCODED_SPACE +\n                               \"be\" + URL_ENCODED_SPACE +\n                               \"or\" + URL_ENCODED_SPACE +\n                               \"not\" + URL_ENCODED_SPACE +\n                               \"to\" + URL_ENCODED_SPACE +\n                               \"be\" + URL_ENCODED_QUOTES;\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"containsSearchText.txt\", \"To be or not to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"Pay attention! To be or to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"_test\", \"Pay attention! To be or to not be that is the question\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project/search/my_project\" + queryToSearch,\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 1);\n        Set<String> paths = new LinkedHashSet<>(1);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/containsSearchText.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchParticularSequenceWordsWithAnyEnding() throws Exception {\n        String queryToSearch = \"?text=\" + URL_ENCODED_QUOTES +\n                               \"that\" + URL_ENCODED_SPACE +\n                               \"is\" + URL_ENCODED_SPACE +\n                               \"the\" + URL_ENCODED_QUOTES + URL_ENCODED_SPACE + AND_OPERATOR + URL_ENCODED_SPACE +\n                               \"question\" + URL_ENCODED_ASTERISK;\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"containsSearchText.txt\", \"To be or not to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"a/b\")\n                 .createFile(\"containsSearchTextAlso.txt\", \"Pay attention! To be or not to be that is the questionS\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\")\n                 .createFile(\"notContainsSearchText\", \"Pay attention! To be or to not be that is the questEon\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response =\n                launcher.service(GET,\"http://localhost:8080/api/project/search/my_project\" + queryToSearch,\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        Set<String> paths = new LinkedHashSet<>(2);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/containsSearchText.txt\"));\n        Assert.assertTrue(paths.contains(\"/my_project/a/b/containsSearchTextAlso.txt\"));\n        Assert.assertFalse(paths.contains(\"/my_project/c/notContainsSearchText.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchWordWithAnyEnding() throws Exception {\n        String queryToSearch = \"?text=\" +\n                               \"question\" + URL_ENCODED_ASTERISK;\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"containsSearchText.txt\", \"To be or not to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"a/b\")\n                 .createFile(\"containsSearchTextAlso.txt\", \"Pay attention! To be or not to be that is the questionS\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\")\n                 .createFile(\"notContainsSearchText\", \"Pay attention! To be or to not be that is the questEon\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project/search/my_project\" + queryToSearch,\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        Set<String> paths = new LinkedHashSet<>(2);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/containsSearchText.txt\"));\n        Assert.assertTrue(paths.contains(\"/my_project/a/b/containsSearchTextAlso.txt\"));\n        Assert.assertFalse(paths.contains(\"/my_project/c/notContainsSearchText.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchTextWhenExcludeSomeText() throws Exception {\n        String queryToSearch = \"?text=\" +\n                               \"question\" + URL_ENCODED_SPACE + NOT_OPERATOR + URL_ENCODED_SPACE + URL_ENCODED_QUOTES +\n                               \"attention!\" + URL_ENCODED_QUOTES;\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"containsSearchText.txt\", \"To be or not to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"b\")\n                 .createFile(\"notContainsSearchText\", \"Pay attention! To be or not to be that is the question\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"alsoNotContainsSearchText\", \"To be or to not be that is the ...\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response =\n                launcher.service(GET, \"http://localhost:8080/api/project/search/my_project\" + queryToSearch,\n                                 \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 1);\n        Set<String> paths = new LinkedHashSet<>(1);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/containsSearchText.txt\"));\n        Assert.assertFalse(paths.contains(\"/my_project/b/notContainsSearchText.txt\"));\n        Assert.assertFalse(paths.contains(\"/my_project/c/alsoContainsSearchText\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchTextWithEscapedCharachters() throws Exception {\n        String queryToSearch = \"?text=http\" +\n                               URL_ENCODED_BACKSLASH + ':' +\n                               URL_ENCODED_BACKSLASH + '/' +\n                               URL_ENCODED_BACKSLASH + '/' + \"localhost\" +\n                               URL_ENCODED_BACKSLASH + ':' + \"8080\" +\n                               URL_ENCODED_BACKSLASH + '/' + \"ide\" +\n                               URL_ENCODED_BACKSLASH + '/' + \"dev6\" +\n                               URL_ENCODED_BACKSLASH + '?' + \"action=createProject\" +\n                               URL_ENCODED_BACKSLASH + ':' + \"projectName=test\";\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"x/y\")\n                 .createFile(\"test.txt\", \"http://localhost:8080/ide/dev6?action=createProject:projectName=test\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET, \"http://localhost:8080/api/project/search/my_project\" + queryToSearch,\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 1);\n        Set<String> paths = new LinkedHashSet<>(1);\n        paths.addAll(result.stream().map(ItemReference::getPath).collect(Collectors.toList()));\n        Assert.assertTrue(paths.contains(\"/my_project/x/y/test.txt\"));\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchByNameAndText() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"test\", \"test\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/search/my_project?text=test&name=test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 2);\n        assertEqualsNoOrder(new Object[] {\n                                    result.get(0).getPath(),\n                                    result.get(1).getPath()\n                            },\n                            new Object[] {\n                                    \"/my_project/a/b/test.txt\",\n                                    \"/my_project/x/y/test.txt\"\n                            });\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSearchFromWSRoot() throws Exception {\n        RegisteredProject myProject = pm.getProject(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test\", \"test\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"x/y\").createFile(\"test\", \"test\".getBytes(Charset.defaultCharset()));\n        myProject.getBaseFolder().createFolder(\"c\").createFile(\"test.txt\", \"test\".getBytes(Charset.defaultCharset()));\n\n        ContainerResponse response = launcher.service(GET,\n                                                      \"http://localhost:8080/api/project/search/?text=test&name=test.txt\",\n                                                      \"http://localhost:8080/api\", null, null, null);\n        assertEquals(response.getStatus(), 200, \"Error: \" + response.getEntity());\n        List<ItemReference> result = (List<ItemReference>)response.getEntity();\n        assertEquals(result.size(), 1);\n        Assert.assertTrue(result.get(0).getPath().equals(\"/my_project/c/test.txt\"));\n    }\n\n    private void validateFileLinks(ItemReference item) {\n        Link link = item.getLink(\"delete\");\n        assertNotNull(link);\n        assertEquals(link.getMethod(), DELETE);\n        assertEquals(link.getHref(), \"http://localhost:8080/api/project\"  + item.getPath());\n        link = item.getLink(\"update content\");\n        assertNotNull(link);\n        assertEquals(link.getMethod(), PUT);\n        assertEquals(link.getConsumes(), \"*/*\");\n        assertEquals(link.getHref(), \"http://localhost:8080/api/project\"  + \"/file\" + item.getPath());\n    }\n\n    private void validateFolderLinks(ItemReference item) {\n        Link link = item.getLink(\"children\");\n        assertNotNull(link);\n        assertEquals(link.getMethod(), GET);\n        assertEquals(link.getHref(), \"http://localhost:8080/api/project/children\" + item.getPath());\n        assertEquals(link.getProduces(), APPLICATION_JSON);\n\n        link = item.getLink(\"tree\");\n        assertNotNull(link);\n        assertEquals(link.getMethod(), GET);\n        assertEquals(link.getHref(), \"http://localhost:8080/api/project/tree\" + item.getPath());\n        assertEquals(link.getProduces(), APPLICATION_JSON);\n        link = item.getLink(\"delete\");\n        assertNotNull(link);\n        assertEquals(link.getMethod(), DELETE);\n        assertEquals(link.getHref(), \"http://localhost:8080/api/project\" + item.getPath());\n    }\n\n\n\n\n    private void validateProjectLinks(ProjectConfigDto project) {\n        List<Link> links = project.getLinks();\n\n        for (Link link : links) {\n            switch (link.getHref()) {\n                case \"update project\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), PUT);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project\" + project.getPath());\n                    assertEquals(link.getConsumes(), APPLICATION_JSON);\n                    assertEquals(link.getProduces(), APPLICATION_JSON);\n                    break;\n\n                case \"children\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), GET);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project/children\" + project.getPath());\n                    assertEquals(link.getProduces(), APPLICATION_JSON);\n                    break;\n\n                case \"tree\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), GET);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project/tree\" + project.getPath());\n                    assertEquals(link.getProduces(), APPLICATION_JSON);\n                    break;\n\n                case \"modules\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), GET);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project/modules\" + project.getPath());\n                    assertEquals(link.getProduces(), APPLICATION_JSON);\n                    break;\n\n                case \"zipball sources\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), GET);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project/export\" + project.getPath());\n                    assertEquals(link.getProduces(), APPLICATION_ZIP);\n                    break;\n\n                case \"delete\":\n                    assertNotNull(link);\n                    assertEquals(link.getMethod(), DELETE);\n                    assertEquals(link.getHref(), \"http://localhost:8080/api/project\" + project.getPath());\n                    break;\n            }\n        }\n    }\n\n    private class LocalProjectType extends ProjectTypeDef {\n        private LocalProjectType(String typeId, String typeName) {\n            super(typeId, typeName, true, false);\n            addConstantDefinition(\"my_attribute\", \"Constant\", \"attribute value 1\");\n        }\n    }\n}\n","repository":"https://github.com/eclipse/che.git","language":"java","tokens":[{"text":"org","line":11,"char":530,"type":"package"},{"text":"eclipse","line":11,"char":534,"type":"package"},{"text":"che","line":11,"char":542,"type":"package"},{"text":"api","line":11,"char":546,"type":"package"},{"text":"project","line":11,"char":550,"type":"package"},{"text":"server","line":11,"char":558,"type":"package"},{"text":"org","line":13,"char":574,"type":"import"},{"text":"eclipse","line":13,"char":578,"type":"import"},{"text":"che","line":13,"char":586,"type":"import"},{"text":"api","line":13,"char":590,"type":"import"},{"text":"core","line":13,"char":594,"type":"import"},{"text":"ConflictException","line":13,"char":599,"type":"import"},{"text":"org","line":14,"char":625,"type":"import"},{"text":"eclipse","line":14,"char":629,"type":"import"},{"text":"che","line":14,"char":637,"type":"import"},{"text":"api","line":14,"char":641,"type":"import"},{"text":"core","line":14,"char":645,"type":"import"},{"text":"ForbiddenException","line":14,"char":650,"type":"import"},{"text":"org","line":15,"char":677,"type":"import"},{"text":"eclipse","line":15,"char":681,"type":"import"},{"text":"che","line":15,"char":689,"type":"import"},{"text":"api","line":15,"char":693,"type":"import"},{"text":"core","line":15,"char":697,"type":"import"},{"text":"NotFoundException","line":15,"char":702,"type":"import"},{"text":"org","line":16,"char":728,"type":"import"},{"text":"eclipse","line":16,"char":732,"type":"import"},{"text":"che","line":16,"char":740,"type":"import"},{"text":"api","line":16,"char":744,"type":"import"},{"text":"core","line":16,"char":748,"type":"import"},{"text":"ServerException","line":16,"char":753,"type":"import"},{"text":"org","line":17,"char":777,"type":"import"},{"text":"eclipse","line":17,"char":781,"type":"import"},{"text":"che","line":17,"char":789,"type":"import"},{"text":"api","line":17,"char":793,"type":"import"},{"text":"core","line":17,"char":797,"type":"import"},{"text":"model","line":17,"char":802,"type":"import"},{"text":"project","line":17,"char":808,"type":"import"},{"text":"SourceStorage","line":17,"char":816,"type":"import"},{"text":"org","line":18,"char":838,"type":"import"},{"text":"eclipse","line":18,"char":842,"type":"import"},{"text":"che","line":18,"char":850,"type":"import"},{"text":"api","line":18,"char":854,"type":"import"},{"text":"core","line":18,"char":858,"type":"import"},{"text":"model","line":18,"char":863,"type":"import"},{"text":"project","line":18,"char":869,"type":"import"},{"text":"type","line":18,"char":877,"type":"import"},{"text":"Attribute","line":18,"char":882,"type":"import"},{"text":"org","line":19,"char":900,"type":"import"},{"text":"eclipse","line":19,"char":904,"type":"import"},{"text":"che","line":19,"char":912,"type":"import"},{"text":"api","line":19,"char":916,"type":"import"},{"text":"core","line":19,"char":920,"type":"import"},{"text":"notification","line":19,"char":925,"type":"import"},{"text":"EventService","line":19,"char":938,"type":"import"},{"text":"org","line":20,"char":959,"type":"import"},{"text":"eclipse","line":20,"char":963,"type":"import"},{"text":"che","line":20,"char":971,"type":"import"},{"text":"api","line":20,"char":975,"type":"import"},{"text":"core","line":20,"char":979,"type":"import"},{"text":"rest","line":20,"char":984,"type":"import"},{"text":"ApiExceptionMapper","line":20,"char":989,"type":"import"},{"text":"org","line":21,"char":1016,"type":"import"},{"text":"eclipse","line":21,"char":1020,"type":"import"},{"text":"che","line":21,"char":1028,"type":"import"},{"text":"api","line":21,"char":1032,"type":"import"},{"text":"core","line":21,"char":1036,"type":"import"},{"text":"rest","line":21,"char":1041,"type":"import"},{"text":"HttpJsonRequest","line":21,"char":1046,"type":"import"},{"text":"org","line":22,"char":1070,"type":"import"},{"text":"eclipse","line":22,"char":1074,"type":"import"},{"text":"che","line":22,"char":1082,"type":"import"},{"text":"api","line":22,"char":1086,"type":"import"},{"text":"core","line":22,"char":1090,"type":"import"},{"text":"rest","line":22,"char":1095,"type":"import"},{"text":"HttpJsonRequestFactory","line":22,"char":1100,"type":"import"},{"text":"org","line":23,"char":1131,"type":"import"},{"text":"eclipse","line":23,"char":1135,"type":"import"},{"text":"che","line":23,"char":1143,"type":"import"},{"text":"api","line":23,"char":1147,"type":"import"},{"text":"core","line":23,"char":1151,"type":"import"},{"text":"rest","line":23,"char":1156,"type":"import"},{"text":"HttpJsonResponse","line":23,"char":1161,"type":"import"},{"text":"org","line":24,"char":1186,"type":"import"},{"text":"eclipse","line":24,"char":1190,"type":"import"},{"text":"che","line":24,"char":1198,"type":"import"},{"text":"api","line":24,"char":1202,"type":"import"},{"text":"core","line":24,"char":1206,"type":"import"},{"text":"rest","line":24,"char":1211,"type":"import"},{"text":"shared","line":24,"char":1216,"type":"import"},{"text":"dto","line":24,"char":1223,"type":"import"},{"text":"Link","line":24,"char":1227,"type":"import"},{"text":"org","line":25,"char":1240,"type":"import"},{"text":"eclipse","line":25,"char":1244,"type":"import"},{"text":"che","line":25,"char":1252,"type":"import"},{"text":"api","line":25,"char":1256,"type":"import"},{"text":"core","line":25,"char":1260,"type":"import"},{"text":"util","line":25,"char":1265,"type":"import"},{"text":"LineConsumerFactory","line":25,"char":1270,"type":"import"},{"text":"org","line":26,"char":1298,"type":"import"},{"text":"eclipse","line":26,"char":1302,"type":"import"},{"text":"che","line":26,"char":1310,"type":"import"},{"text":"api","line":26,"char":1314,"type":"import"},{"text":"core","line":26,"char":1318,"type":"import"},{"text":"util","line":26,"char":1323,"type":"import"},{"text":"ValueHolder","line":26,"char":1328,"type":"import"},{"text":"org","line":27,"char":1348,"type":"import"},{"text":"eclipse","line":27,"char":1352,"type":"import"},{"text":"che","line":27,"char":1360,"type":"import"},{"text":"api","line":27,"char":1364,"type":"import"},{"text":"project","line":27,"char":1368,"type":"import"},{"text":"server","line":27,"char":1376,"type":"import"},{"text":"handlers","line":27,"char":1383,"type":"import"},{"text":"CreateProjectHandler","line":27,"char":1392,"type":"import"},{"text":"org","line":28,"char":1421,"type":"import"},{"text":"eclipse","line":28,"char":1425,"type":"import"},{"text":"che","line":28,"char":1433,"type":"import"},{"text":"api","line":28,"char":1437,"type":"import"},{"text":"project","line":28,"char":1441,"type":"import"},{"text":"server","line":28,"char":1449,"type":"import"},{"text":"handlers","line":28,"char":1456,"type":"import"},{"text":"ProjectHandlerRegistry","line":28,"char":1465,"type":"import"},{"text":"org","line":29,"char":1496,"type":"import"},{"text":"eclipse","line":29,"char":1500,"type":"import"},{"text":"che","line":29,"char":1508,"type":"import"},{"text":"api","line":29,"char":1512,"type":"import"},{"text":"project","line":29,"char":1516,"type":"import"},{"text":"server","line":29,"char":1524,"type":"import"},{"text":"importer","line":29,"char":1531,"type":"import"},{"text":"ProjectImporter","line":29,"char":1540,"type":"import"},{"text":"org","line":30,"char":1564,"type":"import"},{"text":"eclipse","line":30,"char":1568,"type":"import"},{"text":"che","line":30,"char":1576,"type":"import"},{"text":"api","line":30,"char":1580,"type":"import"},{"text":"project","line":30,"char":1584,"type":"import"},{"text":"server","line":30,"char":1592,"type":"import"},{"text":"importer","line":30,"char":1599,"type":"import"},{"text":"ProjectImporterRegistry","line":30,"char":1608,"type":"import"},{"text":"org","line":31,"char":1640,"type":"import"},{"text":"eclipse","line":31,"char":1644,"type":"import"},{"text":"che","line":31,"char":1652,"type":"import"},{"text":"api","line":31,"char":1656,"type":"import"},{"text":"project","line":31,"char":1660,"type":"import"},{"text":"server","line":31,"char":1668,"type":"import"},{"text":"type","line":31,"char":1675,"type":"import"},{"text":"AttributeValue","line":31,"char":1680,"type":"import"},{"text":"org","line":32,"char":1703,"type":"import"},{"text":"eclipse","line":32,"char":1707,"type":"import"},{"text":"che","line":32,"char":1715,"type":"import"},{"text":"api","line":32,"char":1719,"type":"import"},{"text":"project","line":32,"char":1723,"type":"import"},{"text":"server","line":32,"char":1731,"type":"import"},{"text":"type","line":32,"char":1738,"type":"import"},{"text":"ProjectTypeDef","line":32,"char":1743,"type":"import"},{"text":"org","line":33,"char":1766,"type":"import"},{"text":"eclipse","line":33,"char":1770,"type":"import"},{"text":"che","line":33,"char":1778,"type":"import"},{"text":"api","line":33,"char":1782,"type":"import"},{"text":"project","line":33,"char":1786,"type":"import"},{"text":"server","line":33,"char":1794,"type":"import"},{"text":"type","line":33,"char":1801,"type":"import"},{"text":"ProjectTypeRegistry","line":33,"char":1806,"type":"import"},{"text":"org","line":34,"char":1834,"type":"import"},{"text":"eclipse","line":34,"char":1838,"type":"import"},{"text":"che","line":34,"char":1846,"type":"import"},{"text":"api","line":34,"char":1850,"type":"import"},{"text":"project","line":34,"char":1854,"type":"import"},{"text":"server","line":34,"char":1862,"type":"import"},{"text":"type","line":34,"char":1869,"type":"import"},{"text":"ReadonlyValueProvider","line":34,"char":1874,"type":"import"},{"text":"org","line":35,"char":1904,"type":"import"},{"text":"eclipse","line":35,"char":1908,"type":"import"},{"text":"che","line":35,"char":1916,"type":"import"},{"text":"api","line":35,"char":1920,"type":"import"},{"text":"project","line":35,"char":1924,"type":"import"},{"text":"server","line":35,"char":1932,"type":"import"},{"text":"type","line":35,"char":1939,"type":"import"},{"text":"ValueProviderFactory","line":35,"char":1944,"type":"import"},{"text":"org","line":36,"char":1973,"type":"import"},{"text":"eclipse","line":36,"char":1977,"type":"import"},{"text":"che","line":36,"char":1985,"type":"import"},{"text":"api","line":36,"char":1989,"type":"import"},{"text":"project","line":36,"char":1993,"type":"import"},{"text":"server","line":36,"char":2001,"type":"import"},{"text":"type","line":36,"char":2008,"type":"import"},{"text":"ValueStorageException","line":36,"char":2013,"type":"import"},{"text":"org","line":37,"char":2043,"type":"import"},{"text":"eclipse","line":37,"char":2047,"type":"import"},{"text":"che","line":37,"char":2055,"type":"import"},{"text":"api","line":37,"char":2059,"type":"import"},{"text":"project","line":37,"char":2063,"type":"import"},{"text":"shared","line":37,"char":2071,"type":"import"},{"text":"dto","line":37,"char":2078,"type":"import"},{"text":"CopyOptions","line":37,"char":2082,"type":"import"},{"text":"org","line":38,"char":2102,"type":"import"},{"text":"eclipse","line":38,"char":2106,"type":"import"},{"text":"che","line":38,"char":2114,"type":"import"},{"text":"api","line":38,"char":2118,"type":"import"},{"text":"project","line":38,"char":2122,"type":"import"},{"text":"shared","line":38,"char":2130,"type":"import"},{"text":"dto","line":38,"char":2137,"type":"import"},{"text":"ItemReference","line":38,"char":2141,"type":"import"},{"text":"org","line":39,"char":2163,"type":"import"},{"text":"eclipse","line":39,"char":2167,"type":"import"},{"text":"che","line":39,"char":2175,"type":"import"},{"text":"api","line":39,"char":2179,"type":"import"},{"text":"project","line":39,"char":2183,"type":"import"},{"text":"shared","line":39,"char":2191,"type":"import"},{"text":"dto","line":39,"char":2198,"type":"import"},{"text":"MoveOptions","line":39,"char":2202,"type":"import"},{"text":"org","line":40,"char":2222,"type":"import"},{"text":"eclipse","line":40,"char":2226,"type":"import"},{"text":"che","line":40,"char":2234,"type":"import"},{"text":"api","line":40,"char":2238,"type":"import"},{"text":"project","line":40,"char":2242,"type":"import"},{"text":"shared","line":40,"char":2250,"type":"import"},{"text":"dto","line":40,"char":2257,"type":"import"},{"text":"SourceEstimation","line":40,"char":2261,"type":"import"},{"text":"org","line":41,"char":2286,"type":"import"},{"text":"eclipse","line":41,"char":2290,"type":"import"},{"text":"che","line":41,"char":2298,"type":"import"},{"text":"api","line":41,"char":2302,"type":"import"},{"text":"project","line":41,"char":2306,"type":"import"},{"text":"shared","line":41,"char":2314,"type":"import"},{"text":"dto","line":41,"char":2321,"type":"import"},{"text":"TreeElement","line":41,"char":2325,"type":"import"},{"text":"org","line":42,"char":2345,"type":"import"},{"text":"eclipse","line":42,"char":2349,"type":"import"},{"text":"che","line":42,"char":2357,"type":"import"},{"text":"api","line":42,"char":2361,"type":"import"},{"text":"user","line":42,"char":2365,"type":"import"},{"text":"server","line":42,"char":2370,"type":"import"},{"text":"spi","line":42,"char":2377,"type":"import"},{"text":"UserDao","line":42,"char":2381,"type":"import"},{"text":"org","line":43,"char":2397,"type":"import"},{"text":"eclipse","line":43,"char":2401,"type":"import"},{"text":"che","line":43,"char":2409,"type":"import"},{"text":"api","line":43,"char":2413,"type":"import"},{"text":"vfs","line":43,"char":2417,"type":"import"},{"text":"Path","line":43,"char":2421,"type":"import"},{"text":"org","line":44,"char":2434,"type":"import"},{"text":"eclipse","line":44,"char":2438,"type":"import"},{"text":"che","line":44,"char":2446,"type":"import"},{"text":"api","line":44,"char":2450,"type":"import"},{"text":"vfs","line":44,"char":2454,"type":"import"},{"text":"VirtualFile","line":44,"char":2458,"type":"import"},{"text":"org","line":45,"char":2478,"type":"import"},{"text":"eclipse","line":45,"char":2482,"type":"import"},{"text":"che","line":45,"char":2490,"type":"import"},{"text":"api","line":45,"char":2494,"type":"import"},{"text":"vfs","line":45,"char":2498,"type":"import"},{"text":"impl","line":45,"char":2502,"type":"import"},{"text":"file","line":45,"char":2507,"type":"import"},{"text":"DefaultFileWatcherNotificationHandler","line":45,"char":2512,"type":"import"},{"text":"org","line":46,"char":2558,"type":"import"},{"text":"eclipse","line":46,"char":2562,"type":"import"},{"text":"che","line":46,"char":2570,"type":"import"},{"text":"api","line":46,"char":2574,"type":"import"},{"text":"vfs","line":46,"char":2578,"type":"import"},{"text":"impl","line":46,"char":2582,"type":"import"},{"text":"file","line":46,"char":2587,"type":"import"},{"text":"FileTreeWatcher","line":46,"char":2592,"type":"import"},{"text":"org","line":47,"char":2616,"type":"import"},{"text":"eclipse","line":47,"char":2620,"type":"import"},{"text":"che","line":47,"char":2628,"type":"import"},{"text":"api","line":47,"char":2632,"type":"import"},{"text":"vfs","line":47,"char":2636,"type":"import"},{"text":"impl","line":47,"char":2640,"type":"import"},{"text":"file","line":47,"char":2645,"type":"import"},{"text":"FileWatcherNotificationHandler","line":47,"char":2650,"type":"import"},{"text":"org","line":48,"char":2689,"type":"import"},{"text":"eclipse","line":48,"char":2693,"type":"import"},{"text":"che","line":48,"char":2701,"type":"import"},{"text":"api","line":48,"char":2705,"type":"import"},{"text":"vfs","line":48,"char":2709,"type":"import"},{"text":"impl","line":48,"char":2713,"type":"import"},{"text":"file","line":48,"char":2718,"type":"import"},{"text":"LocalVirtualFileSystemProvider","line":48,"char":2723,"type":"import"},{"text":"org","line":49,"char":2762,"type":"import"},{"text":"eclipse","line":49,"char":2766,"type":"import"},{"text":"che","line":49,"char":2774,"type":"import"},{"text":"api","line":49,"char":2778,"type":"import"},{"text":"vfs","line":49,"char":2782,"type":"import"},{"text":"impl","line":49,"char":2786,"type":"import"},{"text":"file","line":49,"char":2791,"type":"import"},{"text":"event","line":49,"char":2796,"type":"import"},{"text":"detectors","line":49,"char":2802,"type":"import"},{"text":"ProjectTreeChangesDetector","line":49,"char":2812,"type":"import"},{"text":"org","line":50,"char":2847,"type":"import"},{"text":"eclipse","line":50,"char":2851,"type":"import"},{"text":"che","line":50,"char":2859,"type":"import"},{"text":"api","line":50,"char":2863,"type":"import"},{"text":"vfs","line":50,"char":2867,"type":"import"},{"text":"search","line":50,"char":2871,"type":"import"},{"text":"impl","line":50,"char":2878,"type":"import"},{"text":"FSLuceneSearcherProvider","line":50,"char":2883,"type":"import"},{"text":"org","line":51,"char":2916,"type":"import"},{"text":"eclipse","line":51,"char":2920,"type":"import"},{"text":"che","line":51,"char":2928,"type":"import"},{"text":"api","line":51,"char":2932,"type":"import"},{"text":"workspace","line":51,"char":2936,"type":"import"},{"text":"shared","line":51,"char":2946,"type":"import"},{"text":"dto","line":51,"char":2953,"type":"import"},{"text":"ProjectConfigDto","line":51,"char":2957,"type":"import"},{"text":"org","line":52,"char":2982,"type":"import"},{"text":"eclipse","line":52,"char":2986,"type":"import"},{"text":"che","line":52,"char":2994,"type":"import"},{"text":"api","line":52,"char":2998,"type":"import"},{"text":"workspace","line":52,"char":3002,"type":"import"},{"text":"shared","line":52,"char":3012,"type":"import"},{"text":"dto","line":52,"char":3019,"type":"import"},{"text":"SourceStorageDto","line":52,"char":3023,"type":"import"},{"text":"org","line":53,"char":3048,"type":"import"},{"text":"eclipse","line":53,"char":3052,"type":"import"},{"text":"che","line":53,"char":3060,"type":"import"},{"text":"api","line":53,"char":3064,"type":"import"},{"text":"workspace","line":53,"char":3068,"type":"import"},{"text":"shared","line":53,"char":3078,"type":"import"},{"text":"dto","line":53,"char":3085,"type":"import"},{"text":"WorkspaceConfigDto","line":53,"char":3089,"type":"import"},{"text":"org","line":54,"char":3116,"type":"import"},{"text":"eclipse","line":54,"char":3120,"type":"import"},{"text":"che","line":54,"char":3128,"type":"import"},{"text":"api","line":54,"char":3132,"type":"import"},{"text":"workspace","line":54,"char":3136,"type":"import"},{"text":"shared","line":54,"char":3146,"type":"import"},{"text":"dto","line":54,"char":3153,"type":"import"},{"text":"WorkspaceDto","line":54,"char":3157,"type":"import"},{"text":"org","line":55,"char":3178,"type":"import"},{"text":"eclipse","line":55,"char":3182,"type":"import"},{"text":"che","line":55,"char":3190,"type":"import"},{"text":"commons","line":55,"char":3194,"type":"import"},{"text":"json","line":55,"char":3202,"type":"import"},{"text":"JsonHelper","line":55,"char":3207,"type":"import"},{"text":"org","line":56,"char":3226,"type":"import"},{"text":"eclipse","line":56,"char":3230,"type":"import"},{"text":"che","line":56,"char":3238,"type":"import"},{"text":"commons","line":56,"char":3242,"type":"import"},{"text":"lang","line":56,"char":3250,"type":"import"},{"text":"IoUtil","line":56,"char":3255,"type":"import"},{"text":"org","line":57,"char":3270,"type":"import"},{"text":"eclipse","line":57,"char":3274,"type":"import"},{"text":"che","line":57,"char":3282,"type":"import"},{"text":"commons","line":57,"char":3286,"type":"import"},{"text":"lang","line":57,"char":3294,"type":"import"},{"text":"ws","line":57,"char":3299,"type":"import"},{"text":"rs","line":57,"char":3302,"type":"import"},{"text":"ExtMediaType","line":57,"char":3305,"type":"import"},{"text":"org","line":58,"char":3326,"type":"import"},{"text":"eclipse","line":58,"char":3330,"type":"import"},{"text":"che","line":58,"char":3338,"type":"import"},{"text":"commons","line":58,"char":3342,"type":"import"},{"text":"subject","line":58,"char":3350,"type":"import"},{"text":"SubjectImpl","line":58,"char":3358,"type":"import"},{"text":"org","line":59,"char":3378,"type":"import"},{"text":"eclipse","line":59,"char":3382,"type":"import"},{"text":"che","line":59,"char":3390,"type":"import"},{"text":"commons","line":59,"char":3394,"type":"import"},{"text":"test","line":59,"char":3402,"type":"import"},{"text":"mockito","line":59,"char":3407,"type":"import"},{"text":"answer","line":59,"char":3415,"type":"import"},{"text":"SelfReturningAnswer","line":59,"char":3422,"type":"import"},{"text":"org","line":60,"char":3450,"type":"import"},{"text":"eclipse","line":60,"char":3454,"type":"import"},{"text":"che","line":60,"char":3462,"type":"import"},{"text":"dto","line":60,"char":3466,"type":"import"},{"text":"server","line":60,"char":3470,"type":"import"},{"text":"DtoFactory","line":60,"char":3477,"type":"import"},{"text":"org","line":61,"char":3496,"type":"import"},{"text":"everrest","line":61,"char":3500,"type":"import"},{"text":"core","line":61,"char":3509,"type":"import"},{"text":"ApplicationContext","line":61,"char":3514,"type":"import"},{"text":"org","line":62,"char":3541,"type":"import"},{"text":"everrest","line":62,"char":3545,"type":"import"},{"text":"core","line":62,"char":3554,"type":"import"},{"text":"ResourceBinder","line":62,"char":3559,"type":"import"},{"text":"org","line":63,"char":3582,"type":"import"},{"text":"everrest","line":63,"char":3586,"type":"import"},{"text":"core","line":63,"char":3595,"type":"import"},{"text":"impl","line":63,"char":3600,"type":"import"},{"text":"ContainerResponse","line":63,"char":3605,"type":"import"},{"text":"org","line":64,"char":3631,"type":"import"},{"text":"everrest","line":64,"char":3635,"type":"import"},{"text":"core","line":64,"char":3644,"type":"import"},{"text":"impl","line":64,"char":3649,"type":"import"},{"text":"EverrestConfiguration","line":64,"char":3654,"type":"import"},{"text":"org","line":65,"char":3684,"type":"import"},{"text":"everrest","line":65,"char":3688,"type":"import"},{"text":"core","line":65,"char":3697,"type":"import"},{"text":"impl","line":65,"char":3702,"type":"import"},{"text":"EverrestProcessor","line":65,"char":3707,"type":"import"},{"text":"org","line":66,"char":3733,"type":"import"},{"text":"everrest","line":66,"char":3737,"type":"import"},{"text":"core","line":66,"char":3746,"type":"import"},{"text":"impl","line":66,"char":3751,"type":"import"},{"text":"ProviderBinder","line":66,"char":3756,"type":"import"},{"text":"org","line":67,"char":3779,"type":"import"},{"text":"everrest","line":67,"char":3783,"type":"import"},{"text":"core","line":67,"char":3792,"type":"import"},{"text":"impl","line":67,"char":3797,"type":"import"},{"text":"RequestDispatcher","line":67,"char":3802,"type":"import"},{"text":"org","line":68,"char":3828,"type":"import"},{"text":"everrest","line":68,"char":3832,"type":"import"},{"text":"core","line":68,"char":3841,"type":"import"},{"text":"impl","line":68,"char":3846,"type":"import"},{"text":"RequestHandlerImpl","line":68,"char":3851,"type":"import"},{"text":"org","line":69,"char":3878,"type":"import"},{"text":"everrest","line":69,"char":3882,"type":"import"},{"text":"core","line":69,"char":3891,"type":"import"},{"text":"impl","line":69,"char":3896,"type":"import"},{"text":"ResourceBinderImpl","line":69,"char":3901,"type":"import"},{"text":"org","line":70,"char":3928,"type":"import"},{"text":"everrest","line":70,"char":3932,"type":"import"},{"text":"core","line":70,"char":3941,"type":"import"},{"text":"tools","line":70,"char":3946,"type":"import"},{"text":"ByteArrayContainerResponseWriter","line":70,"char":3952,"type":"import"},{"text":"org","line":71,"char":3993,"type":"import"},{"text":"everrest","line":71,"char":3997,"type":"import"},{"text":"core","line":71,"char":4006,"type":"import"},{"text":"tools","line":71,"char":4011,"type":"import"},{"text":"DependencySupplierImpl","line":71,"char":4017,"type":"import"},{"text":"org","line":72,"char":4048,"type":"import"},{"text":"everrest","line":72,"char":4052,"type":"import"},{"text":"core","line":72,"char":4061,"type":"import"},{"text":"tools","line":72,"char":4066,"type":"import"},{"text":"ResourceLauncher","line":72,"char":4072,"type":"import"},{"text":"org","line":73,"char":4097,"type":"import"},{"text":"junit","line":73,"char":4101,"type":"import"},{"text":"Assert","line":73,"char":4107,"type":"import"},{"text":"org","line":74,"char":4122,"type":"import"},{"text":"mockito","line":74,"char":4126,"type":"import"},{"text":"Mock","line":74,"char":4134,"type":"import"},{"text":"org","line":75,"char":4147,"type":"import"},{"text":"mockito","line":75,"char":4151,"type":"import"},{"text":"testng","line":75,"char":4159,"type":"import"},{"text":"MockitoTestNGListener","line":75,"char":4166,"type":"import"},{"text":"org","line":76,"char":4196,"type":"import"},{"text":"testng","line":76,"char":4200,"type":"import"},{"text":"annotations","line":76,"char":4207,"type":"import"},{"text":"BeforeMethod","line":76,"char":4219,"type":"import"},{"text":"org","line":77,"char":4240,"type":"import"},{"text":"testng","line":77,"char":4244,"type":"import"},{"text":"annotations","line":77,"char":4251,"type":"import"},{"text":"Listeners","line":77,"char":4263,"type":"import"},{"text":"org","line":78,"char":4281,"type":"import"},{"text":"testng","line":78,"char":4285,"type":"import"},{"text":"annotations","line":78,"char":4292,"type":"import"},{"text":"Test","line":78,"char":4304,"type":"import"},{"text":"javax","line":80,"char":4318,"type":"import"},{"text":"ws","line":80,"char":4324,"type":"import"},{"text":"rs","line":80,"char":4327,"type":"import"},{"text":"core","line":80,"char":4330,"type":"import"},{"text":"Application","line":80,"char":4335,"type":"import"},{"text":"java","line":81,"char":4355,"type":"import"},{"text":"io","line":81,"char":4360,"type":"import"},{"text":"ByteArrayInputStream","line":81,"char":4363,"type":"import"},{"text":"java","line":82,"char":4392,"type":"import"},{"text":"io","line":82,"char":4397,"type":"import"},{"text":"ByteArrayOutputStream","line":82,"char":4400,"type":"import"},{"text":"java","line":83,"char":4430,"type":"import"},{"text":"io","line":83,"char":4435,"type":"import"},{"text":"File","line":83,"char":4438,"type":"import"},{"text":"java","line":84,"char":4451,"type":"import"},{"text":"io","line":84,"char":4456,"type":"import"},{"text":"InputStream","line":84,"char":4459,"type":"import"},{"text":"java","line":85,"char":4479,"type":"import"},{"text":"net","line":85,"char":4484,"type":"import"},{"text":"URI","line":85,"char":4488,"type":"import"},{"text":"java","line":86,"char":4500,"type":"import"},{"text":"nio","line":86,"char":4505,"type":"import"},{"text":"charset","line":86,"char":4509,"type":"import"},{"text":"Charset","line":86,"char":4517,"type":"import"},{"text":"java","line":87,"char":4533,"type":"import"},{"text":"nio","line":87,"char":4538,"type":"import"},{"text":"file","line":87,"char":4542,"type":"import"},{"text":"PathMatcher","line":87,"char":4547,"type":"import"},{"text":"java","line":88,"char":4567,"type":"import"},{"text":"util","line":88,"char":4572,"type":"import"},{"text":"ArrayList","line":88,"char":4577,"type":"import"},{"text":"java","line":89,"char":4595,"type":"import"},{"text":"util","line":89,"char":4600,"type":"import"},{"text":"Arrays","line":89,"char":4605,"type":"import"},{"text":"java","line":90,"char":4620,"type":"import"},{"text":"util","line":90,"char":4625,"type":"import"},{"text":"Collections","line":90,"char":4630,"type":"import"},{"text":"java","line":91,"char":4650,"type":"import"},{"text":"util","line":91,"char":4655,"type":"import"},{"text":"HashMap","line":91,"char":4660,"type":"import"},{"text":"java","line":92,"char":4676,"type":"import"},{"text":"util","line":92,"char":4681,"type":"import"},{"text":"HashSet","line":92,"char":4686,"type":"import"},{"text":"java","line":93,"char":4702,"type":"import"},{"text":"util","line":93,"char":4707,"type":"import"},{"text":"LinkedHashMap","line":93,"char":4712,"type":"import"},{"text":"java","line":94,"char":4734,"type":"import"},{"text":"util","line":94,"char":4739,"type":"import"},{"text":"LinkedHashSet","line":94,"char":4744,"type":"import"},{"text":"java","line":95,"char":4766,"type":"import"},{"text":"util","line":95,"char":4771,"type":"import"},{"text":"LinkedList","line":95,"char":4776,"type":"import"},{"text":"java","line":96,"char":4795,"type":"import"},{"text":"util","line":96,"char":4800,"type":"import"},{"text":"List","line":96,"char":4805,"type":"import"},{"text":"java","line":97,"char":4818,"type":"import"},{"text":"util","line":97,"char":4823,"type":"import"},{"text":"Map","line":97,"char":4828,"type":"import"},{"text":"java","line":98,"char":4840,"type":"import"},{"text":"util","line":98,"char":4845,"type":"import"},{"text":"Scanner","line":98,"char":4850,"type":"import"},{"text":"java","line":99,"char":4866,"type":"import"},{"text":"util","line":99,"char":4871,"type":"import"},{"text":"Set","line":99,"char":4876,"type":"import"},{"text":"java","line":100,"char":4888,"type":"import"},{"text":"util","line":100,"char":4893,"type":"import"},{"text":"concurrent","line":100,"char":4898,"type":"import"},{"text":"CountDownLatch","line":100,"char":4909,"type":"import"},{"text":"java","line":101,"char":4932,"type":"import"},{"text":"util","line":101,"char":4937,"type":"import"},{"text":"concurrent","line":101,"char":4942,"type":"import"},{"text":"ExecutorService","line":101,"char":4953,"type":"import"},{"text":"java","line":102,"char":4977,"type":"import"},{"text":"util","line":102,"char":4982,"type":"import"},{"text":"concurrent","line":102,"char":4987,"type":"import"},{"text":"Executors","line":102,"char":4998,"type":"import"},{"text":"java","line":103,"char":5016,"type":"import"},{"text":"util","line":103,"char":5021,"type":"import"},{"text":"concurrent","line":103,"char":5026,"type":"import"},{"text":"Future","line":103,"char":5037,"type":"import"},{"text":"java","line":104,"char":5052,"type":"import"},{"text":"util","line":104,"char":5057,"type":"import"},{"text":"stream","line":104,"char":5062,"type":"import"},{"text":"Collectors","line":104,"char":5069,"type":"import"},{"text":"java","line":105,"char":5088,"type":"import"},{"text":"util","line":105,"char":5093,"type":"import"},{"text":"stream","line":105,"char":5098,"type":"import"},{"text":"IntStream","line":105,"char":5105,"type":"import"},{"text":"java","line":106,"char":5123,"type":"import"},{"text":"util","line":106,"char":5128,"type":"import"},{"text":"zip","line":106,"char":5133,"type":"import"},{"text":"ZipEntry","line":106,"char":5137,"type":"import"},{"text":"java","line":107,"char":5154,"type":"import"},{"text":"util","line":107,"char":5159,"type":"import"},{"text":"zip","line":107,"char":5164,"type":"import"},{"text":"ZipOutputStream","line":107,"char":5168,"type":"import"},{"text":"java","line":109,"char":5200,"type":"import"},{"text":"util","line":109,"char":5205,"type":"import"},{"text":"Collections","line":109,"char":5210,"type":"import"},{"text":"singletonList","line":109,"char":5222,"type":"import"},{"text":"javax","line":110,"char":5251,"type":"import"},{"text":"ws","line":110,"char":5257,"type":"import"},{"text":"rs","line":110,"char":5260,"type":"import"},{"text":"HttpMethod","line":110,"char":5263,"type":"import"},{"text":"DELETE","line":110,"char":5274,"type":"import"},{"text":"javax","line":111,"char":5296,"type":"import"},{"text":"ws","line":111,"char":5302,"type":"import"},{"text":"rs","line":111,"char":5305,"type":"import"},{"text":"HttpMethod","line":111,"char":5308,"type":"import"},{"text":"GET","line":111,"char":5319,"type":"import"},{"text":"javax","line":112,"char":5338,"type":"import"},{"text":"ws","line":112,"char":5344,"type":"import"},{"text":"rs","line":112,"char":5347,"type":"import"},{"text":"HttpMethod","line":112,"char":5350,"type":"import"},{"text":"POST","line":112,"char":5361,"type":"import"},{"text":"javax","line":113,"char":5381,"type":"import"},{"text":"ws","line":113,"char":5387,"type":"import"},{"text":"rs","line":113,"char":5390,"type":"import"},{"text":"HttpMethod","line":113,"char":5393,"type":"import"},{"text":"PUT","line":113,"char":5404,"type":"import"},{"text":"javax","line":114,"char":5423,"type":"import"},{"text":"ws","line":114,"char":5429,"type":"import"},{"text":"rs","line":114,"char":5432,"type":"import"},{"text":"core","line":114,"char":5435,"type":"import"},{"text":"MediaType","line":114,"char":5440,"type":"import"},{"text":"APPLICATION_JSON","line":114,"char":5450,"type":"import"},{"text":"javax","line":115,"char":5482,"type":"import"},{"text":"ws","line":115,"char":5488,"type":"import"},{"text":"rs","line":115,"char":5491,"type":"import"},{"text":"core","line":115,"char":5494,"type":"import"},{"text":"MediaType","line":115,"char":5499,"type":"import"},{"text":"TEXT_PLAIN","line":115,"char":5509,"type":"import"},{"text":"org","line":116,"char":5535,"type":"import"},{"text":"eclipse","line":116,"char":5539,"type":"import"},{"text":"che","line":116,"char":5547,"type":"import"},{"text":"commons","line":116,"char":5551,"type":"import"},{"text":"lang","line":116,"char":5559,"type":"import"},{"text":"ws","line":116,"char":5564,"type":"import"},{"text":"rs","line":116,"char":5567,"type":"import"},{"text":"ExtMediaType","line":116,"char":5570,"type":"import"},{"text":"APPLICATION_ZIP","line":116,"char":5583,"type":"import"},{"text":"org","line":117,"char":5614,"type":"import"},{"text":"everrest","line":117,"char":5618,"type":"import"},{"text":"core","line":117,"char":5627,"type":"import"},{"text":"ApplicationContext","line":117,"char":5632,"type":"import"},{"text":"anApplicationContext","line":117,"char":5651,"type":"import"},{"text":"org","line":118,"char":5687,"type":"import"},{"text":"junit","line":118,"char":5691,"type":"import"},{"text":"Assert","line":118,"char":5697,"type":"import"},{"text":"assertTrue","line":118,"char":5704,"type":"import"},{"text":"org","line":119,"char":5730,"type":"import"},{"text":"mockito","line":119,"char":5734,"type":"import"},{"text":"Matchers","line":119,"char":5742,"type":"import"},{"text":"any","line":119,"char":5751,"type":"import"},{"text":"org","line":120,"char":5770,"type":"import"},{"text":"mockito","line":120,"char":5774,"type":"import"},{"text":"Mockito","line":120,"char":5782,"type":"import"},{"text":"mock","line":120,"char":5790,"type":"import"},{"text":"org","line":121,"char":5810,"type":"import"},{"text":"mockito","line":121,"char":5814,"type":"import"},{"text":"Mockito","line":121,"char":5822,"type":"import"},{"text":"when","line":121,"char":5830,"type":"import"},{"text":"org","line":122,"char":5850,"type":"import"},{"text":"testng","line":122,"char":5854,"type":"import"},{"text":"Assert","line":122,"char":5861,"type":"import"},{"text":"assertEquals","line":122,"char":5868,"type":"import"},{"text":"org","line":123,"char":5896,"type":"import"},{"text":"testng","line":123,"char":5900,"type":"import"},{"text":"Assert","line":123,"char":5907,"type":"import"},{"text":"assertEqualsNoOrder","line":123,"char":5914,"type":"import"},{"text":"org","line":124,"char":5949,"type":"import"},{"text":"testng","line":124,"char":5953,"type":"import"},{"text":"Assert","line":124,"char":5960,"type":"import"},{"text":"assertNotNull","line":124,"char":5967,"type":"import"},{"text":"Listeners","line":132,"char":6097,"type":"annotation"},{"text":"Mock","line":159,"char":7132,"type":"annotation"},{"text":"Mock","line":161,"char":7190,"type":"annotation"},{"text":"Mock","line":163,"char":7259,"type":"annotation"},{"text":"Mock","line":165,"char":7329,"type":"annotation"},{"text":"Mock","line":167,"char":7402,"type":"annotation"},{"text":"Mock","line":169,"char":7469,"type":"annotation"},{"text":"BeforeMethod","line":180,"char":7756,"type":"annotation"},{"text":"Override","line":282,"char":12381,"type":"annotation"},{"text":"Override","line":287,"char":12554,"type":"annotation"},{"text":"Test","line":320,"char":14220,"type":"annotation"},{"text":"SuppressWarnings","line":321,"char":14230,"type":"annotation"},{"text":"Test","line":359,"char":15578,"type":"annotation"},{"text":"Test","line":376,"char":16442,"type":"annotation"},{"text":"Test","line":394,"char":17443,"type":"annotation"},{"text":"Test","line":407,"char":18100,"type":"annotation"},{"text":"Test","line":415,"char":18500,"type":"annotation"},{"text":"Override","line":421,"char":18633,"type":"annotation"},{"text":"Override","line":430,"char":19211,"type":"annotation"},{"text":"Test","line":501,"char":22685,"type":"annotation"},{"text":"Test","line":540,"char":24739,"type":"annotation"},{"text":"Test","line":581,"char":27319,"type":"annotation"},{"text":"Test","line":600,"char":28589,"type":"annotation"},{"text":"Override","line":611,"char":29127,"type":"annotation"},{"text":"Test","line":663,"char":31461,"type":"annotation"},{"text":"Override","line":671,"char":31821,"type":"annotation"},{"text":"Test","line":720,"char":33656,"type":"annotation"},{"text":"Override","line":764,"char":35886,"type":"annotation"},{"text":"Override","line":769,"char":35994,"type":"annotation"},{"text":"Override","line":774,"char":36103,"type":"annotation"},{"text":"Override","line":779,"char":36226,"type":"annotation"},{"text":"Override","line":786,"char":36674,"type":"annotation"},{"text":"Override","line":797,"char":37343,"type":"annotation"},{"text":"Test","line":807,"char":37494,"type":"annotation"},{"text":"Test","line":833,"char":38994,"type":"annotation"},{"text":"Test","line":846,"char":39831,"type":"annotation"},{"text":"Test","line":860,"char":40741,"type":"annotation"},{"text":"Test","line":877,"char":41784,"type":"annotation"},{"text":"Test","line":893,"char":42710,"type":"annotation"},{"text":"Test","line":905,"char":43448,"type":"annotation"},{"text":"Test","line":915,"char":44101,"type":"annotation"},{"text":"Test","line":925,"char":44689,"type":"annotation"},{"text":"Test","line":935,"char":45278,"type":"annotation"},{"text":"Test","line":944,"char":45727,"type":"annotation"},{"text":"Test","line":956,"char":46234,"type":"annotation"},{"text":"Test","line":1002,"char":48023,"type":"annotation"},{"text":"Test","line":1017,"char":49083,"type":"annotation"},{"text":"Test","line":1041,"char":50602,"type":"annotation"},{"text":"Test","line":1092,"char":53312,"type":"annotation"},{"text":"Test","line":1107,"char":54350,"type":"annotation"},{"text":"Test","line":1135,"char":56010,"type":"annotation"},{"text":"Test","line":1175,"char":58308,"type":"annotation"},{"text":"Test","line":1190,"char":59372,"type":"annotation"},{"text":"Test","line":1218,"char":61035,"type":"annotation"},{"text":"Test","line":1246,"char":62663,"type":"annotation"},{"text":"Test","line":1297,"char":65336,"type":"annotation"},{"text":"Test","line":1313,"char":66444,"type":"annotation"},{"text":"Test","line":1340,"char":68029,"type":"annotation"},{"text":"Test","line":1367,"char":69575,"type":"annotation"},{"text":"Test","line":1404,"char":71584,"type":"annotation"},{"text":"Test","line":1427,"char":72928,"type":"annotation"},{"text":"Test","line":1453,"char":74535,"type":"annotation"},{"text":"Test","line":1464,"char":75235,"type":"annotation"},{"text":"SuppressWarnings","line":1465,"char":75245,"type":"annotation"},{"text":"Test","line":1483,"char":76310,"type":"annotation"},{"text":"SuppressWarnings","line":1484,"char":76320,"type":"annotation"},{"text":"Test","line":1507,"char":77592,"type":"annotation"},{"text":"Test","line":1520,"char":78345,"type":"annotation"},{"text":"Test","line":1528,"char":78781,"type":"annotation"},{"text":"Test","line":1557,"char":80222,"type":"annotation"},{"text":"Test","line":1591,"char":81892,"type":"annotation"},{"text":"Test","line":1628,"char":83779,"type":"annotation"},{"text":"SuppressWarnings","line":1662,"char":85421,"type":"annotation"},{"text":"Test","line":1663,"char":85456,"type":"annotation"},{"text":"SuppressWarnings","line":1684,"char":86748,"type":"annotation"},{"text":"Test","line":1685,"char":86783,"type":"annotation"},{"text":"SuppressWarnings","line":1703,"char":88002,"type":"annotation"},{"text":"Test","line":1704,"char":88037,"type":"annotation"},{"text":"SuppressWarnings","line":1723,"char":89386,"type":"annotation"},{"text":"Test","line":1724,"char":89421,"type":"annotation"},{"text":"SuppressWarnings","line":1749,"char":91155,"type":"annotation"},{"text":"Test","line":1750,"char":91190,"type":"annotation"},{"text":"SuppressWarnings","line":1777,"char":93137,"type":"annotation"},{"text":"Test","line":1778,"char":93172,"type":"annotation"},{"text":"SuppressWarnings","line":1802,"char":94847,"type":"annotation"},{"text":"Test","line":1803,"char":94882,"type":"annotation"},{"text":"SuppressWarnings","line":1827,"char":96636,"type":"annotation"},{"text":"Test","line":1828,"char":96671,"type":"annotation"},{"text":"SuppressWarnings","line":1853,"char":98306,"type":"annotation"},{"text":"Test","line":1854,"char":98341,"type":"annotation"},{"text":"SuppressWarnings","line":1877,"char":99738,"type":"annotation"},{"text":"Test","line":1878,"char":99773,"type":"annotation"},{"text":"ProjectServiceTest","line":133,"char":6159,"type":"class"},{"text":"LocalProjectType","line":1977,"char":104513,"type":"class"},{"text":"CONTENT_TYPE","line":134,"char":6212,"type":"variable"},{"text":"vfsUser","line":136,"char":6276,"type":"variable"},{"text":"FS_PATH","line":138,"char":6328,"type":"variable"},{"text":"INDEX_PATH","line":139,"char":6389,"type":"variable"},{"text":"URL_ENCODED_QUOTES","line":141,"char":6455,"type":"variable"},{"text":"URL_ENCODED_SPACE","line":142,"char":6526,"type":"variable"},{"text":"URL_ENCODED_BACKSLASH","line":143,"char":6597,"type":"variable"},{"text":"URL_ENCODED_ASTERISK","line":144,"char":6668,"type":"variable"},{"text":"AND_OPERATOR","line":146,"char":6740,"type":"variable"},{"text":"NOT_OPERATOR","line":147,"char":6794,"type":"variable"},{"text":"EXCLUDE_SEARCH_PATH","line":149,"char":6849,"type":"variable"},{"text":"pm","line":151,"char":6919,"type":"variable"},{"text":"launcher","line":152,"char":6958,"type":"variable"},{"text":"phRegistry","line":153,"char":7003,"type":"variable"},{"text":"env","line":155,"char":7075,"type":"variable"},{"text":"projects","line":157,"char":7116,"type":"variable"},{"text":"userDao","line":160,"char":7176,"type":"variable"},{"text":"usersWorkspaceMock","line":162,"char":7234,"type":"variable"},{"text":"workspaceConfigMock","line":164,"char":7303,"type":"variable"},{"text":"httpJsonRequestFactory","line":166,"char":7373,"type":"variable"},{"text":"httpJsonResponse","line":168,"char":7446,"type":"variable"},{"text":"projectTreeChangesDetector","line":170,"char":7513,"type":"variable"},{"text":"vfsProvider","line":172,"char":7587,"type":"variable"},{"text":"importerRegistry","line":174,"char":7637,"type":"variable"},{"text":"projectRegistry","line":176,"char":7686,"type":"variable"},{"text":"ptRegistry","line":178,"char":7738,"type":"variable"},{"text":"workspaceHolder","line":183,"char":7845,"type":"variable"},{"text":"root","line":185,"char":7920,"type":"variable"},{"text":"indexDir","line":193,"char":8065,"type":"variable"},{"text":"filters","line":200,"char":8240,"type":"variable"},{"text":"pathElement","line":202,"char":8333,"type":"variable"},{"text":"sProvider","line":210,"char":8589,"type":"variable"},{"text":"eventService","line":214,"char":8754,"type":"variable"},{"text":"chuck","line":217,"char":8837,"type":"variable"},{"text":"projectTypes","line":223,"char":9100,"type":"variable"},{"text":"myProjectType","line":224,"char":9163,"type":"variable"},{"text":"fileWatcherNotificationHandler","line":238,"char":9813,"type":"variable"},{"text":"fileTreeWatcher","line":239,"char":9926,"type":"variable"},{"text":"httpJsonRequest","line":246,"char":10355,"type":"variable"},{"text":"dependencies","line":263,"char":11311,"type":"variable"},{"text":"resources","line":273,"char":11800,"type":"variable"},{"text":"providers","line":274,"char":11861,"type":"variable"},{"text":"processor","line":275,"char":11929,"type":"variable"},{"text":"myProjectType","line":298,"char":12995,"type":"variable"},{"text":"projectName","line":298,"char":13017,"type":"variable"},{"text":"testProjectConfigMock","line":300,"char":13156,"type":"variable"},{"text":"attr","line":309,"char":13859,"type":"variable"},{"text":"attribute","line":310,"char":13906,"type":"variable"},{"text":"p","line":323,"char":14345,"type":"variable"},{"text":"response","line":332,"char":14576,"type":"variable"},{"text":"result","line":335,"char":14824,"type":"variable"},{"text":"good","line":338,"char":14962,"type":"variable"},{"text":"bad","line":338,"char":14968,"type":"variable"},{"text":"projectDescriptor","line":346,"char":15149,"type":"variable"},{"text":"badProject","line":353,"char":15427,"type":"variable"},{"text":"response","line":361,"char":15661,"type":"variable"},{"text":"result","line":365,"char":15947,"type":"variable"},{"text":"attributes","line":369,"char":16186,"type":"variable"},{"text":"response","line":382,"char":16775,"type":"variable"},{"text":"badProject","line":385,"char":17067,"type":"variable"},{"text":"response","line":398,"char":17721,"type":"variable"},{"text":"result","line":402,"char":18007,"type":"variable"},{"text":"response","line":409,"char":18194,"type":"variable"},{"text":"projectPath","line":422,"char":18687,"type":"variable"},{"text":"attributes","line":422,"char":18728,"type":"variable"},{"text":"options","line":422,"char":18760,"type":"variable"},{"text":"projectFolder","line":424,"char":18881,"type":"variable"},{"text":"headers","line":436,"char":19370,"type":"variable"},{"text":"pt","line":439,"char":19491,"type":"variable"},{"text":"attributeValues","line":447,"char":19795,"type":"variable"},{"text":"newProjectConfig","line":451,"char":19960,"type":"variable"},{"text":"response","line":460,"char":20685,"type":"variable"},{"text":"result","line":468,"char":21266,"type":"variable"},{"text":"attributes","line":475,"char":21702,"type":"variable"},{"text":"project","line":481,"char":21983,"type":"variable"},{"text":"attributeVal","line":488,"char":22293,"type":"variable"},{"text":"headers","line":503,"char":22779,"type":"variable"},{"text":"pt","line":506,"char":22900,"type":"variable"},{"text":"attributeValues","line":513,"char":23292,"type":"variable"},{"text":"descriptor","line":516,"char":23441,"type":"variable"},{"text":"response","line":523,"char":23855,"type":"variable"},{"text":"project","line":532,"char":24449,"type":"variable"},{"text":"headers","line":547,"char":25093,"type":"variable"},{"text":"attributeValues","line":549,"char":25224,"type":"variable"},{"text":"descriptor","line":551,"char":25372,"type":"variable"},{"text":"newProjectConfig","line":556,"char":25719,"type":"variable"},{"text":"response","line":565,"char":26446,"type":"variable"},{"text":"project","line":573,"char":27033,"type":"variable"},{"text":"headers","line":583,"char":27424,"type":"variable"},{"text":"attributeValues","line":585,"char":27555,"type":"variable"},{"text":"descriptor","line":587,"char":27703,"type":"variable"},{"text":"response","line":591,"char":28044,"type":"variable"},{"text":"root","line":602,"char":28671,"type":"variable"},{"text":"errMessage","line":608,"char":28986,"type":"variable"},{"text":"vpf1","line":610,"char":29060,"type":"variable"},{"text":"attributeName","line":612,"char":29185,"type":"variable"},{"text":"file","line":614,"char":29265,"type":"variable"},{"text":"pt","line":629,"char":29720,"type":"variable"},{"text":"response","line":639,"char":30186,"type":"variable"},{"text":"result","line":645,"char":30633,"type":"variable"},{"text":"msg","line":656,"char":31307,"type":"variable"},{"text":"root","line":666,"char":31543,"type":"variable"},{"text":"vpf1","line":670,"char":31754,"type":"variable"},{"text":"attributeName","line":672,"char":31879,"type":"variable"},{"text":"file","line":674,"char":31959,"type":"variable"},{"text":"pt","line":689,"char":32420,"type":"variable"},{"text":"response","line":699,"char":32886,"type":"variable"},{"text":"result","line":704,"char":33291,"type":"variable"},{"text":"m","line":707,"char":33403,"type":"variable"},{"text":"est","line":708,"char":33443,"type":"variable"},{"text":"bout","line":722,"char":33746,"type":"variable"},{"text":"zipOut","line":723,"char":33806,"type":"variable"},{"text":"zip","line":728,"char":34090,"type":"variable"},{"text":"importType","line":729,"char":34163,"type":"variable"},{"text":"myType","line":732,"char":34250,"type":"variable"},{"text":"newProjectConfig","line":734,"char":34313,"type":"variable"},{"text":"headers","line":741,"char":34808,"type":"variable"},{"text":"json","line":744,"char":34921,"type":"variable"},{"text":"b","line":749,"char":35096,"type":"variable"},{"text":"response","line":750,"char":35194,"type":"variable"},{"text":"newProject","line":755,"char":35516,"type":"variable"},{"text":"importType","line":761,"char":35692,"type":"variable"},{"text":"zip","line":761,"char":35716,"type":"variable"},{"text":"folderHolder","line":762,"char":35779,"type":"variable"},{"text":"baseFolder","line":780,"char":36285,"type":"variable"},{"text":"storage","line":780,"char":36311,"type":"variable"},{"text":"baseFolder","line":787,"char":36733,"type":"variable"},{"text":"storage","line":788,"char":36797,"type":"variable"},{"text":"importOutputConsumerFactory","line":789,"char":36864,"type":"variable"},{"text":"myContent","line":809,"char":37566,"type":"variable"},{"text":"response","line":810,"char":37626,"type":"variable"},{"text":"fileItem","line":817,"char":38190,"type":"variable"},{"text":"file","line":825,"char":38696,"type":"variable"},{"text":"_file","line":827,"char":38829,"type":"variable"},{"text":"myContent","line":835,"char":39070,"type":"variable"},{"text":"writer","line":837,"char":39267,"type":"variable"},{"text":"response","line":838,"char":39342,"type":"variable"},{"text":"myContent","line":848,"char":39910,"type":"variable"},{"text":"response","line":850,"char":40103,"type":"variable"},{"text":"file","line":854,"char":40502,"type":"variable"},{"text":"_file","line":856,"char":40635,"type":"variable"},{"text":"response","line":862,"char":40826,"type":"variable"},{"text":"fileItem","line":866,"char":41181,"type":"variable"},{"text":"folder","line":872,"char":41570,"type":"variable"},{"text":"folder","line":879,"char":41864,"type":"variable"},{"text":"response","line":880,"char":41912,"type":"variable"},{"text":"fileItem","line":884,"char":42277,"type":"variable"},{"text":"response","line":895,"char":42793,"type":"variable"},{"text":"folder","line":901,"char":43318,"type":"variable"},{"text":"response","line":908,"char":43664,"type":"variable"},{"text":"response","line":918,"char":44260,"type":"variable"},{"text":"response","line":928,"char":44847,"type":"variable"},{"text":"response","line":937,"char":45368,"type":"variable"},{"text":"response","line":948,"char":45861,"type":"variable"},{"text":"threadNumber","line":958,"char":46319,"type":"variable"},{"text":"executor","line":959,"char":46412,"type":"variable"},{"text":"countDownLatch","line":960,"char":46490,"type":"variable"},{"text":"futures","line":961,"char":46581,"type":"variable"},{"text":"i","line":964,"char":46630,"type":"variable"},{"text":"isNotDone","line":985,"char":47559,"type":"variable"},{"text":"future","line":988,"char":47657,"type":"variable"},{"text":"future","line":995,"char":47856,"type":"variable"},{"text":"myProject","line":1004,"char":48104,"type":"variable"},{"text":"response","line":1007,"char":48374,"type":"variable"},{"text":"myProject","line":1019,"char":49174,"type":"variable"},{"text":"headers","line":1023,"char":49453,"type":"variable"},{"text":"descriptor","line":1026,"char":49569,"type":"variable"},{"text":"response","line":1030,"char":49750,"type":"variable"},{"text":"myProject","line":1043,"char":50705,"type":"variable"},{"text":"originFileName","line":1047,"char":50841,"type":"variable"},{"text":"destinationFileName","line":1048,"char":50885,"type":"variable"},{"text":"originContent","line":1051,"char":50967,"type":"variable"},{"text":"overwrittenContent","line":1052,"char":51020,"type":"variable"},{"text":"headers","line":1057,"char":51399,"type":"variable"},{"text":"descriptor","line":1060,"char":51515,"type":"variable"},{"text":"response","line":1064,"char":51698,"type":"variable"},{"text":"inputStreamScanner","line":1074,"char":52594,"type":"variable"},{"text":"theFirstLineFromDestinationFile","line":1075,"char":52636,"type":"variable"},{"text":"myProject","line":1094,"char":53395,"type":"variable"},{"text":"response","line":1097,"char":53665,"type":"variable"},{"text":"myProject","line":1109,"char":54443,"type":"variable"},{"text":"renamedFolder","line":1114,"char":54740,"type":"variable"},{"text":"headers","line":1116,"char":54808,"type":"variable"},{"text":"descriptor","line":1119,"char":54924,"type":"variable"},{"text":"response","line":1123,"char":55102,"type":"variable"},{"text":"myProject","line":1137,"char":56115,"type":"variable"},{"text":"originFileName","line":1141,"char":56251,"type":"variable"},{"text":"destinationFileName","line":1142,"char":56295,"type":"variable"},{"text":"originContent","line":1145,"char":56377,"type":"variable"},{"text":"overwrittenContent","line":1146,"char":56430,"type":"variable"},{"text":"renamedFolder","line":1149,"char":56528,"type":"variable"},{"text":"headers","line":1154,"char":56895,"type":"variable"},{"text":"descriptor","line":1157,"char":57011,"type":"variable"},{"text":"response","line":1161,"char":57188,"type":"variable"},{"text":"myProject","line":1177,"char":58389,"type":"variable"},{"text":"response","line":1180,"char":58659,"type":"variable"},{"text":"myProject","line":1192,"char":59463,"type":"variable"},{"text":"destinationName","line":1197,"char":59765,"type":"variable"},{"text":"headers","line":1199,"char":59843,"type":"variable"},{"text":"descriptor","line":1202,"char":59959,"type":"variable"},{"text":"response","line":1206,"char":60139,"type":"variable"},{"text":"theTargetFile","line":1214,"char":60882,"type":"variable"},{"text":"myProject","line":1220,"char":61118,"type":"variable"},{"text":"destinationName","line":1225,"char":61418,"type":"variable"},{"text":"headers","line":1227,"char":61496,"type":"variable"},{"text":"descriptor","line":1230,"char":61612,"type":"variable"},{"text":"response","line":1234,"char":61792,"type":"variable"},{"text":"theTargetFile","line":1242,"char":62512,"type":"variable"},{"text":"myProject","line":1248,"char":62766,"type":"variable"},{"text":"originFileName","line":1252,"char":62902,"type":"variable"},{"text":"destinationFileName","line":1253,"char":62946,"type":"variable"},{"text":"originContent","line":1256,"char":63028,"type":"variable"},{"text":"overwrittenContent","line":1257,"char":63081,"type":"variable"},{"text":"headers","line":1262,"char":63460,"type":"variable"},{"text":"descriptor","line":1265,"char":63576,"type":"variable"},{"text":"response","line":1269,"char":63759,"type":"variable"},{"text":"inputStreamScanner","line":1279,"char":64618,"type":"variable"},{"text":"theFirstLineFromDestinationFile","line":1280,"char":64660,"type":"variable"},{"text":"myProject","line":1299,"char":65419,"type":"variable"},{"text":"response","line":1302,"char":65691,"type":"variable"},{"text":"myProject","line":1315,"char":66537,"type":"variable"},{"text":"renamedFolder","line":1320,"char":66834,"type":"variable"},{"text":"headers","line":1322,"char":66902,"type":"variable"},{"text":"descriptor","line":1325,"char":67018,"type":"variable"},{"text":"response","line":1329,"char":67196,"type":"variable"},{"text":"myProject","line":1342,"char":68114,"type":"variable"},{"text":"renamedFolder","line":1347,"char":68409,"type":"variable"},{"text":"headers","line":1349,"char":68477,"type":"variable"},{"text":"descriptor","line":1352,"char":68593,"type":"variable"},{"text":"response","line":1356,"char":68771,"type":"variable"},{"text":"myProject","line":1369,"char":69680,"type":"variable"},{"text":"originFileName","line":1373,"char":69816,"type":"variable"},{"text":"destinationFileName","line":1374,"char":69860,"type":"variable"},{"text":"originContent","line":1377,"char":69942,"type":"variable"},{"text":"overwritenContent","line":1378,"char":69995,"type":"variable"},{"text":"renamedFolder","line":1381,"char":70092,"type":"variable"},{"text":"headers","line":1386,"char":70458,"type":"variable"},{"text":"descriptor","line":1389,"char":70574,"type":"variable"},{"text":"response","line":1393,"char":70751,"type":"variable"},{"text":"myProject","line":1406,"char":71666,"type":"variable"},{"text":"bout","line":1409,"char":71793,"type":"variable"},{"text":"zipOut","line":1410,"char":71853,"type":"variable"},{"text":"zip","line":1415,"char":72126,"type":"variable"},{"text":"headers","line":1416,"char":72186,"type":"variable"},{"text":"response","line":1418,"char":72319,"type":"variable"},{"text":"myProject","line":1429,"char":73031,"type":"variable"},{"text":"bout","line":1432,"char":73158,"type":"variable"},{"text":"zipOut","line":1433,"char":73218,"type":"variable"},{"text":"zip","line":1439,"char":73562,"type":"variable"},{"text":"headers","line":1440,"char":73622,"type":"variable"},{"text":"response","line":1442,"char":73755,"type":"variable"},{"text":"myProject","line":1455,"char":74617,"type":"variable"},{"text":"response","line":1457,"char":74806,"type":"variable"},{"text":"myProject","line":1467,"char":75354,"type":"variable"},{"text":"a","line":1468,"char":75415,"type":"variable"},{"text":"response","line":1471,"char":75596,"type":"variable"},{"text":"result","line":1475,"char":75955,"type":"variable"},{"text":"names","line":1477,"char":76067,"type":"variable"},{"text":"myProject","line":1486,"char":76425,"type":"variable"},{"text":"a","line":1487,"char":76486,"type":"variable"},{"text":"response","line":1490,"char":76667,"type":"variable"},{"text":"result","line":1495,"char":77019,"type":"variable"},{"text":"a","line":1509,"char":77686,"type":"variable"},{"text":"response","line":1511,"char":77833,"type":"variable"},{"text":"result","line":1515,"char":78180,"type":"variable"},{"text":"response","line":1522,"char":78432,"type":"variable"},{"text":"myProject","line":1530,"char":78861,"type":"variable"},{"text":"a","line":1531,"char":78922,"type":"variable"},{"text":"response","line":1535,"char":79136,"type":"variable"},{"text":"tree","line":1539,"char":79483,"type":"variable"},{"text":"a_node","line":1540,"char":79547,"type":"variable"},{"text":"children","line":1543,"char":79680,"type":"variable"},{"text":"names","line":1546,"char":79806,"type":"variable"},{"text":"subTree","line":1547,"char":79863,"type":"variable"},{"text":"_node","line":1548,"char":79911,"type":"variable"},{"text":"myProject","line":1559,"char":80311,"type":"variable"},{"text":"a","line":1560,"char":80372,"type":"variable"},{"text":"response","line":1564,"char":80586,"type":"variable"},{"text":"tree","line":1568,"char":80941,"type":"variable"},{"text":"a_node","line":1569,"char":81005,"type":"variable"},{"text":"children","line":1571,"char":81101,"type":"variable"},{"text":"names","line":1573,"char":81185,"type":"variable"},{"text":"subTree","line":1574,"char":81242,"type":"variable"},{"text":"_node","line":1575,"char":81290,"type":"variable"},{"text":"name","line":1577,"char":81376,"type":"variable"},{"text":"subSubTree","line":1579,"char":81458,"type":"variable"},{"text":"__node","line":1580,"char":81526,"type":"variable"},{"text":"myProject","line":1593,"char":81996,"type":"variable"},{"text":"a","line":1594,"char":82057,"type":"variable"},{"text":"response","line":1597,"char":82258,"type":"variable"},{"text":"tree","line":1601,"char":82633,"type":"variable"},{"text":"a_node","line":1602,"char":82697,"type":"variable"},{"text":"children","line":1604,"char":82793,"type":"variable"},{"text":"names","line":1606,"char":82877,"type":"variable"},{"text":"subTree","line":1607,"char":82934,"type":"variable"},{"text":"_node","line":1608,"char":82982,"type":"variable"},{"text":"name","line":1610,"char":83068,"type":"variable"},{"text":"subSubTree","line":1612,"char":83150,"type":"variable"},{"text":"__node","line":1613,"char":83218,"type":"variable"},{"text":"myProject","line":1630,"char":83890,"type":"variable"},{"text":"a","line":1631,"char":83951,"type":"variable"},{"text":"response","line":1634,"char":84086,"type":"variable"},{"text":"tree","line":1638,"char":84461,"type":"variable"},{"text":"a_node","line":1639,"char":84525,"type":"variable"},{"text":"children","line":1641,"char":84621,"type":"variable"},{"text":"names","line":1643,"char":84705,"type":"variable"},{"text":"subTree","line":1644,"char":84762,"type":"variable"},{"text":"_node","line":1645,"char":84810,"type":"variable"},{"text":"name","line":1647,"char":84896,"type":"variable"},{"text":"subSubTree","line":1649,"char":84978,"type":"variable"},{"text":"__node","line":1650,"char":85046,"type":"variable"},{"text":"myProject","line":1665,"char":85541,"type":"variable"},{"text":"response","line":1670,"char":85970,"type":"variable"},{"text":"result","line":1674,"char":86339,"type":"variable"},{"text":"paths","line":1676,"char":86451,"type":"variable"},{"text":"itemReference","line":1677,"char":86510,"type":"variable"},{"text":"myProject","line":1687,"char":86868,"type":"variable"},{"text":"response","line":1692,"char":87307,"type":"variable"},{"text":"result","line":1696,"char":87677,"type":"variable"},{"text":"paths","line":1698,"char":87789,"type":"variable"},{"text":"myProject","line":1706,"char":88143,"type":"variable"},{"text":"response","line":1711,"char":88598,"type":"variable"},{"text":"result","line":1715,"char":88968,"type":"variable"},{"text":"paths","line":1717,"char":89080,"type":"variable"},{"text":"queryToSearch","line":1726,"char":89512,"type":"variable"},{"text":"myProject","line":1733,"char":89935,"type":"variable"},{"text":"response","line":1738,"char":90506,"type":"variable"},{"text":"result","line":1742,"char":90818,"type":"variable"},{"text":"paths","line":1744,"char":90930,"type":"variable"},{"text":"queryToSearch","line":1752,"char":91294,"type":"variable"},{"text":"myProject","line":1757,"char":91667,"type":"variable"},{"text":"response","line":1764,"char":92313,"type":"variable"},{"text":"result","line":1768,"char":92624,"type":"variable"},{"text":"paths","line":1770,"char":92736,"type":"variable"},{"text":"queryToSearch","line":1780,"char":93257,"type":"variable"},{"text":"myProject","line":1782,"char":93376,"type":"variable"},{"text":"response","line":1789,"char":94022,"type":"variable"},{"text":"result","line":1793,"char":94334,"type":"variable"},{"text":"paths","line":1795,"char":94446,"type":"variable"},{"text":"queryToSearch","line":1805,"char":94973,"type":"variable"},{"text":"myProject","line":1808,"char":95212,"type":"variable"},{"text":"response","line":1814,"char":95816,"type":"variable"},{"text":"result","line":1818,"char":96128,"type":"variable"},{"text":"paths","line":1820,"char":96240,"type":"variable"},{"text":"queryToSearch","line":1830,"char":96765,"type":"variable"},{"text":"myProject","line":1839,"char":97395,"type":"variable"},{"text":"response","line":1843,"char":97666,"type":"variable"},{"text":"result","line":1846,"char":97983,"type":"variable"},{"text":"paths","line":1848,"char":98095,"type":"variable"},{"text":"myProject","line":1856,"char":98433,"type":"variable"},{"text":"response","line":1861,"char":98858,"type":"variable"},{"text":"result","line":1865,"char":99237,"type":"variable"},{"text":"myProject","line":1880,"char":99862,"type":"variable"},{"text":"response","line":1885,"char":100283,"type":"variable"},{"text":"result","line":1889,"char":100652,"type":"variable"},{"text":"item","line":1894,"char":100885,"type":"variable"},{"text":"link","line":1895,"char":100906,"type":"variable"},{"text":"item","line":1906,"char":101438,"type":"variable"},{"text":"link","line":1907,"char":101459,"type":"variable"},{"text":"project","line":1927,"char":102269,"type":"variable"},{"text":"links","line":1928,"char":102299,"type":"variable"},{"text":"link","line":1930,"char":102346,"type":"variable"},{"text":"typeId","line":1978,"char":104595,"type":"variable"},{"text":"typeName","line":1978,"char":104610,"type":"variable"},{"text":"setUp","line":181,"char":7785,"type":"method"},{"text":"getClasses","line":283,"char":12423,"type":"method"},{"text":"getSingletons","line":288,"char":12594,"type":"method"},{"text":"addMockedProjectConfigDto","line":298,"char":12914,"type":"method"},{"text":"testGetProjects","line":322,"char":14276,"type":"method"},{"text":"testGetProject","line":360,"char":15599,"type":"method"},{"text":"testGetNotValidProject","line":377,"char":16463,"type":"method"},{"text":"testGetProjectCheckUserPermissions","line":395,"char":17464,"type":"method"},{"text":"testGetProjectInvalidPath","line":408,"char":18121,"type":"method"},{"text":"testCreateProject","line":416,"char":18521,"type":"method"},{"text":"onCreateProject","line":422,"char":18666,"type":"method"},{"text":"getProjectType","line":431,"char":19246,"type":"method"},{"text":"testUpdateProject","line":502,"char":22706,"type":"method"},{"text":"testUpdateBadProject","line":541,"char":24760,"type":"method"},{"text":"testUpdateProjectInvalidPath","line":582,"char":27340,"type":"method"},{"text":"testEstimateProject","line":601,"char":28610,"type":"method"},{"text":"getValues","line":612,"char":29168,"type":"method"},{"text":"testResolveSources","line":664,"char":31482,"type":"method"},{"text":"getValues","line":672,"char":31862,"type":"method"},{"text":"testImportProject","line":721,"char":33677,"type":"method"},{"text":"registerImporter","line":761,"char":35668,"type":"method"},{"text":"getId","line":765,"char":35921,"type":"method"},{"text":"isInternal","line":770,"char":36030,"type":"method"},{"text":"getDescription","line":775,"char":36138,"type":"method"},{"text":"importSources","line":780,"char":36259,"type":"method"},{"text":"importSources","line":787,"char":36707,"type":"method"},{"text":"getCategory","line":798,"char":37388,"type":"method"},{"text":"testCreateFile","line":808,"char":37515,"type":"method"},{"text":"testGetFileContent","line":834,"char":39015,"type":"method"},{"text":"testUpdateFileContent","line":847,"char":39852,"type":"method"},{"text":"testCreateFolder","line":861,"char":40762,"type":"method"},{"text":"testCreateFolderInRoot","line":878,"char":41805,"type":"method"},{"text":"testCreatePath","line":894,"char":42731,"type":"method"},{"text":"testDeleteFile","line":906,"char":43469,"type":"method"},{"text":"testDeleteFolder","line":916,"char":44122,"type":"method"},{"text":"testDeletePath","line":926,"char":44710,"type":"method"},{"text":"testDeleteInvalidPath","line":936,"char":45299,"type":"method"},{"text":"testDeleteProject","line":945,"char":45794,"type":"method"},{"text":"testDeleteProjectsConcurrently","line":957,"char":46255,"type":"method"},{"text":"testCopyFile","line":1003,"char":48044,"type":"method"},{"text":"testCopyFileWithRename","line":1018,"char":49104,"type":"method"},{"text":"testCopyFileWithRenameAndOverwrite","line":1042,"char":50623,"type":"method"},{"text":"testCopyFolder","line":1093,"char":53333,"type":"method"},{"text":"testCopyFolderWithRename","line":1108,"char":54371,"type":"method"},{"text":"testCopyFolderWithRenameAndOverwrite","line":1136,"char":56031,"type":"method"},{"text":"testMoveFile","line":1176,"char":58329,"type":"method"},{"text":"testMoveFileWithRename","line":1191,"char":59393,"type":"method"},{"text":"testRenameFile","line":1219,"char":61056,"type":"method"},{"text":"testMoveFileWithRenameAndOverwrite","line":1247,"char":62684,"type":"method"},{"text":"testMoveFolder","line":1298,"char":65357,"type":"method"},{"text":"testMoveFolderWithRename","line":1314,"char":66465,"type":"method"},{"text":"testRenameFolder","line":1341,"char":68050,"type":"method"},{"text":"testMoveFolderWithRenameAndOverwrite","line":1368,"char":69596,"type":"method"},{"text":"testImportZip","line":1405,"char":71605,"type":"method"},{"text":"testImportZipWithoutSkipFirstLevel","line":1428,"char":72949,"type":"method"},{"text":"testExportZip","line":1454,"char":74556,"type":"method"},{"text":"testGetChildren","line":1466,"char":75291,"type":"method"},{"text":"testGetItem","line":1485,"char":76366,"type":"method"},{"text":"testGetItemWithoutParentProject","line":1508,"char":77613,"type":"method"},{"text":"testGetMissingItem","line":1521,"char":78366,"type":"method"},{"text":"testGetTree","line":1529,"char":78802,"type":"method"},{"text":"testGetTreeWithDepth","line":1558,"char":80243,"type":"method"},{"text":"testGetTreeWithDepthAndIncludeFiles","line":1592,"char":81913,"type":"method"},{"text":"testGetTreeWithDepthAndIncludeFilesNoFiles","line":1629,"char":83800,"type":"method"},{"text":"testSearchByName","line":1664,"char":85477,"type":"method"},{"text":"testSearchByText","line":1686,"char":86804,"type":"method"},{"text":"testSearchByTextWhenFileWasNotIndexed","line":1705,"char":88058,"type":"method"},{"text":"testSearchParticularSequenceWords","line":1725,"char":89442,"type":"method"},{"text":"testSearchParticularSequenceWordsWithAnyEnding","line":1751,"char":91211,"type":"method"},{"text":"testSearchWordWithAnyEnding","line":1779,"char":93193,"type":"method"},{"text":"testSearchTextWhenExcludeSomeText","line":1804,"char":94903,"type":"method"},{"text":"testSearchTextWithEscapedCharachters","line":1829,"char":96692,"type":"method"},{"text":"testSearchByNameAndText","line":1855,"char":98362,"type":"method"},{"text":"testSearchFromWSRoot","line":1879,"char":99794,"type":"method"},{"text":"validateFileLinks","line":1894,"char":100853,"type":"method"},{"text":"validateFolderLinks","line":1906,"char":101404,"type":"method"},{"text":"validateProjectLinks","line":1927,"char":102231,"type":"method"},{"text":"value","line":132,"char":6107,"type":"identifier"},{"text":"MockitoTestNGListener","line":132,"char":6116,"type":"identifier"},{"text":"String","line":134,"char":6205,"type":"identifier"},{"text":"String","line":136,"char":6269,"type":"identifier"},{"text":"String","line":138,"char":6321,"type":"identifier"},{"text":"String","line":139,"char":6382,"type":"identifier"},{"text":"String","line":141,"char":6448,"type":"identifier"},{"text":"String","line":142,"char":6519,"type":"identifier"},{"text":"String","line":143,"char":6590,"type":"identifier"},{"text":"String","line":144,"char":6661,"type":"identifier"},{"text":"String","line":146,"char":6733,"type":"identifier"},{"text":"String","line":147,"char":6787,"type":"identifier"},{"text":"String","line":149,"char":6842,"type":"identifier"},{"text":"ProjectManager","line":151,"char":6896,"type":"identifier"},{"text":"ResourceLauncher","line":152,"char":6935,"type":"identifier"},{"text":"ProjectHandlerRegistry","line":153,"char":6980,"type":"identifier"},{"text":"org","line":155,"char":7028,"type":"identifier"},{"text":"eclipse","line":155,"char":7032,"type":"identifier"},{"text":"che","line":155,"char":7040,"type":"identifier"},{"text":"commons","line":155,"char":7044,"type":"identifier"},{"text":"env","line":155,"char":7052,"type":"identifier"},{"text":"EnvironmentContext","line":155,"char":7056,"type":"identifier"},{"text":"List","line":157,"char":7093,"type":"identifier"},{"text":"ProjectConfigDto","line":157,"char":7098,"type":"identifier"},{"text":"UserDao","line":160,"char":7149,"type":"identifier"},{"text":"WorkspaceDto","line":162,"char":7207,"type":"identifier"},{"text":"WorkspaceConfigDto","line":164,"char":7276,"type":"identifier"},{"text":"HttpJsonRequestFactory","line":166,"char":7346,"type":"identifier"},{"text":"HttpJsonResponse","line":168,"char":7419,"type":"identifier"},{"text":"ProjectTreeChangesDetector","line":170,"char":7486,"type":"identifier"},{"text":"LocalVirtualFileSystemProvider","line":172,"char":7556,"type":"identifier"},{"text":"ProjectImporterRegistry","line":174,"char":7613,"type":"identifier"},{"text":"ProjectRegistry","line":176,"char":7670,"type":"identifier"},{"text":"ProjectTypeRegistry","line":178,"char":7718,"type":"identifier"},{"text":"Exception","line":181,"char":7800,"type":"identifier"},{"text":"WorkspaceProjectsSyncer","line":183,"char":7821,"type":"identifier"},{"text":"WsAgentTestBase","line":183,"char":7867,"type":"identifier"},{"text":"TestWorkspaceHolder","line":183,"char":7883,"type":"identifier"},{"text":"File","line":185,"char":7915,"type":"identifier"},{"text":"File","line":185,"char":7931,"type":"identifier"},{"text":"FS_PATH","line":185,"char":7936,"type":"identifier"},{"text":"root","line":187,"char":7959,"type":"identifier"},{"text":"exists","line":187,"char":7964,"type":"identifier"},{"text":"IoUtil","line":188,"char":7988,"type":"identifier"},{"text":"deleteRecursive","line":188,"char":7995,"type":"identifier"},{"text":"root","line":188,"char":8011,"type":"identifier"},{"text":"root","line":190,"char":8036,"type":"identifier"},{"text":"mkdir","line":190,"char":8041,"type":"identifier"},{"text":"File","line":193,"char":8060,"type":"identifier"},{"text":"File","line":193,"char":8080,"type":"identifier"},{"text":"INDEX_PATH","line":193,"char":8085,"type":"identifier"},{"text":"indexDir","line":195,"char":8111,"type":"identifier"},{"text":"exists","line":195,"char":8120,"type":"identifier"},{"text":"IoUtil","line":196,"char":8144,"type":"identifier"},{"text":"deleteRecursive","line":196,"char":8151,"type":"identifier"},{"text":"indexDir","line":196,"char":8167,"type":"identifier"},{"text":"indexDir","line":198,"char":8196,"type":"identifier"},{"text":"mkdir","line":198,"char":8205,"type":"identifier"},{"text":"Set","line":200,"char":8223,"type":"identifier"},{"text":"PathMatcher","line":200,"char":8227,"type":"identifier"},{"text":"HashSet","line":200,"char":8254,"type":"identifier"},{"text":"filters","line":201,"char":8275,"type":"identifier"},{"text":"add","line":201,"char":8283,"type":"identifier"},{"text":"path","line":201,"char":8287,"type":"identifier"},{"text":"java","line":202,"char":8314,"type":"identifier"},{"text":"nio","line":202,"char":8319,"type":"identifier"},{"text":"file","line":202,"char":8323,"type":"identifier"},{"text":"Path","line":202,"char":8328,"type":"identifier"},{"text":"path","line":202,"char":8347,"type":"identifier"},{"text":"pathElement","line":203,"char":8375,"type":"identifier"},{"text":"EXCLUDE_SEARCH_PATH","line":203,"char":8398,"type":"identifier"},{"text":"equals","line":203,"char":8418,"type":"identifier"},{"text":"pathElement","line":203,"char":8425,"type":"identifier"},{"text":"toString","line":203,"char":8437,"type":"identifier"},{"text":"FSLuceneSearcherProvider","line":210,"char":8564,"type":"identifier"},{"text":"FSLuceneSearcherProvider","line":210,"char":8605,"type":"identifier"},{"text":"indexDir","line":210,"char":8630,"type":"identifier"},{"text":"filters","line":210,"char":8640,"type":"identifier"},{"text":"vfsProvider","line":212,"char":8659,"type":"identifier"},{"text":"LocalVirtualFileSystemProvider","line":212,"char":8677,"type":"identifier"},{"text":"root","line":212,"char":8708,"type":"identifier"},{"text":"sProvider","line":212,"char":8714,"type":"identifier"},{"text":"EventService","line":214,"char":8741,"type":"identifier"},{"text":"EventService","line":214,"char":8773,"type":"identifier"},{"text":"ProjectTypeDef","line":217,"char":8822,"type":"identifier"},{"text":"ProjectTypeDef","line":217,"char":8849,"type":"identifier"},{"text":"addConstantDefinition","line":219,"char":8953,"type":"identifier"},{"text":"AttributeValue","line":219,"char":9004,"type":"identifier"},{"text":"Arrays","line":219,"char":9019,"type":"identifier"},{"text":"asList","line":219,"char":9026,"type":"identifier"},{"text":"Set","line":223,"char":9080,"type":"identifier"},{"text":"ProjectTypeDef","line":223,"char":9084,"type":"identifier"},{"text":"HashSet","line":223,"char":9119,"type":"identifier"},{"text":"LocalProjectType","line":224,"char":9146,"type":"identifier"},{"text":"LocalProjectType","line":224,"char":9183,"type":"identifier"},{"text":"projectTypes","line":225,"char":9247,"type":"identifier"},{"text":"add","line":225,"char":9260,"type":"identifier"},{"text":"myProjectType","line":225,"char":9264,"type":"identifier"},{"text":"projectTypes","line":226,"char":9288,"type":"identifier"},{"text":"add","line":226,"char":9301,"type":"identifier"},{"text":"LocalProjectType","line":226,"char":9309,"type":"identifier"},{"text":"projectTypes","line":227,"char":9366,"type":"identifier"},{"text":"add","line":227,"char":9379,"type":"identifier"},{"text":"chuck","line":227,"char":9383,"type":"identifier"},{"text":"ptRegistry","line":229,"char":9400,"type":"identifier"},{"text":"ProjectTypeRegistry","line":229,"char":9417,"type":"identifier"},{"text":"projectTypes","line":229,"char":9437,"type":"identifier"},{"text":"phRegistry","line":231,"char":9461,"type":"identifier"},{"text":"ProjectHandlerRegistry","line":231,"char":9478,"type":"identifier"},{"text":"HashSet","line":231,"char":9505,"type":"identifier"},{"text":"importerRegistry","line":233,"char":9528,"type":"identifier"},{"text":"ProjectImporterRegistry","line":233,"char":9551,"type":"identifier"},{"text":"Collections","line":233,"char":9575,"type":"identifier"},{"text":"ProjectImporter","line":233,"char":9588,"type":"identifier"},{"text":"emptySet","line":233,"char":9604,"type":"identifier"},{"text":"projectRegistry","line":235,"char":9626,"type":"identifier"},{"text":"ProjectRegistry","line":235,"char":9648,"type":"identifier"},{"text":"workspaceHolder","line":235,"char":9664,"type":"identifier"},{"text":"vfsProvider","line":235,"char":9681,"type":"identifier"},{"text":"ptRegistry","line":235,"char":9694,"type":"identifier"},{"text":"phRegistry","line":235,"char":9706,"type":"identifier"},{"text":"eventService","line":235,"char":9718,"type":"identifier"},{"text":"projectRegistry","line":236,"char":9741,"type":"identifier"},{"text":"initProjects","line":236,"char":9757,"type":"identifier"},{"text":"FileWatcherNotificationHandler","line":238,"char":9782,"type":"identifier"},{"text":"DefaultFileWatcherNotificationHandler","line":238,"char":9850,"type":"identifier"},{"text":"vfsProvider","line":238,"char":9888,"type":"identifier"},{"text":"FileTreeWatcher","line":239,"char":9910,"type":"identifier"},{"text":"FileTreeWatcher","line":239,"char":9948,"type":"identifier"},{"text":"root","line":239,"char":9964,"type":"identifier"},{"text":"HashSet","line":239,"char":9974,"type":"identifier"},{"text":"fileWatcherNotificationHandler","line":239,"char":9987,"type":"identifier"},{"text":"pm","line":241,"char":10029,"type":"identifier"},{"text":"ProjectManager","line":241,"char":10038,"type":"identifier"},{"text":"vfsProvider","line":241,"char":10053,"type":"identifier"},{"text":"EventService","line":241,"char":10070,"type":"identifier"},{"text":"ptRegistry","line":241,"char":10086,"type":"identifier"},{"text":"projectRegistry","line":241,"char":10098,"type":"identifier"},{"text":"phRegistry","line":241,"char":10115,"type":"identifier"},{"text":"importerRegistry","line":242,"char":10159,"type":"identifier"},{"text":"fileWatcherNotificationHandler","line":242,"char":10177,"type":"identifier"},{"text":"fileTreeWatcher","line":242,"char":10209,"type":"identifier"},{"text":"workspaceHolder","line":242,"char":10226,"type":"identifier"},{"text":"projectTreeChangesDetector","line":243,"char":10275,"type":"identifier"},{"text":"pm","line":244,"char":10312,"type":"identifier"},{"text":"initWatcher","line":244,"char":10315,"type":"identifier"},{"text":"HttpJsonRequest","line":246,"char":10339,"type":"identifier"},{"text":"mock","line":246,"char":10373,"type":"identifier"},{"text":"HttpJsonRequest","line":246,"char":10378,"type":"identifier"},{"text":"SelfReturningAnswer","line":246,"char":10405,"type":"identifier"},{"text":"projects","line":250,"char":10501,"type":"identifier"},{"text":"ArrayList","line":250,"char":10516,"type":"identifier"},{"text":"addMockedProjectConfigDto","line":251,"char":10539,"type":"identifier"},{"text":"myProjectType","line":251,"char":10565,"type":"identifier"},{"text":"when","line":253,"char":10604,"type":"identifier"},{"text":"httpJsonRequestFactory","line":253,"char":10609,"type":"identifier"},{"text":"fromLink","line":253,"char":10632,"type":"identifier"},{"text":"any","line":253,"char":10641,"type":"identifier"},{"text":"thenReturn","line":253,"char":10649,"type":"identifier"},{"text":"httpJsonRequest","line":253,"char":10660,"type":"identifier"},{"text":"when","line":254,"char":10686,"type":"identifier"},{"text":"httpJsonRequest","line":254,"char":10691,"type":"identifier"},{"text":"request","line":254,"char":10707,"type":"identifier"},{"text":"thenReturn","line":254,"char":10718,"type":"identifier"},{"text":"httpJsonResponse","line":254,"char":10729,"type":"identifier"},{"text":"when","line":255,"char":10756,"type":"identifier"},{"text":"httpJsonResponse","line":255,"char":10761,"type":"identifier"},{"text":"asDto","line":255,"char":10778,"type":"identifier"},{"text":"WorkspaceDto","line":255,"char":10784,"type":"identifier"},{"text":"thenReturn","line":255,"char":10805,"type":"identifier"},{"text":"usersWorkspaceMock","line":255,"char":10816,"type":"identifier"},{"text":"when","line":256,"char":10845,"type":"identifier"},{"text":"usersWorkspaceMock","line":256,"char":10850,"type":"identifier"},{"text":"getConfig","line":256,"char":10869,"type":"identifier"},{"text":"thenReturn","line":256,"char":10882,"type":"identifier"},{"text":"workspaceConfigMock","line":256,"char":10893,"type":"identifier"},{"text":"when","line":257,"char":10923,"type":"identifier"},{"text":"workspaceConfigMock","line":257,"char":10928,"type":"identifier"},{"text":"getProjects","line":257,"char":10948,"type":"identifier"},{"text":"thenReturn","line":257,"char":10963,"type":"identifier"},{"text":"projects","line":257,"char":10974,"type":"identifier"},{"text":"DependencySupplierImpl","line":263,"char":11288,"type":"identifier"},{"text":"DependencySupplierImpl","line":263,"char":11330,"type":"identifier"},{"text":"dependencies","line":266,"char":11366,"type":"identifier"},{"text":"addInstance","line":266,"char":11379,"type":"identifier"},{"text":"ProjectTypeRegistry","line":266,"char":11391,"type":"identifier"},{"text":"ptRegistry","line":266,"char":11418,"type":"identifier"},{"text":"dependencies","line":267,"char":11439,"type":"identifier"},{"text":"addInstance","line":267,"char":11452,"type":"identifier"},{"text":"UserDao","line":267,"char":11464,"type":"identifier"},{"text":"userDao","line":267,"char":11479,"type":"identifier"},{"text":"dependencies","line":268,"char":11497,"type":"identifier"},{"text":"addInstance","line":268,"char":11510,"type":"identifier"},{"text":"ProjectManager","line":268,"char":11522,"type":"identifier"},{"text":"pm","line":268,"char":11544,"type":"identifier"},{"text":"dependencies","line":269,"char":11557,"type":"identifier"},{"text":"addInstance","line":269,"char":11570,"type":"identifier"},{"text":"ProjectImporterRegistry","line":269,"char":11582,"type":"identifier"},{"text":"importerRegistry","line":269,"char":11613,"type":"identifier"},{"text":"dependencies","line":270,"char":11640,"type":"identifier"},{"text":"addInstance","line":270,"char":11653,"type":"identifier"},{"text":"ProjectHandlerRegistry","line":270,"char":11665,"type":"identifier"},{"text":"phRegistry","line":270,"char":11695,"type":"identifier"},{"text":"dependencies","line":271,"char":11716,"type":"identifier"},{"text":"addInstance","line":271,"char":11729,"type":"identifier"},{"text":"EventService","line":271,"char":11741,"type":"identifier"},{"text":"eventService","line":271,"char":11761,"type":"identifier"},{"text":"ResourceBinder","line":273,"char":11785,"type":"identifier"},{"text":"ResourceBinderImpl","line":273,"char":11816,"type":"identifier"},{"text":"ProviderBinder","line":274,"char":11846,"type":"identifier"},{"text":"ProviderBinder","line":274,"char":11873,"type":"identifier"},{"text":"getInstance","line":274,"char":11888,"type":"identifier"},{"text":"EverrestProcessor","line":275,"char":11911,"type":"identifier"},{"text":"EverrestProcessor","line":275,"char":11945,"type":"identifier"},{"text":"EverrestConfiguration","line":275,"char":11967,"type":"identifier"},{"text":"dependencies","line":276,"char":12052,"type":"identifier"},{"text":"RequestHandlerImpl","line":277,"char":12130,"type":"identifier"},{"text":"RequestDispatcher","line":277,"char":12153,"type":"identifier"},{"text":"resources","line":277,"char":12171,"type":"identifier"},{"text":"providers","line":277,"char":12183,"type":"identifier"},{"text":"launcher","line":279,"char":12270,"type":"identifier"},{"text":"ResourceLauncher","line":279,"char":12285,"type":"identifier"},{"text":"processor","line":279,"char":12302,"type":"identifier"},{"text":"processor","line":281,"char":12323,"type":"identifier"},{"text":"addApplication","line":281,"char":12333,"type":"identifier"},{"text":"Application","line":281,"char":12352,"type":"identifier"},{"text":"Set","line":283,"char":12409,"type":"identifier"},{"text":"Class","line":283,"char":12413,"type":"identifier"},{"text":"java","line":284,"char":12461,"type":"identifier"},{"text":"util","line":284,"char":12466,"type":"identifier"},{"text":"Collections","line":284,"char":12471,"type":"identifier"},{"text":"Class","line":284,"char":12484,"type":"identifier"},{"text":"singleton","line":284,"char":12493,"type":"identifier"},{"text":"ProjectService","line":284,"char":12503,"type":"identifier"},{"text":"Set","line":288,"char":12582,"type":"identifier"},{"text":"Object","line":288,"char":12586,"type":"identifier"},{"text":"HashSet","line":289,"char":12639,"type":"identifier"},{"text":"Arrays","line":289,"char":12649,"type":"identifier"},{"text":"asList","line":289,"char":12656,"type":"identifier"},{"text":"ApiExceptionMapper","line":289,"char":12667,"type":"identifier"},{"text":"ApplicationContext","line":293,"char":12726,"type":"identifier"},{"text":"setCurrent","line":293,"char":12745,"type":"identifier"},{"text":"anApplicationContext","line":293,"char":12756,"type":"identifier"},{"text":"withProviders","line":293,"char":12779,"type":"identifier"},{"text":"providers","line":293,"char":12793,"type":"identifier"},{"text":"build","line":293,"char":12804,"type":"identifier"},{"text":"env","line":295,"char":12823,"type":"identifier"},{"text":"org","line":295,"char":12829,"type":"identifier"},{"text":"eclipse","line":295,"char":12833,"type":"identifier"},{"text":"che","line":295,"char":12841,"type":"identifier"},{"text":"commons","line":295,"char":12845,"type":"identifier"},{"text":"env","line":295,"char":12853,"type":"identifier"},{"text":"EnvironmentContext","line":295,"char":12857,"type":"identifier"},{"text":"getCurrent","line":295,"char":12876,"type":"identifier"},{"text":"org","line":298,"char":12940,"type":"identifier"},{"text":"eclipse","line":298,"char":12944,"type":"identifier"},{"text":"che","line":298,"char":12952,"type":"identifier"},{"text":"api","line":298,"char":12956,"type":"identifier"},{"text":"project","line":298,"char":12960,"type":"identifier"},{"text":"server","line":298,"char":12968,"type":"identifier"},{"text":"type","line":298,"char":12975,"type":"identifier"},{"text":"ProjectTypeDef","line":298,"char":12980,"type":"identifier"},{"text":"String","line":298,"char":13010,"type":"identifier"},{"text":"ForbiddenException","line":299,"char":13049,"type":"identifier"},{"text":"ServerException","line":299,"char":13069,"type":"identifier"},{"text":"NotFoundException","line":299,"char":13086,"type":"identifier"},{"text":"ConflictException","line":299,"char":13105,"type":"identifier"},{"text":"ProjectConfigDto","line":300,"char":13139,"type":"identifier"},{"text":"mock","line":300,"char":13180,"type":"identifier"},{"text":"ProjectConfigDto","line":300,"char":13185,"type":"identifier"},{"text":"when","line":301,"char":13218,"type":"identifier"},{"text":"testProjectConfigMock","line":301,"char":13223,"type":"identifier"},{"text":"getPath","line":301,"char":13245,"type":"identifier"},{"text":"thenReturn","line":301,"char":13256,"type":"identifier"},{"text":"projectName","line":301,"char":13273,"type":"identifier"},{"text":"when","line":302,"char":13295,"type":"identifier"},{"text":"testProjectConfigMock","line":302,"char":13300,"type":"identifier"},{"text":"getName","line":302,"char":13322,"type":"identifier"},{"text":"thenReturn","line":302,"char":13333,"type":"identifier"},{"text":"projectName","line":302,"char":13344,"type":"identifier"},{"text":"when","line":303,"char":13366,"type":"identifier"},{"text":"testProjectConfigMock","line":303,"char":13371,"type":"identifier"},{"text":"getDescription","line":303,"char":13393,"type":"identifier"},{"text":"thenReturn","line":303,"char":13411,"type":"identifier"},{"text":"when","line":304,"char":13450,"type":"identifier"},{"text":"testProjectConfigMock","line":304,"char":13455,"type":"identifier"},{"text":"getType","line":304,"char":13477,"type":"identifier"},{"text":"thenReturn","line":304,"char":13488,"type":"identifier"},{"text":"when","line":305,"char":13527,"type":"identifier"},{"text":"testProjectConfigMock","line":305,"char":13532,"type":"identifier"},{"text":"getSource","line":305,"char":13554,"type":"identifier"},{"text":"thenReturn","line":305,"char":13567,"type":"identifier"},{"text":"DtoFactory","line":305,"char":13578,"type":"identifier"},{"text":"getInstance","line":305,"char":13589,"type":"identifier"},{"text":"createDto","line":305,"char":13603,"type":"identifier"},{"text":"SourceStorageDto","line":305,"char":13613,"type":"identifier"},{"text":"Map","line":309,"char":13833,"type":"identifier"},{"text":"String","line":309,"char":13837,"type":"identifier"},{"text":"List","line":309,"char":13845,"type":"identifier"},{"text":"String","line":309,"char":13850,"type":"identifier"},{"text":"HashMap","line":309,"char":13870,"type":"identifier"},{"text":"Attribute","line":310,"char":13896,"type":"identifier"},{"text":"myProjectType","line":310,"char":13918,"type":"identifier"},{"text":"getAttributes","line":310,"char":13932,"type":"identifier"},{"text":"attr","line":311,"char":13963,"type":"identifier"},{"text":"put","line":311,"char":13968,"type":"identifier"},{"text":"attribute","line":311,"char":13972,"type":"identifier"},{"text":"getName","line":311,"char":13982,"type":"identifier"},{"text":"attribute","line":311,"char":13993,"type":"identifier"},{"text":"getValue","line":311,"char":14003,"type":"identifier"},{"text":"getList","line":311,"char":14014,"type":"identifier"},{"text":"when","line":313,"char":14044,"type":"identifier"},{"text":"testProjectConfigMock","line":313,"char":14049,"type":"identifier"},{"text":"getAttributes","line":313,"char":14071,"type":"identifier"},{"text":"thenReturn","line":313,"char":14088,"type":"identifier"},{"text":"attr","line":313,"char":14099,"type":"identifier"},{"text":"projects","line":315,"char":14115,"type":"identifier"},{"text":"add","line":315,"char":14124,"type":"identifier"},{"text":"testProjectConfigMock","line":315,"char":14128,"type":"identifier"},{"text":"pm","line":317,"char":14161,"type":"identifier"},{"text":"createProject","line":317,"char":14164,"type":"identifier"},{"text":"testProjectConfigMock","line":317,"char":14178,"type":"identifier"},{"text":"Exception","line":322,"char":14301,"type":"identifier"},{"text":"List","line":323,"char":14321,"type":"identifier"},{"text":"RegisteredProject","line":323,"char":14326,"type":"identifier"},{"text":"pm","line":323,"char":14349,"type":"identifier"},{"text":"getProjects","line":323,"char":14352,"type":"identifier"},{"text":"assertEquals","line":325,"char":14376,"type":"identifier"},{"text":"p","line":325,"char":14389,"type":"identifier"},{"text":"size","line":325,"char":14391,"type":"identifier"},{"text":"vfsProvider","line":327,"char":14412,"type":"identifier"},{"text":"getVirtualFileSystem","line":327,"char":14424,"type":"identifier"},{"text":"getRoot","line":327,"char":14447,"type":"identifier"},{"text":"createFolder","line":327,"char":14457,"type":"identifier"},{"text":"projectRegistry","line":330,"char":14517,"type":"identifier"},{"text":"initProjects","line":330,"char":14533,"type":"identifier"},{"text":"ContainerResponse","line":332,"char":14558,"type":"identifier"},{"text":"launcher","line":333,"char":14603,"type":"identifier"},{"text":"service","line":333,"char":14612,"type":"identifier"},{"text":"GET","line":333,"char":14620,"type":"identifier"},{"text":"assertEquals","line":334,"char":14718,"type":"identifier"},{"text":"response","line":334,"char":14731,"type":"identifier"},{"text":"getStatus","line":334,"char":14740,"type":"identifier"},{"text":"response","line":334,"char":14770,"type":"identifier"},{"text":"getEntity","line":334,"char":14779,"type":"identifier"},{"text":"List","line":335,"char":14801,"type":"identifier"},{"text":"ProjectConfigDto","line":335,"char":14806,"type":"identifier"},{"text":"List","line":335,"char":14834,"type":"identifier"},{"text":"ProjectConfigDto","line":335,"char":14839,"type":"identifier"},{"text":"response","line":335,"char":14857,"type":"identifier"},{"text":"getEntity","line":335,"char":14866,"type":"identifier"},{"text":"assertNotNull","line":336,"char":14887,"type":"identifier"},{"text":"result","line":336,"char":14901,"type":"identifier"},{"text":"assertEquals","line":337,"char":14918,"type":"identifier"},{"text":"result","line":337,"char":14931,"type":"identifier"},{"text":"size","line":337,"char":14938,"type":"identifier"},{"text":"result","line":340,"char":14986,"type":"identifier"},{"text":"get","line":340,"char":14993,"type":"identifier"},{"text":"getName","line":340,"char":15000,"type":"identifier"},{"text":"equals","line":340,"char":15010,"type":"identifier"},{"text":"good","line":341,"char":15046,"type":"identifier"},{"text":"bad","line":341,"char":15056,"type":"identifier"},{"text":"good","line":343,"char":15094,"type":"identifier"},{"text":"bad","line":343,"char":15104,"type":"identifier"},{"text":"ProjectConfigDto","line":346,"char":15132,"type":"identifier"},{"text":"result","line":346,"char":15169,"type":"identifier"},{"text":"get","line":346,"char":15176,"type":"identifier"},{"text":"good","line":346,"char":15180,"type":"identifier"},{"text":"assertEquals","line":348,"char":15196,"type":"identifier"},{"text":"projectDescriptor","line":348,"char":15209,"type":"identifier"},{"text":"getName","line":348,"char":15227,"type":"identifier"},{"text":"assertEquals","line":349,"char":15261,"type":"identifier"},{"text":"projectDescriptor","line":349,"char":15274,"type":"identifier"},{"text":"getDescription","line":349,"char":15292,"type":"identifier"},{"text":"assertEquals","line":351,"char":15339,"type":"identifier"},{"text":"projectDescriptor","line":351,"char":15352,"type":"identifier"},{"text":"getType","line":351,"char":15370,"type":"identifier"},{"text":"ProjectConfigDto","line":353,"char":15410,"type":"identifier"},{"text":"result","line":353,"char":15440,"type":"identifier"},{"text":"get","line":353,"char":15447,"type":"identifier"},{"text":"bad","line":353,"char":15451,"type":"identifier"},{"text":"assertEquals","line":354,"char":15465,"type":"identifier"},{"text":"badProject","line":354,"char":15478,"type":"identifier"},{"text":"getName","line":354,"char":15489,"type":"identifier"},{"text":"assertNotNull","line":355,"char":15524,"type":"identifier"},{"text":"badProject","line":355,"char":15538,"type":"identifier"},{"text":"getProblems","line":355,"char":15549,"type":"identifier"},{"text":"Exception","line":360,"char":15623,"type":"identifier"},{"text":"ContainerResponse","line":361,"char":15643,"type":"identifier"},{"text":"launcher","line":362,"char":15688,"type":"identifier"},{"text":"service","line":362,"char":15697,"type":"identifier"},{"text":"GET","line":362,"char":15705,"type":"identifier"},{"text":"assertEquals","line":364,"char":15847,"type":"identifier"},{"text":"response","line":364,"char":15860,"type":"identifier"},{"text":"getStatus","line":364,"char":15869,"type":"identifier"},{"text":"response","line":364,"char":15899,"type":"identifier"},{"text":"getEntity","line":364,"char":15908,"type":"identifier"},{"text":"ProjectConfigDto","line":365,"char":15930,"type":"identifier"},{"text":"ProjectConfigDto","line":365,"char":15957,"type":"identifier"},{"text":"response","line":365,"char":15974,"type":"identifier"},{"text":"getEntity","line":365,"char":15983,"type":"identifier"},{"text":"assertNotNull","line":366,"char":16004,"type":"identifier"},{"text":"result","line":366,"char":16018,"type":"identifier"},{"text":"assertEquals","line":367,"char":16035,"type":"identifier"},{"text":"result","line":367,"char":16048,"type":"identifier"},{"text":"getDescription","line":367,"char":16055,"type":"identifier"},{"text":"assertEquals","line":368,"char":16101,"type":"identifier"},{"text":"result","line":368,"char":16114,"type":"identifier"},{"text":"getType","line":368,"char":16121,"type":"identifier"},{"text":"Map","line":369,"char":16160,"type":"identifier"},{"text":"String","line":369,"char":16164,"type":"identifier"},{"text":"List","line":369,"char":16172,"type":"identifier"},{"text":"String","line":369,"char":16177,"type":"identifier"},{"text":"result","line":369,"char":16199,"type":"identifier"},{"text":"getAttributes","line":369,"char":16206,"type":"identifier"},{"text":"assertNotNull","line":370,"char":16231,"type":"identifier"},{"text":"attributes","line":370,"char":16245,"type":"identifier"},{"text":"assertEquals","line":371,"char":16266,"type":"identifier"},{"text":"attributes","line":371,"char":16279,"type":"identifier"},{"text":"size","line":371,"char":16290,"type":"identifier"},{"text":"assertEquals","line":372,"char":16310,"type":"identifier"},{"text":"attributes","line":372,"char":16323,"type":"identifier"},{"text":"get","line":372,"char":16334,"type":"identifier"},{"text":"singletonList","line":372,"char":16355,"type":"identifier"},{"text":"validateProjectLinks","line":373,"char":16400,"type":"identifier"},{"text":"result","line":373,"char":16421,"type":"identifier"},{"text":"Exception","line":377,"char":16495,"type":"identifier"},{"text":"vfsProvider","line":379,"char":16613,"type":"identifier"},{"text":"getVirtualFileSystem","line":379,"char":16625,"type":"identifier"},{"text":"getRoot","line":379,"char":16648,"type":"identifier"},{"text":"createFolder","line":379,"char":16658,"type":"identifier"},{"text":"projectRegistry","line":381,"char":16717,"type":"identifier"},{"text":"initProjects","line":381,"char":16733,"type":"identifier"},{"text":"ContainerResponse","line":382,"char":16757,"type":"identifier"},{"text":"launcher","line":382,"char":16786,"type":"identifier"},{"text":"service","line":382,"char":16795,"type":"identifier"},{"text":"GET","line":382,"char":16803,"type":"identifier"},{"text":"assertEquals","line":384,"char":16967,"type":"identifier"},{"text":"response","line":384,"char":16980,"type":"identifier"},{"text":"getStatus","line":384,"char":16989,"type":"identifier"},{"text":"response","line":384,"char":17019,"type":"identifier"},{"text":"getEntity","line":384,"char":17028,"type":"identifier"},{"text":"ProjectConfigDto","line":385,"char":17050,"type":"identifier"},{"text":"ProjectConfigDto","line":385,"char":17081,"type":"identifier"},{"text":"response","line":385,"char":17098,"type":"identifier"},{"text":"getEntity","line":385,"char":17107,"type":"identifier"},{"text":"assertNotNull","line":386,"char":17128,"type":"identifier"},{"text":"badProject","line":386,"char":17142,"type":"identifier"},{"text":"assertEquals","line":387,"char":17163,"type":"identifier"},{"text":"badProject","line":387,"char":17176,"type":"identifier"},{"text":"getName","line":387,"char":17187,"type":"identifier"},{"text":"assertNotNull","line":388,"char":17222,"type":"identifier"},{"text":"badProject","line":388,"char":17236,"type":"identifier"},{"text":"getProblems","line":388,"char":17247,"type":"identifier"},{"text":"assertTrue","line":389,"char":17271,"type":"identifier"},{"text":"badProject","line":389,"char":17282,"type":"identifier"},{"text":"getProblems","line":389,"char":17293,"type":"identifier"},{"text":"size","line":389,"char":17307,"type":"identifier"},{"text":"assertEquals","line":390,"char":17328,"type":"identifier"},{"text":"badProject","line":390,"char":17345,"type":"identifier"},{"text":"getProblems","line":390,"char":17356,"type":"identifier"},{"text":"get","line":390,"char":17370,"type":"identifier"},{"text":"getCode","line":390,"char":17377,"type":"identifier"},{"text":"validateProjectLinks","line":391,"char":17397,"type":"identifier"},{"text":"badProject","line":391,"char":17418,"type":"identifier"},{"text":"Exception","line":395,"char":17508,"type":"identifier"},{"text":"env","line":397,"char":17622,"type":"identifier"},{"text":"setSubject","line":397,"char":17626,"type":"identifier"},{"text":"SubjectImpl","line":397,"char":17641,"type":"identifier"},{"text":"vfsUser","line":397,"char":17653,"type":"identifier"},{"text":"vfsUser","line":397,"char":17662,"type":"identifier"},{"text":"ContainerResponse","line":398,"char":17703,"type":"identifier"},{"text":"launcher","line":399,"char":17748,"type":"identifier"},{"text":"service","line":399,"char":17757,"type":"identifier"},{"text":"GET","line":399,"char":17765,"type":"identifier"},{"text":"assertEquals","line":401,"char":17907,"type":"identifier"},{"text":"response","line":401,"char":17920,"type":"identifier"},{"text":"getStatus","line":401,"char":17929,"type":"identifier"},{"text":"response","line":401,"char":17959,"type":"identifier"},{"text":"getEntity","line":401,"char":17968,"type":"identifier"},{"text":"ProjectConfigDto","line":402,"char":17990,"type":"identifier"},{"text":"ProjectConfigDto","line":402,"char":18017,"type":"identifier"},{"text":"response","line":402,"char":18034,"type":"identifier"},{"text":"getEntity","line":402,"char":18043,"type":"identifier"},{"text":"assertNotNull","line":403,"char":18064,"type":"identifier"},{"text":"result","line":403,"char":18078,"type":"identifier"},{"text":"Exception","line":408,"char":18156,"type":"identifier"},{"text":"ContainerResponse","line":409,"char":18176,"type":"identifier"},{"text":"launcher","line":409,"char":18205,"type":"identifier"},{"text":"service","line":409,"char":18214,"type":"identifier"},{"text":"GET","line":409,"char":18222,"type":"identifier"},{"text":"assertEquals","line":412,"char":18447,"type":"identifier"},{"text":"response","line":412,"char":18460,"type":"identifier"},{"text":"getStatus","line":412,"char":18469,"type":"identifier"},{"text":"Exception","line":416,"char":18548,"type":"identifier"},{"text":"phRegistry","line":420,"char":18571,"type":"identifier"},{"text":"register","line":420,"char":18582,"type":"identifier"},{"text":"CreateProjectHandler","line":420,"char":18595,"type":"identifier"},{"text":"Path","line":422,"char":18682,"type":"identifier"},{"text":"Map","line":422,"char":18700,"type":"identifier"},{"text":"String","line":422,"char":18704,"type":"identifier"},{"text":"AttributeValue","line":422,"char":18712,"type":"identifier"},{"text":"Map","line":422,"char":18740,"type":"identifier"},{"text":"String","line":422,"char":18744,"type":"identifier"},{"text":"String","line":422,"char":18752,"type":"identifier"},{"text":"ForbiddenException","line":423,"char":18796,"type":"identifier"},{"text":"ConflictException","line":423,"char":18816,"type":"identifier"},{"text":"ServerException","line":423,"char":18835,"type":"identifier"},{"text":"FolderEntry","line":424,"char":18869,"type":"identifier"},{"text":"FolderEntry","line":424,"char":18901,"type":"identifier"},{"text":"vfsProvider","line":424,"char":18913,"type":"identifier"},{"text":"getVirtualFileSystem","line":424,"char":18925,"type":"identifier"},{"text":"getRoot","line":424,"char":18948,"type":"identifier"},{"text":"createFolder","line":424,"char":18958,"type":"identifier"},{"text":"projectFolder","line":425,"char":19004,"type":"identifier"},{"text":"createFolder","line":425,"char":19018,"type":"identifier"},{"text":"projectFolder","line":426,"char":19053,"type":"identifier"},{"text":"createFolder","line":426,"char":19067,"type":"identifier"},{"text":"projectFolder","line":427,"char":19102,"type":"identifier"},{"text":"createFile","line":427,"char":19116,"type":"identifier"},{"text":"getBytes","line":427,"char":19146,"type":"identifier"},{"text":"Charset","line":427,"char":19155,"type":"identifier"},{"text":"defaultCharset","line":427,"char":19163,"type":"identifier"},{"text":"String","line":431,"char":19239,"type":"identifier"},{"text":"Map","line":436,"char":19344,"type":"identifier"},{"text":"String","line":436,"char":19348,"type":"identifier"},{"text":"List","line":436,"char":19356,"type":"identifier"},{"text":"String","line":436,"char":19361,"type":"identifier"},{"text":"HashMap","line":436,"char":19384,"type":"identifier"},{"text":"headers","line":437,"char":19405,"type":"identifier"},{"text":"put","line":437,"char":19413,"type":"identifier"},{"text":"singletonList","line":437,"char":19433,"type":"identifier"},{"text":"APPLICATION_JSON","line":437,"char":19447,"type":"identifier"},{"text":"ProjectTypeDef","line":439,"char":19476,"type":"identifier"},{"text":"ProjectTypeDef","line":439,"char":19500,"type":"identifier"},{"text":"addConstantDefinition","line":441,"char":19600,"type":"identifier"},{"text":"ptRegistry","line":445,"char":19724,"type":"identifier"},{"text":"registerProjectType","line":445,"char":19735,"type":"identifier"},{"text":"pt","line":445,"char":19755,"type":"identifier"},{"text":"Map","line":447,"char":19769,"type":"identifier"},{"text":"String","line":447,"char":19773,"type":"identifier"},{"text":"List","line":447,"char":19781,"type":"identifier"},{"text":"String","line":447,"char":19786,"type":"identifier"},{"text":"LinkedHashMap","line":447,"char":19817,"type":"identifier"},{"text":"attributeValues","line":448,"char":19844,"type":"identifier"},{"text":"put","line":448,"char":19860,"type":"identifier"},{"text":"singletonList","line":448,"char":19889,"type":"identifier"},{"text":"ProjectConfigDto","line":451,"char":19943,"type":"identifier"},{"text":"DtoFactory","line":451,"char":19979,"type":"identifier"},{"text":"getInstance","line":451,"char":19990,"type":"identifier"},{"text":"createDto","line":451,"char":20004,"type":"identifier"},{"text":"ProjectConfigDto","line":451,"char":20014,"type":"identifier"},{"text":"withPath","line":452,"char":20099,"type":"identifier"},{"text":"withName","line":453,"char":20185,"type":"identifier"},{"text":"withDescription","line":454,"char":20270,"type":"identifier"},{"text":"withType","line":455,"char":20362,"type":"identifier"},{"text":"withAttributes","line":456,"char":20453,"type":"identifier"},{"text":"attributeValues","line":456,"char":20468,"type":"identifier"},{"text":"withSource","line":457,"char":20546,"type":"identifier"},{"text":"DtoFactory","line":457,"char":20557,"type":"identifier"},{"text":"getInstance","line":457,"char":20568,"type":"identifier"},{"text":"createDto","line":457,"char":20582,"type":"identifier"},{"text":"SourceStorageDto","line":457,"char":20592,"type":"identifier"},{"text":"projects","line":458,"char":20626,"type":"identifier"},{"text":"add","line":458,"char":20635,"type":"identifier"},{"text":"newProjectConfig","line":458,"char":20639,"type":"identifier"},{"text":"ContainerResponse","line":460,"char":20667,"type":"identifier"},{"text":"launcher","line":460,"char":20696,"type":"identifier"},{"text":"service","line":460,"char":20705,"type":"identifier"},{"text":"POST","line":460,"char":20713,"type":"identifier"},{"text":"headers","line":463,"char":20947,"type":"identifier"},{"text":"DtoFactory","line":464,"char":21010,"type":"identifier"},{"text":"getInstance","line":464,"char":21021,"type":"identifier"},{"text":"toJson","line":464,"char":21035,"type":"identifier"},{"text":"newProjectConfig","line":464,"char":21042,"type":"identifier"},{"text":"getBytes","line":464,"char":21060,"type":"identifier"},{"text":"Charset","line":464,"char":21069,"type":"identifier"},{"text":"defaultCharset","line":464,"char":21077,"type":"identifier"},{"text":"assertEquals","line":467,"char":21166,"type":"identifier"},{"text":"response","line":467,"char":21179,"type":"identifier"},{"text":"getStatus","line":467,"char":21188,"type":"identifier"},{"text":"response","line":467,"char":21218,"type":"identifier"},{"text":"getEntity","line":467,"char":21227,"type":"identifier"},{"text":"ProjectConfigDto","line":468,"char":21249,"type":"identifier"},{"text":"ProjectConfigDto","line":468,"char":21276,"type":"identifier"},{"text":"response","line":468,"char":21293,"type":"identifier"},{"text":"getEntity","line":468,"char":21302,"type":"identifier"},{"text":"assertNotNull","line":469,"char":21323,"type":"identifier"},{"text":"result","line":469,"char":21337,"type":"identifier"},{"text":"assertEquals","line":470,"char":21354,"type":"identifier"},{"text":"result","line":470,"char":21367,"type":"identifier"},{"text":"getName","line":470,"char":21374,"type":"identifier"},{"text":"assertEquals","line":471,"char":21409,"type":"identifier"},{"text":"result","line":471,"char":21422,"type":"identifier"},{"text":"getPath","line":471,"char":21429,"type":"identifier"},{"text":"assertEquals","line":472,"char":21465,"type":"identifier"},{"text":"result","line":472,"char":21478,"type":"identifier"},{"text":"getDescription","line":472,"char":21485,"type":"identifier"},{"text":"newProjectConfig","line":472,"char":21503,"type":"identifier"},{"text":"getDescription","line":472,"char":21520,"type":"identifier"},{"text":"assertEquals","line":473,"char":21547,"type":"identifier"},{"text":"result","line":473,"char":21560,"type":"identifier"},{"text":"getType","line":473,"char":21567,"type":"identifier"},{"text":"newProjectConfig","line":473,"char":21578,"type":"identifier"},{"text":"getType","line":473,"char":21595,"type":"identifier"},{"text":"assertEquals","line":474,"char":21615,"type":"identifier"},{"text":"result","line":474,"char":21628,"type":"identifier"},{"text":"getType","line":474,"char":21635,"type":"identifier"},{"text":"Map","line":475,"char":21676,"type":"identifier"},{"text":"String","line":475,"char":21680,"type":"identifier"},{"text":"List","line":475,"char":21688,"type":"identifier"},{"text":"String","line":475,"char":21693,"type":"identifier"},{"text":"result","line":475,"char":21715,"type":"identifier"},{"text":"getAttributes","line":475,"char":21722,"type":"identifier"},{"text":"assertNotNull","line":476,"char":21747,"type":"identifier"},{"text":"attributes","line":476,"char":21761,"type":"identifier"},{"text":"assertEquals","line":477,"char":21782,"type":"identifier"},{"text":"attributes","line":477,"char":21795,"type":"identifier"},{"text":"size","line":477,"char":21806,"type":"identifier"},{"text":"assertEquals","line":478,"char":21826,"type":"identifier"},{"text":"attributes","line":478,"char":21839,"type":"identifier"},{"text":"get","line":478,"char":21850,"type":"identifier"},{"text":"singletonList","line":478,"char":21880,"type":"identifier"},{"text":"validateProjectLinks","line":479,"char":21926,"type":"identifier"},{"text":"result","line":479,"char":21947,"type":"identifier"},{"text":"RegisteredProject","line":481,"char":21965,"type":"identifier"},{"text":"pm","line":481,"char":21993,"type":"identifier"},{"text":"getProject","line":481,"char":21996,"type":"identifier"},{"text":"assertNotNull","line":482,"char":22031,"type":"identifier"},{"text":"project","line":482,"char":22045,"type":"identifier"},{"text":"assertEquals","line":486,"char":22119,"type":"identifier"},{"text":"project","line":486,"char":22132,"type":"identifier"},{"text":"getDescription","line":486,"char":22140,"type":"identifier"},{"text":"newProjectConfig","line":486,"char":22158,"type":"identifier"},{"text":"getDescription","line":486,"char":22175,"type":"identifier"},{"text":"assertEquals","line":487,"char":22202,"type":"identifier"},{"text":"project","line":487,"char":22215,"type":"identifier"},{"text":"getProjectType","line":487,"char":22223,"type":"identifier"},{"text":"getId","line":487,"char":22240,"type":"identifier"},{"text":"newProjectConfig","line":487,"char":22249,"type":"identifier"},{"text":"getType","line":487,"char":22266,"type":"identifier"},{"text":"String","line":488,"char":22286,"type":"identifier"},{"text":"project","line":488,"char":22308,"type":"identifier"},{"text":"getAttributeEntries","line":488,"char":22316,"type":"identifier"},{"text":"get","line":488,"char":22338,"type":"identifier"},{"text":"getString","line":488,"char":22367,"type":"identifier"},{"text":"assertNotNull","line":489,"char":22388,"type":"identifier"},{"text":"attributeVal","line":489,"char":22402,"type":"identifier"},{"text":"assertEquals","line":490,"char":22425,"type":"identifier"},{"text":"attributeVal","line":490,"char":22438,"type":"identifier"},{"text":"assertNotNull","line":492,"char":22484,"type":"identifier"},{"text":"project","line":492,"char":22498,"type":"identifier"},{"text":"getBaseFolder","line":492,"char":22506,"type":"identifier"},{"text":"getChild","line":492,"char":22522,"type":"identifier"},{"text":"assertNotNull","line":493,"char":22546,"type":"identifier"},{"text":"project","line":493,"char":22560,"type":"identifier"},{"text":"getBaseFolder","line":493,"char":22568,"type":"identifier"},{"text":"getChild","line":493,"char":22584,"type":"identifier"},{"text":"assertNotNull","line":494,"char":22608,"type":"identifier"},{"text":"project","line":494,"char":22622,"type":"identifier"},{"text":"getBaseFolder","line":494,"char":22630,"type":"identifier"},{"text":"getChild","line":494,"char":22646,"type":"identifier"},{"text":"Exception","line":502,"char":22733,"type":"identifier"},{"text":"Map","line":503,"char":22753,"type":"identifier"},{"text":"String","line":503,"char":22757,"type":"identifier"},{"text":"List","line":503,"char":22765,"type":"identifier"},{"text":"String","line":503,"char":22770,"type":"identifier"},{"text":"HashMap","line":503,"char":22793,"type":"identifier"},{"text":"headers","line":504,"char":22814,"type":"identifier"},{"text":"put","line":504,"char":22822,"type":"identifier"},{"text":"singletonList","line":504,"char":22842,"type":"identifier"},{"text":"APPLICATION_JSON","line":504,"char":22856,"type":"identifier"},{"text":"ProjectTypeDef","line":506,"char":22885,"type":"identifier"},{"text":"ProjectTypeDef","line":506,"char":22909,"type":"identifier"},{"text":"ptRegistry","line":508,"char":22998,"type":"identifier"},{"text":"registerProjectType","line":508,"char":23009,"type":"identifier"},{"text":"pt","line":508,"char":23029,"type":"identifier"},{"text":"pm","line":510,"char":23043,"type":"identifier"},{"text":"createProject","line":510,"char":23046,"type":"identifier"},{"text":"DtoFactory","line":510,"char":23060,"type":"identifier"},{"text":"getInstance","line":510,"char":23071,"type":"identifier"},{"text":"createDto","line":510,"char":23085,"type":"identifier"},{"text":"ProjectConfigDto","line":510,"char":23095,"type":"identifier"},{"text":"withDescription","line":510,"char":23119,"type":"identifier"},{"text":"withType","line":510,"char":23154,"type":"identifier"},{"text":"withPath","line":511,"char":23218,"type":"identifier"},{"text":"Map","line":513,"char":23266,"type":"identifier"},{"text":"String","line":513,"char":23270,"type":"identifier"},{"text":"List","line":513,"char":23278,"type":"identifier"},{"text":"String","line":513,"char":23283,"type":"identifier"},{"text":"LinkedHashMap","line":513,"char":23314,"type":"identifier"},{"text":"attributeValues","line":514,"char":23341,"type":"identifier"},{"text":"put","line":514,"char":23357,"type":"identifier"},{"text":"singletonList","line":514,"char":23377,"type":"identifier"},{"text":"ProjectConfigDto","line":516,"char":23424,"type":"identifier"},{"text":"DtoFactory","line":516,"char":23454,"type":"identifier"},{"text":"getInstance","line":516,"char":23465,"type":"identifier"},{"text":"createDto","line":516,"char":23479,"type":"identifier"},{"text":"ProjectConfigDto","line":516,"char":23489,"type":"identifier"},{"text":"withName","line":517,"char":23562,"type":"identifier"},{"text":"withType","line":518,"char":23631,"type":"identifier"},{"text":"withDescription","line":519,"char":23710,"type":"identifier"},{"text":"withAttributes","line":520,"char":23794,"type":"identifier"},{"text":"attributeValues","line":520,"char":23809,"type":"identifier"},{"text":"ContainerResponse","line":523,"char":23837,"type":"identifier"},{"text":"launcher","line":523,"char":23866,"type":"identifier"},{"text":"service","line":523,"char":23875,"type":"identifier"},{"text":"PUT","line":523,"char":23883,"type":"identifier"},{"text":"headers","line":526,"char":24134,"type":"identifier"},{"text":"DtoFactory","line":527,"char":24197,"type":"identifier"},{"text":"getInstance","line":527,"char":24208,"type":"identifier"},{"text":"toJson","line":527,"char":24222,"type":"identifier"},{"text":"descriptor","line":527,"char":24229,"type":"identifier"},{"text":"getBytes","line":527,"char":24241,"type":"identifier"},{"text":"Charset","line":527,"char":24250,"type":"identifier"},{"text":"defaultCharset","line":527,"char":24258,"type":"identifier"},{"text":"assertEquals","line":530,"char":24347,"type":"identifier"},{"text":"response","line":530,"char":24360,"type":"identifier"},{"text":"getStatus","line":530,"char":24369,"type":"identifier"},{"text":"response","line":530,"char":24399,"type":"identifier"},{"text":"getEntity","line":530,"char":24408,"type":"identifier"},{"text":"RegisteredProject","line":532,"char":24431,"type":"identifier"},{"text":"pm","line":532,"char":24459,"type":"identifier"},{"text":"getProject","line":532,"char":24462,"type":"identifier"},{"text":"assertNotNull","line":533,"char":24504,"type":"identifier"},{"text":"project","line":533,"char":24518,"type":"identifier"},{"text":"assertEquals","line":536,"char":24591,"type":"identifier"},{"text":"project","line":536,"char":24604,"type":"identifier"},{"text":"getDescription","line":536,"char":24612,"type":"identifier"},{"text":"assertEquals","line":537,"char":24658,"type":"identifier"},{"text":"project","line":537,"char":24671,"type":"identifier"},{"text":"getProjectType","line":537,"char":24679,"type":"identifier"},{"text":"getId","line":537,"char":24696,"type":"identifier"},{"text":"Exception","line":541,"char":24790,"type":"identifier"},{"text":"pm","line":544,"char":24968,"type":"identifier"},{"text":"getProjectsRoot","line":544,"char":24971,"type":"identifier"},{"text":"createFolder","line":544,"char":24989,"type":"identifier"},{"text":"projectRegistry","line":545,"char":25026,"type":"identifier"},{"text":"initProjects","line":545,"char":25042,"type":"identifier"},{"text":"Map","line":547,"char":25067,"type":"identifier"},{"text":"String","line":547,"char":25071,"type":"identifier"},{"text":"List","line":547,"char":25079,"type":"identifier"},{"text":"String","line":547,"char":25084,"type":"identifier"},{"text":"HashMap","line":547,"char":25107,"type":"identifier"},{"text":"headers","line":548,"char":25128,"type":"identifier"},{"text":"put","line":548,"char":25136,"type":"identifier"},{"text":"singletonList","line":548,"char":25156,"type":"identifier"},{"text":"APPLICATION_JSON","line":548,"char":25170,"type":"identifier"},{"text":"Map","line":549,"char":25198,"type":"identifier"},{"text":"String","line":549,"char":25202,"type":"identifier"},{"text":"List","line":549,"char":25210,"type":"identifier"},{"text":"String","line":549,"char":25215,"type":"identifier"},{"text":"LinkedHashMap","line":549,"char":25246,"type":"identifier"},{"text":"attributeValues","line":550,"char":25273,"type":"identifier"},{"text":"put","line":550,"char":25289,"type":"identifier"},{"text":"singletonList","line":550,"char":25309,"type":"identifier"},{"text":"ProjectConfigDto","line":551,"char":25355,"type":"identifier"},{"text":"DtoFactory","line":551,"char":25385,"type":"identifier"},{"text":"getInstance","line":551,"char":25396,"type":"identifier"},{"text":"createDto","line":551,"char":25410,"type":"identifier"},{"text":"ProjectConfigDto","line":551,"char":25420,"type":"identifier"},{"text":"withType","line":552,"char":25493,"type":"identifier"},{"text":"withDescription","line":553,"char":25570,"type":"identifier"},{"text":"withAttributes","line":554,"char":25654,"type":"identifier"},{"text":"attributeValues","line":554,"char":25669,"type":"identifier"},{"text":"ProjectConfigDto","line":556,"char":25702,"type":"identifier"},{"text":"DtoFactory","line":556,"char":25738,"type":"identifier"},{"text":"getInstance","line":556,"char":25749,"type":"identifier"},{"text":"createDto","line":556,"char":25763,"type":"identifier"},{"text":"ProjectConfigDto","line":556,"char":25773,"type":"identifier"},{"text":"withPath","line":557,"char":25858,"type":"identifier"},{"text":"withName","line":558,"char":25944,"type":"identifier"},{"text":"withDescription","line":559,"char":26029,"type":"identifier"},{"text":"withType","line":560,"char":26125,"type":"identifier"},{"text":"withAttributes","line":561,"char":26214,"type":"identifier"},{"text":"attributeValues","line":561,"char":26229,"type":"identifier"},{"text":"withSource","line":562,"char":26307,"type":"identifier"},{"text":"DtoFactory","line":562,"char":26318,"type":"identifier"},{"text":"getInstance","line":562,"char":26329,"type":"identifier"},{"text":"createDto","line":562,"char":26343,"type":"identifier"},{"text":"SourceStorageDto","line":562,"char":26353,"type":"identifier"},{"text":"projects","line":563,"char":26387,"type":"identifier"},{"text":"add","line":563,"char":26396,"type":"identifier"},{"text":"newProjectConfig","line":563,"char":26400,"type":"identifier"},{"text":"ContainerResponse","line":565,"char":26428,"type":"identifier"},{"text":"launcher","line":565,"char":26457,"type":"identifier"},{"text":"service","line":565,"char":26466,"type":"identifier"},{"text":"PUT","line":565,"char":26474,"type":"identifier"},{"text":"headers","line":568,"char":26719,"type":"identifier"},{"text":"DtoFactory","line":569,"char":26782,"type":"identifier"},{"text":"getInstance","line":569,"char":26793,"type":"identifier"},{"text":"toJson","line":569,"char":26807,"type":"identifier"},{"text":"descriptor","line":569,"char":26814,"type":"identifier"},{"text":"getBytes","line":569,"char":26826,"type":"identifier"},{"text":"Charset","line":569,"char":26835,"type":"identifier"},{"text":"defaultCharset","line":569,"char":26843,"type":"identifier"},{"text":"assertEquals","line":572,"char":26932,"type":"identifier"},{"text":"response","line":572,"char":26945,"type":"identifier"},{"text":"getStatus","line":572,"char":26954,"type":"identifier"},{"text":"response","line":572,"char":26984,"type":"identifier"},{"text":"getEntity","line":572,"char":26993,"type":"identifier"},{"text":"RegisteredProject","line":573,"char":27015,"type":"identifier"},{"text":"pm","line":573,"char":27043,"type":"identifier"},{"text":"getProject","line":573,"char":27046,"type":"identifier"},{"text":"assertNotNull","line":574,"char":27081,"type":"identifier"},{"text":"project","line":574,"char":27095,"type":"identifier"},{"text":"assertEquals","line":577,"char":27173,"type":"identifier"},{"text":"project","line":577,"char":27186,"type":"identifier"},{"text":"getDescription","line":577,"char":27194,"type":"identifier"},{"text":"assertEquals","line":578,"char":27240,"type":"identifier"},{"text":"project","line":578,"char":27253,"type":"identifier"},{"text":"getProjectType","line":578,"char":27261,"type":"identifier"},{"text":"getId","line":578,"char":27278,"type":"identifier"},{"text":"Exception","line":582,"char":27378,"type":"identifier"},{"text":"Map","line":583,"char":27398,"type":"identifier"},{"text":"String","line":583,"char":27402,"type":"identifier"},{"text":"List","line":583,"char":27410,"type":"identifier"},{"text":"String","line":583,"char":27415,"type":"identifier"},{"text":"HashMap","line":583,"char":27438,"type":"identifier"},{"text":"headers","line":584,"char":27459,"type":"identifier"},{"text":"put","line":584,"char":27467,"type":"identifier"},{"text":"singletonList","line":584,"char":27487,"type":"identifier"},{"text":"APPLICATION_JSON","line":584,"char":27501,"type":"identifier"},{"text":"Map","line":585,"char":27529,"type":"identifier"},{"text":"String","line":585,"char":27533,"type":"identifier"},{"text":"List","line":585,"char":27541,"type":"identifier"},{"text":"String","line":585,"char":27546,"type":"identifier"},{"text":"LinkedHashMap","line":585,"char":27577,"type":"identifier"},{"text":"attributeValues","line":586,"char":27604,"type":"identifier"},{"text":"put","line":586,"char":27620,"type":"identifier"},{"text":"singletonList","line":586,"char":27640,"type":"identifier"},{"text":"ProjectConfigDto","line":587,"char":27686,"type":"identifier"},{"text":"DtoFactory","line":587,"char":27716,"type":"identifier"},{"text":"getInstance","line":587,"char":27727,"type":"identifier"},{"text":"createDto","line":587,"char":27741,"type":"identifier"},{"text":"ProjectConfigDto","line":587,"char":27751,"type":"identifier"},{"text":"withType","line":588,"char":27824,"type":"identifier"},{"text":"withDescription","line":589,"char":27901,"type":"identifier"},{"text":"withAttributes","line":590,"char":27985,"type":"identifier"},{"text":"attributeValues","line":590,"char":28000,"type":"identifier"},{"text":"ContainerResponse","line":591,"char":28026,"type":"identifier"},{"text":"launcher","line":591,"char":28055,"type":"identifier"},{"text":"service","line":591,"char":28064,"type":"identifier"},{"text":"PUT","line":591,"char":28072,"type":"identifier"},{"text":"headers","line":594,"char":28324,"type":"identifier"},{"text":"DtoFactory","line":595,"char":28387,"type":"identifier"},{"text":"getInstance","line":595,"char":28398,"type":"identifier"},{"text":"toJson","line":595,"char":28412,"type":"identifier"},{"text":"descriptor","line":595,"char":28419,"type":"identifier"},{"text":"getBytes","line":595,"char":28431,"type":"identifier"},{"text":"Charset","line":595,"char":28440,"type":"identifier"},{"text":"defaultCharset","line":595,"char":28448,"type":"identifier"},{"text":"assertEquals","line":597,"char":28536,"type":"identifier"},{"text":"response","line":597,"char":28549,"type":"identifier"},{"text":"getStatus","line":597,"char":28558,"type":"identifier"},{"text":"Exception","line":601,"char":28639,"type":"identifier"},{"text":"VirtualFile","line":602,"char":28659,"type":"identifier"},{"text":"pm","line":602,"char":28678,"type":"identifier"},{"text":"getProjectsRoot","line":602,"char":28681,"type":"identifier"},{"text":"getVirtualFile","line":602,"char":28699,"type":"identifier"},{"text":"root","line":605,"char":28849,"type":"identifier"},{"text":"createFolder","line":605,"char":28854,"type":"identifier"},{"text":"createFolder","line":605,"char":28894,"type":"identifier"},{"text":"root","line":606,"char":28925,"type":"identifier"},{"text":"createFolder","line":606,"char":28930,"type":"identifier"},{"text":"String","line":608,"char":28979,"type":"identifier"},{"text":"ValueProviderFactory","line":610,"char":29039,"type":"identifier"},{"text":"projectFolder","line":610,"char":29067,"type":"identifier"},{"text":"ReadonlyValueProvider","line":610,"char":29088,"type":"identifier"},{"text":"List","line":612,"char":29155,"type":"identifier"},{"text":"String","line":612,"char":29160,"type":"identifier"},{"text":"String","line":612,"char":29178,"type":"identifier"},{"text":"ValueStorageException","line":612,"char":29207,"type":"identifier"},{"text":"VirtualFileEntry","line":614,"char":29248,"type":"identifier"},{"text":"file","line":616,"char":29313,"type":"identifier"},{"text":"projectFolder","line":616,"char":29320,"type":"identifier"},{"text":"getChild","line":616,"char":29334,"type":"identifier"},{"text":"ServerException","line":617,"char":29378,"type":"identifier"},{"text":"e","line":617,"char":29394,"type":"identifier"},{"text":"ValueStorageException","line":618,"char":29429,"type":"identifier"},{"text":"e","line":618,"char":29451,"type":"identifier"},{"text":"getMessage","line":618,"char":29453,"type":"identifier"},{"text":"file","line":621,"char":29507,"type":"identifier"},{"text":"ValueStorageException","line":622,"char":29553,"type":"identifier"},{"text":"errMessage","line":622,"char":29575,"type":"identifier"},{"text":"List","line":624,"char":29630,"type":"identifier"},{"text":"String","line":624,"char":29636,"type":"identifier"},{"text":"singletonList","line":624,"char":29644,"type":"identifier"},{"text":"ProjectTypeDef","line":629,"char":29705,"type":"identifier"},{"text":"ProjectTypeDef","line":629,"char":29729,"type":"identifier"},{"text":"addVariableDefinition","line":631,"char":29845,"type":"identifier"},{"text":"vpf1","line":631,"char":29917,"type":"identifier"},{"text":"addVariableDefinition","line":632,"char":29940,"type":"identifier"},{"text":"addVariableDefinition","line":633,"char":30022,"type":"identifier"},{"text":"ptRegistry","line":637,"char":30123,"type":"identifier"},{"text":"registerProjectType","line":637,"char":30134,"type":"identifier"},{"text":"pt","line":637,"char":30154,"type":"identifier"},{"text":"ContainerResponse","line":639,"char":30168,"type":"identifier"},{"text":"launcher","line":640,"char":30213,"type":"identifier"},{"text":"service","line":640,"char":30222,"type":"identifier"},{"text":"GET","line":640,"char":30230,"type":"identifier"},{"text":"String","line":640,"char":30235,"type":"identifier"},{"text":"format","line":640,"char":30242,"type":"identifier"},{"text":"assertEquals","line":643,"char":30500,"type":"identifier"},{"text":"response","line":643,"char":30513,"type":"identifier"},{"text":"getStatus","line":643,"char":30522,"type":"identifier"},{"text":"response","line":643,"char":30552,"type":"identifier"},{"text":"getEntity","line":643,"char":30561,"type":"identifier"},{"text":"SourceEstimation","line":645,"char":30616,"type":"identifier"},{"text":"SourceEstimation","line":645,"char":30643,"type":"identifier"},{"text":"response","line":645,"char":30660,"type":"identifier"},{"text":"getEntity","line":645,"char":30669,"type":"identifier"},{"text":"assertTrue","line":646,"char":30690,"type":"identifier"},{"text":"result","line":646,"char":30701,"type":"identifier"},{"text":"isMatched","line":646,"char":30708,"type":"identifier"},{"text":"assertEquals","line":647,"char":30730,"type":"identifier"},{"text":"result","line":647,"char":30743,"type":"identifier"},{"text":"getAttributes","line":647,"char":30750,"type":"identifier"},{"text":"size","line":647,"char":30766,"type":"identifier"},{"text":"assertEquals","line":648,"char":30786,"type":"identifier"},{"text":"result","line":648,"char":30799,"type":"identifier"},{"text":"getAttributes","line":648,"char":30806,"type":"identifier"},{"text":"get","line":648,"char":30822,"type":"identifier"},{"text":"get","line":648,"char":30850,"type":"identifier"},{"text":"response","line":651,"char":30913,"type":"identifier"},{"text":"launcher","line":651,"char":30924,"type":"identifier"},{"text":"service","line":651,"char":30933,"type":"identifier"},{"text":"GET","line":651,"char":30941,"type":"identifier"},{"text":"String","line":651,"char":30946,"type":"identifier"},{"text":"format","line":651,"char":30953,"type":"identifier"},{"text":"assertEquals","line":655,"char":31217,"type":"identifier"},{"text":"response","line":655,"char":31230,"type":"identifier"},{"text":"getStatus","line":655,"char":31239,"type":"identifier"},{"text":"response","line":655,"char":31269,"type":"identifier"},{"text":"getEntity","line":655,"char":31278,"type":"identifier"},{"text":"String","line":656,"char":31300,"type":"identifier"},{"text":"JsonHelper","line":656,"char":31313,"type":"identifier"},{"text":"parseJson","line":656,"char":31324,"type":"identifier"},{"text":"response","line":656,"char":31334,"type":"identifier"},{"text":"getEntity","line":656,"char":31343,"type":"identifier"},{"text":"toString","line":656,"char":31355,"type":"identifier"},{"text":"getElement","line":656,"char":31367,"type":"identifier"},{"text":"getStringValue","line":656,"char":31389,"type":"identifier"},{"text":"assertEquals","line":657,"char":31415,"type":"identifier"},{"text":"errMessage","line":657,"char":31428,"type":"identifier"},{"text":"msg","line":657,"char":31440,"type":"identifier"},{"text":"Exception","line":664,"char":31510,"type":"identifier"},{"text":"VirtualFile","line":666,"char":31531,"type":"identifier"},{"text":"pm","line":666,"char":31550,"type":"identifier"},{"text":"getProjectsRoot","line":666,"char":31553,"type":"identifier"},{"text":"getVirtualFile","line":666,"char":31571,"type":"identifier"},{"text":"root","line":667,"char":31597,"type":"identifier"},{"text":"createFolder","line":667,"char":31602,"type":"identifier"},{"text":"createFolder","line":667,"char":31642,"type":"identifier"},{"text":"root","line":668,"char":31673,"type":"identifier"},{"text":"createFolder","line":668,"char":31678,"type":"identifier"},{"text":"ValueProviderFactory","line":670,"char":31733,"type":"identifier"},{"text":"projectFolder","line":670,"char":31761,"type":"identifier"},{"text":"ReadonlyValueProvider","line":670,"char":31782,"type":"identifier"},{"text":"List","line":672,"char":31849,"type":"identifier"},{"text":"String","line":672,"char":31854,"type":"identifier"},{"text":"String","line":672,"char":31872,"type":"identifier"},{"text":"ValueStorageException","line":672,"char":31901,"type":"identifier"},{"text":"VirtualFileEntry","line":674,"char":31942,"type":"identifier"},{"text":"file","line":676,"char":32007,"type":"identifier"},{"text":"projectFolder","line":676,"char":32014,"type":"identifier"},{"text":"getChild","line":676,"char":32028,"type":"identifier"},{"text":"ServerException","line":677,"char":32072,"type":"identifier"},{"text":"e","line":677,"char":32088,"type":"identifier"},{"text":"ValueStorageException","line":678,"char":32123,"type":"identifier"},{"text":"e","line":678,"char":32145,"type":"identifier"},{"text":"getMessage","line":678,"char":32147,"type":"identifier"},{"text":"file","line":681,"char":32201,"type":"identifier"},{"text":"ValueStorageException","line":682,"char":32247,"type":"identifier"},{"text":"List","line":684,"char":32331,"type":"identifier"},{"text":"String","line":684,"char":32336,"type":"identifier"},{"text":"singletonList","line":684,"char":32344,"type":"identifier"},{"text":"ProjectTypeDef","line":689,"char":32405,"type":"identifier"},{"text":"ProjectTypeDef","line":689,"char":32429,"type":"identifier"},{"text":"addVariableDefinition","line":691,"char":32545,"type":"identifier"},{"text":"vpf1","line":691,"char":32617,"type":"identifier"},{"text":"addVariableDefinition","line":692,"char":32640,"type":"identifier"},{"text":"addVariableDefinition","line":693,"char":32722,"type":"identifier"},{"text":"ptRegistry","line":697,"char":32823,"type":"identifier"},{"text":"registerProjectType","line":697,"char":32834,"type":"identifier"},{"text":"pt","line":697,"char":32854,"type":"identifier"},{"text":"ContainerResponse","line":699,"char":32868,"type":"identifier"},{"text":"launcher","line":700,"char":32913,"type":"identifier"},{"text":"service","line":700,"char":32922,"type":"identifier"},{"text":"GET","line":700,"char":32930,"type":"identifier"},{"text":"String","line":700,"char":32935,"type":"identifier"},{"text":"format","line":700,"char":32942,"type":"identifier"},{"text":"assertEquals","line":703,"char":33185,"type":"identifier"},{"text":"response","line":703,"char":33198,"type":"identifier"},{"text":"getStatus","line":703,"char":33207,"type":"identifier"},{"text":"response","line":703,"char":33237,"type":"identifier"},{"text":"getEntity","line":703,"char":33246,"type":"identifier"},{"text":"List","line":704,"char":33268,"type":"identifier"},{"text":"SourceEstimation","line":704,"char":33273,"type":"identifier"},{"text":"List","line":704,"char":33301,"type":"identifier"},{"text":"SourceEstimation","line":704,"char":33306,"type":"identifier"},{"text":"response","line":704,"char":33325,"type":"identifier"},{"text":"getEntity","line":704,"char":33334,"type":"identifier"},{"text":"assertTrue","line":706,"char":33356,"type":"identifier"},{"text":"result","line":706,"char":33367,"type":"identifier"},{"text":"size","line":706,"char":33374,"type":"identifier"},{"text":"SourceEstimation","line":708,"char":33426,"type":"identifier"},{"text":"result","line":708,"char":33449,"type":"identifier"},{"text":"est","line":709,"char":33474,"type":"identifier"},{"text":"getType","line":709,"char":33478,"type":"identifier"},{"text":"equals","line":709,"char":33488,"type":"identifier"},{"text":"assertTrue","line":710,"char":33539,"type":"identifier"},{"text":"est","line":710,"char":33550,"type":"identifier"},{"text":"isMatched","line":710,"char":33554,"type":"identifier"},{"text":"m","line":711,"char":33584,"type":"identifier"},{"text":"assertTrue","line":715,"char":33627,"type":"identifier"},{"text":"m","line":715,"char":33638,"type":"identifier"},{"text":"Exception","line":721,"char":33704,"type":"identifier"},{"text":"ByteArrayOutputStream","line":722,"char":33724,"type":"identifier"},{"text":"ByteArrayOutputStream","line":722,"char":33757,"type":"identifier"},{"text":"ZipOutputStream","line":723,"char":33790,"type":"identifier"},{"text":"ZipOutputStream","line":723,"char":33819,"type":"identifier"},{"text":"bout","line":723,"char":33835,"type":"identifier"},{"text":"zipOut","line":724,"char":33850,"type":"identifier"},{"text":"putNextEntry","line":724,"char":33857,"type":"identifier"},{"text":"ZipEntry","line":724,"char":33874,"type":"identifier"},{"text":"zipOut","line":725,"char":33905,"type":"identifier"},{"text":"putNextEntry","line":725,"char":33912,"type":"identifier"},{"text":"ZipEntry","line":725,"char":33929,"type":"identifier"},{"text":"zipOut","line":726,"char":33969,"type":"identifier"},{"text":"write","line":726,"char":33976,"type":"identifier"},{"text":"getBytes","line":726,"char":34003,"type":"identifier"},{"text":"Charset","line":726,"char":34012,"type":"identifier"},{"text":"defaultCharset","line":726,"char":34020,"type":"identifier"},{"text":"zipOut","line":727,"char":34048,"type":"identifier"},{"text":"close","line":727,"char":34055,"type":"identifier"},{"text":"InputStream","line":728,"char":34078,"type":"identifier"},{"text":"ByteArrayInputStream","line":728,"char":34100,"type":"identifier"},{"text":"bout","line":728,"char":34121,"type":"identifier"},{"text":"toByteArray","line":728,"char":34126,"type":"identifier"},{"text":"String","line":729,"char":34156,"type":"identifier"},{"text":"registerImporter","line":730,"char":34193,"type":"identifier"},{"text":"importType","line":730,"char":34210,"type":"identifier"},{"text":"zip","line":730,"char":34222,"type":"identifier"},{"text":"String","line":732,"char":34243,"type":"identifier"},{"text":"ProjectConfigDto","line":734,"char":34296,"type":"identifier"},{"text":"DtoFactory","line":734,"char":34332,"type":"identifier"},{"text":"getInstance","line":734,"char":34343,"type":"identifier"},{"text":"createDto","line":734,"char":34357,"type":"identifier"},{"text":"ProjectConfigDto","line":734,"char":34367,"type":"identifier"},{"text":"withPath","line":735,"char":34452,"type":"identifier"},{"text":"withName","line":736,"char":34538,"type":"identifier"},{"text":"withDescription","line":737,"char":34623,"type":"identifier"},{"text":"withType","line":738,"char":34715,"type":"identifier"},{"text":"myType","line":738,"char":34724,"type":"identifier"},{"text":"projects","line":739,"char":34741,"type":"identifier"},{"text":"add","line":739,"char":34750,"type":"identifier"},{"text":"newProjectConfig","line":739,"char":34754,"type":"identifier"},{"text":"Map","line":741,"char":34782,"type":"identifier"},{"text":"String","line":741,"char":34786,"type":"identifier"},{"text":"List","line":741,"char":34794,"type":"identifier"},{"text":"String","line":741,"char":34799,"type":"identifier"},{"text":"HashMap","line":741,"char":34822,"type":"identifier"},{"text":"headers","line":742,"char":34843,"type":"identifier"},{"text":"put","line":742,"char":34851,"type":"identifier"},{"text":"singletonList","line":742,"char":34871,"type":"identifier"},{"text":"APPLICATION_JSON","line":742,"char":34885,"type":"identifier"},{"text":"String","line":744,"char":34914,"type":"identifier"},{"text":"String","line":749,"char":35100,"type":"identifier"},{"text":"format","line":749,"char":35107,"type":"identifier"},{"text":"json","line":749,"char":35114,"type":"identifier"},{"text":"importType","line":749,"char":35120,"type":"identifier"},{"text":"getBytes","line":749,"char":35132,"type":"identifier"},{"text":"Charset","line":749,"char":35141,"type":"identifier"},{"text":"defaultCharset","line":749,"char":35149,"type":"identifier"},{"text":"ContainerResponse","line":750,"char":35176,"type":"identifier"},{"text":"launcher","line":750,"char":35205,"type":"identifier"},{"text":"service","line":750,"char":35214,"type":"identifier"},{"text":"POST","line":750,"char":35222,"type":"identifier"},{"text":"headers","line":752,"char":35421,"type":"identifier"},{"text":"b","line":752,"char":35430,"type":"identifier"},{"text":"assertEquals","line":753,"char":35448,"type":"identifier"},{"text":"response","line":753,"char":35461,"type":"identifier"},{"text":"getStatus","line":753,"char":35470,"type":"identifier"},{"text":"RegisteredProject","line":755,"char":35498,"type":"identifier"},{"text":"pm","line":755,"char":35529,"type":"identifier"},{"text":"getProject","line":755,"char":35532,"type":"identifier"},{"text":"assertNotNull","line":756,"char":35567,"type":"identifier"},{"text":"newProject","line":756,"char":35581,"type":"identifier"},{"text":"String","line":761,"char":35685,"type":"identifier"},{"text":"InputStream","line":761,"char":35704,"type":"identifier"},{"text":"Exception","line":761,"char":35728,"type":"identifier"},{"text":"ValueHolder","line":762,"char":35754,"type":"identifier"},{"text":"FolderEntry","line":762,"char":35766,"type":"identifier"},{"text":"ValueHolder","line":762,"char":35798,"type":"identifier"},{"text":"importerRegistry","line":763,"char":35823,"type":"identifier"},{"text":"register","line":763,"char":35840,"type":"identifier"},{"text":"ProjectImporter","line":763,"char":35853,"type":"identifier"},{"text":"String","line":765,"char":35914,"type":"identifier"},{"text":"importType","line":766,"char":35954,"type":"identifier"},{"text":"String","line":775,"char":36131,"type":"identifier"},{"text":"FolderEntry","line":780,"char":36273,"type":"identifier"},{"text":"SourceStorage","line":780,"char":36297,"type":"identifier"},{"text":"ConflictException","line":780,"char":36327,"type":"identifier"},{"text":"ServerException","line":781,"char":36438,"type":"identifier"},{"text":"ForbiddenException","line":782,"char":36547,"type":"identifier"},{"text":"importSources","line":783,"char":36584,"type":"identifier"},{"text":"baseFolder","line":783,"char":36598,"type":"identifier"},{"text":"storage","line":783,"char":36610,"type":"identifier"},{"text":"LineConsumerFactory","line":783,"char":36619,"type":"identifier"},{"text":"NULL","line":783,"char":36639,"type":"identifier"},{"text":"FolderEntry","line":787,"char":36721,"type":"identifier"},{"text":"SourceStorage","line":788,"char":36783,"type":"identifier"},{"text":"LineConsumerFactory","line":789,"char":36844,"type":"identifier"},{"text":"ConflictException","line":789,"char":36900,"type":"identifier"},{"text":"ServerException","line":790,"char":37013,"type":"identifier"},{"text":"ForbiddenException","line":791,"char":37124,"type":"identifier"},{"text":"baseFolder","line":793,"char":37220,"type":"identifier"},{"text":"getVirtualFile","line":793,"char":37231,"type":"identifier"},{"text":"unzip","line":793,"char":37248,"type":"identifier"},{"text":"zip","line":793,"char":37254,"type":"identifier"},{"text":"folderHolder","line":794,"char":37285,"type":"identifier"},{"text":"set","line":794,"char":37298,"type":"identifier"},{"text":"baseFolder","line":794,"char":37302,"type":"identifier"},{"text":"ImporterCategory","line":798,"char":37371,"type":"identifier"},{"text":"ImporterCategory","line":799,"char":37427,"type":"identifier"},{"text":"ARCHIVE","line":799,"char":37444,"type":"identifier"},{"text":"Exception","line":808,"char":37539,"type":"identifier"},{"text":"String","line":809,"char":37559,"type":"identifier"},{"text":"ContainerResponse","line":810,"char":37608,"type":"identifier"},{"text":"launcher","line":810,"char":37637,"type":"identifier"},{"text":"service","line":810,"char":37646,"type":"identifier"},{"text":"POST","line":810,"char":37654,"type":"identifier"},{"text":"myContent","line":814,"char":37978,"type":"identifier"},{"text":"getBytes","line":814,"char":37988,"type":"identifier"},{"text":"Charset","line":814,"char":37997,"type":"identifier"},{"text":"defaultCharset","line":814,"char":38005,"type":"identifier"},{"text":"assertEquals","line":816,"char":38093,"type":"identifier"},{"text":"response","line":816,"char":38106,"type":"identifier"},{"text":"getStatus","line":816,"char":38115,"type":"identifier"},{"text":"response","line":816,"char":38145,"type":"identifier"},{"text":"getEntity","line":816,"char":38154,"type":"identifier"},{"text":"ItemReference","line":817,"char":38176,"type":"identifier"},{"text":"ItemReference","line":817,"char":38202,"type":"identifier"},{"text":"response","line":817,"char":38216,"type":"identifier"},{"text":"getEntity","line":817,"char":38225,"type":"identifier"},{"text":"assertEquals","line":818,"char":38246,"type":"identifier"},{"text":"fileItem","line":818,"char":38259,"type":"identifier"},{"text":"getType","line":818,"char":38268,"type":"identifier"},{"text":"assertEquals","line":820,"char":38357,"type":"identifier"},{"text":"fileItem","line":820,"char":38370,"type":"identifier"},{"text":"getName","line":820,"char":38379,"type":"identifier"},{"text":"assertEquals","line":821,"char":38411,"type":"identifier"},{"text":"fileItem","line":821,"char":38424,"type":"identifier"},{"text":"getPath","line":821,"char":38433,"type":"identifier"},{"text":"validateFileLinks","line":822,"char":38477,"type":"identifier"},{"text":"fileItem","line":822,"char":38495,"type":"identifier"},{"text":"assertEquals","line":823,"char":38514,"type":"identifier"},{"text":"response","line":823,"char":38527,"type":"identifier"},{"text":"getHttpHeaders","line":823,"char":38536,"type":"identifier"},{"text":"getFirst","line":823,"char":38553,"type":"identifier"},{"text":"URI","line":824,"char":38596,"type":"identifier"},{"text":"create","line":824,"char":38600,"type":"identifier"},{"text":"VirtualFileEntry","line":825,"char":38679,"type":"identifier"},{"text":"pm","line":825,"char":38703,"type":"identifier"},{"text":"getProject","line":825,"char":38706,"type":"identifier"},{"text":"getBaseFolder","line":825,"char":38731,"type":"identifier"},{"text":"getChild","line":825,"char":38747,"type":"identifier"},{"text":"Assert","line":826,"char":38777,"type":"identifier"},{"text":"assertTrue","line":826,"char":38784,"type":"identifier"},{"text":"file","line":826,"char":38795,"type":"identifier"},{"text":"isFile","line":826,"char":38800,"type":"identifier"},{"text":"FileEntry","line":827,"char":38819,"type":"identifier"},{"text":"FileEntry","line":827,"char":38838,"type":"identifier"},{"text":"file","line":827,"char":38848,"type":"identifier"},{"text":"assertEquals","line":829,"char":38920,"type":"identifier"},{"text":"String","line":829,"char":38937,"type":"identifier"},{"text":"_file","line":829,"char":38944,"type":"identifier"},{"text":"contentAsBytes","line":829,"char":38950,"type":"identifier"},{"text":"myContent","line":829,"char":38969,"type":"identifier"},{"text":"Exception","line":834,"char":39043,"type":"identifier"},{"text":"String","line":835,"char":39063,"type":"identifier"},{"text":"pm","line":836,"char":39112,"type":"identifier"},{"text":"getProject","line":836,"char":39115,"type":"identifier"},{"text":"getBaseFolder","line":836,"char":39140,"type":"identifier"},{"text":"createFile","line":836,"char":39156,"type":"identifier"},{"text":"myContent","line":836,"char":39179,"type":"identifier"},{"text":"getBytes","line":836,"char":39189,"type":"identifier"},{"text":"Charset","line":836,"char":39198,"type":"identifier"},{"text":"defaultCharset","line":836,"char":39206,"type":"identifier"},{"text":"ByteArrayContainerResponseWriter","line":837,"char":39234,"type":"identifier"},{"text":"ByteArrayContainerResponseWriter","line":837,"char":39280,"type":"identifier"},{"text":"ContainerResponse","line":838,"char":39324,"type":"identifier"},{"text":"launcher","line":838,"char":39353,"type":"identifier"},{"text":"service","line":838,"char":39362,"type":"identifier"},{"text":"GET","line":838,"char":39370,"type":"identifier"},{"text":"writer","line":840,"char":39586,"type":"identifier"},{"text":"assertEquals","line":841,"char":39609,"type":"identifier"},{"text":"response","line":841,"char":39622,"type":"identifier"},{"text":"getStatus","line":841,"char":39631,"type":"identifier"},{"text":"response","line":841,"char":39661,"type":"identifier"},{"text":"getEntity","line":841,"char":39670,"type":"identifier"},{"text":"assertEquals","line":842,"char":39692,"type":"identifier"},{"text":"response","line":842,"char":39705,"type":"identifier"},{"text":"getContentType","line":842,"char":39714,"type":"identifier"},{"text":"toString","line":842,"char":39731,"type":"identifier"},{"text":"TEXT_PLAIN","line":842,"char":39743,"type":"identifier"},{"text":"assertEquals","line":843,"char":39764,"type":"identifier"},{"text":"String","line":843,"char":39781,"type":"identifier"},{"text":"writer","line":843,"char":39788,"type":"identifier"},{"text":"getBody","line":843,"char":39795,"type":"identifier"},{"text":"myContent","line":843,"char":39807,"type":"identifier"},{"text":"Exception","line":847,"char":39883,"type":"identifier"},{"text":"String","line":848,"char":39903,"type":"identifier"},{"text":"pm","line":849,"char":39952,"type":"identifier"},{"text":"getProject","line":849,"char":39955,"type":"identifier"},{"text":"getBaseFolder","line":849,"char":39980,"type":"identifier"},{"text":"createFile","line":849,"char":39996,"type":"identifier"},{"text":"getBytes","line":849,"char":40040,"type":"identifier"},{"text":"Charset","line":849,"char":40049,"type":"identifier"},{"text":"defaultCharset","line":849,"char":40057,"type":"identifier"},{"text":"ContainerResponse","line":850,"char":40085,"type":"identifier"},{"text":"launcher","line":850,"char":40114,"type":"identifier"},{"text":"service","line":850,"char":40123,"type":"identifier"},{"text":"PUT","line":850,"char":40131,"type":"identifier"},{"text":"myContent","line":852,"char":40341,"type":"identifier"},{"text":"getBytes","line":852,"char":40351,"type":"identifier"},{"text":"Charset","line":852,"char":40360,"type":"identifier"},{"text":"defaultCharset","line":852,"char":40368,"type":"identifier"},{"text":"assertEquals","line":853,"char":40402,"type":"identifier"},{"text":"response","line":853,"char":40415,"type":"identifier"},{"text":"getStatus","line":853,"char":40424,"type":"identifier"},{"text":"response","line":853,"char":40454,"type":"identifier"},{"text":"getEntity","line":853,"char":40463,"type":"identifier"},{"text":"VirtualFileEntry","line":854,"char":40485,"type":"identifier"},{"text":"pm","line":854,"char":40509,"type":"identifier"},{"text":"getProject","line":854,"char":40512,"type":"identifier"},{"text":"getBaseFolder","line":854,"char":40537,"type":"identifier"},{"text":"getChild","line":854,"char":40553,"type":"identifier"},{"text":"Assert","line":855,"char":40583,"type":"identifier"},{"text":"assertTrue","line":855,"char":40590,"type":"identifier"},{"text":"file","line":855,"char":40601,"type":"identifier"},{"text":"isFile","line":855,"char":40606,"type":"identifier"},{"text":"FileEntry","line":856,"char":40625,"type":"identifier"},{"text":"FileEntry","line":856,"char":40644,"type":"identifier"},{"text":"file","line":856,"char":40654,"type":"identifier"},{"text":"assertEquals","line":857,"char":40668,"type":"identifier"},{"text":"String","line":857,"char":40685,"type":"identifier"},{"text":"_file","line":857,"char":40692,"type":"identifier"},{"text":"contentAsBytes","line":857,"char":40698,"type":"identifier"},{"text":"myContent","line":857,"char":40717,"type":"identifier"},{"text":"Exception","line":861,"char":40788,"type":"identifier"},{"text":"ContainerResponse","line":862,"char":40808,"type":"identifier"},{"text":"launcher","line":862,"char":40837,"type":"identifier"},{"text":"service","line":862,"char":40846,"type":"identifier"},{"text":"POST","line":862,"char":40854,"type":"identifier"},{"text":"assertEquals","line":865,"char":41084,"type":"identifier"},{"text":"response","line":865,"char":41097,"type":"identifier"},{"text":"getStatus","line":865,"char":41106,"type":"identifier"},{"text":"response","line":865,"char":41136,"type":"identifier"},{"text":"getEntity","line":865,"char":41145,"type":"identifier"},{"text":"ItemReference","line":866,"char":41167,"type":"identifier"},{"text":"ItemReference","line":866,"char":41193,"type":"identifier"},{"text":"response","line":866,"char":41207,"type":"identifier"},{"text":"getEntity","line":866,"char":41216,"type":"identifier"},{"text":"assertEquals","line":867,"char":41237,"type":"identifier"},{"text":"fileItem","line":867,"char":41250,"type":"identifier"},{"text":"getName","line":867,"char":41259,"type":"identifier"},{"text":"assertEquals","line":868,"char":41287,"type":"identifier"},{"text":"fileItem","line":868,"char":41300,"type":"identifier"},{"text":"getPath","line":868,"char":41309,"type":"identifier"},{"text":"validateFolderLinks","line":869,"char":41349,"type":"identifier"},{"text":"fileItem","line":869,"char":41369,"type":"identifier"},{"text":"assertEquals","line":870,"char":41388,"type":"identifier"},{"text":"response","line":870,"char":41401,"type":"identifier"},{"text":"getHttpHeaders","line":870,"char":41410,"type":"identifier"},{"text":"getFirst","line":870,"char":41427,"type":"identifier"},{"text":"URI","line":871,"char":41470,"type":"identifier"},{"text":"create","line":871,"char":41474,"type":"identifier"},{"text":"VirtualFileEntry","line":872,"char":41553,"type":"identifier"},{"text":"pm","line":872,"char":41579,"type":"identifier"},{"text":"getProject","line":872,"char":41582,"type":"identifier"},{"text":"getBaseFolder","line":872,"char":41607,"type":"identifier"},{"text":"getChild","line":872,"char":41623,"type":"identifier"},{"text":"Assert","line":873,"char":41649,"type":"identifier"},{"text":"assertTrue","line":873,"char":41656,"type":"identifier"},{"text":"folder","line":873,"char":41667,"type":"identifier"},{"text":"isFolder","line":873,"char":41674,"type":"identifier"},{"text":"Exception","line":878,"char":41837,"type":"identifier"},{"text":"String","line":879,"char":41857,"type":"identifier"},{"text":"ContainerResponse","line":880,"char":41894,"type":"identifier"},{"text":"launcher","line":880,"char":41923,"type":"identifier"},{"text":"service","line":880,"char":41932,"type":"identifier"},{"text":"POST","line":880,"char":41940,"type":"identifier"},{"text":"String","line":881,"char":42000,"type":"identifier"},{"text":"format","line":881,"char":42007,"type":"identifier"},{"text":"folder","line":881,"char":42061,"type":"identifier"},{"text":"assertEquals","line":883,"char":42180,"type":"identifier"},{"text":"response","line":883,"char":42193,"type":"identifier"},{"text":"getStatus","line":883,"char":42202,"type":"identifier"},{"text":"response","line":883,"char":42232,"type":"identifier"},{"text":"getEntity","line":883,"char":42241,"type":"identifier"},{"text":"ItemReference","line":884,"char":42263,"type":"identifier"},{"text":"ItemReference","line":884,"char":42289,"type":"identifier"},{"text":"response","line":884,"char":42303,"type":"identifier"},{"text":"getEntity","line":884,"char":42312,"type":"identifier"},{"text":"assertEquals","line":885,"char":42333,"type":"identifier"},{"text":"fileItem","line":885,"char":42346,"type":"identifier"},{"text":"getType","line":885,"char":42355,"type":"identifier"},{"text":"assertEquals","line":886,"char":42386,"type":"identifier"},{"text":"fileItem","line":886,"char":42399,"type":"identifier"},{"text":"getName","line":886,"char":42408,"type":"identifier"},{"text":"folder","line":886,"char":42419,"type":"identifier"},{"text":"assertEquals","line":887,"char":42436,"type":"identifier"},{"text":"fileItem","line":887,"char":42449,"type":"identifier"},{"text":"getPath","line":887,"char":42458,"type":"identifier"},{"text":"folder","line":887,"char":42475,"type":"identifier"},{"text":"validateFolderLinks","line":888,"char":42492,"type":"identifier"},{"text":"fileItem","line":888,"char":42512,"type":"identifier"},{"text":"assertEquals","line":889,"char":42531,"type":"identifier"},{"text":"response","line":889,"char":42544,"type":"identifier"},{"text":"getHttpHeaders","line":889,"char":42553,"type":"identifier"},{"text":"getFirst","line":889,"char":42570,"type":"identifier"},{"text":"URI","line":890,"char":42613,"type":"identifier"},{"text":"create","line":890,"char":42617,"type":"identifier"},{"text":"String","line":890,"char":42624,"type":"identifier"},{"text":"format","line":890,"char":42631,"type":"identifier"},{"text":"folder","line":890,"char":42687,"type":"identifier"},{"text":"Exception","line":894,"char":42755,"type":"identifier"},{"text":"ContainerResponse","line":895,"char":42775,"type":"identifier"},{"text":"launcher","line":895,"char":42804,"type":"identifier"},{"text":"service","line":895,"char":42813,"type":"identifier"},{"text":"POST","line":895,"char":42821,"type":"identifier"},{"text":"assertEquals","line":898,"char":43052,"type":"identifier"},{"text":"response","line":898,"char":43065,"type":"identifier"},{"text":"getStatus","line":898,"char":43074,"type":"identifier"},{"text":"response","line":898,"char":43104,"type":"identifier"},{"text":"getEntity","line":898,"char":43113,"type":"identifier"},{"text":"assertEquals","line":899,"char":43135,"type":"identifier"},{"text":"response","line":899,"char":43148,"type":"identifier"},{"text":"getHttpHeaders","line":899,"char":43157,"type":"identifier"},{"text":"getFirst","line":899,"char":43174,"type":"identifier"},{"text":"URI","line":900,"char":43217,"type":"identifier"},{"text":"create","line":900,"char":43221,"type":"identifier"},{"text":"VirtualFileEntry","line":901,"char":43301,"type":"identifier"},{"text":"pm","line":901,"char":43327,"type":"identifier"},{"text":"getProject","line":901,"char":43330,"type":"identifier"},{"text":"getBaseFolder","line":901,"char":43355,"type":"identifier"},{"text":"getChild","line":901,"char":43371,"type":"identifier"},{"text":"Assert","line":902,"char":43398,"type":"identifier"},{"text":"assertTrue","line":902,"char":43405,"type":"identifier"},{"text":"folder","line":902,"char":43416,"type":"identifier"},{"text":"isFolder","line":902,"char":43423,"type":"identifier"},{"text":"Exception","line":906,"char":43493,"type":"identifier"},{"text":"pm","line":907,"char":43513,"type":"identifier"},{"text":"getProject","line":907,"char":43516,"type":"identifier"},{"text":"getBaseFolder","line":907,"char":43541,"type":"identifier"},{"text":"createFile","line":907,"char":43557,"type":"identifier"},{"text":"getBytes","line":907,"char":43601,"type":"identifier"},{"text":"Charset","line":907,"char":43610,"type":"identifier"},{"text":"defaultCharset","line":907,"char":43618,"type":"identifier"},{"text":"ContainerResponse","line":908,"char":43646,"type":"identifier"},{"text":"launcher","line":908,"char":43675,"type":"identifier"},{"text":"service","line":908,"char":43684,"type":"identifier"},{"text":"DELETE","line":908,"char":43692,"type":"identifier"},{"text":"assertEquals","line":911,"char":43921,"type":"identifier"},{"text":"response","line":911,"char":43934,"type":"identifier"},{"text":"getStatus","line":911,"char":43943,"type":"identifier"},{"text":"response","line":911,"char":43973,"type":"identifier"},{"text":"getEntity","line":911,"char":43982,"type":"identifier"},{"text":"Assert","line":912,"char":44004,"type":"identifier"},{"text":"assertNull","line":912,"char":44011,"type":"identifier"},{"text":"pm","line":912,"char":44022,"type":"identifier"},{"text":"getProject","line":912,"char":44025,"type":"identifier"},{"text":"getBaseFolder","line":912,"char":44050,"type":"identifier"},{"text":"getChild","line":912,"char":44066,"type":"identifier"},{"text":"Exception","line":916,"char":44148,"type":"identifier"},{"text":"pm","line":917,"char":44168,"type":"identifier"},{"text":"getProject","line":917,"char":44171,"type":"identifier"},{"text":"getBaseFolder","line":917,"char":44196,"type":"identifier"},{"text":"createFolder","line":917,"char":44212,"type":"identifier"},{"text":"ContainerResponse","line":918,"char":44242,"type":"identifier"},{"text":"launcher","line":918,"char":44271,"type":"identifier"},{"text":"service","line":918,"char":44280,"type":"identifier"},{"text":"DELETE","line":918,"char":44288,"type":"identifier"},{"text":"assertEquals","line":921,"char":44513,"type":"identifier"},{"text":"response","line":921,"char":44526,"type":"identifier"},{"text":"getStatus","line":921,"char":44535,"type":"identifier"},{"text":"response","line":921,"char":44565,"type":"identifier"},{"text":"getEntity","line":921,"char":44574,"type":"identifier"},{"text":"Assert","line":922,"char":44596,"type":"identifier"},{"text":"assertNull","line":922,"char":44603,"type":"identifier"},{"text":"pm","line":922,"char":44614,"type":"identifier"},{"text":"getProject","line":922,"char":44617,"type":"identifier"},{"text":"getBaseFolder","line":922,"char":44642,"type":"identifier"},{"text":"getChild","line":922,"char":44658,"type":"identifier"},{"text":"Exception","line":926,"char":44734,"type":"identifier"},{"text":"pm","line":927,"char":44754,"type":"identifier"},{"text":"getProject","line":927,"char":44757,"type":"identifier"},{"text":"getBaseFolder","line":927,"char":44782,"type":"identifier"},{"text":"createFolder","line":927,"char":44798,"type":"identifier"},{"text":"ContainerResponse","line":928,"char":44829,"type":"identifier"},{"text":"launcher","line":928,"char":44858,"type":"identifier"},{"text":"service","line":928,"char":44867,"type":"identifier"},{"text":"DELETE","line":928,"char":44875,"type":"identifier"},{"text":"assertEquals","line":931,"char":45101,"type":"identifier"},{"text":"response","line":931,"char":45114,"type":"identifier"},{"text":"getStatus","line":931,"char":45123,"type":"identifier"},{"text":"response","line":931,"char":45153,"type":"identifier"},{"text":"getEntity","line":931,"char":45162,"type":"identifier"},{"text":"Assert","line":932,"char":45184,"type":"identifier"},{"text":"assertNull","line":932,"char":45191,"type":"identifier"},{"text":"pm","line":932,"char":45202,"type":"identifier"},{"text":"getProject","line":932,"char":45205,"type":"identifier"},{"text":"getBaseFolder","line":932,"char":45230,"type":"identifier"},{"text":"getChild","line":932,"char":45246,"type":"identifier"},{"text":"Exception","line":936,"char":45330,"type":"identifier"},{"text":"ContainerResponse","line":937,"char":45350,"type":"identifier"},{"text":"launcher","line":937,"char":45379,"type":"identifier"},{"text":"service","line":937,"char":45388,"type":"identifier"},{"text":"DELETE","line":937,"char":45396,"type":"identifier"},{"text":"assertEquals","line":940,"char":45622,"type":"identifier"},{"text":"response","line":940,"char":45635,"type":"identifier"},{"text":"getStatus","line":940,"char":45644,"type":"identifier"},{"text":"assertNotNull","line":941,"char":45671,"type":"identifier"},{"text":"pm","line":941,"char":45685,"type":"identifier"},{"text":"getProject","line":941,"char":45688,"type":"identifier"},{"text":"expectedExceptions","line":944,"char":45732,"type":"identifier"},{"text":"NotFoundException","line":944,"char":45753,"type":"identifier"},{"text":"Exception","line":945,"char":45821,"type":"identifier"},{"text":"ContainerResponse","line":948,"char":45843,"type":"identifier"},{"text":"launcher","line":948,"char":45872,"type":"identifier"},{"text":"service","line":948,"char":45881,"type":"identifier"},{"text":"DELETE","line":948,"char":45889,"type":"identifier"},{"text":"assertEquals","line":951,"char":46109,"type":"identifier"},{"text":"response","line":951,"char":46122,"type":"identifier"},{"text":"getStatus","line":951,"char":46131,"type":"identifier"},{"text":"response","line":951,"char":46161,"type":"identifier"},{"text":"getEntity","line":951,"char":46170,"type":"identifier"},{"text":"pm","line":953,"char":46193,"type":"identifier"},{"text":"getProject","line":953,"char":46196,"type":"identifier"},{"text":"Exception","line":957,"char":46295,"type":"identifier"},{"text":"Runtime","line":958,"char":46339,"type":"identifier"},{"text":"getRuntime","line":958,"char":46347,"type":"identifier"},{"text":"availableProcessors","line":958,"char":46360,"type":"identifier"},{"text":"ExecutorService","line":959,"char":46396,"type":"identifier"},{"text":"Executors","line":959,"char":46423,"type":"identifier"},{"text":"newFixedThreadPool","line":959,"char":46433,"type":"identifier"},{"text":"threadNumber","line":959,"char":46452,"type":"identifier"},{"text":"CountDownLatch","line":960,"char":46475,"type":"identifier"},{"text":"CountDownLatch","line":960,"char":46511,"type":"identifier"},{"text":"threadNumber","line":960,"char":46526,"type":"identifier"},{"text":"List","line":961,"char":46549,"type":"identifier"},{"text":"Future","line":961,"char":46554,"type":"identifier"},{"text":"ContainerResponse","line":961,"char":46561,"type":"identifier"},{"text":"LinkedList","line":961,"char":46595,"type":"identifier"},{"text":"i","line":964,"char":46637,"type":"identifier"},{"text":"threadNumber","line":964,"char":46641,"type":"identifier"},{"text":"i","line":964,"char":46655,"type":"identifier"},{"text":"addMockedProjectConfigDto","line":965,"char":46674,"type":"identifier"},{"text":"ptRegistry","line":965,"char":46700,"type":"identifier"},{"text":"getProjectType","line":965,"char":46711,"type":"identifier"},{"text":"i","line":965,"char":46766,"type":"identifier"},{"text":"IntStream","line":968,"char":46789,"type":"identifier"},{"text":"range","line":968,"char":46799,"type":"identifier"},{"text":"threadNumber","line":968,"char":46808,"type":"identifier"},{"text":"forEach","line":968,"char":46822,"type":"identifier"},{"text":"i","line":969,"char":46847,"type":"identifier"},{"text":"futures","line":970,"char":46874,"type":"identifier"},{"text":"add","line":970,"char":46882,"type":"identifier"},{"text":"executor","line":970,"char":46886,"type":"identifier"},{"text":"submit","line":970,"char":46895,"type":"identifier"},{"text":"countDownLatch","line":971,"char":46934,"type":"identifier"},{"text":"countDown","line":971,"char":46949,"type":"identifier"},{"text":"countDownLatch","line":972,"char":46986,"type":"identifier"},{"text":"await","line":972,"char":47001,"type":"identifier"},{"text":"launcher","line":975,"char":47076,"type":"identifier"},{"text":"service","line":975,"char":47085,"type":"identifier"},{"text":"DELETE","line":975,"char":47093,"type":"identifier"},{"text":"i","line":976,"char":47207,"type":"identifier"},{"text":"Exception","line":978,"char":47343,"type":"identifier"},{"text":"e","line":978,"char":47353,"type":"identifier"},{"text":"IllegalStateException","line":979,"char":47396,"type":"identifier"},{"text":"e","line":979,"char":47418,"type":"identifier"},{"text":"isNotDone","line":987,"char":47595,"type":"identifier"},{"text":"Future","line":988,"char":47631,"type":"identifier"},{"text":"ContainerResponse","line":988,"char":47638,"type":"identifier"},{"text":"futures","line":988,"char":47666,"type":"identifier"},{"text":"future","line":989,"char":47698,"type":"identifier"},{"text":"isDone","line":989,"char":47705,"type":"identifier"},{"text":"isNotDone","line":990,"char":47737,"type":"identifier"},{"text":"isNotDone","line":993,"char":47804,"type":"identifier"},{"text":"Future","line":995,"char":47830,"type":"identifier"},{"text":"ContainerResponse","line":995,"char":47837,"type":"identifier"},{"text":"futures","line":995,"char":47865,"type":"identifier"},{"text":"assertEquals","line":996,"char":47888,"type":"identifier"},{"text":"future","line":996,"char":47901,"type":"identifier"},{"text":"get","line":996,"char":47908,"type":"identifier"},{"text":"getStatus","line":996,"char":47914,"type":"identifier"},{"text":"future","line":996,"char":47944,"type":"identifier"},{"text":"get","line":996,"char":47951,"type":"identifier"},{"text":"getEntity","line":996,"char":47957,"type":"identifier"},{"text":"executor","line":999,"char":47990,"type":"identifier"},{"text":"shutdown","line":999,"char":47999,"type":"identifier"},{"text":"Exception","line":1003,"char":48066,"type":"identifier"},{"text":"RegisteredProject","line":1004,"char":48086,"type":"identifier"},{"text":"pm","line":1004,"char":48116,"type":"identifier"},{"text":"getProject","line":1004,"char":48119,"type":"identifier"},{"text":"myProject","line":1005,"char":48153,"type":"identifier"},{"text":"getBaseFolder","line":1005,"char":48163,"type":"identifier"},{"text":"createFolder","line":1005,"char":48179,"type":"identifier"},{"text":"FolderEntry","line":1006,"char":48212,"type":"identifier"},{"text":"myProject","line":1006,"char":48224,"type":"identifier"},{"text":"getBaseFolder","line":1006,"char":48234,"type":"identifier"},{"text":"getChild","line":1006,"char":48250,"type":"identifier"},{"text":"createFile","line":1006,"char":48267,"type":"identifier"},{"text":"getBytes","line":1006,"char":48311,"type":"identifier"},{"text":"Charset","line":1006,"char":48320,"type":"identifier"},{"text":"defaultCharset","line":1006,"char":48328,"type":"identifier"},{"text":"ContainerResponse","line":1007,"char":48356,"type":"identifier"},{"text":"launcher","line":1007,"char":48385,"type":"identifier"},{"text":"service","line":1007,"char":48394,"type":"identifier"},{"text":"POST","line":1007,"char":48402,"type":"identifier"},{"text":"assertEquals","line":1010,"char":48659,"type":"identifier"},{"text":"response","line":1010,"char":48672,"type":"identifier"},{"text":"getStatus","line":1010,"char":48681,"type":"identifier"},{"text":"response","line":1010,"char":48711,"type":"identifier"},{"text":"getEntity","line":1010,"char":48720,"type":"identifier"},{"text":"assertEquals","line":1011,"char":48742,"type":"identifier"},{"text":"response","line":1011,"char":48755,"type":"identifier"},{"text":"getHttpHeaders","line":1011,"char":48764,"type":"identifier"},{"text":"getFirst","line":1011,"char":48781,"type":"identifier"},{"text":"URI","line":1012,"char":48824,"type":"identifier"},{"text":"create","line":1012,"char":48828,"type":"identifier"},{"text":"assertNotNull","line":1013,"char":48913,"type":"identifier"},{"text":"myProject","line":1013,"char":48927,"type":"identifier"},{"text":"getBaseFolder","line":1013,"char":48937,"type":"identifier"},{"text":"getChild","line":1013,"char":48953,"type":"identifier"},{"text":"assertNotNull","line":1014,"char":48997,"type":"identifier"},{"text":"myProject","line":1014,"char":49011,"type":"identifier"},{"text":"getBaseFolder","line":1014,"char":49021,"type":"identifier"},{"text":"getChild","line":1014,"char":49037,"type":"identifier"},{"text":"Exception","line":1018,"char":49136,"type":"identifier"},{"text":"RegisteredProject","line":1019,"char":49156,"type":"identifier"},{"text":"pm","line":1019,"char":49186,"type":"identifier"},{"text":"getProject","line":1019,"char":49189,"type":"identifier"},{"text":"myProject","line":1020,"char":49223,"type":"identifier"},{"text":"getBaseFolder","line":1020,"char":49233,"type":"identifier"},{"text":"createFolder","line":1020,"char":49249,"type":"identifier"},{"text":"FolderEntry","line":1021,"char":49282,"type":"identifier"},{"text":"myProject","line":1021,"char":49294,"type":"identifier"},{"text":"getBaseFolder","line":1021,"char":49304,"type":"identifier"},{"text":"getChild","line":1021,"char":49320,"type":"identifier"},{"text":"createFile","line":1021,"char":49337,"type":"identifier"},{"text":"getBytes","line":1021,"char":49381,"type":"identifier"},{"text":"Charset","line":1021,"char":49390,"type":"identifier"},{"text":"defaultCharset","line":1021,"char":49398,"type":"identifier"},{"text":"Map","line":1023,"char":49427,"type":"identifier"},{"text":"String","line":1023,"char":49431,"type":"identifier"},{"text":"List","line":1023,"char":49439,"type":"identifier"},{"text":"String","line":1023,"char":49444,"type":"identifier"},{"text":"HashMap","line":1023,"char":49467,"type":"identifier"},{"text":"headers","line":1024,"char":49488,"type":"identifier"},{"text":"put","line":1024,"char":49496,"type":"identifier"},{"text":"CONTENT_TYPE","line":1024,"char":49500,"type":"identifier"},{"text":"singletonList","line":1024,"char":49514,"type":"identifier"},{"text":"APPLICATION_JSON","line":1024,"char":49528,"type":"identifier"},{"text":"CopyOptions","line":1026,"char":49557,"type":"identifier"},{"text":"DtoFactory","line":1026,"char":49582,"type":"identifier"},{"text":"getInstance","line":1026,"char":49593,"type":"identifier"},{"text":"createDto","line":1026,"char":49607,"type":"identifier"},{"text":"CopyOptions","line":1026,"char":49617,"type":"identifier"},{"text":"descriptor","line":1027,"char":49645,"type":"identifier"},{"text":"setName","line":1027,"char":49656,"type":"identifier"},{"text":"descriptor","line":1028,"char":49691,"type":"identifier"},{"text":"setOverWrite","line":1028,"char":49702,"type":"identifier"},{"text":"ContainerResponse","line":1030,"char":49732,"type":"identifier"},{"text":"launcher","line":1030,"char":49761,"type":"identifier"},{"text":"service","line":1030,"char":49770,"type":"identifier"},{"text":"POST","line":1030,"char":49778,"type":"identifier"},{"text":"headers","line":1032,"char":50008,"type":"identifier"},{"text":"DtoFactory","line":1033,"char":50071,"type":"identifier"},{"text":"getInstance","line":1033,"char":50082,"type":"identifier"},{"text":"toJson","line":1033,"char":50096,"type":"identifier"},{"text":"descriptor","line":1033,"char":50103,"type":"identifier"},{"text":"getBytes","line":1033,"char":50115,"type":"identifier"},{"text":"Charset","line":1033,"char":50124,"type":"identifier"},{"text":"defaultCharset","line":1033,"char":50132,"type":"identifier"},{"text":"assertEquals","line":1034,"char":50166,"type":"identifier"},{"text":"response","line":1034,"char":50179,"type":"identifier"},{"text":"getStatus","line":1034,"char":50188,"type":"identifier"},{"text":"response","line":1034,"char":50218,"type":"identifier"},{"text":"getEntity","line":1034,"char":50227,"type":"identifier"},{"text":"assertEquals","line":1035,"char":50249,"type":"identifier"},{"text":"response","line":1035,"char":50262,"type":"identifier"},{"text":"getHttpHeaders","line":1035,"char":50271,"type":"identifier"},{"text":"getFirst","line":1035,"char":50288,"type":"identifier"},{"text":"URI","line":1036,"char":50331,"type":"identifier"},{"text":"create","line":1036,"char":50335,"type":"identifier"},{"text":"assertNotNull","line":1037,"char":50426,"type":"identifier"},{"text":"myProject","line":1037,"char":50440,"type":"identifier"},{"text":"getBaseFolder","line":1037,"char":50450,"type":"identifier"},{"text":"getChild","line":1037,"char":50466,"type":"identifier"},{"text":"assertNotNull","line":1038,"char":50516,"type":"identifier"},{"text":"myProject","line":1038,"char":50530,"type":"identifier"},{"text":"getBaseFolder","line":1038,"char":50540,"type":"identifier"},{"text":"getChild","line":1038,"char":50556,"type":"identifier"},{"text":"Exception","line":1042,"char":50667,"type":"identifier"},{"text":"RegisteredProject","line":1043,"char":50687,"type":"identifier"},{"text":"pm","line":1043,"char":50717,"type":"identifier"},{"text":"getProject","line":1043,"char":50720,"type":"identifier"},{"text":"myProject","line":1044,"char":50754,"type":"identifier"},{"text":"getBaseFolder","line":1044,"char":50764,"type":"identifier"},{"text":"createFolder","line":1044,"char":50780,"type":"identifier"},{"text":"String","line":1047,"char":50834,"type":"identifier"},{"text":"String","line":1048,"char":50878,"type":"identifier"},{"text":"String","line":1051,"char":50960,"type":"identifier"},{"text":"String","line":1052,"char":51013,"type":"identifier"},{"text":"FolderEntry","line":1054,"char":51076,"type":"identifier"},{"text":"myProject","line":1054,"char":51088,"type":"identifier"},{"text":"getBaseFolder","line":1054,"char":51098,"type":"identifier"},{"text":"getChild","line":1054,"char":51114,"type":"identifier"},{"text":"createFile","line":1054,"char":51131,"type":"identifier"},{"text":"originFileName","line":1054,"char":51142,"type":"identifier"},{"text":"originContent","line":1054,"char":51158,"type":"identifier"},{"text":"getBytes","line":1054,"char":51172,"type":"identifier"},{"text":"Charset","line":1054,"char":51181,"type":"identifier"},{"text":"defaultCharset","line":1054,"char":51189,"type":"identifier"},{"text":"FolderEntry","line":1055,"char":51219,"type":"identifier"},{"text":"myProject","line":1055,"char":51231,"type":"identifier"},{"text":"getBaseFolder","line":1055,"char":51241,"type":"identifier"},{"text":"getChild","line":1055,"char":51257,"type":"identifier"},{"text":"createFile","line":1055,"char":51276,"type":"identifier"},{"text":"destinationFileName","line":1055,"char":51287,"type":"identifier"},{"text":"overwrittenContent","line":1055,"char":51308,"type":"identifier"},{"text":"getBytes","line":1055,"char":51327,"type":"identifier"},{"text":"Charset","line":1055,"char":51336,"type":"identifier"},{"text":"defaultCharset","line":1055,"char":51344,"type":"identifier"},{"text":"Map","line":1057,"char":51373,"type":"identifier"},{"text":"String","line":1057,"char":51377,"type":"identifier"},{"text":"List","line":1057,"char":51385,"type":"identifier"},{"text":"String","line":1057,"char":51390,"type":"identifier"},{"text":"HashMap","line":1057,"char":51413,"type":"identifier"},{"text":"headers","line":1058,"char":51434,"type":"identifier"},{"text":"put","line":1058,"char":51442,"type":"identifier"},{"text":"CONTENT_TYPE","line":1058,"char":51446,"type":"identifier"},{"text":"singletonList","line":1058,"char":51460,"type":"identifier"},{"text":"APPLICATION_JSON","line":1058,"char":51474,"type":"identifier"},{"text":"CopyOptions","line":1060,"char":51503,"type":"identifier"},{"text":"DtoFactory","line":1060,"char":51528,"type":"identifier"},{"text":"getInstance","line":1060,"char":51539,"type":"identifier"},{"text":"createDto","line":1060,"char":51553,"type":"identifier"},{"text":"CopyOptions","line":1060,"char":51563,"type":"identifier"},{"text":"descriptor","line":1061,"char":51591,"type":"identifier"},{"text":"setName","line":1061,"char":51602,"type":"identifier"},{"text":"destinationFileName","line":1061,"char":51610,"type":"identifier"},{"text":"descriptor","line":1062,"char":51640,"type":"identifier"},{"text":"setOverWrite","line":1062,"char":51651,"type":"identifier"},{"text":"ContainerResponse","line":1064,"char":51680,"type":"identifier"},{"text":"launcher","line":1064,"char":51709,"type":"identifier"},{"text":"service","line":1064,"char":51718,"type":"identifier"},{"text":"POST","line":1064,"char":51726,"type":"identifier"},{"text":"originFileName","line":1065,"char":51845,"type":"identifier"},{"text":"headers","line":1066,"char":51970,"type":"identifier"},{"text":"DtoFactory","line":1067,"char":52033,"type":"identifier"},{"text":"getInstance","line":1067,"char":52044,"type":"identifier"},{"text":"toJson","line":1067,"char":52058,"type":"identifier"},{"text":"descriptor","line":1067,"char":52065,"type":"identifier"},{"text":"getBytes","line":1067,"char":52077,"type":"identifier"},{"text":"Charset","line":1067,"char":52086,"type":"identifier"},{"text":"defaultCharset","line":1067,"char":52094,"type":"identifier"},{"text":"assertEquals","line":1068,"char":52128,"type":"identifier"},{"text":"response","line":1068,"char":52141,"type":"identifier"},{"text":"getStatus","line":1068,"char":52150,"type":"identifier"},{"text":"response","line":1068,"char":52180,"type":"identifier"},{"text":"getEntity","line":1068,"char":52189,"type":"identifier"},{"text":"assertEquals","line":1069,"char":52211,"type":"identifier"},{"text":"response","line":1069,"char":52224,"type":"identifier"},{"text":"getHttpHeaders","line":1069,"char":52233,"type":"identifier"},{"text":"getFirst","line":1069,"char":52250,"type":"identifier"},{"text":"URI","line":1070,"char":52293,"type":"identifier"},{"text":"create","line":1070,"char":52297,"type":"identifier"},{"text":"destinationFileName","line":1070,"char":52365,"type":"identifier"},{"text":"assertNotNull","line":1071,"char":52396,"type":"identifier"},{"text":"myProject","line":1071,"char":52410,"type":"identifier"},{"text":"getBaseFolder","line":1071,"char":52420,"type":"identifier"},{"text":"getChild","line":1071,"char":52436,"type":"identifier"},{"text":"destinationFileName","line":1071,"char":52456,"type":"identifier"},{"text":"assertNotNull","line":1072,"char":52494,"type":"identifier"},{"text":"myProject","line":1072,"char":52508,"type":"identifier"},{"text":"getBaseFolder","line":1072,"char":52518,"type":"identifier"},{"text":"getChild","line":1072,"char":52534,"type":"identifier"},{"text":"originFileName","line":1072,"char":52552,"type":"identifier"},{"text":"Scanner","line":1074,"char":52586,"type":"identifier"},{"text":"String","line":1075,"char":52629,"type":"identifier"},{"text":"inputStreamScanner","line":1078,"char":52696,"type":"identifier"},{"text":"Scanner","line":1078,"char":52721,"type":"identifier"},{"text":"myProject","line":1079,"char":52750,"type":"identifier"},{"text":"getBaseFolder","line":1079,"char":52760,"type":"identifier"},{"text":"getChild","line":1079,"char":52776,"type":"identifier"},{"text":"destinationFileName","line":1079,"char":52796,"type":"identifier"},{"text":"getVirtualFile","line":1079,"char":52817,"type":"identifier"},{"text":"getContent","line":1079,"char":52834,"type":"identifier"},{"text":"theFirstLineFromDestinationFile","line":1080,"char":52861,"type":"identifier"},{"text":"inputStreamScanner","line":1080,"char":52895,"type":"identifier"},{"text":"nextLine","line":1080,"char":52914,"type":"identifier"},{"text":"assertEquals","line":1082,"char":53004,"type":"identifier"},{"text":"theFirstLineFromDestinationFile","line":1082,"char":53017,"type":"identifier"},{"text":"originContent","line":1082,"char":53050,"type":"identifier"},{"text":"ForbiddenException","line":1083,"char":53083,"type":"identifier"},{"text":"ServerException","line":1083,"char":53104,"type":"identifier"},{"text":"e","line":1083,"char":53120,"type":"identifier"},{"text":"Assert","line":1084,"char":53137,"type":"identifier"},{"text":"fail","line":1084,"char":53144,"type":"identifier"},{"text":"e","line":1084,"char":53149,"type":"identifier"},{"text":"getMessage","line":1084,"char":53151,"type":"identifier"},{"text":"inputStreamScanner","line":1086,"char":53202,"type":"identifier"},{"text":"inputStreamScanner","line":1087,"char":53248,"type":"identifier"},{"text":"close","line":1087,"char":53267,"type":"identifier"},{"text":"Exception","line":1093,"char":53357,"type":"identifier"},{"text":"RegisteredProject","line":1094,"char":53377,"type":"identifier"},{"text":"pm","line":1094,"char":53407,"type":"identifier"},{"text":"getProject","line":1094,"char":53410,"type":"identifier"},{"text":"myProject","line":1095,"char":53444,"type":"identifier"},{"text":"getBaseFolder","line":1095,"char":53454,"type":"identifier"},{"text":"createFolder","line":1095,"char":53470,"type":"identifier"},{"text":"FolderEntry","line":1096,"char":53503,"type":"identifier"},{"text":"myProject","line":1096,"char":53515,"type":"identifier"},{"text":"getBaseFolder","line":1096,"char":53525,"type":"identifier"},{"text":"getChild","line":1096,"char":53541,"type":"identifier"},{"text":"createFile","line":1096,"char":53558,"type":"identifier"},{"text":"getBytes","line":1096,"char":53602,"type":"identifier"},{"text":"Charset","line":1096,"char":53611,"type":"identifier"},{"text":"defaultCharset","line":1096,"char":53619,"type":"identifier"},{"text":"ContainerResponse","line":1097,"char":53647,"type":"identifier"},{"text":"launcher","line":1097,"char":53676,"type":"identifier"},{"text":"service","line":1097,"char":53685,"type":"identifier"},{"text":"POST","line":1097,"char":53693,"type":"identifier"},{"text":"assertEquals","line":1100,"char":53941,"type":"identifier"},{"text":"response","line":1100,"char":53954,"type":"identifier"},{"text":"getStatus","line":1100,"char":53963,"type":"identifier"},{"text":"response","line":1100,"char":53993,"type":"identifier"},{"text":"getEntity","line":1100,"char":54002,"type":"identifier"},{"text":"assertEquals","line":1101,"char":54024,"type":"identifier"},{"text":"response","line":1101,"char":54037,"type":"identifier"},{"text":"getHttpHeaders","line":1101,"char":54046,"type":"identifier"},{"text":"getFirst","line":1101,"char":54063,"type":"identifier"},{"text":"URI","line":1102,"char":54106,"type":"identifier"},{"text":"create","line":1102,"char":54110,"type":"identifier"},{"text":"assertNotNull","line":1103,"char":54192,"type":"identifier"},{"text":"myProject","line":1103,"char":54206,"type":"identifier"},{"text":"getBaseFolder","line":1103,"char":54216,"type":"identifier"},{"text":"getChild","line":1103,"char":54232,"type":"identifier"},{"text":"assertNotNull","line":1104,"char":54267,"type":"identifier"},{"text":"myProject","line":1104,"char":54281,"type":"identifier"},{"text":"getBaseFolder","line":1104,"char":54291,"type":"identifier"},{"text":"getChild","line":1104,"char":54307,"type":"identifier"},{"text":"Exception","line":1108,"char":54405,"type":"identifier"},{"text":"RegisteredProject","line":1109,"char":54425,"type":"identifier"},{"text":"pm","line":1109,"char":54455,"type":"identifier"},{"text":"getProject","line":1109,"char":54458,"type":"identifier"},{"text":"myProject","line":1110,"char":54492,"type":"identifier"},{"text":"getBaseFolder","line":1110,"char":54502,"type":"identifier"},{"text":"createFolder","line":1110,"char":54518,"type":"identifier"},{"text":"FolderEntry","line":1111,"char":54551,"type":"identifier"},{"text":"myProject","line":1111,"char":54563,"type":"identifier"},{"text":"getBaseFolder","line":1111,"char":54573,"type":"identifier"},{"text":"getChild","line":1111,"char":54589,"type":"identifier"},{"text":"createFile","line":1111,"char":54606,"type":"identifier"},{"text":"getBytes","line":1111,"char":54650,"type":"identifier"},{"text":"Charset","line":1111,"char":54659,"type":"identifier"},{"text":"defaultCharset","line":1111,"char":54667,"type":"identifier"},{"text":"String","line":1114,"char":54733,"type":"identifier"},{"text":"Map","line":1116,"char":54782,"type":"identifier"},{"text":"String","line":1116,"char":54786,"type":"identifier"},{"text":"List","line":1116,"char":54794,"type":"identifier"},{"text":"String","line":1116,"char":54799,"type":"identifier"},{"text":"HashMap","line":1116,"char":54822,"type":"identifier"},{"text":"headers","line":1117,"char":54843,"type":"identifier"},{"text":"put","line":1117,"char":54851,"type":"identifier"},{"text":"CONTENT_TYPE","line":1117,"char":54855,"type":"identifier"},{"text":"singletonList","line":1117,"char":54869,"type":"identifier"},{"text":"APPLICATION_JSON","line":1117,"char":54883,"type":"identifier"},{"text":"CopyOptions","line":1119,"char":54912,"type":"identifier"},{"text":"DtoFactory","line":1119,"char":54937,"type":"identifier"},{"text":"getInstance","line":1119,"char":54948,"type":"identifier"},{"text":"createDto","line":1119,"char":54962,"type":"identifier"},{"text":"CopyOptions","line":1119,"char":54972,"type":"identifier"},{"text":"descriptor","line":1120,"char":55000,"type":"identifier"},{"text":"setName","line":1120,"char":55011,"type":"identifier"},{"text":"renamedFolder","line":1120,"char":55019,"type":"identifier"},{"text":"descriptor","line":1121,"char":55043,"type":"identifier"},{"text":"setOverWrite","line":1121,"char":55054,"type":"identifier"},{"text":"ContainerResponse","line":1123,"char":55084,"type":"identifier"},{"text":"launcher","line":1123,"char":55113,"type":"identifier"},{"text":"service","line":1123,"char":55122,"type":"identifier"},{"text":"POST","line":1123,"char":55130,"type":"identifier"},{"text":"headers","line":1125,"char":55351,"type":"identifier"},{"text":"DtoFactory","line":1126,"char":55414,"type":"identifier"},{"text":"getInstance","line":1126,"char":55425,"type":"identifier"},{"text":"toJson","line":1126,"char":55439,"type":"identifier"},{"text":"descriptor","line":1126,"char":55446,"type":"identifier"},{"text":"getBytes","line":1126,"char":55458,"type":"identifier"},{"text":"Charset","line":1126,"char":55467,"type":"identifier"},{"text":"defaultCharset","line":1126,"char":55475,"type":"identifier"},{"text":"assertEquals","line":1127,"char":55509,"type":"identifier"},{"text":"response","line":1127,"char":55522,"type":"identifier"},{"text":"getStatus","line":1127,"char":55531,"type":"identifier"},{"text":"response","line":1127,"char":55561,"type":"identifier"},{"text":"getEntity","line":1127,"char":55570,"type":"identifier"},{"text":"assertEquals","line":1128,"char":55592,"type":"identifier"},{"text":"response","line":1128,"char":55605,"type":"identifier"},{"text":"getHttpHeaders","line":1128,"char":55614,"type":"identifier"},{"text":"getFirst","line":1128,"char":55631,"type":"identifier"},{"text":"URI","line":1129,"char":55674,"type":"identifier"},{"text":"create","line":1129,"char":55678,"type":"identifier"},{"text":"String","line":1130,"char":55715,"type":"identifier"},{"text":"format","line":1130,"char":55722,"type":"identifier"},{"text":"renamedFolder","line":1130,"char":55795,"type":"identifier"},{"text":"assertNotNull","line":1131,"char":55821,"type":"identifier"},{"text":"myProject","line":1131,"char":55835,"type":"identifier"},{"text":"getBaseFolder","line":1131,"char":55845,"type":"identifier"},{"text":"getChild","line":1131,"char":55861,"type":"identifier"},{"text":"assertNotNull","line":1132,"char":55896,"type":"identifier"},{"text":"myProject","line":1132,"char":55910,"type":"identifier"},{"text":"getBaseFolder","line":1132,"char":55920,"type":"identifier"},{"text":"getChild","line":1132,"char":55936,"type":"identifier"},{"text":"String","line":1132,"char":55945,"type":"identifier"},{"text":"format","line":1132,"char":55952,"type":"identifier"},{"text":"renamedFolder","line":1132,"char":55980,"type":"identifier"},{"text":"Exception","line":1136,"char":56077,"type":"identifier"},{"text":"RegisteredProject","line":1137,"char":56097,"type":"identifier"},{"text":"pm","line":1137,"char":56127,"type":"identifier"},{"text":"getProject","line":1137,"char":56130,"type":"identifier"},{"text":"myProject","line":1138,"char":56164,"type":"identifier"},{"text":"getBaseFolder","line":1138,"char":56174,"type":"identifier"},{"text":"createFolder","line":1138,"char":56190,"type":"identifier"},{"text":"String","line":1141,"char":56244,"type":"identifier"},{"text":"String","line":1142,"char":56288,"type":"identifier"},{"text":"String","line":1145,"char":56370,"type":"identifier"},{"text":"String","line":1146,"char":56423,"type":"identifier"},{"text":"String","line":1149,"char":56521,"type":"identifier"},{"text":"FolderEntry","line":1151,"char":56572,"type":"identifier"},{"text":"myProject","line":1151,"char":56584,"type":"identifier"},{"text":"getBaseFolder","line":1151,"char":56594,"type":"identifier"},{"text":"getChild","line":1151,"char":56610,"type":"identifier"},{"text":"createFile","line":1151,"char":56627,"type":"identifier"},{"text":"originFileName","line":1151,"char":56638,"type":"identifier"},{"text":"originContent","line":1151,"char":56654,"type":"identifier"},{"text":"getBytes","line":1151,"char":56668,"type":"identifier"},{"text":"Charset","line":1151,"char":56677,"type":"identifier"},{"text":"defaultCharset","line":1151,"char":56685,"type":"identifier"},{"text":"FolderEntry","line":1152,"char":56715,"type":"identifier"},{"text":"myProject","line":1152,"char":56727,"type":"identifier"},{"text":"getBaseFolder","line":1152,"char":56737,"type":"identifier"},{"text":"getChild","line":1152,"char":56753,"type":"identifier"},{"text":"createFile","line":1152,"char":56772,"type":"identifier"},{"text":"destinationFileName","line":1152,"char":56783,"type":"identifier"},{"text":"overwrittenContent","line":1152,"char":56804,"type":"identifier"},{"text":"getBytes","line":1152,"char":56823,"type":"identifier"},{"text":"Charset","line":1152,"char":56832,"type":"identifier"},{"text":"defaultCharset","line":1152,"char":56840,"type":"identifier"},{"text":"Map","line":1154,"char":56869,"type":"identifier"},{"text":"String","line":1154,"char":56873,"type":"identifier"},{"text":"List","line":1154,"char":56881,"type":"identifier"},{"text":"String","line":1154,"char":56886,"type":"identifier"},{"text":"HashMap","line":1154,"char":56909,"type":"identifier"},{"text":"headers","line":1155,"char":56930,"type":"identifier"},{"text":"put","line":1155,"char":56938,"type":"identifier"},{"text":"CONTENT_TYPE","line":1155,"char":56942,"type":"identifier"},{"text":"singletonList","line":1155,"char":56956,"type":"identifier"},{"text":"APPLICATION_JSON","line":1155,"char":56970,"type":"identifier"},{"text":"CopyOptions","line":1157,"char":56999,"type":"identifier"},{"text":"DtoFactory","line":1157,"char":57024,"type":"identifier"},{"text":"getInstance","line":1157,"char":57035,"type":"identifier"},{"text":"createDto","line":1157,"char":57049,"type":"identifier"},{"text":"CopyOptions","line":1157,"char":57059,"type":"identifier"},{"text":"descriptor","line":1158,"char":57087,"type":"identifier"},{"text":"setName","line":1158,"char":57098,"type":"identifier"},{"text":"renamedFolder","line":1158,"char":57106,"type":"identifier"},{"text":"descriptor","line":1159,"char":57130,"type":"identifier"},{"text":"setOverWrite","line":1159,"char":57141,"type":"identifier"},{"text":"ContainerResponse","line":1161,"char":57170,"type":"identifier"},{"text":"launcher","line":1161,"char":57199,"type":"identifier"},{"text":"service","line":1161,"char":57208,"type":"identifier"},{"text":"POST","line":1161,"char":57216,"type":"identifier"},{"text":"headers","line":1163,"char":57437,"type":"identifier"},{"text":"DtoFactory","line":1164,"char":57500,"type":"identifier"},{"text":"getInstance","line":1164,"char":57511,"type":"identifier"},{"text":"toJson","line":1164,"char":57525,"type":"identifier"},{"text":"descriptor","line":1164,"char":57532,"type":"identifier"},{"text":"getBytes","line":1164,"char":57544,"type":"identifier"},{"text":"Charset","line":1164,"char":57553,"type":"identifier"},{"text":"defaultCharset","line":1164,"char":57561,"type":"identifier"},{"text":"assertEquals","line":1165,"char":57595,"type":"identifier"},{"text":"response","line":1165,"char":57608,"type":"identifier"},{"text":"getStatus","line":1165,"char":57617,"type":"identifier"},{"text":"response","line":1165,"char":57647,"type":"identifier"},{"text":"getEntity","line":1165,"char":57656,"type":"identifier"},{"text":"assertEquals","line":1166,"char":57678,"type":"identifier"},{"text":"response","line":1166,"char":57691,"type":"identifier"},{"text":"getHttpHeaders","line":1166,"char":57700,"type":"identifier"},{"text":"getFirst","line":1166,"char":57717,"type":"identifier"},{"text":"URI","line":1167,"char":57760,"type":"identifier"},{"text":"create","line":1167,"char":57764,"type":"identifier"},{"text":"String","line":1168,"char":57801,"type":"identifier"},{"text":"format","line":1168,"char":57808,"type":"identifier"},{"text":"renamedFolder","line":1168,"char":57881,"type":"identifier"},{"text":"assertNotNull","line":1169,"char":57907,"type":"identifier"},{"text":"myProject","line":1169,"char":57921,"type":"identifier"},{"text":"getBaseFolder","line":1169,"char":57931,"type":"identifier"},{"text":"getChild","line":1169,"char":57947,"type":"identifier"},{"text":"assertNotNull","line":1170,"char":57982,"type":"identifier"},{"text":"myProject","line":1170,"char":57996,"type":"identifier"},{"text":"getBaseFolder","line":1170,"char":58006,"type":"identifier"},{"text":"getChild","line":1170,"char":58022,"type":"identifier"},{"text":"String","line":1170,"char":58031,"type":"identifier"},{"text":"format","line":1170,"char":58038,"type":"identifier"},{"text":"renamedFolder","line":1170,"char":58066,"type":"identifier"},{"text":"assertEquals","line":1171,"char":58092,"type":"identifier"},{"text":"myProject","line":1171,"char":58105,"type":"identifier"},{"text":"getBaseFolder","line":1171,"char":58115,"type":"identifier"},{"text":"getChild","line":1171,"char":58131,"type":"identifier"},{"text":"getName","line":1171,"char":58156,"type":"identifier"},{"text":"myProject","line":1172,"char":58188,"type":"identifier"},{"text":"getBaseFolder","line":1172,"char":58198,"type":"identifier"},{"text":"getChild","line":1172,"char":58214,"type":"identifier"},{"text":"String","line":1172,"char":58223,"type":"identifier"},{"text":"format","line":1172,"char":58230,"type":"identifier"},{"text":"renamedFolder","line":1172,"char":58252,"type":"identifier"},{"text":"originFileName","line":1172,"char":58267,"type":"identifier"},{"text":"getName","line":1172,"char":58284,"type":"identifier"},{"text":"Exception","line":1176,"char":58351,"type":"identifier"},{"text":"RegisteredProject","line":1177,"char":58371,"type":"identifier"},{"text":"pm","line":1177,"char":58401,"type":"identifier"},{"text":"getProject","line":1177,"char":58404,"type":"identifier"},{"text":"myProject","line":1178,"char":58438,"type":"identifier"},{"text":"getBaseFolder","line":1178,"char":58448,"type":"identifier"},{"text":"createFolder","line":1178,"char":58464,"type":"identifier"},{"text":"FolderEntry","line":1179,"char":58497,"type":"identifier"},{"text":"myProject","line":1179,"char":58509,"type":"identifier"},{"text":"getBaseFolder","line":1179,"char":58519,"type":"identifier"},{"text":"getChild","line":1179,"char":58535,"type":"identifier"},{"text":"createFile","line":1179,"char":58552,"type":"identifier"},{"text":"getBytes","line":1179,"char":58596,"type":"identifier"},{"text":"Charset","line":1179,"char":58605,"type":"identifier"},{"text":"defaultCharset","line":1179,"char":58613,"type":"identifier"},{"text":"ContainerResponse","line":1180,"char":58641,"type":"identifier"},{"text":"launcher","line":1180,"char":58670,"type":"identifier"},{"text":"service","line":1180,"char":58679,"type":"identifier"},{"text":"POST","line":1180,"char":58687,"type":"identifier"},{"text":"assertEquals","line":1183,"char":58944,"type":"identifier"},{"text":"response","line":1183,"char":58957,"type":"identifier"},{"text":"getStatus","line":1183,"char":58966,"type":"identifier"},{"text":"response","line":1183,"char":58996,"type":"identifier"},{"text":"getEntity","line":1183,"char":59005,"type":"identifier"},{"text":"assertEquals","line":1184,"char":59027,"type":"identifier"},{"text":"response","line":1184,"char":59040,"type":"identifier"},{"text":"getHttpHeaders","line":1184,"char":59049,"type":"identifier"},{"text":"getFirst","line":1184,"char":59066,"type":"identifier"},{"text":"URI","line":1185,"char":59109,"type":"identifier"},{"text":"create","line":1185,"char":59113,"type":"identifier"},{"text":"assertNotNull","line":1186,"char":59198,"type":"identifier"},{"text":"myProject","line":1186,"char":59212,"type":"identifier"},{"text":"getBaseFolder","line":1186,"char":59222,"type":"identifier"},{"text":"getChild","line":1186,"char":59238,"type":"identifier"},{"text":"Assert","line":1187,"char":59282,"type":"identifier"},{"text":"assertNull","line":1187,"char":59289,"type":"identifier"},{"text":"myProject","line":1187,"char":59300,"type":"identifier"},{"text":"getBaseFolder","line":1187,"char":59310,"type":"identifier"},{"text":"getChild","line":1187,"char":59326,"type":"identifier"},{"text":"Exception","line":1191,"char":59425,"type":"identifier"},{"text":"RegisteredProject","line":1192,"char":59445,"type":"identifier"},{"text":"pm","line":1192,"char":59475,"type":"identifier"},{"text":"getProject","line":1192,"char":59478,"type":"identifier"},{"text":"myProject","line":1193,"char":59512,"type":"identifier"},{"text":"getBaseFolder","line":1193,"char":59522,"type":"identifier"},{"text":"createFolder","line":1193,"char":59538,"type":"identifier"},{"text":"FolderEntry","line":1194,"char":59571,"type":"identifier"},{"text":"myProject","line":1194,"char":59583,"type":"identifier"},{"text":"getBaseFolder","line":1194,"char":59593,"type":"identifier"},{"text":"getChild","line":1194,"char":59609,"type":"identifier"},{"text":"createFile","line":1194,"char":59626,"type":"identifier"},{"text":"getBytes","line":1194,"char":59670,"type":"identifier"},{"text":"Charset","line":1194,"char":59679,"type":"identifier"},{"text":"defaultCharset","line":1194,"char":59687,"type":"identifier"},{"text":"String","line":1197,"char":59758,"type":"identifier"},{"text":"Map","line":1199,"char":59817,"type":"identifier"},{"text":"String","line":1199,"char":59821,"type":"identifier"},{"text":"List","line":1199,"char":59829,"type":"identifier"},{"text":"String","line":1199,"char":59834,"type":"identifier"},{"text":"HashMap","line":1199,"char":59857,"type":"identifier"},{"text":"headers","line":1200,"char":59878,"type":"identifier"},{"text":"put","line":1200,"char":59886,"type":"identifier"},{"text":"CONTENT_TYPE","line":1200,"char":59890,"type":"identifier"},{"text":"singletonList","line":1200,"char":59904,"type":"identifier"},{"text":"APPLICATION_JSON","line":1200,"char":59918,"type":"identifier"},{"text":"MoveOptions","line":1202,"char":59947,"type":"identifier"},{"text":"DtoFactory","line":1202,"char":59972,"type":"identifier"},{"text":"getInstance","line":1202,"char":59983,"type":"identifier"},{"text":"createDto","line":1202,"char":59997,"type":"identifier"},{"text":"MoveOptions","line":1202,"char":60007,"type":"identifier"},{"text":"descriptor","line":1203,"char":60035,"type":"identifier"},{"text":"setName","line":1203,"char":60046,"type":"identifier"},{"text":"destinationName","line":1203,"char":60054,"type":"identifier"},{"text":"descriptor","line":1204,"char":60080,"type":"identifier"},{"text":"setOverWrite","line":1204,"char":60091,"type":"identifier"},{"text":"ContainerResponse","line":1206,"char":60121,"type":"identifier"},{"text":"launcher","line":1206,"char":60150,"type":"identifier"},{"text":"service","line":1206,"char":60159,"type":"identifier"},{"text":"POST","line":1206,"char":60167,"type":"identifier"},{"text":"headers","line":1208,"char":60397,"type":"identifier"},{"text":"DtoFactory","line":1209,"char":60460,"type":"identifier"},{"text":"getInstance","line":1209,"char":60471,"type":"identifier"},{"text":"toJson","line":1209,"char":60485,"type":"identifier"},{"text":"descriptor","line":1209,"char":60492,"type":"identifier"},{"text":"getBytes","line":1209,"char":60504,"type":"identifier"},{"text":"Charset","line":1209,"char":60513,"type":"identifier"},{"text":"defaultCharset","line":1209,"char":60521,"type":"identifier"},{"text":"assertEquals","line":1210,"char":60555,"type":"identifier"},{"text":"response","line":1210,"char":60568,"type":"identifier"},{"text":"getStatus","line":1210,"char":60577,"type":"identifier"},{"text":"response","line":1210,"char":60607,"type":"identifier"},{"text":"getEntity","line":1210,"char":60616,"type":"identifier"},{"text":"assertEquals","line":1211,"char":60638,"type":"identifier"},{"text":"response","line":1211,"char":60651,"type":"identifier"},{"text":"getHttpHeaders","line":1211,"char":60660,"type":"identifier"},{"text":"getFirst","line":1211,"char":60677,"type":"identifier"},{"text":"URI","line":1212,"char":60720,"type":"identifier"},{"text":"create","line":1212,"char":60724,"type":"identifier"},{"text":"String","line":1213,"char":60761,"type":"identifier"},{"text":"format","line":1213,"char":60768,"type":"identifier"},{"text":"destinationName","line":1213,"char":60837,"type":"identifier"},{"text":"VirtualFileEntry","line":1214,"char":60865,"type":"identifier"},{"text":"myProject","line":1214,"char":60898,"type":"identifier"},{"text":"getBaseFolder","line":1214,"char":60908,"type":"identifier"},{"text":"getChild","line":1214,"char":60924,"type":"identifier"},{"text":"String","line":1214,"char":60933,"type":"identifier"},{"text":"format","line":1214,"char":60940,"type":"identifier"},{"text":"destinationName","line":1214,"char":60959,"type":"identifier"},{"text":"assertNotNull","line":1215,"char":60986,"type":"identifier"},{"text":"theTargetFile","line":1215,"char":61000,"type":"identifier"},{"text":"Exception","line":1219,"char":61080,"type":"identifier"},{"text":"RegisteredProject","line":1220,"char":61100,"type":"identifier"},{"text":"pm","line":1220,"char":61130,"type":"identifier"},{"text":"getProject","line":1220,"char":61133,"type":"identifier"},{"text":"myProject","line":1221,"char":61167,"type":"identifier"},{"text":"getBaseFolder","line":1221,"char":61177,"type":"identifier"},{"text":"createFolder","line":1221,"char":61193,"type":"identifier"},{"text":"FolderEntry","line":1222,"char":61224,"type":"identifier"},{"text":"myProject","line":1222,"char":61236,"type":"identifier"},{"text":"getBaseFolder","line":1222,"char":61246,"type":"identifier"},{"text":"getChild","line":1222,"char":61262,"type":"identifier"},{"text":"createFile","line":1222,"char":61279,"type":"identifier"},{"text":"getBytes","line":1222,"char":61323,"type":"identifier"},{"text":"Charset","line":1222,"char":61332,"type":"identifier"},{"text":"defaultCharset","line":1222,"char":61340,"type":"identifier"},{"text":"String","line":1225,"char":61411,"type":"identifier"},{"text":"Map","line":1227,"char":61470,"type":"identifier"},{"text":"String","line":1227,"char":61474,"type":"identifier"},{"text":"List","line":1227,"char":61482,"type":"identifier"},{"text":"String","line":1227,"char":61487,"type":"identifier"},{"text":"HashMap","line":1227,"char":61510,"type":"identifier"},{"text":"headers","line":1228,"char":61531,"type":"identifier"},{"text":"put","line":1228,"char":61539,"type":"identifier"},{"text":"CONTENT_TYPE","line":1228,"char":61543,"type":"identifier"},{"text":"singletonList","line":1228,"char":61557,"type":"identifier"},{"text":"APPLICATION_JSON","line":1228,"char":61571,"type":"identifier"},{"text":"MoveOptions","line":1230,"char":61600,"type":"identifier"},{"text":"DtoFactory","line":1230,"char":61625,"type":"identifier"},{"text":"getInstance","line":1230,"char":61636,"type":"identifier"},{"text":"createDto","line":1230,"char":61650,"type":"identifier"},{"text":"MoveOptions","line":1230,"char":61660,"type":"identifier"},{"text":"descriptor","line":1231,"char":61688,"type":"identifier"},{"text":"setName","line":1231,"char":61699,"type":"identifier"},{"text":"destinationName","line":1231,"char":61707,"type":"identifier"},{"text":"descriptor","line":1232,"char":61733,"type":"identifier"},{"text":"setOverWrite","line":1232,"char":61744,"type":"identifier"},{"text":"ContainerResponse","line":1234,"char":61774,"type":"identifier"},{"text":"launcher","line":1234,"char":61803,"type":"identifier"},{"text":"service","line":1234,"char":61812,"type":"identifier"},{"text":"POST","line":1234,"char":61820,"type":"identifier"},{"text":"headers","line":1236,"char":62029,"type":"identifier"},{"text":"DtoFactory","line":1237,"char":62092,"type":"identifier"},{"text":"getInstance","line":1237,"char":62103,"type":"identifier"},{"text":"toJson","line":1237,"char":62117,"type":"identifier"},{"text":"descriptor","line":1237,"char":62124,"type":"identifier"},{"text":"getBytes","line":1237,"char":62136,"type":"identifier"},{"text":"Charset","line":1237,"char":62145,"type":"identifier"},{"text":"defaultCharset","line":1237,"char":62153,"type":"identifier"},{"text":"assertEquals","line":1238,"char":62187,"type":"identifier"},{"text":"response","line":1238,"char":62200,"type":"identifier"},{"text":"getStatus","line":1238,"char":62209,"type":"identifier"},{"text":"response","line":1238,"char":62239,"type":"identifier"},{"text":"getEntity","line":1238,"char":62248,"type":"identifier"},{"text":"assertEquals","line":1239,"char":62270,"type":"identifier"},{"text":"response","line":1239,"char":62283,"type":"identifier"},{"text":"getHttpHeaders","line":1239,"char":62292,"type":"identifier"},{"text":"getFirst","line":1239,"char":62309,"type":"identifier"},{"text":"URI","line":1240,"char":62352,"type":"identifier"},{"text":"create","line":1240,"char":62356,"type":"identifier"},{"text":"String","line":1241,"char":62393,"type":"identifier"},{"text":"format","line":1241,"char":62400,"type":"identifier"},{"text":"destinationName","line":1241,"char":62467,"type":"identifier"},{"text":"VirtualFileEntry","line":1242,"char":62495,"type":"identifier"},{"text":"myProject","line":1242,"char":62528,"type":"identifier"},{"text":"getBaseFolder","line":1242,"char":62538,"type":"identifier"},{"text":"getChild","line":1242,"char":62554,"type":"identifier"},{"text":"String","line":1242,"char":62563,"type":"identifier"},{"text":"format","line":1242,"char":62570,"type":"identifier"},{"text":"destinationName","line":1242,"char":62587,"type":"identifier"},{"text":"assertNotNull","line":1243,"char":62614,"type":"identifier"},{"text":"theTargetFile","line":1243,"char":62628,"type":"identifier"},{"text":"Exception","line":1247,"char":62728,"type":"identifier"},{"text":"RegisteredProject","line":1248,"char":62748,"type":"identifier"},{"text":"pm","line":1248,"char":62778,"type":"identifier"},{"text":"getProject","line":1248,"char":62781,"type":"identifier"},{"text":"myProject","line":1249,"char":62815,"type":"identifier"},{"text":"getBaseFolder","line":1249,"char":62825,"type":"identifier"},{"text":"createFolder","line":1249,"char":62841,"type":"identifier"},{"text":"String","line":1252,"char":62895,"type":"identifier"},{"text":"String","line":1253,"char":62939,"type":"identifier"},{"text":"String","line":1256,"char":63021,"type":"identifier"},{"text":"String","line":1257,"char":63074,"type":"identifier"},{"text":"FolderEntry","line":1259,"char":63137,"type":"identifier"},{"text":"myProject","line":1259,"char":63149,"type":"identifier"},{"text":"getBaseFolder","line":1259,"char":63159,"type":"identifier"},{"text":"getChild","line":1259,"char":63175,"type":"identifier"},{"text":"createFile","line":1259,"char":63192,"type":"identifier"},{"text":"originFileName","line":1259,"char":63203,"type":"identifier"},{"text":"originContent","line":1259,"char":63219,"type":"identifier"},{"text":"getBytes","line":1259,"char":63233,"type":"identifier"},{"text":"Charset","line":1259,"char":63242,"type":"identifier"},{"text":"defaultCharset","line":1259,"char":63250,"type":"identifier"},{"text":"FolderEntry","line":1260,"char":63280,"type":"identifier"},{"text":"myProject","line":1260,"char":63292,"type":"identifier"},{"text":"getBaseFolder","line":1260,"char":63302,"type":"identifier"},{"text":"getChild","line":1260,"char":63318,"type":"identifier"},{"text":"createFile","line":1260,"char":63337,"type":"identifier"},{"text":"destinationFileName","line":1260,"char":63348,"type":"identifier"},{"text":"overwrittenContent","line":1260,"char":63369,"type":"identifier"},{"text":"getBytes","line":1260,"char":63388,"type":"identifier"},{"text":"Charset","line":1260,"char":63397,"type":"identifier"},{"text":"defaultCharset","line":1260,"char":63405,"type":"identifier"},{"text":"Map","line":1262,"char":63434,"type":"identifier"},{"text":"String","line":1262,"char":63438,"type":"identifier"},{"text":"List","line":1262,"char":63446,"type":"identifier"},{"text":"String","line":1262,"char":63451,"type":"identifier"},{"text":"HashMap","line":1262,"char":63474,"type":"identifier"},{"text":"headers","line":1263,"char":63495,"type":"identifier"},{"text":"put","line":1263,"char":63503,"type":"identifier"},{"text":"CONTENT_TYPE","line":1263,"char":63507,"type":"identifier"},{"text":"singletonList","line":1263,"char":63521,"type":"identifier"},{"text":"APPLICATION_JSON","line":1263,"char":63535,"type":"identifier"},{"text":"MoveOptions","line":1265,"char":63564,"type":"identifier"},{"text":"DtoFactory","line":1265,"char":63589,"type":"identifier"},{"text":"getInstance","line":1265,"char":63600,"type":"identifier"},{"text":"createDto","line":1265,"char":63614,"type":"identifier"},{"text":"MoveOptions","line":1265,"char":63624,"type":"identifier"},{"text":"descriptor","line":1266,"char":63652,"type":"identifier"},{"text":"setName","line":1266,"char":63663,"type":"identifier"},{"text":"destinationFileName","line":1266,"char":63671,"type":"identifier"},{"text":"descriptor","line":1267,"char":63701,"type":"identifier"},{"text":"setOverWrite","line":1267,"char":63712,"type":"identifier"},{"text":"ContainerResponse","line":1269,"char":63741,"type":"identifier"},{"text":"launcher","line":1269,"char":63770,"type":"identifier"},{"text":"service","line":1269,"char":63779,"type":"identifier"},{"text":"POST","line":1269,"char":63787,"type":"identifier"},{"text":"originFileName","line":1270,"char":63906,"type":"identifier"},{"text":"headers","line":1272,"char":64085,"type":"identifier"},{"text":"DtoFactory","line":1273,"char":64148,"type":"identifier"},{"text":"getInstance","line":1273,"char":64159,"type":"identifier"},{"text":"toJson","line":1273,"char":64173,"type":"identifier"},{"text":"descriptor","line":1273,"char":64180,"type":"identifier"},{"text":"getBytes","line":1273,"char":64192,"type":"identifier"},{"text":"Charset","line":1273,"char":64201,"type":"identifier"},{"text":"defaultCharset","line":1273,"char":64209,"type":"identifier"},{"text":"assertEquals","line":1274,"char":64243,"type":"identifier"},{"text":"response","line":1274,"char":64256,"type":"identifier"},{"text":"getStatus","line":1274,"char":64265,"type":"identifier"},{"text":"response","line":1274,"char":64295,"type":"identifier"},{"text":"getEntity","line":1274,"char":64304,"type":"identifier"},{"text":"assertEquals","line":1275,"char":64326,"type":"identifier"},{"text":"response","line":1275,"char":64339,"type":"identifier"},{"text":"getHttpHeaders","line":1275,"char":64348,"type":"identifier"},{"text":"getFirst","line":1275,"char":64365,"type":"identifier"},{"text":"URI","line":1276,"char":64408,"type":"identifier"},{"text":"create","line":1276,"char":64412,"type":"identifier"},{"text":"destinationFileName","line":1276,"char":64480,"type":"identifier"},{"text":"assertNotNull","line":1277,"char":64511,"type":"identifier"},{"text":"myProject","line":1277,"char":64525,"type":"identifier"},{"text":"getBaseFolder","line":1277,"char":64535,"type":"identifier"},{"text":"getChild","line":1277,"char":64551,"type":"identifier"},{"text":"destinationFileName","line":1277,"char":64571,"type":"identifier"},{"text":"Scanner","line":1279,"char":64610,"type":"identifier"},{"text":"String","line":1280,"char":64653,"type":"identifier"},{"text":"inputStreamScanner","line":1283,"char":64720,"type":"identifier"},{"text":"Scanner","line":1283,"char":64745,"type":"identifier"},{"text":"myProject","line":1284,"char":64774,"type":"identifier"},{"text":"getBaseFolder","line":1284,"char":64784,"type":"identifier"},{"text":"getChild","line":1284,"char":64800,"type":"identifier"},{"text":"destinationFileName","line":1284,"char":64820,"type":"identifier"},{"text":"getVirtualFile","line":1284,"char":64841,"type":"identifier"},{"text":"getContent","line":1284,"char":64858,"type":"identifier"},{"text":"theFirstLineFromDestinationFile","line":1285,"char":64885,"type":"identifier"},{"text":"inputStreamScanner","line":1285,"char":64919,"type":"identifier"},{"text":"nextLine","line":1285,"char":64938,"type":"identifier"},{"text":"assertEquals","line":1287,"char":65028,"type":"identifier"},{"text":"theFirstLineFromDestinationFile","line":1287,"char":65041,"type":"identifier"},{"text":"originContent","line":1287,"char":65074,"type":"identifier"},{"text":"ForbiddenException","line":1288,"char":65107,"type":"identifier"},{"text":"ServerException","line":1288,"char":65128,"type":"identifier"},{"text":"e","line":1288,"char":65144,"type":"identifier"},{"text":"Assert","line":1289,"char":65161,"type":"identifier"},{"text":"fail","line":1289,"char":65168,"type":"identifier"},{"text":"e","line":1289,"char":65173,"type":"identifier"},{"text":"getMessage","line":1289,"char":65175,"type":"identifier"},{"text":"inputStreamScanner","line":1291,"char":65226,"type":"identifier"},{"text":"inputStreamScanner","line":1292,"char":65272,"type":"identifier"},{"text":"close","line":1292,"char":65291,"type":"identifier"},{"text":"Exception","line":1298,"char":65381,"type":"identifier"},{"text":"RegisteredProject","line":1299,"char":65401,"type":"identifier"},{"text":"pm","line":1299,"char":65431,"type":"identifier"},{"text":"getProject","line":1299,"char":65434,"type":"identifier"},{"text":"myProject","line":1300,"char":65468,"type":"identifier"},{"text":"getBaseFolder","line":1300,"char":65478,"type":"identifier"},{"text":"createFolder","line":1300,"char":65494,"type":"identifier"},{"text":"FolderEntry","line":1301,"char":65527,"type":"identifier"},{"text":"myProject","line":1301,"char":65539,"type":"identifier"},{"text":"getBaseFolder","line":1301,"char":65549,"type":"identifier"},{"text":"getChild","line":1301,"char":65565,"type":"identifier"},{"text":"createFile","line":1301,"char":65584,"type":"identifier"},{"text":"getBytes","line":1301,"char":65628,"type":"identifier"},{"text":"Charset","line":1301,"char":65637,"type":"identifier"},{"text":"defaultCharset","line":1301,"char":65645,"type":"identifier"},{"text":"ContainerResponse","line":1302,"char":65673,"type":"identifier"},{"text":"launcher","line":1302,"char":65702,"type":"identifier"},{"text":"service","line":1302,"char":65711,"type":"identifier"},{"text":"POST","line":1302,"char":65719,"type":"identifier"},{"text":"assertEquals","line":1305,"char":65965,"type":"identifier"},{"text":"response","line":1305,"char":65978,"type":"identifier"},{"text":"getStatus","line":1305,"char":65987,"type":"identifier"},{"text":"response","line":1305,"char":66017,"type":"identifier"},{"text":"getEntity","line":1305,"char":66026,"type":"identifier"},{"text":"assertEquals","line":1306,"char":66048,"type":"identifier"},{"text":"response","line":1306,"char":66061,"type":"identifier"},{"text":"getHttpHeaders","line":1306,"char":66070,"type":"identifier"},{"text":"getFirst","line":1306,"char":66087,"type":"identifier"},{"text":"URI","line":1307,"char":66130,"type":"identifier"},{"text":"create","line":1307,"char":66134,"type":"identifier"},{"text":"assertNotNull","line":1308,"char":66212,"type":"identifier"},{"text":"myProject","line":1308,"char":66226,"type":"identifier"},{"text":"getBaseFolder","line":1308,"char":66236,"type":"identifier"},{"text":"getChild","line":1308,"char":66252,"type":"identifier"},{"text":"Assert","line":1309,"char":66287,"type":"identifier"},{"text":"assertNull","line":1309,"char":66294,"type":"identifier"},{"text":"myProject","line":1309,"char":66305,"type":"identifier"},{"text":"getBaseFolder","line":1309,"char":66315,"type":"identifier"},{"text":"getChild","line":1309,"char":66331,"type":"identifier"},{"text":"Assert","line":1310,"char":66368,"type":"identifier"},{"text":"assertNull","line":1310,"char":66375,"type":"identifier"},{"text":"myProject","line":1310,"char":66386,"type":"identifier"},{"text":"getBaseFolder","line":1310,"char":66396,"type":"identifier"},{"text":"getChild","line":1310,"char":66412,"type":"identifier"},{"text":"Exception","line":1314,"char":66499,"type":"identifier"},{"text":"RegisteredProject","line":1315,"char":66519,"type":"identifier"},{"text":"pm","line":1315,"char":66549,"type":"identifier"},{"text":"getProject","line":1315,"char":66552,"type":"identifier"},{"text":"myProject","line":1316,"char":66586,"type":"identifier"},{"text":"getBaseFolder","line":1316,"char":66596,"type":"identifier"},{"text":"createFolder","line":1316,"char":66612,"type":"identifier"},{"text":"FolderEntry","line":1317,"char":66645,"type":"identifier"},{"text":"myProject","line":1317,"char":66657,"type":"identifier"},{"text":"getBaseFolder","line":1317,"char":66667,"type":"identifier"},{"text":"getChild","line":1317,"char":66683,"type":"identifier"},{"text":"createFile","line":1317,"char":66700,"type":"identifier"},{"text":"getBytes","line":1317,"char":66744,"type":"identifier"},{"text":"Charset","line":1317,"char":66753,"type":"identifier"},{"text":"defaultCharset","line":1317,"char":66761,"type":"identifier"},{"text":"String","line":1320,"char":66827,"type":"identifier"},{"text":"Map","line":1322,"char":66876,"type":"identifier"},{"text":"String","line":1322,"char":66880,"type":"identifier"},{"text":"List","line":1322,"char":66888,"type":"identifier"},{"text":"String","line":1322,"char":66893,"type":"identifier"},{"text":"HashMap","line":1322,"char":66916,"type":"identifier"},{"text":"headers","line":1323,"char":66937,"type":"identifier"},{"text":"put","line":1323,"char":66945,"type":"identifier"},{"text":"CONTENT_TYPE","line":1323,"char":66949,"type":"identifier"},{"text":"singletonList","line":1323,"char":66963,"type":"identifier"},{"text":"APPLICATION_JSON","line":1323,"char":66977,"type":"identifier"},{"text":"MoveOptions","line":1325,"char":67006,"type":"identifier"},{"text":"DtoFactory","line":1325,"char":67031,"type":"identifier"},{"text":"getInstance","line":1325,"char":67042,"type":"identifier"},{"text":"createDto","line":1325,"char":67056,"type":"identifier"},{"text":"MoveOptions","line":1325,"char":67066,"type":"identifier"},{"text":"descriptor","line":1326,"char":67094,"type":"identifier"},{"text":"setName","line":1326,"char":67105,"type":"identifier"},{"text":"renamedFolder","line":1326,"char":67113,"type":"identifier"},{"text":"descriptor","line":1327,"char":67137,"type":"identifier"},{"text":"setOverWrite","line":1327,"char":67148,"type":"identifier"},{"text":"ContainerResponse","line":1329,"char":67178,"type":"identifier"},{"text":"launcher","line":1329,"char":67207,"type":"identifier"},{"text":"service","line":1329,"char":67216,"type":"identifier"},{"text":"POST","line":1329,"char":67224,"type":"identifier"},{"text":"headers","line":1331,"char":67445,"type":"identifier"},{"text":"DtoFactory","line":1332,"char":67508,"type":"identifier"},{"text":"getInstance","line":1332,"char":67519,"type":"identifier"},{"text":"toJson","line":1332,"char":67533,"type":"identifier"},{"text":"descriptor","line":1332,"char":67540,"type":"identifier"},{"text":"getBytes","line":1332,"char":67552,"type":"identifier"},{"text":"Charset","line":1332,"char":67561,"type":"identifier"},{"text":"defaultCharset","line":1332,"char":67569,"type":"identifier"},{"text":"assertEquals","line":1333,"char":67603,"type":"identifier"},{"text":"response","line":1333,"char":67616,"type":"identifier"},{"text":"getStatus","line":1333,"char":67625,"type":"identifier"},{"text":"response","line":1333,"char":67655,"type":"identifier"},{"text":"getEntity","line":1333,"char":67664,"type":"identifier"},{"text":"assertEquals","line":1334,"char":67686,"type":"identifier"},{"text":"response","line":1334,"char":67699,"type":"identifier"},{"text":"getHttpHeaders","line":1334,"char":67708,"type":"identifier"},{"text":"getFirst","line":1334,"char":67725,"type":"identifier"},{"text":"URI","line":1335,"char":67768,"type":"identifier"},{"text":"create","line":1335,"char":67772,"type":"identifier"},{"text":"String","line":1336,"char":67809,"type":"identifier"},{"text":"format","line":1336,"char":67816,"type":"identifier"},{"text":"renamedFolder","line":1336,"char":67889,"type":"identifier"},{"text":"assertNotNull","line":1337,"char":67915,"type":"identifier"},{"text":"myProject","line":1337,"char":67929,"type":"identifier"},{"text":"getBaseFolder","line":1337,"char":67939,"type":"identifier"},{"text":"getChild","line":1337,"char":67955,"type":"identifier"},{"text":"String","line":1337,"char":67964,"type":"identifier"},{"text":"format","line":1337,"char":67971,"type":"identifier"},{"text":"renamedFolder","line":1337,"char":67999,"type":"identifier"},{"text":"Exception","line":1341,"char":68076,"type":"identifier"},{"text":"RegisteredProject","line":1342,"char":68096,"type":"identifier"},{"text":"pm","line":1342,"char":68126,"type":"identifier"},{"text":"getProject","line":1342,"char":68129,"type":"identifier"},{"text":"myProject","line":1343,"char":68163,"type":"identifier"},{"text":"getBaseFolder","line":1343,"char":68173,"type":"identifier"},{"text":"createFolder","line":1343,"char":68189,"type":"identifier"},{"text":"FolderEntry","line":1344,"char":68220,"type":"identifier"},{"text":"myProject","line":1344,"char":68232,"type":"identifier"},{"text":"getBaseFolder","line":1344,"char":68242,"type":"identifier"},{"text":"getChild","line":1344,"char":68258,"type":"identifier"},{"text":"createFile","line":1344,"char":68275,"type":"identifier"},{"text":"getBytes","line":1344,"char":68319,"type":"identifier"},{"text":"Charset","line":1344,"char":68328,"type":"identifier"},{"text":"defaultCharset","line":1344,"char":68336,"type":"identifier"},{"text":"String","line":1347,"char":68402,"type":"identifier"},{"text":"Map","line":1349,"char":68451,"type":"identifier"},{"text":"String","line":1349,"char":68455,"type":"identifier"},{"text":"List","line":1349,"char":68463,"type":"identifier"},{"text":"String","line":1349,"char":68468,"type":"identifier"},{"text":"HashMap","line":1349,"char":68491,"type":"identifier"},{"text":"headers","line":1350,"char":68512,"type":"identifier"},{"text":"put","line":1350,"char":68520,"type":"identifier"},{"text":"CONTENT_TYPE","line":1350,"char":68524,"type":"identifier"},{"text":"singletonList","line":1350,"char":68538,"type":"identifier"},{"text":"APPLICATION_JSON","line":1350,"char":68552,"type":"identifier"},{"text":"MoveOptions","line":1352,"char":68581,"type":"identifier"},{"text":"DtoFactory","line":1352,"char":68606,"type":"identifier"},{"text":"getInstance","line":1352,"char":68617,"type":"identifier"},{"text":"createDto","line":1352,"char":68631,"type":"identifier"},{"text":"MoveOptions","line":1352,"char":68641,"type":"identifier"},{"text":"descriptor","line":1353,"char":68669,"type":"identifier"},{"text":"setName","line":1353,"char":68680,"type":"identifier"},{"text":"renamedFolder","line":1353,"char":68688,"type":"identifier"},{"text":"descriptor","line":1354,"char":68712,"type":"identifier"},{"text":"setOverWrite","line":1354,"char":68723,"type":"identifier"},{"text":"ContainerResponse","line":1356,"char":68753,"type":"identifier"},{"text":"launcher","line":1356,"char":68782,"type":"identifier"},{"text":"service","line":1356,"char":68791,"type":"identifier"},{"text":"POST","line":1356,"char":68799,"type":"identifier"},{"text":"headers","line":1358,"char":68999,"type":"identifier"},{"text":"DtoFactory","line":1359,"char":69062,"type":"identifier"},{"text":"getInstance","line":1359,"char":69073,"type":"identifier"},{"text":"toJson","line":1359,"char":69087,"type":"identifier"},{"text":"descriptor","line":1359,"char":69094,"type":"identifier"},{"text":"getBytes","line":1359,"char":69106,"type":"identifier"},{"text":"Charset","line":1359,"char":69115,"type":"identifier"},{"text":"defaultCharset","line":1359,"char":69123,"type":"identifier"},{"text":"assertEquals","line":1360,"char":69157,"type":"identifier"},{"text":"response","line":1360,"char":69170,"type":"identifier"},{"text":"getStatus","line":1360,"char":69179,"type":"identifier"},{"text":"response","line":1360,"char":69209,"type":"identifier"},{"text":"getEntity","line":1360,"char":69218,"type":"identifier"},{"text":"assertEquals","line":1361,"char":69240,"type":"identifier"},{"text":"response","line":1361,"char":69253,"type":"identifier"},{"text":"getHttpHeaders","line":1361,"char":69262,"type":"identifier"},{"text":"getFirst","line":1361,"char":69279,"type":"identifier"},{"text":"URI","line":1362,"char":69322,"type":"identifier"},{"text":"create","line":1362,"char":69326,"type":"identifier"},{"text":"String","line":1363,"char":69363,"type":"identifier"},{"text":"format","line":1363,"char":69370,"type":"identifier"},{"text":"renamedFolder","line":1363,"char":69439,"type":"identifier"},{"text":"assertNotNull","line":1364,"char":69465,"type":"identifier"},{"text":"myProject","line":1364,"char":69479,"type":"identifier"},{"text":"getBaseFolder","line":1364,"char":69489,"type":"identifier"},{"text":"getChild","line":1364,"char":69505,"type":"identifier"},{"text":"String","line":1364,"char":69514,"type":"identifier"},{"text":"format","line":1364,"char":69521,"type":"identifier"},{"text":"renamedFolder","line":1364,"char":69545,"type":"identifier"},{"text":"Exception","line":1368,"char":69642,"type":"identifier"},{"text":"RegisteredProject","line":1369,"char":69662,"type":"identifier"},{"text":"pm","line":1369,"char":69692,"type":"identifier"},{"text":"getProject","line":1369,"char":69695,"type":"identifier"},{"text":"myProject","line":1370,"char":69729,"type":"identifier"},{"text":"getBaseFolder","line":1370,"char":69739,"type":"identifier"},{"text":"createFolder","line":1370,"char":69755,"type":"identifier"},{"text":"String","line":1373,"char":69809,"type":"identifier"},{"text":"String","line":1374,"char":69853,"type":"identifier"},{"text":"String","line":1377,"char":69935,"type":"identifier"},{"text":"String","line":1378,"char":69988,"type":"identifier"},{"text":"String","line":1381,"char":70085,"type":"identifier"},{"text":"FolderEntry","line":1383,"char":70136,"type":"identifier"},{"text":"myProject","line":1383,"char":70148,"type":"identifier"},{"text":"getBaseFolder","line":1383,"char":70158,"type":"identifier"},{"text":"getChild","line":1383,"char":70174,"type":"identifier"},{"text":"createFile","line":1383,"char":70191,"type":"identifier"},{"text":"originFileName","line":1383,"char":70202,"type":"identifier"},{"text":"originContent","line":1383,"char":70218,"type":"identifier"},{"text":"getBytes","line":1383,"char":70232,"type":"identifier"},{"text":"Charset","line":1383,"char":70241,"type":"identifier"},{"text":"defaultCharset","line":1383,"char":70249,"type":"identifier"},{"text":"FolderEntry","line":1384,"char":70279,"type":"identifier"},{"text":"myProject","line":1384,"char":70291,"type":"identifier"},{"text":"getBaseFolder","line":1384,"char":70301,"type":"identifier"},{"text":"getChild","line":1384,"char":70317,"type":"identifier"},{"text":"createFile","line":1384,"char":70336,"type":"identifier"},{"text":"destinationFileName","line":1384,"char":70347,"type":"identifier"},{"text":"overwritenContent","line":1384,"char":70368,"type":"identifier"},{"text":"getBytes","line":1384,"char":70386,"type":"identifier"},{"text":"Charset","line":1384,"char":70395,"type":"identifier"},{"text":"defaultCharset","line":1384,"char":70403,"type":"identifier"},{"text":"Map","line":1386,"char":70432,"type":"identifier"},{"text":"String","line":1386,"char":70436,"type":"identifier"},{"text":"List","line":1386,"char":70444,"type":"identifier"},{"text":"String","line":1386,"char":70449,"type":"identifier"},{"text":"HashMap","line":1386,"char":70472,"type":"identifier"},{"text":"headers","line":1387,"char":70493,"type":"identifier"},{"text":"put","line":1387,"char":70501,"type":"identifier"},{"text":"CONTENT_TYPE","line":1387,"char":70505,"type":"identifier"},{"text":"singletonList","line":1387,"char":70519,"type":"identifier"},{"text":"APPLICATION_JSON","line":1387,"char":70533,"type":"identifier"},{"text":"MoveOptions","line":1389,"char":70562,"type":"identifier"},{"text":"DtoFactory","line":1389,"char":70587,"type":"identifier"},{"text":"getInstance","line":1389,"char":70598,"type":"identifier"},{"text":"createDto","line":1389,"char":70612,"type":"identifier"},{"text":"MoveOptions","line":1389,"char":70622,"type":"identifier"},{"text":"descriptor","line":1390,"char":70650,"type":"identifier"},{"text":"setName","line":1390,"char":70661,"type":"identifier"},{"text":"renamedFolder","line":1390,"char":70669,"type":"identifier"},{"text":"descriptor","line":1391,"char":70693,"type":"identifier"},{"text":"setOverWrite","line":1391,"char":70704,"type":"identifier"},{"text":"ContainerResponse","line":1393,"char":70733,"type":"identifier"},{"text":"launcher","line":1393,"char":70762,"type":"identifier"},{"text":"service","line":1393,"char":70771,"type":"identifier"},{"text":"POST","line":1393,"char":70779,"type":"identifier"},{"text":"headers","line":1395,"char":71000,"type":"identifier"},{"text":"DtoFactory","line":1396,"char":71063,"type":"identifier"},{"text":"getInstance","line":1396,"char":71074,"type":"identifier"},{"text":"toJson","line":1396,"char":71088,"type":"identifier"},{"text":"descriptor","line":1396,"char":71095,"type":"identifier"},{"text":"getBytes","line":1396,"char":71107,"type":"identifier"},{"text":"Charset","line":1396,"char":71116,"type":"identifier"},{"text":"defaultCharset","line":1396,"char":71124,"type":"identifier"},{"text":"assertEquals","line":1397,"char":71158,"type":"identifier"},{"text":"response","line":1397,"char":71171,"type":"identifier"},{"text":"getStatus","line":1397,"char":71180,"type":"identifier"},{"text":"response","line":1397,"char":71210,"type":"identifier"},{"text":"getEntity","line":1397,"char":71219,"type":"identifier"},{"text":"assertEquals","line":1398,"char":71241,"type":"identifier"},{"text":"response","line":1398,"char":71254,"type":"identifier"},{"text":"getHttpHeaders","line":1398,"char":71263,"type":"identifier"},{"text":"getFirst","line":1398,"char":71280,"type":"identifier"},{"text":"URI","line":1399,"char":71323,"type":"identifier"},{"text":"create","line":1399,"char":71327,"type":"identifier"},{"text":"String","line":1400,"char":71364,"type":"identifier"},{"text":"format","line":1400,"char":71371,"type":"identifier"},{"text":"renamedFolder","line":1400,"char":71444,"type":"identifier"},{"text":"assertNotNull","line":1401,"char":71470,"type":"identifier"},{"text":"myProject","line":1401,"char":71484,"type":"identifier"},{"text":"getBaseFolder","line":1401,"char":71494,"type":"identifier"},{"text":"getChild","line":1401,"char":71510,"type":"identifier"},{"text":"String","line":1401,"char":71519,"type":"identifier"},{"text":"format","line":1401,"char":71526,"type":"identifier"},{"text":"renamedFolder","line":1401,"char":71554,"type":"identifier"},{"text":"Exception","line":1405,"char":71628,"type":"identifier"},{"text":"RegisteredProject","line":1406,"char":71648,"type":"identifier"},{"text":"pm","line":1406,"char":71678,"type":"identifier"},{"text":"getProject","line":1406,"char":71681,"type":"identifier"},{"text":"myProject","line":1407,"char":71715,"type":"identifier"},{"text":"getBaseFolder","line":1407,"char":71725,"type":"identifier"},{"text":"createFolder","line":1407,"char":71741,"type":"identifier"},{"text":"ByteArrayOutputStream","line":1409,"char":71771,"type":"identifier"},{"text":"ByteArrayOutputStream","line":1409,"char":71804,"type":"identifier"},{"text":"ZipOutputStream","line":1410,"char":71837,"type":"identifier"},{"text":"ZipOutputStream","line":1410,"char":71866,"type":"identifier"},{"text":"bout","line":1410,"char":71882,"type":"identifier"},{"text":"zipOut","line":1411,"char":71897,"type":"identifier"},{"text":"putNextEntry","line":1411,"char":71904,"type":"identifier"},{"text":"ZipEntry","line":1411,"char":71921,"type":"identifier"},{"text":"zipOut","line":1412,"char":71952,"type":"identifier"},{"text":"putNextEntry","line":1412,"char":71959,"type":"identifier"},{"text":"ZipEntry","line":1412,"char":71976,"type":"identifier"},{"text":"zipOut","line":1413,"char":72016,"type":"identifier"},{"text":"write","line":1413,"char":72023,"type":"identifier"},{"text":"getBytes","line":1413,"char":72050,"type":"identifier"},{"text":"Charset","line":1413,"char":72059,"type":"identifier"},{"text":"defaultCharset","line":1413,"char":72067,"type":"identifier"},{"text":"zipOut","line":1414,"char":72095,"type":"identifier"},{"text":"close","line":1414,"char":72102,"type":"identifier"},{"text":"bout","line":1415,"char":72132,"type":"identifier"},{"text":"toByteArray","line":1415,"char":72137,"type":"identifier"},{"text":"Map","line":1416,"char":72160,"type":"identifier"},{"text":"String","line":1416,"char":72164,"type":"identifier"},{"text":"List","line":1416,"char":72172,"type":"identifier"},{"text":"String","line":1416,"char":72177,"type":"identifier"},{"text":"HashMap","line":1416,"char":72200,"type":"identifier"},{"text":"headers","line":1417,"char":72221,"type":"identifier"},{"text":"put","line":1417,"char":72229,"type":"identifier"},{"text":"CONTENT_TYPE","line":1417,"char":72233,"type":"identifier"},{"text":"singletonList","line":1417,"char":72247,"type":"identifier"},{"text":"ExtMediaType","line":1417,"char":72261,"type":"identifier"},{"text":"APPLICATION_ZIP","line":1417,"char":72274,"type":"identifier"},{"text":"ContainerResponse","line":1418,"char":72301,"type":"identifier"},{"text":"launcher","line":1418,"char":72330,"type":"identifier"},{"text":"service","line":1418,"char":72339,"type":"identifier"},{"text":"POST","line":1418,"char":72347,"type":"identifier"},{"text":"String","line":1419,"char":72407,"type":"identifier"},{"text":"format","line":1419,"char":72414,"type":"identifier"},{"text":"headers","line":1420,"char":72564,"type":"identifier"},{"text":"zip","line":1420,"char":72573,"type":"identifier"},{"text":"assertEquals","line":1421,"char":72593,"type":"identifier"},{"text":"response","line":1421,"char":72606,"type":"identifier"},{"text":"getStatus","line":1421,"char":72615,"type":"identifier"},{"text":"response","line":1421,"char":72645,"type":"identifier"},{"text":"getEntity","line":1421,"char":72654,"type":"identifier"},{"text":"assertEquals","line":1422,"char":72676,"type":"identifier"},{"text":"response","line":1422,"char":72689,"type":"identifier"},{"text":"getHttpHeaders","line":1422,"char":72698,"type":"identifier"},{"text":"getFirst","line":1422,"char":72715,"type":"identifier"},{"text":"URI","line":1423,"char":72758,"type":"identifier"},{"text":"create","line":1423,"char":72762,"type":"identifier"},{"text":"assertNotNull","line":1424,"char":72840,"type":"identifier"},{"text":"myProject","line":1424,"char":72854,"type":"identifier"},{"text":"getBaseFolder","line":1424,"char":72864,"type":"identifier"},{"text":"getChild","line":1424,"char":72880,"type":"identifier"},{"text":"Exception","line":1428,"char":72993,"type":"identifier"},{"text":"RegisteredProject","line":1429,"char":73013,"type":"identifier"},{"text":"pm","line":1429,"char":73043,"type":"identifier"},{"text":"getProject","line":1429,"char":73046,"type":"identifier"},{"text":"myProject","line":1430,"char":73080,"type":"identifier"},{"text":"getBaseFolder","line":1430,"char":73090,"type":"identifier"},{"text":"createFolder","line":1430,"char":73106,"type":"identifier"},{"text":"ByteArrayOutputStream","line":1432,"char":73136,"type":"identifier"},{"text":"ByteArrayOutputStream","line":1432,"char":73169,"type":"identifier"},{"text":"ZipOutputStream","line":1433,"char":73202,"type":"identifier"},{"text":"ZipOutputStream","line":1433,"char":73231,"type":"identifier"},{"text":"bout","line":1433,"char":73247,"type":"identifier"},{"text":"zipOut","line":1434,"char":73262,"type":"identifier"},{"text":"putNextEntry","line":1434,"char":73269,"type":"identifier"},{"text":"ZipEntry","line":1434,"char":73286,"type":"identifier"},{"text":"zipOut","line":1435,"char":73317,"type":"identifier"},{"text":"putNextEntry","line":1435,"char":73324,"type":"identifier"},{"text":"ZipEntry","line":1435,"char":73341,"type":"identifier"},{"text":"zipOut","line":1436,"char":73380,"type":"identifier"},{"text":"putNextEntry","line":1436,"char":73387,"type":"identifier"},{"text":"ZipEntry","line":1436,"char":73404,"type":"identifier"},{"text":"zipOut","line":1437,"char":73452,"type":"identifier"},{"text":"write","line":1437,"char":73459,"type":"identifier"},{"text":"getBytes","line":1437,"char":73486,"type":"identifier"},{"text":"Charset","line":1437,"char":73495,"type":"identifier"},{"text":"defaultCharset","line":1437,"char":73503,"type":"identifier"},{"text":"zipOut","line":1438,"char":73531,"type":"identifier"},{"text":"close","line":1438,"char":73538,"type":"identifier"},{"text":"bout","line":1439,"char":73568,"type":"identifier"},{"text":"toByteArray","line":1439,"char":73573,"type":"identifier"},{"text":"Map","line":1440,"char":73596,"type":"identifier"},{"text":"String","line":1440,"char":73600,"type":"identifier"},{"text":"List","line":1440,"char":73608,"type":"identifier"},{"text":"String","line":1440,"char":73613,"type":"identifier"},{"text":"HashMap","line":1440,"char":73636,"type":"identifier"},{"text":"headers","line":1441,"char":73657,"type":"identifier"},{"text":"put","line":1441,"char":73665,"type":"identifier"},{"text":"CONTENT_TYPE","line":1441,"char":73669,"type":"identifier"},{"text":"singletonList","line":1441,"char":73683,"type":"identifier"},{"text":"ExtMediaType","line":1441,"char":73697,"type":"identifier"},{"text":"APPLICATION_ZIP","line":1441,"char":73710,"type":"identifier"},{"text":"ContainerResponse","line":1442,"char":73737,"type":"identifier"},{"text":"launcher","line":1442,"char":73766,"type":"identifier"},{"text":"service","line":1442,"char":73775,"type":"identifier"},{"text":"POST","line":1442,"char":73783,"type":"identifier"},{"text":"headers","line":1444,"char":74006,"type":"identifier"},{"text":"zip","line":1444,"char":74015,"type":"identifier"},{"text":"assertEquals","line":1445,"char":74035,"type":"identifier"},{"text":"response","line":1445,"char":74048,"type":"identifier"},{"text":"getStatus","line":1445,"char":74057,"type":"identifier"},{"text":"response","line":1445,"char":74087,"type":"identifier"},{"text":"getEntity","line":1445,"char":74096,"type":"identifier"},{"text":"assertEquals","line":1446,"char":74118,"type":"identifier"},{"text":"response","line":1446,"char":74131,"type":"identifier"},{"text":"getHttpHeaders","line":1446,"char":74140,"type":"identifier"},{"text":"getFirst","line":1446,"char":74157,"type":"identifier"},{"text":"URI","line":1447,"char":74200,"type":"identifier"},{"text":"create","line":1447,"char":74204,"type":"identifier"},{"text":"assertNotNull","line":1448,"char":74282,"type":"identifier"},{"text":"myProject","line":1448,"char":74296,"type":"identifier"},{"text":"getBaseFolder","line":1448,"char":74306,"type":"identifier"},{"text":"getChild","line":1448,"char":74322,"type":"identifier"},{"text":"assertNotNull","line":1449,"char":74357,"type":"identifier"},{"text":"myProject","line":1449,"char":74371,"type":"identifier"},{"text":"getBaseFolder","line":1449,"char":74381,"type":"identifier"},{"text":"getChild","line":1449,"char":74397,"type":"identifier"},{"text":"assertNotNull","line":1450,"char":74439,"type":"identifier"},{"text":"myProject","line":1450,"char":74453,"type":"identifier"},{"text":"getBaseFolder","line":1450,"char":74463,"type":"identifier"},{"text":"getChild","line":1450,"char":74479,"type":"identifier"},{"text":"Exception","line":1454,"char":74579,"type":"identifier"},{"text":"RegisteredProject","line":1455,"char":74599,"type":"identifier"},{"text":"pm","line":1455,"char":74629,"type":"identifier"},{"text":"getProject","line":1455,"char":74632,"type":"identifier"},{"text":"myProject","line":1456,"char":74666,"type":"identifier"},{"text":"getBaseFolder","line":1456,"char":74676,"type":"identifier"},{"text":"createFolder","line":1456,"char":74692,"type":"identifier"},{"text":"createFile","line":1456,"char":74712,"type":"identifier"},{"text":"getBytes","line":1456,"char":74743,"type":"identifier"},{"text":"Charset","line":1456,"char":74752,"type":"identifier"},{"text":"defaultCharset","line":1456,"char":74760,"type":"identifier"},{"text":"ContainerResponse","line":1457,"char":74788,"type":"identifier"},{"text":"launcher","line":1457,"char":74817,"type":"identifier"},{"text":"service","line":1457,"char":74826,"type":"identifier"},{"text":"GET","line":1457,"char":74834,"type":"identifier"},{"text":"assertEquals","line":1460,"char":75058,"type":"identifier"},{"text":"response","line":1460,"char":75071,"type":"identifier"},{"text":"getStatus","line":1460,"char":75080,"type":"identifier"},{"text":"response","line":1460,"char":75110,"type":"identifier"},{"text":"getEntity","line":1460,"char":75119,"type":"identifier"},{"text":"assertEquals","line":1461,"char":75141,"type":"identifier"},{"text":"response","line":1461,"char":75154,"type":"identifier"},{"text":"getContentType","line":1461,"char":75163,"type":"identifier"},{"text":"toString","line":1461,"char":75180,"type":"identifier"},{"text":"ExtMediaType","line":1461,"char":75192,"type":"identifier"},{"text":"APPLICATION_ZIP","line":1461,"char":75205,"type":"identifier"},{"text":"Exception","line":1466,"char":75316,"type":"identifier"},{"text":"RegisteredProject","line":1467,"char":75336,"type":"identifier"},{"text":"pm","line":1467,"char":75366,"type":"identifier"},{"text":"getProject","line":1467,"char":75369,"type":"identifier"},{"text":"FolderEntry","line":1468,"char":75403,"type":"identifier"},{"text":"myProject","line":1468,"char":75419,"type":"identifier"},{"text":"getBaseFolder","line":1468,"char":75429,"type":"identifier"},{"text":"createFolder","line":1468,"char":75445,"type":"identifier"},{"text":"a","line":1469,"char":75472,"type":"identifier"},{"text":"createFolder","line":1469,"char":75474,"type":"identifier"},{"text":"a","line":1470,"char":75501,"type":"identifier"},{"text":"createFile","line":1470,"char":75503,"type":"identifier"},{"text":"getBytes","line":1470,"char":75533,"type":"identifier"},{"text":"Charset","line":1470,"char":75542,"type":"identifier"},{"text":"defaultCharset","line":1470,"char":75550,"type":"identifier"},{"text":"ContainerResponse","line":1471,"char":75578,"type":"identifier"},{"text":"launcher","line":1471,"char":75607,"type":"identifier"},{"text":"service","line":1471,"char":75616,"type":"identifier"},{"text":"GET","line":1471,"char":75624,"type":"identifier"},{"text":"assertEquals","line":1474,"char":75852,"type":"identifier"},{"text":"response","line":1474,"char":75865,"type":"identifier"},{"text":"getStatus","line":1474,"char":75874,"type":"identifier"},{"text":"response","line":1474,"char":75904,"type":"identifier"},{"text":"getEntity","line":1474,"char":75913,"type":"identifier"},{"text":"List","line":1475,"char":75935,"type":"identifier"},{"text":"ItemReference","line":1475,"char":75940,"type":"identifier"},{"text":"List","line":1475,"char":75965,"type":"identifier"},{"text":"ItemReference","line":1475,"char":75970,"type":"identifier"},{"text":"response","line":1475,"char":75985,"type":"identifier"},{"text":"getEntity","line":1475,"char":75994,"type":"identifier"},{"text":"assertEquals","line":1476,"char":76015,"type":"identifier"},{"text":"result","line":1476,"char":76028,"type":"identifier"},{"text":"size","line":1476,"char":76035,"type":"identifier"},{"text":"Set","line":1477,"char":76055,"type":"identifier"},{"text":"String","line":1477,"char":76059,"type":"identifier"},{"text":"LinkedHashSet","line":1477,"char":76079,"type":"identifier"},{"text":"names","line":1478,"char":76107,"type":"identifier"},{"text":"addAll","line":1478,"char":76113,"type":"identifier"},{"text":"result","line":1478,"char":76120,"type":"identifier"},{"text":"stream","line":1478,"char":76127,"type":"identifier"},{"text":"map","line":1478,"char":76136,"type":"identifier"},{"text":"ItemReference","line":1478,"char":76140,"type":"identifier"},{"text":"getName","line":1478,"char":76155,"type":"identifier"},{"text":"collect","line":1478,"char":76164,"type":"identifier"},{"text":"Collectors","line":1478,"char":76172,"type":"identifier"},{"text":"toList","line":1478,"char":76183,"type":"identifier"},{"text":"Assert","line":1479,"char":76203,"type":"identifier"},{"text":"assertTrue","line":1479,"char":76210,"type":"identifier"},{"text":"names","line":1479,"char":76221,"type":"identifier"},{"text":"contains","line":1479,"char":76227,"type":"identifier"},{"text":"Assert","line":1480,"char":76251,"type":"identifier"},{"text":"assertTrue","line":1480,"char":76258,"type":"identifier"},{"text":"names","line":1480,"char":76269,"type":"identifier"},{"text":"contains","line":1480,"char":76275,"type":"identifier"},{"text":"Exception","line":1485,"char":76387,"type":"identifier"},{"text":"RegisteredProject","line":1486,"char":76407,"type":"identifier"},{"text":"pm","line":1486,"char":76437,"type":"identifier"},{"text":"getProject","line":1486,"char":76440,"type":"identifier"},{"text":"FolderEntry","line":1487,"char":76474,"type":"identifier"},{"text":"myProject","line":1487,"char":76490,"type":"identifier"},{"text":"getBaseFolder","line":1487,"char":76500,"type":"identifier"},{"text":"createFolder","line":1487,"char":76516,"type":"identifier"},{"text":"a","line":1488,"char":76543,"type":"identifier"},{"text":"createFolder","line":1488,"char":76545,"type":"identifier"},{"text":"a","line":1489,"char":76572,"type":"identifier"},{"text":"createFile","line":1489,"char":76574,"type":"identifier"},{"text":"getBytes","line":1489,"char":76604,"type":"identifier"},{"text":"Charset","line":1489,"char":76613,"type":"identifier"},{"text":"defaultCharset","line":1489,"char":76621,"type":"identifier"},{"text":"ContainerResponse","line":1490,"char":76649,"type":"identifier"},{"text":"launcher","line":1490,"char":76678,"type":"identifier"},{"text":"service","line":1490,"char":76687,"type":"identifier"},{"text":"GET","line":1490,"char":76695,"type":"identifier"},{"text":"assertEquals","line":1493,"char":76921,"type":"identifier"},{"text":"response","line":1493,"char":76934,"type":"identifier"},{"text":"getStatus","line":1493,"char":76943,"type":"identifier"},{"text":"response","line":1493,"char":76973,"type":"identifier"},{"text":"getEntity","line":1493,"char":76982,"type":"identifier"},{"text":"ItemReference","line":1495,"char":77005,"type":"identifier"},{"text":"ItemReference","line":1495,"char":77029,"type":"identifier"},{"text":"response","line":1495,"char":77043,"type":"identifier"},{"text":"getEntity","line":1495,"char":77052,"type":"identifier"},{"text":"assertEquals","line":1496,"char":77073,"type":"identifier"},{"text":"result","line":1496,"char":77086,"type":"identifier"},{"text":"getName","line":1496,"char":77093,"type":"identifier"},{"text":"response","line":1498,"char":77119,"type":"identifier"},{"text":"launcher","line":1498,"char":77130,"type":"identifier"},{"text":"service","line":1498,"char":77139,"type":"identifier"},{"text":"GET","line":1498,"char":77147,"type":"identifier"},{"text":"assertEquals","line":1501,"char":77344,"type":"identifier"},{"text":"response","line":1501,"char":77357,"type":"identifier"},{"text":"getStatus","line":1501,"char":77366,"type":"identifier"},{"text":"response","line":1501,"char":77396,"type":"identifier"},{"text":"getEntity","line":1501,"char":77405,"type":"identifier"},{"text":"result","line":1502,"char":77427,"type":"identifier"},{"text":"ItemReference","line":1502,"char":77437,"type":"identifier"},{"text":"response","line":1502,"char":77451,"type":"identifier"},{"text":"getEntity","line":1502,"char":77460,"type":"identifier"},{"text":"assertEquals","line":1503,"char":77481,"type":"identifier"},{"text":"result","line":1503,"char":77494,"type":"identifier"},{"text":"getType","line":1503,"char":77501,"type":"identifier"},{"text":"Exception","line":1508,"char":77654,"type":"identifier"},{"text":"FolderEntry","line":1509,"char":77674,"type":"identifier"},{"text":"pm","line":1509,"char":77690,"type":"identifier"},{"text":"getProjectsRoot","line":1509,"char":77693,"type":"identifier"},{"text":"createFolder","line":1509,"char":77711,"type":"identifier"},{"text":"a","line":1510,"char":77738,"type":"identifier"},{"text":"createFile","line":1510,"char":77740,"type":"identifier"},{"text":"getBytes","line":1510,"char":77770,"type":"identifier"},{"text":"Charset","line":1510,"char":77779,"type":"identifier"},{"text":"defaultCharset","line":1510,"char":77787,"type":"identifier"},{"text":"ContainerResponse","line":1511,"char":77815,"type":"identifier"},{"text":"launcher","line":1511,"char":77844,"type":"identifier"},{"text":"service","line":1511,"char":77853,"type":"identifier"},{"text":"GET","line":1511,"char":77861,"type":"identifier"},{"text":"assertEquals","line":1514,"char":78083,"type":"identifier"},{"text":"response","line":1514,"char":78096,"type":"identifier"},{"text":"getStatus","line":1514,"char":78105,"type":"identifier"},{"text":"response","line":1514,"char":78135,"type":"identifier"},{"text":"getEntity","line":1514,"char":78144,"type":"identifier"},{"text":"ItemReference","line":1515,"char":78166,"type":"identifier"},{"text":"ItemReference","line":1515,"char":78190,"type":"identifier"},{"text":"response","line":1515,"char":78204,"type":"identifier"},{"text":"getEntity","line":1515,"char":78213,"type":"identifier"},{"text":"assertEquals","line":1516,"char":78234,"type":"identifier"},{"text":"result","line":1516,"char":78247,"type":"identifier"},{"text":"getType","line":1516,"char":78254,"type":"identifier"},{"text":"Exception","line":1521,"char":78394,"type":"identifier"},{"text":"ContainerResponse","line":1522,"char":78414,"type":"identifier"},{"text":"launcher","line":1522,"char":78443,"type":"identifier"},{"text":"service","line":1522,"char":78452,"type":"identifier"},{"text":"GET","line":1522,"char":78460,"type":"identifier"},{"text":"assertEquals","line":1525,"char":78694,"type":"identifier"},{"text":"response","line":1525,"char":78707,"type":"identifier"},{"text":"getStatus","line":1525,"char":78716,"type":"identifier"},{"text":"response","line":1525,"char":78746,"type":"identifier"},{"text":"getEntity","line":1525,"char":78755,"type":"identifier"},{"text":"Exception","line":1529,"char":78823,"type":"identifier"},{"text":"RegisteredProject","line":1530,"char":78843,"type":"identifier"},{"text":"pm","line":1530,"char":78873,"type":"identifier"},{"text":"getProject","line":1530,"char":78876,"type":"identifier"},{"text":"FolderEntry","line":1531,"char":78910,"type":"identifier"},{"text":"myProject","line":1531,"char":78926,"type":"identifier"},{"text":"getBaseFolder","line":1531,"char":78936,"type":"identifier"},{"text":"createFolder","line":1531,"char":78952,"type":"identifier"},{"text":"a","line":1532,"char":78979,"type":"identifier"},{"text":"createFolder","line":1532,"char":78981,"type":"identifier"},{"text":"a","line":1533,"char":79010,"type":"identifier"},{"text":"createFolder","line":1533,"char":79012,"type":"identifier"},{"text":"a","line":1534,"char":79041,"type":"identifier"},{"text":"createFile","line":1534,"char":79043,"type":"identifier"},{"text":"getBytes","line":1534,"char":79073,"type":"identifier"},{"text":"Charset","line":1534,"char":79082,"type":"identifier"},{"text":"defaultCharset","line":1534,"char":79090,"type":"identifier"},{"text":"ContainerResponse","line":1535,"char":79118,"type":"identifier"},{"text":"launcher","line":1535,"char":79147,"type":"identifier"},{"text":"service","line":1535,"char":79156,"type":"identifier"},{"text":"GET","line":1535,"char":79164,"type":"identifier"},{"text":"assertEquals","line":1538,"char":79388,"type":"identifier"},{"text":"response","line":1538,"char":79401,"type":"identifier"},{"text":"getStatus","line":1538,"char":79410,"type":"identifier"},{"text":"response","line":1538,"char":79440,"type":"identifier"},{"text":"getEntity","line":1538,"char":79449,"type":"identifier"},{"text":"TreeElement","line":1539,"char":79471,"type":"identifier"},{"text":"TreeElement","line":1539,"char":79491,"type":"identifier"},{"text":"response","line":1539,"char":79503,"type":"identifier"},{"text":"getEntity","line":1539,"char":79512,"type":"identifier"},{"text":"ItemReference","line":1540,"char":79533,"type":"identifier"},{"text":"tree","line":1540,"char":79556,"type":"identifier"},{"text":"getNode","line":1540,"char":79561,"type":"identifier"},{"text":"assertEquals","line":1541,"char":79580,"type":"identifier"},{"text":"a_node","line":1541,"char":79593,"type":"identifier"},{"text":"getName","line":1541,"char":79600,"type":"identifier"},{"text":"validateFolderLinks","line":1542,"char":79625,"type":"identifier"},{"text":"a_node","line":1542,"char":79645,"type":"identifier"},{"text":"List","line":1543,"char":79662,"type":"identifier"},{"text":"TreeElement","line":1543,"char":79667,"type":"identifier"},{"text":"tree","line":1543,"char":79691,"type":"identifier"},{"text":"getChildren","line":1543,"char":79696,"type":"identifier"},{"text":"assertNotNull","line":1544,"char":79719,"type":"identifier"},{"text":"children","line":1544,"char":79733,"type":"identifier"},{"text":"assertEquals","line":1545,"char":79752,"type":"identifier"},{"text":"children","line":1545,"char":79765,"type":"identifier"},{"text":"size","line":1545,"char":79774,"type":"identifier"},{"text":"Set","line":1546,"char":79794,"type":"identifier"},{"text":"String","line":1546,"char":79798,"type":"identifier"},{"text":"LinkedHashSet","line":1546,"char":79818,"type":"identifier"},{"text":"TreeElement","line":1547,"char":79851,"type":"identifier"},{"text":"children","line":1547,"char":79873,"type":"identifier"},{"text":"ItemReference","line":1548,"char":79897,"type":"identifier"},{"text":"subTree","line":1548,"char":79919,"type":"identifier"},{"text":"getNode","line":1548,"char":79927,"type":"identifier"},{"text":"validateFolderLinks","line":1549,"char":79950,"type":"identifier"},{"text":"_node","line":1549,"char":79970,"type":"identifier"},{"text":"names","line":1550,"char":79990,"type":"identifier"},{"text":"add","line":1550,"char":79996,"type":"identifier"},{"text":"_node","line":1550,"char":80000,"type":"identifier"},{"text":"getName","line":1550,"char":80006,"type":"identifier"},{"text":"Assert","line":1551,"char":80030,"type":"identifier"},{"text":"assertTrue","line":1551,"char":80037,"type":"identifier"},{"text":"subTree","line":1551,"char":80048,"type":"identifier"},{"text":"getChildren","line":1551,"char":80056,"type":"identifier"},{"text":"isEmpty","line":1551,"char":80070,"type":"identifier"},{"text":"Assert","line":1553,"char":80122,"type":"identifier"},{"text":"assertTrue","line":1553,"char":80129,"type":"identifier"},{"text":"names","line":1553,"char":80140,"type":"identifier"},{"text":"contains","line":1553,"char":80146,"type":"identifier"},{"text":"Assert","line":1554,"char":80170,"type":"identifier"},{"text":"assertTrue","line":1554,"char":80177,"type":"identifier"},{"text":"names","line":1554,"char":80188,"type":"identifier"},{"text":"contains","line":1554,"char":80194,"type":"identifier"},{"text":"Exception","line":1558,"char":80273,"type":"identifier"},{"text":"RegisteredProject","line":1559,"char":80293,"type":"identifier"},{"text":"pm","line":1559,"char":80323,"type":"identifier"},{"text":"getProject","line":1559,"char":80326,"type":"identifier"},{"text":"FolderEntry","line":1560,"char":80360,"type":"identifier"},{"text":"myProject","line":1560,"char":80376,"type":"identifier"},{"text":"getBaseFolder","line":1560,"char":80386,"type":"identifier"},{"text":"createFolder","line":1560,"char":80402,"type":"identifier"},{"text":"a","line":1561,"char":80429,"type":"identifier"},{"text":"createFolder","line":1561,"char":80431,"type":"identifier"},{"text":"a","line":1562,"char":80460,"type":"identifier"},{"text":"createFolder","line":1562,"char":80462,"type":"identifier"},{"text":"a","line":1563,"char":80491,"type":"identifier"},{"text":"createFile","line":1563,"char":80493,"type":"identifier"},{"text":"getBytes","line":1563,"char":80523,"type":"identifier"},{"text":"Charset","line":1563,"char":80532,"type":"identifier"},{"text":"defaultCharset","line":1563,"char":80540,"type":"identifier"},{"text":"ContainerResponse","line":1564,"char":80568,"type":"identifier"},{"text":"launcher","line":1564,"char":80597,"type":"identifier"},{"text":"service","line":1564,"char":80606,"type":"identifier"},{"text":"GET","line":1564,"char":80614,"type":"identifier"},{"text":"assertEquals","line":1567,"char":80846,"type":"identifier"},{"text":"response","line":1567,"char":80859,"type":"identifier"},{"text":"getStatus","line":1567,"char":80868,"type":"identifier"},{"text":"response","line":1567,"char":80898,"type":"identifier"},{"text":"getEntity","line":1567,"char":80907,"type":"identifier"},{"text":"TreeElement","line":1568,"char":80929,"type":"identifier"},{"text":"TreeElement","line":1568,"char":80949,"type":"identifier"},{"text":"response","line":1568,"char":80961,"type":"identifier"},{"text":"getEntity","line":1568,"char":80970,"type":"identifier"},{"text":"ItemReference","line":1569,"char":80991,"type":"identifier"},{"text":"tree","line":1569,"char":81014,"type":"identifier"},{"text":"getNode","line":1569,"char":81019,"type":"identifier"},{"text":"assertEquals","line":1570,"char":81038,"type":"identifier"},{"text":"a_node","line":1570,"char":81051,"type":"identifier"},{"text":"getName","line":1570,"char":81058,"type":"identifier"},{"text":"List","line":1571,"char":81083,"type":"identifier"},{"text":"TreeElement","line":1571,"char":81088,"type":"identifier"},{"text":"tree","line":1571,"char":81112,"type":"identifier"},{"text":"getChildren","line":1571,"char":81117,"type":"identifier"},{"text":"assertNotNull","line":1572,"char":81140,"type":"identifier"},{"text":"children","line":1572,"char":81154,"type":"identifier"},{"text":"Set","line":1573,"char":81173,"type":"identifier"},{"text":"String","line":1573,"char":81177,"type":"identifier"},{"text":"LinkedHashSet","line":1573,"char":81197,"type":"identifier"},{"text":"TreeElement","line":1574,"char":81230,"type":"identifier"},{"text":"children","line":1574,"char":81252,"type":"identifier"},{"text":"ItemReference","line":1575,"char":81276,"type":"identifier"},{"text":"subTree","line":1575,"char":81298,"type":"identifier"},{"text":"getNode","line":1575,"char":81306,"type":"identifier"},{"text":"validateFolderLinks","line":1576,"char":81329,"type":"identifier"},{"text":"_node","line":1576,"char":81349,"type":"identifier"},{"text":"String","line":1577,"char":81369,"type":"identifier"},{"text":"_node","line":1577,"char":81383,"type":"identifier"},{"text":"getName","line":1577,"char":81389,"type":"identifier"},{"text":"names","line":1578,"char":81412,"type":"identifier"},{"text":"add","line":1578,"char":81418,"type":"identifier"},{"text":"name","line":1578,"char":81422,"type":"identifier"},{"text":"TreeElement","line":1579,"char":81446,"type":"identifier"},{"text":"subTree","line":1579,"char":81471,"type":"identifier"},{"text":"getChildren","line":1579,"char":81479,"type":"identifier"},{"text":"ItemReference","line":1580,"char":81512,"type":"identifier"},{"text":"subSubTree","line":1580,"char":81535,"type":"identifier"},{"text":"getNode","line":1580,"char":81546,"type":"identifier"},{"text":"validateFolderLinks","line":1581,"char":81573,"type":"identifier"},{"text":"__node","line":1581,"char":81593,"type":"identifier"},{"text":"names","line":1582,"char":81618,"type":"identifier"},{"text":"add","line":1582,"char":81624,"type":"identifier"},{"text":"name","line":1582,"char":81628,"type":"identifier"},{"text":"__node","line":1582,"char":81641,"type":"identifier"},{"text":"getName","line":1582,"char":81648,"type":"identifier"},{"text":"Assert","line":1585,"char":81692,"type":"identifier"},{"text":"assertTrue","line":1585,"char":81699,"type":"identifier"},{"text":"names","line":1585,"char":81710,"type":"identifier"},{"text":"contains","line":1585,"char":81716,"type":"identifier"},{"text":"Assert","line":1586,"char":81740,"type":"identifier"},{"text":"assertTrue","line":1586,"char":81747,"type":"identifier"},{"text":"names","line":1586,"char":81758,"type":"identifier"},{"text":"contains","line":1586,"char":81764,"type":"identifier"},{"text":"Assert","line":1587,"char":81788,"type":"identifier"},{"text":"assertTrue","line":1587,"char":81795,"type":"identifier"},{"text":"names","line":1587,"char":81806,"type":"identifier"},{"text":"contains","line":1587,"char":81812,"type":"identifier"},{"text":"Assert","line":1588,"char":81838,"type":"identifier"},{"text":"assertTrue","line":1588,"char":81845,"type":"identifier"},{"text":"names","line":1588,"char":81856,"type":"identifier"},{"text":"contains","line":1588,"char":81862,"type":"identifier"},{"text":"Exception","line":1592,"char":81958,"type":"identifier"},{"text":"RegisteredProject","line":1593,"char":81978,"type":"identifier"},{"text":"pm","line":1593,"char":82008,"type":"identifier"},{"text":"getProject","line":1593,"char":82011,"type":"identifier"},{"text":"FolderEntry","line":1594,"char":82045,"type":"identifier"},{"text":"myProject","line":1594,"char":82061,"type":"identifier"},{"text":"getBaseFolder","line":1594,"char":82071,"type":"identifier"},{"text":"createFolder","line":1594,"char":82087,"type":"identifier"},{"text":"a","line":1595,"char":82114,"type":"identifier"},{"text":"createFolder","line":1595,"char":82116,"type":"identifier"},{"text":"a","line":1596,"char":82145,"type":"identifier"},{"text":"createFolder","line":1596,"char":82147,"type":"identifier"},{"text":"createFile","line":1596,"char":82165,"type":"identifier"},{"text":"getBytes","line":1596,"char":82195,"type":"identifier"},{"text":"Charset","line":1596,"char":82204,"type":"identifier"},{"text":"defaultCharset","line":1596,"char":82212,"type":"identifier"},{"text":"ContainerResponse","line":1597,"char":82240,"type":"identifier"},{"text":"launcher","line":1597,"char":82269,"type":"identifier"},{"text":"service","line":1597,"char":82278,"type":"identifier"},{"text":"GET","line":1597,"char":82286,"type":"identifier"},{"text":"assertEquals","line":1600,"char":82538,"type":"identifier"},{"text":"response","line":1600,"char":82551,"type":"identifier"},{"text":"getStatus","line":1600,"char":82560,"type":"identifier"},{"text":"response","line":1600,"char":82590,"type":"identifier"},{"text":"getEntity","line":1600,"char":82599,"type":"identifier"},{"text":"TreeElement","line":1601,"char":82621,"type":"identifier"},{"text":"TreeElement","line":1601,"char":82641,"type":"identifier"},{"text":"response","line":1601,"char":82653,"type":"identifier"},{"text":"getEntity","line":1601,"char":82662,"type":"identifier"},{"text":"ItemReference","line":1602,"char":82683,"type":"identifier"},{"text":"tree","line":1602,"char":82706,"type":"identifier"},{"text":"getNode","line":1602,"char":82711,"type":"identifier"},{"text":"assertEquals","line":1603,"char":82730,"type":"identifier"},{"text":"a_node","line":1603,"char":82743,"type":"identifier"},{"text":"getName","line":1603,"char":82750,"type":"identifier"},{"text":"List","line":1604,"char":82775,"type":"identifier"},{"text":"TreeElement","line":1604,"char":82780,"type":"identifier"},{"text":"tree","line":1604,"char":82804,"type":"identifier"},{"text":"getChildren","line":1604,"char":82809,"type":"identifier"},{"text":"assertNotNull","line":1605,"char":82832,"type":"identifier"},{"text":"children","line":1605,"char":82846,"type":"identifier"},{"text":"Set","line":1606,"char":82865,"type":"identifier"},{"text":"String","line":1606,"char":82869,"type":"identifier"},{"text":"LinkedHashSet","line":1606,"char":82889,"type":"identifier"},{"text":"TreeElement","line":1607,"char":82922,"type":"identifier"},{"text":"children","line":1607,"char":82944,"type":"identifier"},{"text":"ItemReference","line":1608,"char":82968,"type":"identifier"},{"text":"subTree","line":1608,"char":82990,"type":"identifier"},{"text":"getNode","line":1608,"char":82998,"type":"identifier"},{"text":"validateFolderLinks","line":1609,"char":83021,"type":"identifier"},{"text":"_node","line":1609,"char":83041,"type":"identifier"},{"text":"String","line":1610,"char":83061,"type":"identifier"},{"text":"_node","line":1610,"char":83075,"type":"identifier"},{"text":"getName","line":1610,"char":83081,"type":"identifier"},{"text":"names","line":1611,"char":83104,"type":"identifier"},{"text":"add","line":1611,"char":83110,"type":"identifier"},{"text":"name","line":1611,"char":83114,"type":"identifier"},{"text":"TreeElement","line":1612,"char":83138,"type":"identifier"},{"text":"subTree","line":1612,"char":83163,"type":"identifier"},{"text":"getChildren","line":1612,"char":83171,"type":"identifier"},{"text":"ItemReference","line":1613,"char":83204,"type":"identifier"},{"text":"subSubTree","line":1613,"char":83227,"type":"identifier"},{"text":"getNode","line":1613,"char":83238,"type":"identifier"},{"text":"__node","line":1614,"char":83269,"type":"identifier"},{"text":"getType","line":1614,"char":83276,"type":"identifier"},{"text":"equals","line":1614,"char":83286,"type":"identifier"},{"text":"validateFolderLinks","line":1615,"char":83326,"type":"identifier"},{"text":"__node","line":1615,"char":83346,"type":"identifier"},{"text":"__node","line":1616,"char":83382,"type":"identifier"},{"text":"getType","line":1616,"char":83389,"type":"identifier"},{"text":"equals","line":1616,"char":83399,"type":"identifier"},{"text":"validateFileLinks","line":1617,"char":83437,"type":"identifier"},{"text":"__node","line":1617,"char":83455,"type":"identifier"},{"text":"names","line":1619,"char":83498,"type":"identifier"},{"text":"add","line":1619,"char":83504,"type":"identifier"},{"text":"name","line":1619,"char":83508,"type":"identifier"},{"text":"__node","line":1619,"char":83521,"type":"identifier"},{"text":"getName","line":1619,"char":83528,"type":"identifier"},{"text":"Assert","line":1622,"char":83572,"type":"identifier"},{"text":"assertTrue","line":1622,"char":83579,"type":"identifier"},{"text":"names","line":1622,"char":83590,"type":"identifier"},{"text":"contains","line":1622,"char":83596,"type":"identifier"},{"text":"Assert","line":1623,"char":83620,"type":"identifier"},{"text":"assertTrue","line":1623,"char":83627,"type":"identifier"},{"text":"names","line":1623,"char":83638,"type":"identifier"},{"text":"contains","line":1623,"char":83644,"type":"identifier"},{"text":"Assert","line":1624,"char":83668,"type":"identifier"},{"text":"assertTrue","line":1624,"char":83675,"type":"identifier"},{"text":"names","line":1624,"char":83686,"type":"identifier"},{"text":"contains","line":1624,"char":83692,"type":"identifier"},{"text":"Assert","line":1625,"char":83718,"type":"identifier"},{"text":"assertTrue","line":1625,"char":83725,"type":"identifier"},{"text":"names","line":1625,"char":83736,"type":"identifier"},{"text":"contains","line":1625,"char":83742,"type":"identifier"},{"text":"Exception","line":1629,"char":83852,"type":"identifier"},{"text":"RegisteredProject","line":1630,"char":83872,"type":"identifier"},{"text":"pm","line":1630,"char":83902,"type":"identifier"},{"text":"getProject","line":1630,"char":83905,"type":"identifier"},{"text":"FolderEntry","line":1631,"char":83939,"type":"identifier"},{"text":"myProject","line":1631,"char":83955,"type":"identifier"},{"text":"getBaseFolder","line":1631,"char":83965,"type":"identifier"},{"text":"createFolder","line":1631,"char":83981,"type":"identifier"},{"text":"a","line":1632,"char":84008,"type":"identifier"},{"text":"createFolder","line":1632,"char":84010,"type":"identifier"},{"text":"a","line":1633,"char":84039,"type":"identifier"},{"text":"createFolder","line":1633,"char":84041,"type":"identifier"},{"text":"ContainerResponse","line":1634,"char":84068,"type":"identifier"},{"text":"launcher","line":1634,"char":84097,"type":"identifier"},{"text":"service","line":1634,"char":84106,"type":"identifier"},{"text":"GET","line":1634,"char":84114,"type":"identifier"},{"text":"assertEquals","line":1637,"char":84366,"type":"identifier"},{"text":"response","line":1637,"char":84379,"type":"identifier"},{"text":"getStatus","line":1637,"char":84388,"type":"identifier"},{"text":"response","line":1637,"char":84418,"type":"identifier"},{"text":"getEntity","line":1637,"char":84427,"type":"identifier"},{"text":"TreeElement","line":1638,"char":84449,"type":"identifier"},{"text":"TreeElement","line":1638,"char":84469,"type":"identifier"},{"text":"response","line":1638,"char":84481,"type":"identifier"},{"text":"getEntity","line":1638,"char":84490,"type":"identifier"},{"text":"ItemReference","line":1639,"char":84511,"type":"identifier"},{"text":"tree","line":1639,"char":84534,"type":"identifier"},{"text":"getNode","line":1639,"char":84539,"type":"identifier"},{"text":"assertEquals","line":1640,"char":84558,"type":"identifier"},{"text":"a_node","line":1640,"char":84571,"type":"identifier"},{"text":"getName","line":1640,"char":84578,"type":"identifier"},{"text":"List","line":1641,"char":84603,"type":"identifier"},{"text":"TreeElement","line":1641,"char":84608,"type":"identifier"},{"text":"tree","line":1641,"char":84632,"type":"identifier"},{"text":"getChildren","line":1641,"char":84637,"type":"identifier"},{"text":"assertNotNull","line":1642,"char":84660,"type":"identifier"},{"text":"children","line":1642,"char":84674,"type":"identifier"},{"text":"Set","line":1643,"char":84693,"type":"identifier"},{"text":"String","line":1643,"char":84697,"type":"identifier"},{"text":"LinkedHashSet","line":1643,"char":84717,"type":"identifier"},{"text":"TreeElement","line":1644,"char":84750,"type":"identifier"},{"text":"children","line":1644,"char":84772,"type":"identifier"},{"text":"ItemReference","line":1645,"char":84796,"type":"identifier"},{"text":"subTree","line":1645,"char":84818,"type":"identifier"},{"text":"getNode","line":1645,"char":84826,"type":"identifier"},{"text":"validateFolderLinks","line":1646,"char":84849,"type":"identifier"},{"text":"_node","line":1646,"char":84869,"type":"identifier"},{"text":"String","line":1647,"char":84889,"type":"identifier"},{"text":"_node","line":1647,"char":84903,"type":"identifier"},{"text":"getName","line":1647,"char":84909,"type":"identifier"},{"text":"names","line":1648,"char":84932,"type":"identifier"},{"text":"add","line":1648,"char":84938,"type":"identifier"},{"text":"name","line":1648,"char":84942,"type":"identifier"},{"text":"TreeElement","line":1649,"char":84966,"type":"identifier"},{"text":"subTree","line":1649,"char":84991,"type":"identifier"},{"text":"getChildren","line":1649,"char":84999,"type":"identifier"},{"text":"ItemReference","line":1650,"char":85032,"type":"identifier"},{"text":"subSubTree","line":1650,"char":85055,"type":"identifier"},{"text":"getNode","line":1650,"char":85066,"type":"identifier"},{"text":"validateFolderLinks","line":1651,"char":85093,"type":"identifier"},{"text":"__node","line":1651,"char":85113,"type":"identifier"},{"text":"names","line":1652,"char":85138,"type":"identifier"},{"text":"add","line":1652,"char":85144,"type":"identifier"},{"text":"name","line":1652,"char":85148,"type":"identifier"},{"text":"__node","line":1652,"char":85161,"type":"identifier"},{"text":"getName","line":1652,"char":85168,"type":"identifier"},{"text":"Assert","line":1655,"char":85212,"type":"identifier"},{"text":"assertTrue","line":1655,"char":85219,"type":"identifier"},{"text":"names","line":1655,"char":85230,"type":"identifier"},{"text":"contains","line":1655,"char":85236,"type":"identifier"},{"text":"Assert","line":1656,"char":85260,"type":"identifier"},{"text":"assertTrue","line":1656,"char":85267,"type":"identifier"},{"text":"names","line":1656,"char":85278,"type":"identifier"},{"text":"contains","line":1656,"char":85284,"type":"identifier"},{"text":"Assert","line":1657,"char":85308,"type":"identifier"},{"text":"assertTrue","line":1657,"char":85315,"type":"identifier"},{"text":"names","line":1657,"char":85326,"type":"identifier"},{"text":"contains","line":1657,"char":85332,"type":"identifier"},{"text":"Assert","line":1658,"char":85358,"type":"identifier"},{"text":"assertFalse","line":1658,"char":85365,"type":"identifier"},{"text":"names","line":1658,"char":85377,"type":"identifier"},{"text":"contains","line":1658,"char":85383,"type":"identifier"},{"text":"Exception","line":1664,"char":85503,"type":"identifier"},{"text":"RegisteredProject","line":1665,"char":85523,"type":"identifier"},{"text":"pm","line":1665,"char":85553,"type":"identifier"},{"text":"getProject","line":1665,"char":85556,"type":"identifier"},{"text":"myProject","line":1666,"char":85590,"type":"identifier"},{"text":"getBaseFolder","line":1666,"char":85600,"type":"identifier"},{"text":"createFolder","line":1666,"char":85616,"type":"identifier"},{"text":"createFile","line":1666,"char":85636,"type":"identifier"},{"text":"getBytes","line":1666,"char":85667,"type":"identifier"},{"text":"Charset","line":1666,"char":85676,"type":"identifier"},{"text":"defaultCharset","line":1666,"char":85684,"type":"identifier"},{"text":"myProject","line":1667,"char":85712,"type":"identifier"},{"text":"getBaseFolder","line":1667,"char":85722,"type":"identifier"},{"text":"createFolder","line":1667,"char":85738,"type":"identifier"},{"text":"createFile","line":1667,"char":85758,"type":"identifier"},{"text":"getBytes","line":1667,"char":85788,"type":"identifier"},{"text":"Charset","line":1667,"char":85797,"type":"identifier"},{"text":"defaultCharset","line":1667,"char":85805,"type":"identifier"},{"text":"myProject","line":1668,"char":85833,"type":"identifier"},{"text":"getBaseFolder","line":1668,"char":85843,"type":"identifier"},{"text":"createFolder","line":1668,"char":85859,"type":"identifier"},{"text":"createFile","line":1668,"char":85877,"type":"identifier"},{"text":"getBytes","line":1668,"char":85906,"type":"identifier"},{"text":"Charset","line":1668,"char":85915,"type":"identifier"},{"text":"defaultCharset","line":1668,"char":85923,"type":"identifier"},{"text":"ContainerResponse","line":1670,"char":85952,"type":"identifier"},{"text":"launcher","line":1670,"char":85981,"type":"identifier"},{"text":"service","line":1670,"char":85990,"type":"identifier"},{"text":"GET","line":1670,"char":85998,"type":"identifier"},{"text":"assertEquals","line":1673,"char":86236,"type":"identifier"},{"text":"response","line":1673,"char":86249,"type":"identifier"},{"text":"getStatus","line":1673,"char":86258,"type":"identifier"},{"text":"response","line":1673,"char":86288,"type":"identifier"},{"text":"getEntity","line":1673,"char":86297,"type":"identifier"},{"text":"List","line":1674,"char":86319,"type":"identifier"},{"text":"ItemReference","line":1674,"char":86324,"type":"identifier"},{"text":"List","line":1674,"char":86349,"type":"identifier"},{"text":"ItemReference","line":1674,"char":86354,"type":"identifier"},{"text":"response","line":1674,"char":86369,"type":"identifier"},{"text":"getEntity","line":1674,"char":86378,"type":"identifier"},{"text":"assertEquals","line":1675,"char":86399,"type":"identifier"},{"text":"result","line":1675,"char":86412,"type":"identifier"},{"text":"size","line":1675,"char":86419,"type":"identifier"},{"text":"Set","line":1676,"char":86439,"type":"identifier"},{"text":"String","line":1676,"char":86443,"type":"identifier"},{"text":"LinkedHashSet","line":1676,"char":86463,"type":"identifier"},{"text":"ItemReference","line":1677,"char":86496,"type":"identifier"},{"text":"result","line":1677,"char":86526,"type":"identifier"},{"text":"paths","line":1678,"char":86548,"type":"identifier"},{"text":"add","line":1678,"char":86554,"type":"identifier"},{"text":"itemReference","line":1678,"char":86558,"type":"identifier"},{"text":"getPath","line":1678,"char":86572,"type":"identifier"},{"text":"Assert","line":1680,"char":86602,"type":"identifier"},{"text":"assertTrue","line":1680,"char":86609,"type":"identifier"},{"text":"paths","line":1680,"char":86620,"type":"identifier"},{"text":"contains","line":1680,"char":86626,"type":"identifier"},{"text":"Assert","line":1681,"char":86673,"type":"identifier"},{"text":"assertTrue","line":1681,"char":86680,"type":"identifier"},{"text":"paths","line":1681,"char":86691,"type":"identifier"},{"text":"contains","line":1681,"char":86697,"type":"identifier"},{"text":"Exception","line":1686,"char":86830,"type":"identifier"},{"text":"RegisteredProject","line":1687,"char":86850,"type":"identifier"},{"text":"pm","line":1687,"char":86880,"type":"identifier"},{"text":"getProject","line":1687,"char":86883,"type":"identifier"},{"text":"myProject","line":1688,"char":86917,"type":"identifier"},{"text":"getBaseFolder","line":1688,"char":86927,"type":"identifier"},{"text":"createFolder","line":1688,"char":86943,"type":"identifier"},{"text":"createFile","line":1688,"char":86963,"type":"identifier"},{"text":"getBytes","line":1688,"char":86994,"type":"identifier"},{"text":"Charset","line":1688,"char":87003,"type":"identifier"},{"text":"defaultCharset","line":1688,"char":87011,"type":"identifier"},{"text":"myProject","line":1689,"char":87039,"type":"identifier"},{"text":"getBaseFolder","line":1689,"char":87049,"type":"identifier"},{"text":"createFolder","line":1689,"char":87065,"type":"identifier"},{"text":"createFile","line":1689,"char":87085,"type":"identifier"},{"text":"getBytes","line":1689,"char":87122,"type":"identifier"},{"text":"Charset","line":1689,"char":87131,"type":"identifier"},{"text":"defaultCharset","line":1689,"char":87139,"type":"identifier"},{"text":"myProject","line":1690,"char":87167,"type":"identifier"},{"text":"getBaseFolder","line":1690,"char":87177,"type":"identifier"},{"text":"createFolder","line":1690,"char":87193,"type":"identifier"},{"text":"createFile","line":1690,"char":87211,"type":"identifier"},{"text":"getBytes","line":1690,"char":87243,"type":"identifier"},{"text":"Charset","line":1690,"char":87252,"type":"identifier"},{"text":"defaultCharset","line":1690,"char":87260,"type":"identifier"},{"text":"ContainerResponse","line":1692,"char":87289,"type":"identifier"},{"text":"launcher","line":1692,"char":87318,"type":"identifier"},{"text":"service","line":1692,"char":87327,"type":"identifier"},{"text":"GET","line":1692,"char":87335,"type":"identifier"},{"text":"assertEquals","line":1695,"char":87574,"type":"identifier"},{"text":"response","line":1695,"char":87587,"type":"identifier"},{"text":"getStatus","line":1695,"char":87596,"type":"identifier"},{"text":"response","line":1695,"char":87626,"type":"identifier"},{"text":"getEntity","line":1695,"char":87635,"type":"identifier"},{"text":"List","line":1696,"char":87657,"type":"identifier"},{"text":"ItemReference","line":1696,"char":87662,"type":"identifier"},{"text":"List","line":1696,"char":87687,"type":"identifier"},{"text":"ItemReference","line":1696,"char":87692,"type":"identifier"},{"text":"response","line":1696,"char":87707,"type":"identifier"},{"text":"getEntity","line":1696,"char":87716,"type":"identifier"},{"text":"assertEquals","line":1697,"char":87737,"type":"identifier"},{"text":"result","line":1697,"char":87750,"type":"identifier"},{"text":"size","line":1697,"char":87757,"type":"identifier"},{"text":"Set","line":1698,"char":87777,"type":"identifier"},{"text":"String","line":1698,"char":87781,"type":"identifier"},{"text":"LinkedHashSet","line":1698,"char":87801,"type":"identifier"},{"text":"paths","line":1699,"char":87829,"type":"identifier"},{"text":"addAll","line":1699,"char":87835,"type":"identifier"},{"text":"result","line":1699,"char":87842,"type":"identifier"},{"text":"stream","line":1699,"char":87849,"type":"identifier"},{"text":"map","line":1699,"char":87858,"type":"identifier"},{"text":"ItemReference","line":1699,"char":87862,"type":"identifier"},{"text":"getPath","line":1699,"char":87877,"type":"identifier"},{"text":"collect","line":1699,"char":87886,"type":"identifier"},{"text":"Collectors","line":1699,"char":87894,"type":"identifier"},{"text":"toList","line":1699,"char":87905,"type":"identifier"},{"text":"Assert","line":1700,"char":87925,"type":"identifier"},{"text":"assertTrue","line":1700,"char":87932,"type":"identifier"},{"text":"paths","line":1700,"char":87943,"type":"identifier"},{"text":"contains","line":1700,"char":87949,"type":"identifier"},{"text":"Exception","line":1705,"char":88105,"type":"identifier"},{"text":"RegisteredProject","line":1706,"char":88125,"type":"identifier"},{"text":"pm","line":1706,"char":88155,"type":"identifier"},{"text":"getProject","line":1706,"char":88158,"type":"identifier"},{"text":"myProject","line":1707,"char":88192,"type":"identifier"},{"text":"getBaseFolder","line":1707,"char":88202,"type":"identifier"},{"text":"createFolder","line":1707,"char":88218,"type":"identifier"},{"text":"createFile","line":1707,"char":88238,"type":"identifier"},{"text":"getBytes","line":1707,"char":88269,"type":"identifier"},{"text":"Charset","line":1707,"char":88278,"type":"identifier"},{"text":"defaultCharset","line":1707,"char":88286,"type":"identifier"},{"text":"myProject","line":1708,"char":88314,"type":"identifier"},{"text":"getBaseFolder","line":1708,"char":88324,"type":"identifier"},{"text":"createFolder","line":1708,"char":88340,"type":"identifier"},{"text":"createFile","line":1708,"char":88360,"type":"identifier"},{"text":"getBytes","line":1708,"char":88397,"type":"identifier"},{"text":"Charset","line":1708,"char":88406,"type":"identifier"},{"text":"defaultCharset","line":1708,"char":88414,"type":"identifier"},{"text":"myProject","line":1709,"char":88442,"type":"identifier"},{"text":"getBaseFolder","line":1709,"char":88452,"type":"identifier"},{"text":"createFolder","line":1709,"char":88468,"type":"identifier"},{"text":"EXCLUDE_SEARCH_PATH","line":1709,"char":88481,"type":"identifier"},{"text":"createFile","line":1709,"char":88502,"type":"identifier"},{"text":"getBytes","line":1709,"char":88534,"type":"identifier"},{"text":"Charset","line":1709,"char":88543,"type":"identifier"},{"text":"defaultCharset","line":1709,"char":88551,"type":"identifier"},{"text":"ContainerResponse","line":1711,"char":88580,"type":"identifier"},{"text":"launcher","line":1711,"char":88609,"type":"identifier"},{"text":"service","line":1711,"char":88618,"type":"identifier"},{"text":"GET","line":1711,"char":88626,"type":"identifier"},{"text":"assertEquals","line":1714,"char":88865,"type":"identifier"},{"text":"response","line":1714,"char":88878,"type":"identifier"},{"text":"getStatus","line":1714,"char":88887,"type":"identifier"},{"text":"response","line":1714,"char":88917,"type":"identifier"},{"text":"getEntity","line":1714,"char":88926,"type":"identifier"},{"text":"List","line":1715,"char":88948,"type":"identifier"},{"text":"ItemReference","line":1715,"char":88953,"type":"identifier"},{"text":"List","line":1715,"char":88978,"type":"identifier"},{"text":"ItemReference","line":1715,"char":88983,"type":"identifier"},{"text":"response","line":1715,"char":88998,"type":"identifier"},{"text":"getEntity","line":1715,"char":89007,"type":"identifier"},{"text":"assertEquals","line":1716,"char":89028,"type":"identifier"},{"text":"result","line":1716,"char":89041,"type":"identifier"},{"text":"size","line":1716,"char":89048,"type":"identifier"},{"text":"Set","line":1717,"char":89068,"type":"identifier"},{"text":"String","line":1717,"char":89072,"type":"identifier"},{"text":"LinkedHashSet","line":1717,"char":89092,"type":"identifier"},{"text":"paths","line":1718,"char":89120,"type":"identifier"},{"text":"addAll","line":1718,"char":89126,"type":"identifier"},{"text":"result","line":1718,"char":89133,"type":"identifier"},{"text":"stream","line":1718,"char":89140,"type":"identifier"},{"text":"map","line":1718,"char":89149,"type":"identifier"},{"text":"ItemReference","line":1718,"char":89153,"type":"identifier"},{"text":"getPath","line":1718,"char":89168,"type":"identifier"},{"text":"collect","line":1718,"char":89177,"type":"identifier"},{"text":"Collectors","line":1718,"char":89185,"type":"identifier"},{"text":"toList","line":1718,"char":89196,"type":"identifier"},{"text":"Assert","line":1719,"char":89216,"type":"identifier"},{"text":"assertTrue","line":1719,"char":89223,"type":"identifier"},{"text":"paths","line":1719,"char":89234,"type":"identifier"},{"text":"contains","line":1719,"char":89240,"type":"identifier"},{"text":"Assert","line":1720,"char":89289,"type":"identifier"},{"text":"assertFalse","line":1720,"char":89296,"type":"identifier"},{"text":"paths","line":1720,"char":89308,"type":"identifier"},{"text":"contains","line":1720,"char":89314,"type":"identifier"},{"text":"EXCLUDE_SEARCH_PATH","line":1720,"char":89340,"type":"identifier"},{"text":"Exception","line":1725,"char":89485,"type":"identifier"},{"text":"String","line":1726,"char":89505,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1726,"char":89539,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1727,"char":89598,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1728,"char":89656,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1729,"char":89714,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1730,"char":89773,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1731,"char":89831,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1732,"char":89889,"type":"identifier"},{"text":"RegisteredProject","line":1733,"char":89917,"type":"identifier"},{"text":"pm","line":1733,"char":89947,"type":"identifier"},{"text":"getProject","line":1733,"char":89950,"type":"identifier"},{"text":"myProject","line":1734,"char":89984,"type":"identifier"},{"text":"getBaseFolder","line":1734,"char":89994,"type":"identifier"},{"text":"createFolder","line":1734,"char":90010,"type":"identifier"},{"text":"createFile","line":1734,"char":90030,"type":"identifier"},{"text":"getBytes","line":1734,"char":90109,"type":"identifier"},{"text":"Charset","line":1734,"char":90118,"type":"identifier"},{"text":"defaultCharset","line":1734,"char":90126,"type":"identifier"},{"text":"myProject","line":1735,"char":90154,"type":"identifier"},{"text":"getBaseFolder","line":1735,"char":90164,"type":"identifier"},{"text":"createFolder","line":1735,"char":90180,"type":"identifier"},{"text":"createFile","line":1735,"char":90200,"type":"identifier"},{"text":"getBytes","line":1735,"char":90276,"type":"identifier"},{"text":"Charset","line":1735,"char":90285,"type":"identifier"},{"text":"defaultCharset","line":1735,"char":90293,"type":"identifier"},{"text":"myProject","line":1736,"char":90321,"type":"identifier"},{"text":"getBaseFolder","line":1736,"char":90331,"type":"identifier"},{"text":"createFolder","line":1736,"char":90347,"type":"identifier"},{"text":"createFile","line":1736,"char":90365,"type":"identifier"},{"text":"getBytes","line":1736,"char":90442,"type":"identifier"},{"text":"Charset","line":1736,"char":90451,"type":"identifier"},{"text":"defaultCharset","line":1736,"char":90459,"type":"identifier"},{"text":"ContainerResponse","line":1738,"char":90488,"type":"identifier"},{"text":"launcher","line":1739,"char":90533,"type":"identifier"},{"text":"service","line":1739,"char":90542,"type":"identifier"},{"text":"GET","line":1739,"char":90550,"type":"identifier"},{"text":"queryToSearch","line":1739,"char":90611,"type":"identifier"},{"text":"assertEquals","line":1741,"char":90715,"type":"identifier"},{"text":"response","line":1741,"char":90728,"type":"identifier"},{"text":"getStatus","line":1741,"char":90737,"type":"identifier"},{"text":"response","line":1741,"char":90767,"type":"identifier"},{"text":"getEntity","line":1741,"char":90776,"type":"identifier"},{"text":"List","line":1742,"char":90798,"type":"identifier"},{"text":"ItemReference","line":1742,"char":90803,"type":"identifier"},{"text":"List","line":1742,"char":90828,"type":"identifier"},{"text":"ItemReference","line":1742,"char":90833,"type":"identifier"},{"text":"response","line":1742,"char":90848,"type":"identifier"},{"text":"getEntity","line":1742,"char":90857,"type":"identifier"},{"text":"assertEquals","line":1743,"char":90878,"type":"identifier"},{"text":"result","line":1743,"char":90891,"type":"identifier"},{"text":"size","line":1743,"char":90898,"type":"identifier"},{"text":"Set","line":1744,"char":90918,"type":"identifier"},{"text":"String","line":1744,"char":90922,"type":"identifier"},{"text":"LinkedHashSet","line":1744,"char":90942,"type":"identifier"},{"text":"paths","line":1745,"char":90970,"type":"identifier"},{"text":"addAll","line":1745,"char":90976,"type":"identifier"},{"text":"result","line":1745,"char":90983,"type":"identifier"},{"text":"stream","line":1745,"char":90990,"type":"identifier"},{"text":"map","line":1745,"char":90999,"type":"identifier"},{"text":"ItemReference","line":1745,"char":91003,"type":"identifier"},{"text":"getPath","line":1745,"char":91018,"type":"identifier"},{"text":"collect","line":1745,"char":91027,"type":"identifier"},{"text":"Collectors","line":1745,"char":91035,"type":"identifier"},{"text":"toList","line":1745,"char":91046,"type":"identifier"},{"text":"Assert","line":1746,"char":91066,"type":"identifier"},{"text":"assertTrue","line":1746,"char":91073,"type":"identifier"},{"text":"paths","line":1746,"char":91084,"type":"identifier"},{"text":"contains","line":1746,"char":91090,"type":"identifier"},{"text":"Exception","line":1751,"char":91267,"type":"identifier"},{"text":"String","line":1752,"char":91287,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1752,"char":91321,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1753,"char":91382,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1754,"char":91440,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1755,"char":91499,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1755,"char":91520,"type":"identifier"},{"text":"AND_OPERATOR","line":1755,"char":91540,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1755,"char":91555,"type":"identifier"},{"text":"URL_ENCODED_ASTERISK","line":1756,"char":91619,"type":"identifier"},{"text":"RegisteredProject","line":1757,"char":91649,"type":"identifier"},{"text":"pm","line":1757,"char":91679,"type":"identifier"},{"text":"getProject","line":1757,"char":91682,"type":"identifier"},{"text":"myProject","line":1758,"char":91716,"type":"identifier"},{"text":"getBaseFolder","line":1758,"char":91726,"type":"identifier"},{"text":"createFolder","line":1758,"char":91742,"type":"identifier"},{"text":"createFile","line":1758,"char":91762,"type":"identifier"},{"text":"getBytes","line":1758,"char":91841,"type":"identifier"},{"text":"Charset","line":1758,"char":91850,"type":"identifier"},{"text":"defaultCharset","line":1758,"char":91858,"type":"identifier"},{"text":"myProject","line":1759,"char":91886,"type":"identifier"},{"text":"getBaseFolder","line":1759,"char":91896,"type":"identifier"},{"text":"createFolder","line":1759,"char":91912,"type":"identifier"},{"text":"createFile","line":1760,"char":91950,"type":"identifier"},{"text":"getBytes","line":1760,"char":92049,"type":"identifier"},{"text":"Charset","line":1760,"char":92058,"type":"identifier"},{"text":"defaultCharset","line":1760,"char":92066,"type":"identifier"},{"text":"myProject","line":1761,"char":92094,"type":"identifier"},{"text":"getBaseFolder","line":1761,"char":92104,"type":"identifier"},{"text":"createFolder","line":1761,"char":92120,"type":"identifier"},{"text":"createFile","line":1762,"char":92156,"type":"identifier"},{"text":"getBytes","line":1762,"char":92249,"type":"identifier"},{"text":"Charset","line":1762,"char":92258,"type":"identifier"},{"text":"defaultCharset","line":1762,"char":92266,"type":"identifier"},{"text":"ContainerResponse","line":1764,"char":92295,"type":"identifier"},{"text":"launcher","line":1765,"char":92340,"type":"identifier"},{"text":"service","line":1765,"char":92349,"type":"identifier"},{"text":"GET","line":1765,"char":92357,"type":"identifier"},{"text":"queryToSearch","line":1765,"char":92417,"type":"identifier"},{"text":"assertEquals","line":1767,"char":92521,"type":"identifier"},{"text":"response","line":1767,"char":92534,"type":"identifier"},{"text":"getStatus","line":1767,"char":92543,"type":"identifier"},{"text":"response","line":1767,"char":92573,"type":"identifier"},{"text":"getEntity","line":1767,"char":92582,"type":"identifier"},{"text":"List","line":1768,"char":92604,"type":"identifier"},{"text":"ItemReference","line":1768,"char":92609,"type":"identifier"},{"text":"List","line":1768,"char":92634,"type":"identifier"},{"text":"ItemReference","line":1768,"char":92639,"type":"identifier"},{"text":"response","line":1768,"char":92654,"type":"identifier"},{"text":"getEntity","line":1768,"char":92663,"type":"identifier"},{"text":"assertEquals","line":1769,"char":92684,"type":"identifier"},{"text":"result","line":1769,"char":92697,"type":"identifier"},{"text":"size","line":1769,"char":92704,"type":"identifier"},{"text":"Set","line":1770,"char":92724,"type":"identifier"},{"text":"String","line":1770,"char":92728,"type":"identifier"},{"text":"LinkedHashSet","line":1770,"char":92748,"type":"identifier"},{"text":"paths","line":1771,"char":92776,"type":"identifier"},{"text":"addAll","line":1771,"char":92782,"type":"identifier"},{"text":"result","line":1771,"char":92789,"type":"identifier"},{"text":"stream","line":1771,"char":92796,"type":"identifier"},{"text":"map","line":1771,"char":92805,"type":"identifier"},{"text":"ItemReference","line":1771,"char":92809,"type":"identifier"},{"text":"getPath","line":1771,"char":92824,"type":"identifier"},{"text":"collect","line":1771,"char":92833,"type":"identifier"},{"text":"Collectors","line":1771,"char":92841,"type":"identifier"},{"text":"toList","line":1771,"char":92852,"type":"identifier"},{"text":"Assert","line":1772,"char":92872,"type":"identifier"},{"text":"assertTrue","line":1772,"char":92879,"type":"identifier"},{"text":"paths","line":1772,"char":92890,"type":"identifier"},{"text":"contains","line":1772,"char":92896,"type":"identifier"},{"text":"Assert","line":1773,"char":92957,"type":"identifier"},{"text":"assertTrue","line":1773,"char":92964,"type":"identifier"},{"text":"paths","line":1773,"char":92975,"type":"identifier"},{"text":"contains","line":1773,"char":92981,"type":"identifier"},{"text":"Assert","line":1774,"char":93046,"type":"identifier"},{"text":"assertFalse","line":1774,"char":93053,"type":"identifier"},{"text":"paths","line":1774,"char":93065,"type":"identifier"},{"text":"contains","line":1774,"char":93071,"type":"identifier"},{"text":"Exception","line":1779,"char":93230,"type":"identifier"},{"text":"String","line":1780,"char":93250,"type":"identifier"},{"text":"URL_ENCODED_ASTERISK","line":1781,"char":93328,"type":"identifier"},{"text":"RegisteredProject","line":1782,"char":93358,"type":"identifier"},{"text":"pm","line":1782,"char":93388,"type":"identifier"},{"text":"getProject","line":1782,"char":93391,"type":"identifier"},{"text":"myProject","line":1783,"char":93425,"type":"identifier"},{"text":"getBaseFolder","line":1783,"char":93435,"type":"identifier"},{"text":"createFolder","line":1783,"char":93451,"type":"identifier"},{"text":"createFile","line":1783,"char":93471,"type":"identifier"},{"text":"getBytes","line":1783,"char":93550,"type":"identifier"},{"text":"Charset","line":1783,"char":93559,"type":"identifier"},{"text":"defaultCharset","line":1783,"char":93567,"type":"identifier"},{"text":"myProject","line":1784,"char":93595,"type":"identifier"},{"text":"getBaseFolder","line":1784,"char":93605,"type":"identifier"},{"text":"createFolder","line":1784,"char":93621,"type":"identifier"},{"text":"createFile","line":1785,"char":93659,"type":"identifier"},{"text":"getBytes","line":1785,"char":93758,"type":"identifier"},{"text":"Charset","line":1785,"char":93767,"type":"identifier"},{"text":"defaultCharset","line":1785,"char":93775,"type":"identifier"},{"text":"myProject","line":1786,"char":93803,"type":"identifier"},{"text":"getBaseFolder","line":1786,"char":93813,"type":"identifier"},{"text":"createFolder","line":1786,"char":93829,"type":"identifier"},{"text":"createFile","line":1787,"char":93865,"type":"identifier"},{"text":"getBytes","line":1787,"char":93958,"type":"identifier"},{"text":"Charset","line":1787,"char":93967,"type":"identifier"},{"text":"defaultCharset","line":1787,"char":93975,"type":"identifier"},{"text":"ContainerResponse","line":1789,"char":94004,"type":"identifier"},{"text":"launcher","line":1790,"char":94049,"type":"identifier"},{"text":"service","line":1790,"char":94058,"type":"identifier"},{"text":"GET","line":1790,"char":94066,"type":"identifier"},{"text":"queryToSearch","line":1790,"char":94127,"type":"identifier"},{"text":"assertEquals","line":1792,"char":94231,"type":"identifier"},{"text":"response","line":1792,"char":94244,"type":"identifier"},{"text":"getStatus","line":1792,"char":94253,"type":"identifier"},{"text":"response","line":1792,"char":94283,"type":"identifier"},{"text":"getEntity","line":1792,"char":94292,"type":"identifier"},{"text":"List","line":1793,"char":94314,"type":"identifier"},{"text":"ItemReference","line":1793,"char":94319,"type":"identifier"},{"text":"List","line":1793,"char":94344,"type":"identifier"},{"text":"ItemReference","line":1793,"char":94349,"type":"identifier"},{"text":"response","line":1793,"char":94364,"type":"identifier"},{"text":"getEntity","line":1793,"char":94373,"type":"identifier"},{"text":"assertEquals","line":1794,"char":94394,"type":"identifier"},{"text":"result","line":1794,"char":94407,"type":"identifier"},{"text":"size","line":1794,"char":94414,"type":"identifier"},{"text":"Set","line":1795,"char":94434,"type":"identifier"},{"text":"String","line":1795,"char":94438,"type":"identifier"},{"text":"LinkedHashSet","line":1795,"char":94458,"type":"identifier"},{"text":"paths","line":1796,"char":94486,"type":"identifier"},{"text":"addAll","line":1796,"char":94492,"type":"identifier"},{"text":"result","line":1796,"char":94499,"type":"identifier"},{"text":"stream","line":1796,"char":94506,"type":"identifier"},{"text":"map","line":1796,"char":94515,"type":"identifier"},{"text":"ItemReference","line":1796,"char":94519,"type":"identifier"},{"text":"getPath","line":1796,"char":94534,"type":"identifier"},{"text":"collect","line":1796,"char":94543,"type":"identifier"},{"text":"Collectors","line":1796,"char":94551,"type":"identifier"},{"text":"toList","line":1796,"char":94562,"type":"identifier"},{"text":"Assert","line":1797,"char":94582,"type":"identifier"},{"text":"assertTrue","line":1797,"char":94589,"type":"identifier"},{"text":"paths","line":1797,"char":94600,"type":"identifier"},{"text":"contains","line":1797,"char":94606,"type":"identifier"},{"text":"Assert","line":1798,"char":94667,"type":"identifier"},{"text":"assertTrue","line":1798,"char":94674,"type":"identifier"},{"text":"paths","line":1798,"char":94685,"type":"identifier"},{"text":"contains","line":1798,"char":94691,"type":"identifier"},{"text":"Assert","line":1799,"char":94756,"type":"identifier"},{"text":"assertFalse","line":1799,"char":94763,"type":"identifier"},{"text":"paths","line":1799,"char":94775,"type":"identifier"},{"text":"contains","line":1799,"char":94781,"type":"identifier"},{"text":"Exception","line":1804,"char":94946,"type":"identifier"},{"text":"String","line":1805,"char":94966,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1806,"char":95044,"type":"identifier"},{"text":"NOT_OPERATOR","line":1806,"char":95064,"type":"identifier"},{"text":"URL_ENCODED_SPACE","line":1806,"char":95079,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1806,"char":95099,"type":"identifier"},{"text":"URL_ENCODED_QUOTES","line":1807,"char":95166,"type":"identifier"},{"text":"RegisteredProject","line":1808,"char":95194,"type":"identifier"},{"text":"pm","line":1808,"char":95224,"type":"identifier"},{"text":"getProject","line":1808,"char":95227,"type":"identifier"},{"text":"myProject","line":1809,"char":95261,"type":"identifier"},{"text":"getBaseFolder","line":1809,"char":95271,"type":"identifier"},{"text":"createFolder","line":1809,"char":95287,"type":"identifier"},{"text":"createFile","line":1809,"char":95307,"type":"identifier"},{"text":"getBytes","line":1809,"char":95386,"type":"identifier"},{"text":"Charset","line":1809,"char":95395,"type":"identifier"},{"text":"defaultCharset","line":1809,"char":95403,"type":"identifier"},{"text":"myProject","line":1810,"char":95431,"type":"identifier"},{"text":"getBaseFolder","line":1810,"char":95441,"type":"identifier"},{"text":"createFolder","line":1810,"char":95457,"type":"identifier"},{"text":"createFile","line":1811,"char":95493,"type":"identifier"},{"text":"getBytes","line":1811,"char":95586,"type":"identifier"},{"text":"Charset","line":1811,"char":95595,"type":"identifier"},{"text":"defaultCharset","line":1811,"char":95603,"type":"identifier"},{"text":"myProject","line":1812,"char":95631,"type":"identifier"},{"text":"getBaseFolder","line":1812,"char":95641,"type":"identifier"},{"text":"createFolder","line":1812,"char":95657,"type":"identifier"},{"text":"createFile","line":1812,"char":95675,"type":"identifier"},{"text":"getBytes","line":1812,"char":95752,"type":"identifier"},{"text":"Charset","line":1812,"char":95761,"type":"identifier"},{"text":"defaultCharset","line":1812,"char":95769,"type":"identifier"},{"text":"ContainerResponse","line":1814,"char":95798,"type":"identifier"},{"text":"launcher","line":1815,"char":95843,"type":"identifier"},{"text":"service","line":1815,"char":95852,"type":"identifier"},{"text":"GET","line":1815,"char":95860,"type":"identifier"},{"text":"queryToSearch","line":1815,"char":95921,"type":"identifier"},{"text":"assertEquals","line":1817,"char":96025,"type":"identifier"},{"text":"response","line":1817,"char":96038,"type":"identifier"},{"text":"getStatus","line":1817,"char":96047,"type":"identifier"},{"text":"response","line":1817,"char":96077,"type":"identifier"},{"text":"getEntity","line":1817,"char":96086,"type":"identifier"},{"text":"List","line":1818,"char":96108,"type":"identifier"},{"text":"ItemReference","line":1818,"char":96113,"type":"identifier"},{"text":"List","line":1818,"char":96138,"type":"identifier"},{"text":"ItemReference","line":1818,"char":96143,"type":"identifier"},{"text":"response","line":1818,"char":96158,"type":"identifier"},{"text":"getEntity","line":1818,"char":96167,"type":"identifier"},{"text":"assertEquals","line":1819,"char":96188,"type":"identifier"},{"text":"result","line":1819,"char":96201,"type":"identifier"},{"text":"size","line":1819,"char":96208,"type":"identifier"},{"text":"Set","line":1820,"char":96228,"type":"identifier"},{"text":"String","line":1820,"char":96232,"type":"identifier"},{"text":"LinkedHashSet","line":1820,"char":96252,"type":"identifier"},{"text":"paths","line":1821,"char":96280,"type":"identifier"},{"text":"addAll","line":1821,"char":96286,"type":"identifier"},{"text":"result","line":1821,"char":96293,"type":"identifier"},{"text":"stream","line":1821,"char":96300,"type":"identifier"},{"text":"map","line":1821,"char":96309,"type":"identifier"},{"text":"ItemReference","line":1821,"char":96313,"type":"identifier"},{"text":"getPath","line":1821,"char":96328,"type":"identifier"},{"text":"collect","line":1821,"char":96337,"type":"identifier"},{"text":"Collectors","line":1821,"char":96345,"type":"identifier"},{"text":"toList","line":1821,"char":96356,"type":"identifier"},{"text":"Assert","line":1822,"char":96376,"type":"identifier"},{"text":"assertTrue","line":1822,"char":96383,"type":"identifier"},{"text":"paths","line":1822,"char":96394,"type":"identifier"},{"text":"contains","line":1822,"char":96400,"type":"identifier"},{"text":"Assert","line":1823,"char":96461,"type":"identifier"},{"text":"assertFalse","line":1823,"char":96468,"type":"identifier"},{"text":"paths","line":1823,"char":96480,"type":"identifier"},{"text":"contains","line":1823,"char":96486,"type":"identifier"},{"text":"Assert","line":1824,"char":96548,"type":"identifier"},{"text":"assertFalse","line":1824,"char":96555,"type":"identifier"},{"text":"paths","line":1824,"char":96567,"type":"identifier"},{"text":"contains","line":1824,"char":96573,"type":"identifier"},{"text":"Exception","line":1829,"char":96738,"type":"identifier"},{"text":"String","line":1830,"char":96758,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1831,"char":96827,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1832,"char":96888,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1833,"char":96949,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1834,"char":97024,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1835,"char":97094,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1836,"char":97163,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1837,"char":97233,"type":"identifier"},{"text":"URL_ENCODED_BACKSLASH","line":1838,"char":97319,"type":"identifier"},{"text":"RegisteredProject","line":1839,"char":97377,"type":"identifier"},{"text":"pm","line":1839,"char":97407,"type":"identifier"},{"text":"getProject","line":1839,"char":97410,"type":"identifier"},{"text":"myProject","line":1840,"char":97444,"type":"identifier"},{"text":"getBaseFolder","line":1840,"char":97454,"type":"identifier"},{"text":"createFolder","line":1840,"char":97470,"type":"identifier"},{"text":"createFile","line":1841,"char":97508,"type":"identifier"},{"text":"getBytes","line":1841,"char":97602,"type":"identifier"},{"text":"Charset","line":1841,"char":97611,"type":"identifier"},{"text":"defaultCharset","line":1841,"char":97619,"type":"identifier"},{"text":"ContainerResponse","line":1843,"char":97648,"type":"identifier"},{"text":"launcher","line":1843,"char":97677,"type":"identifier"},{"text":"service","line":1843,"char":97686,"type":"identifier"},{"text":"GET","line":1843,"char":97694,"type":"identifier"},{"text":"queryToSearch","line":1843,"char":97755,"type":"identifier"},{"text":"assertEquals","line":1845,"char":97880,"type":"identifier"},{"text":"response","line":1845,"char":97893,"type":"identifier"},{"text":"getStatus","line":1845,"char":97902,"type":"identifier"},{"text":"response","line":1845,"char":97932,"type":"identifier"},{"text":"getEntity","line":1845,"char":97941,"type":"identifier"},{"text":"List","line":1846,"char":97963,"type":"identifier"},{"text":"ItemReference","line":1846,"char":97968,"type":"identifier"},{"text":"List","line":1846,"char":97993,"type":"identifier"},{"text":"ItemReference","line":1846,"char":97998,"type":"identifier"},{"text":"response","line":1846,"char":98013,"type":"identifier"},{"text":"getEntity","line":1846,"char":98022,"type":"identifier"},{"text":"assertEquals","line":1847,"char":98043,"type":"identifier"},{"text":"result","line":1847,"char":98056,"type":"identifier"},{"text":"size","line":1847,"char":98063,"type":"identifier"},{"text":"Set","line":1848,"char":98083,"type":"identifier"},{"text":"String","line":1848,"char":98087,"type":"identifier"},{"text":"LinkedHashSet","line":1848,"char":98107,"type":"identifier"},{"text":"paths","line":1849,"char":98135,"type":"identifier"},{"text":"addAll","line":1849,"char":98141,"type":"identifier"},{"text":"result","line":1849,"char":98148,"type":"identifier"},{"text":"stream","line":1849,"char":98155,"type":"identifier"},{"text":"map","line":1849,"char":98164,"type":"identifier"},{"text":"ItemReference","line":1849,"char":98168,"type":"identifier"},{"text":"getPath","line":1849,"char":98183,"type":"identifier"},{"text":"collect","line":1849,"char":98192,"type":"identifier"},{"text":"Collectors","line":1849,"char":98200,"type":"identifier"},{"text":"toList","line":1849,"char":98211,"type":"identifier"},{"text":"Assert","line":1850,"char":98231,"type":"identifier"},{"text":"assertTrue","line":1850,"char":98238,"type":"identifier"},{"text":"paths","line":1850,"char":98249,"type":"identifier"},{"text":"contains","line":1850,"char":98255,"type":"identifier"},{"text":"Exception","line":1855,"char":98395,"type":"identifier"},{"text":"RegisteredProject","line":1856,"char":98415,"type":"identifier"},{"text":"pm","line":1856,"char":98445,"type":"identifier"},{"text":"getProject","line":1856,"char":98448,"type":"identifier"},{"text":"myProject","line":1857,"char":98482,"type":"identifier"},{"text":"getBaseFolder","line":1857,"char":98492,"type":"identifier"},{"text":"createFolder","line":1857,"char":98508,"type":"identifier"},{"text":"createFile","line":1857,"char":98528,"type":"identifier"},{"text":"getBytes","line":1857,"char":98558,"type":"identifier"},{"text":"Charset","line":1857,"char":98567,"type":"identifier"},{"text":"defaultCharset","line":1857,"char":98575,"type":"identifier"},{"text":"myProject","line":1858,"char":98603,"type":"identifier"},{"text":"getBaseFolder","line":1858,"char":98613,"type":"identifier"},{"text":"createFolder","line":1858,"char":98629,"type":"identifier"},{"text":"createFile","line":1858,"char":98649,"type":"identifier"},{"text":"getBytes","line":1858,"char":98679,"type":"identifier"},{"text":"Charset","line":1858,"char":98688,"type":"identifier"},{"text":"defaultCharset","line":1858,"char":98696,"type":"identifier"},{"text":"myProject","line":1859,"char":98724,"type":"identifier"},{"text":"getBaseFolder","line":1859,"char":98734,"type":"identifier"},{"text":"createFolder","line":1859,"char":98750,"type":"identifier"},{"text":"createFile","line":1859,"char":98768,"type":"identifier"},{"text":"getBytes","line":1859,"char":98794,"type":"identifier"},{"text":"Charset","line":1859,"char":98803,"type":"identifier"},{"text":"defaultCharset","line":1859,"char":98811,"type":"identifier"},{"text":"ContainerResponse","line":1861,"char":98840,"type":"identifier"},{"text":"launcher","line":1861,"char":98869,"type":"identifier"},{"text":"service","line":1861,"char":98878,"type":"identifier"},{"text":"GET","line":1861,"char":98886,"type":"identifier"},{"text":"assertEquals","line":1864,"char":99134,"type":"identifier"},{"text":"response","line":1864,"char":99147,"type":"identifier"},{"text":"getStatus","line":1864,"char":99156,"type":"identifier"},{"text":"response","line":1864,"char":99186,"type":"identifier"},{"text":"getEntity","line":1864,"char":99195,"type":"identifier"},{"text":"List","line":1865,"char":99217,"type":"identifier"},{"text":"ItemReference","line":1865,"char":99222,"type":"identifier"},{"text":"List","line":1865,"char":99247,"type":"identifier"},{"text":"ItemReference","line":1865,"char":99252,"type":"identifier"},{"text":"response","line":1865,"char":99267,"type":"identifier"},{"text":"getEntity","line":1865,"char":99276,"type":"identifier"},{"text":"assertEquals","line":1866,"char":99297,"type":"identifier"},{"text":"result","line":1866,"char":99310,"type":"identifier"},{"text":"size","line":1866,"char":99317,"type":"identifier"},{"text":"assertEqualsNoOrder","line":1867,"char":99337,"type":"identifier"},{"text":"Object","line":1867,"char":99361,"type":"identifier"},{"text":"result","line":1868,"char":99408,"type":"identifier"},{"text":"get","line":1868,"char":99415,"type":"identifier"},{"text":"getPath","line":1868,"char":99422,"type":"identifier"},{"text":"result","line":1869,"char":99469,"type":"identifier"},{"text":"get","line":1869,"char":99476,"type":"identifier"},{"text":"getPath","line":1869,"char":99483,"type":"identifier"},{"text":"Object","line":1871,"char":99556,"type":"identifier"},{"text":"Exception","line":1879,"char":99824,"type":"identifier"},{"text":"RegisteredProject","line":1880,"char":99844,"type":"identifier"},{"text":"pm","line":1880,"char":99874,"type":"identifier"},{"text":"getProject","line":1880,"char":99877,"type":"identifier"},{"text":"myProject","line":1881,"char":99911,"type":"identifier"},{"text":"getBaseFolder","line":1881,"char":99921,"type":"identifier"},{"text":"createFolder","line":1881,"char":99937,"type":"identifier"},{"text":"createFile","line":1881,"char":99957,"type":"identifier"},{"text":"getBytes","line":1881,"char":99983,"type":"identifier"},{"text":"Charset","line":1881,"char":99992,"type":"identifier"},{"text":"defaultCharset","line":1881,"char":100000,"type":"identifier"},{"text":"myProject","line":1882,"char":100028,"type":"identifier"},{"text":"getBaseFolder","line":1882,"char":100038,"type":"identifier"},{"text":"createFolder","line":1882,"char":100054,"type":"identifier"},{"text":"createFile","line":1882,"char":100074,"type":"identifier"},{"text":"getBytes","line":1882,"char":100100,"type":"identifier"},{"text":"Charset","line":1882,"char":100109,"type":"identifier"},{"text":"defaultCharset","line":1882,"char":100117,"type":"identifier"},{"text":"myProject","line":1883,"char":100145,"type":"identifier"},{"text":"getBaseFolder","line":1883,"char":100155,"type":"identifier"},{"text":"createFolder","line":1883,"char":100171,"type":"identifier"},{"text":"createFile","line":1883,"char":100189,"type":"identifier"},{"text":"getBytes","line":1883,"char":100219,"type":"identifier"},{"text":"Charset","line":1883,"char":100228,"type":"identifier"},{"text":"defaultCharset","line":1883,"char":100236,"type":"identifier"},{"text":"ContainerResponse","line":1885,"char":100265,"type":"identifier"},{"text":"launcher","line":1885,"char":100294,"type":"identifier"},{"text":"service","line":1885,"char":100303,"type":"identifier"},{"text":"GET","line":1885,"char":100311,"type":"identifier"},{"text":"assertEquals","line":1888,"char":100549,"type":"identifier"},{"text":"response","line":1888,"char":100562,"type":"identifier"},{"text":"getStatus","line":1888,"char":100571,"type":"identifier"},{"text":"response","line":1888,"char":100601,"type":"identifier"},{"text":"getEntity","line":1888,"char":100610,"type":"identifier"},{"text":"List","line":1889,"char":100632,"type":"identifier"},{"text":"ItemReference","line":1889,"char":100637,"type":"identifier"},{"text":"List","line":1889,"char":100662,"type":"identifier"},{"text":"ItemReference","line":1889,"char":100667,"type":"identifier"},{"text":"response","line":1889,"char":100682,"type":"identifier"},{"text":"getEntity","line":1889,"char":100691,"type":"identifier"},{"text":"assertEquals","line":1890,"char":100712,"type":"identifier"},{"text":"result","line":1890,"char":100725,"type":"identifier"},{"text":"size","line":1890,"char":100732,"type":"identifier"},{"text":"Assert","line":1891,"char":100752,"type":"identifier"},{"text":"assertTrue","line":1891,"char":100759,"type":"identifier"},{"text":"result","line":1891,"char":100770,"type":"identifier"},{"text":"get","line":1891,"char":100777,"type":"identifier"},{"text":"getPath","line":1891,"char":100784,"type":"identifier"},{"text":"equals","line":1891,"char":100794,"type":"identifier"},{"text":"ItemReference","line":1894,"char":100871,"type":"identifier"},{"text":"Link","line":1895,"char":100901,"type":"identifier"},{"text":"item","line":1895,"char":100913,"type":"identifier"},{"text":"getLink","line":1895,"char":100918,"type":"identifier"},{"text":"assertNotNull","line":1896,"char":100945,"type":"identifier"},{"text":"link","line":1896,"char":100959,"type":"identifier"},{"text":"assertEquals","line":1897,"char":100974,"type":"identifier"},{"text":"link","line":1897,"char":100987,"type":"identifier"},{"text":"getMethod","line":1897,"char":100992,"type":"identifier"},{"text":"DELETE","line":1897,"char":101005,"type":"identifier"},{"text":"assertEquals","line":1898,"char":101022,"type":"identifier"},{"text":"link","line":1898,"char":101035,"type":"identifier"},{"text":"getHref","line":1898,"char":101040,"type":"identifier"},{"text":"item","line":1898,"char":101090,"type":"identifier"},{"text":"getPath","line":1898,"char":101095,"type":"identifier"},{"text":"link","line":1899,"char":101115,"type":"identifier"},{"text":"item","line":1899,"char":101122,"type":"identifier"},{"text":"getLink","line":1899,"char":101127,"type":"identifier"},{"text":"assertNotNull","line":1900,"char":101162,"type":"identifier"},{"text":"link","line":1900,"char":101176,"type":"identifier"},{"text":"assertEquals","line":1901,"char":101191,"type":"identifier"},{"text":"link","line":1901,"char":101204,"type":"identifier"},{"text":"getMethod","line":1901,"char":101209,"type":"identifier"},{"text":"PUT","line":1901,"char":101222,"type":"identifier"},{"text":"assertEquals","line":1902,"char":101236,"type":"identifier"},{"text":"link","line":1902,"char":101249,"type":"identifier"},{"text":"getConsumes","line":1902,"char":101254,"type":"identifier"},{"text":"assertEquals","line":1903,"char":101285,"type":"identifier"},{"text":"link","line":1903,"char":101298,"type":"identifier"},{"text":"getHref","line":1903,"char":101303,"type":"identifier"},{"text":"item","line":1903,"char":101363,"type":"identifier"},{"text":"getPath","line":1903,"char":101368,"type":"identifier"},{"text":"ItemReference","line":1906,"char":101424,"type":"identifier"},{"text":"Link","line":1907,"char":101454,"type":"identifier"},{"text":"item","line":1907,"char":101466,"type":"identifier"},{"text":"getLink","line":1907,"char":101471,"type":"identifier"},{"text":"assertNotNull","line":1908,"char":101500,"type":"identifier"},{"text":"link","line":1908,"char":101514,"type":"identifier"},{"text":"assertEquals","line":1909,"char":101529,"type":"identifier"},{"text":"link","line":1909,"char":101542,"type":"identifier"},{"text":"getMethod","line":1909,"char":101547,"type":"identifier"},{"text":"GET","line":1909,"char":101560,"type":"identifier"},{"text":"assertEquals","line":1910,"char":101574,"type":"identifier"},{"text":"link","line":1910,"char":101587,"type":"identifier"},{"text":"getHref","line":1910,"char":101592,"type":"identifier"},{"text":"item","line":1910,"char":101650,"type":"identifier"},{"text":"getPath","line":1910,"char":101655,"type":"identifier"},{"text":"assertEquals","line":1911,"char":101675,"type":"identifier"},{"text":"link","line":1911,"char":101688,"type":"identifier"},{"text":"getProduces","line":1911,"char":101693,"type":"identifier"},{"text":"APPLICATION_JSON","line":1911,"char":101708,"type":"identifier"},{"text":"link","line":1913,"char":101736,"type":"identifier"},{"text":"item","line":1913,"char":101743,"type":"identifier"},{"text":"getLink","line":1913,"char":101748,"type":"identifier"},{"text":"assertNotNull","line":1914,"char":101773,"type":"identifier"},{"text":"link","line":1914,"char":101787,"type":"identifier"},{"text":"assertEquals","line":1915,"char":101802,"type":"identifier"},{"text":"link","line":1915,"char":101815,"type":"identifier"},{"text":"getMethod","line":1915,"char":101820,"type":"identifier"},{"text":"GET","line":1915,"char":101833,"type":"identifier"},{"text":"assertEquals","line":1916,"char":101847,"type":"identifier"},{"text":"link","line":1916,"char":101860,"type":"identifier"},{"text":"getHref","line":1916,"char":101865,"type":"identifier"},{"text":"item","line":1916,"char":101919,"type":"identifier"},{"text":"getPath","line":1916,"char":101924,"type":"identifier"},{"text":"assertEquals","line":1917,"char":101944,"type":"identifier"},{"text":"link","line":1917,"char":101957,"type":"identifier"},{"text":"getProduces","line":1917,"char":101962,"type":"identifier"},{"text":"APPLICATION_JSON","line":1917,"char":101977,"type":"identifier"},{"text":"link","line":1918,"char":102004,"type":"identifier"},{"text":"item","line":1918,"char":102011,"type":"identifier"},{"text":"getLink","line":1918,"char":102016,"type":"identifier"},{"text":"assertNotNull","line":1919,"char":102043,"type":"identifier"},{"text":"link","line":1919,"char":102057,"type":"identifier"},{"text":"assertEquals","line":1920,"char":102072,"type":"identifier"},{"text":"link","line":1920,"char":102085,"type":"identifier"},{"text":"getMethod","line":1920,"char":102090,"type":"identifier"},{"text":"DELETE","line":1920,"char":102103,"type":"identifier"},{"text":"assertEquals","line":1921,"char":102120,"type":"identifier"},{"text":"link","line":1921,"char":102133,"type":"identifier"},{"text":"getHref","line":1921,"char":102138,"type":"identifier"},{"text":"item","line":1921,"char":102187,"type":"identifier"},{"text":"getPath","line":1921,"char":102192,"type":"identifier"},{"text":"ProjectConfigDto","line":1927,"char":102252,"type":"identifier"},{"text":"List","line":1928,"char":102288,"type":"identifier"},{"text":"Link","line":1928,"char":102293,"type":"identifier"},{"text":"project","line":1928,"char":102307,"type":"identifier"},{"text":"getLinks","line":1928,"char":102315,"type":"identifier"},{"text":"Link","line":1930,"char":102341,"type":"identifier"},{"text":"links","line":1930,"char":102353,"type":"identifier"},{"text":"link","line":1931,"char":102382,"type":"identifier"},{"text":"getHref","line":1931,"char":102387,"type":"identifier"},{"text":"assertNotNull","line":1933,"char":102459,"type":"identifier"},{"text":"link","line":1933,"char":102473,"type":"identifier"},{"text":"assertEquals","line":1934,"char":102500,"type":"identifier"},{"text":"link","line":1934,"char":102513,"type":"identifier"},{"text":"getMethod","line":1934,"char":102518,"type":"identifier"},{"text":"PUT","line":1934,"char":102531,"type":"identifier"},{"text":"assertEquals","line":1935,"char":102557,"type":"identifier"},{"text":"link","line":1935,"char":102570,"type":"identifier"},{"text":"getHref","line":1935,"char":102575,"type":"identifier"},{"text":"project","line":1935,"char":102624,"type":"identifier"},{"text":"getPath","line":1935,"char":102632,"type":"identifier"},{"text":"assertEquals","line":1936,"char":102664,"type":"identifier"},{"text":"link","line":1936,"char":102677,"type":"identifier"},{"text":"getConsumes","line":1936,"char":102682,"type":"identifier"},{"text":"APPLICATION_JSON","line":1936,"char":102697,"type":"identifier"},{"text":"assertEquals","line":1937,"char":102736,"type":"identifier"},{"text":"link","line":1937,"char":102749,"type":"identifier"},{"text":"getProduces","line":1937,"char":102754,"type":"identifier"},{"text":"APPLICATION_JSON","line":1937,"char":102769,"type":"identifier"},{"text":"assertNotNull","line":1941,"char":102869,"type":"identifier"},{"text":"link","line":1941,"char":102883,"type":"identifier"},{"text":"assertEquals","line":1942,"char":102910,"type":"identifier"},{"text":"link","line":1942,"char":102923,"type":"identifier"},{"text":"getMethod","line":1942,"char":102928,"type":"identifier"},{"text":"GET","line":1942,"char":102941,"type":"identifier"},{"text":"assertEquals","line":1943,"char":102967,"type":"identifier"},{"text":"link","line":1943,"char":102980,"type":"identifier"},{"text":"getHref","line":1943,"char":102985,"type":"identifier"},{"text":"project","line":1943,"char":103043,"type":"identifier"},{"text":"getPath","line":1943,"char":103051,"type":"identifier"},{"text":"assertEquals","line":1944,"char":103083,"type":"identifier"},{"text":"link","line":1944,"char":103096,"type":"identifier"},{"text":"getProduces","line":1944,"char":103101,"type":"identifier"},{"text":"APPLICATION_JSON","line":1944,"char":103116,"type":"identifier"},{"text":"assertNotNull","line":1948,"char":103212,"type":"identifier"},{"text":"link","line":1948,"char":103226,"type":"identifier"},{"text":"assertEquals","line":1949,"char":103253,"type":"identifier"},{"text":"link","line":1949,"char":103266,"type":"identifier"},{"text":"getMethod","line":1949,"char":103271,"type":"identifier"},{"text":"GET","line":1949,"char":103284,"type":"identifier"},{"text":"assertEquals","line":1950,"char":103310,"type":"identifier"},{"text":"link","line":1950,"char":103323,"type":"identifier"},{"text":"getHref","line":1950,"char":103328,"type":"identifier"},{"text":"project","line":1950,"char":103382,"type":"identifier"},{"text":"getPath","line":1950,"char":103390,"type":"identifier"},{"text":"assertEquals","line":1951,"char":103422,"type":"identifier"},{"text":"link","line":1951,"char":103435,"type":"identifier"},{"text":"getProduces","line":1951,"char":103440,"type":"identifier"},{"text":"APPLICATION_JSON","line":1951,"char":103455,"type":"identifier"},{"text":"assertNotNull","line":1955,"char":103554,"type":"identifier"},{"text":"link","line":1955,"char":103568,"type":"identifier"},{"text":"assertEquals","line":1956,"char":103595,"type":"identifier"},{"text":"link","line":1956,"char":103608,"type":"identifier"},{"text":"getMethod","line":1956,"char":103613,"type":"identifier"},{"text":"GET","line":1956,"char":103626,"type":"identifier"},{"text":"assertEquals","line":1957,"char":103652,"type":"identifier"},{"text":"link","line":1957,"char":103665,"type":"identifier"},{"text":"getHref","line":1957,"char":103670,"type":"identifier"},{"text":"project","line":1957,"char":103727,"type":"identifier"},{"text":"getPath","line":1957,"char":103735,"type":"identifier"},{"text":"assertEquals","line":1958,"char":103767,"type":"identifier"},{"text":"link","line":1958,"char":103780,"type":"identifier"},{"text":"getProduces","line":1958,"char":103785,"type":"identifier"},{"text":"APPLICATION_JSON","line":1958,"char":103800,"type":"identifier"},{"text":"assertNotNull","line":1962,"char":103907,"type":"identifier"},{"text":"link","line":1962,"char":103921,"type":"identifier"},{"text":"assertEquals","line":1963,"char":103948,"type":"identifier"},{"text":"link","line":1963,"char":103961,"type":"identifier"},{"text":"getMethod","line":1963,"char":103966,"type":"identifier"},{"text":"GET","line":1963,"char":103979,"type":"identifier"},{"text":"assertEquals","line":1964,"char":104005,"type":"identifier"},{"text":"link","line":1964,"char":104018,"type":"identifier"},{"text":"getHref","line":1964,"char":104023,"type":"identifier"},{"text":"project","line":1964,"char":104079,"type":"identifier"},{"text":"getPath","line":1964,"char":104087,"type":"identifier"},{"text":"assertEquals","line":1965,"char":104119,"type":"identifier"},{"text":"link","line":1965,"char":104132,"type":"identifier"},{"text":"getProduces","line":1965,"char":104137,"type":"identifier"},{"text":"APPLICATION_ZIP","line":1965,"char":104152,"type":"identifier"},{"text":"assertNotNull","line":1969,"char":104249,"type":"identifier"},{"text":"link","line":1969,"char":104263,"type":"identifier"},{"text":"assertEquals","line":1970,"char":104290,"type":"identifier"},{"text":"link","line":1970,"char":104303,"type":"identifier"},{"text":"getMethod","line":1970,"char":104308,"type":"identifier"},{"text":"DELETE","line":1970,"char":104321,"type":"identifier"},{"text":"assertEquals","line":1971,"char":104350,"type":"identifier"},{"text":"link","line":1971,"char":104363,"type":"identifier"},{"text":"getHref","line":1971,"char":104368,"type":"identifier"},{"text":"project","line":1971,"char":104417,"type":"identifier"},{"text":"getPath","line":1971,"char":104425,"type":"identifier"},{"text":"ProjectTypeDef","line":1977,"char":104538,"type":"identifier"},{"text":"LocalProjectType","line":1978,"char":104571,"type":"identifier"},{"text":"String","line":1978,"char":104588,"type":"identifier"},{"text":"String","line":1978,"char":104603,"type":"identifier"},{"text":"typeId","line":1979,"char":104640,"type":"identifier"},{"text":"typeName","line":1979,"char":104648,"type":"identifier"},{"text":"addConstantDefinition","line":1980,"char":104684,"type":"identifier"}]},"highlight":{"content":[" {\n        String myContent = \"<test><em>hello</em></test>\";\n        pm.getProject(\"my_project\").getBaseFolder","().createFolder(\"a/b\").createFile(\"test.txt\", \"<em>hello</em>\".getBytes(Charset.defaultCharset","\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"<em>hello</em>\".getBytes(Charset.defaultCharset","(\"my_project\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"<em>hello</em>","\");\n        myProject.getBaseFolder().createFolder(\"a/b\").createFile(\"test.txt\", \"<em>hello</em>\".getBytes"]}},{"_index":"codesearch","_type":"code","_id":"25054649aa259778cdc37d85814e7ddb40ea243e","_score":0.0,"_source":{"filename":"test/com/facebook/buck/android/aapt/MiniAaptTest.java","content":"/*\n * Copyright 2014-present Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n * not use this file except in compliance with the License. You may obtain\n * a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n */\n\npackage com.facebook.buck.android.aapt;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport com.facebook.buck.android.aapt.MiniAapt.ResourceParseException;\nimport com.facebook.buck.android.aapt.RDotTxtEntry.IdType;\nimport com.facebook.buck.android.aapt.RDotTxtEntry.RType;\nimport com.facebook.buck.rules.DefaultTargetNodeToBuildRuleTransformer;\nimport com.facebook.buck.event.BuckEventBus;\nimport com.facebook.buck.model.BuildId;\nimport com.facebook.buck.rules.BuildRuleResolver;\nimport com.facebook.buck.rules.FakeSourcePath;\nimport com.facebook.buck.rules.SourcePathResolver;\nimport com.facebook.buck.rules.TargetGraph;\nimport com.facebook.buck.testutil.FakeProjectFilesystem;\nimport com.facebook.buck.timing.FakeClock;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSet;\n\nimport org.hamcrest.core.IsEqual;\nimport org.hamcrest.junit.ExpectedException;\nimport org.junit.Rule;\nimport org.junit.Test;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Set;\n\nimport javax.xml.xpath.XPathExpressionException;\n\npublic class MiniAaptTest {\n\n  private static final ImmutableList<String> RESOURCES = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"<Button android:id=\\\"@+id/button3\\\" \",\n        \"style:attribute=\\\"@style/Buck.Theme\\\" \",\n        \"android:background=\\\"@drawable/some_image\\\" />\",\n        \"<TextView tools:showIn=\\\"@layout/some_layout\\\" android:id=\\\"@id/android:empty\\\" />\",\n        \"</LinearLayout>\")\n        .build();\n\n  private final FakeProjectFilesystem filesystem = new FakeProjectFilesystem();\n  private final SourcePathResolver resolver =\n      new SourcePathResolver(\n          new BuildRuleResolver(TargetGraph.EMPTY, new DefaultTargetNodeToBuildRuleTransformer()));\n\n  @Rule\n  public ExpectedException thrown = ExpectedException.none();\n\n  @Test\n  public void testFindingResourceIdsInXml()\n      throws IOException, XPathExpressionException, ResourceParseException {\n    filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n\n    ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();\n    aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertEquals(\n        definitions,\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button3\")));\n\n    assertEquals(\n        references.build(),\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"text\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Buck_Theme\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"button2\")));\n  }\n\n\n  @Test\n  public void testParsingFilesUnderValuesDirectory() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<string name=\\\"hello\\\">Hello, <xliff:g id=\\\"name\\\">%s</xliff:g>!</string>\",\n        \"<plurals name=\\\"people\\\">\",\n        \"   <item quantity=\\\"zero\\\">ignore1</item>\",\n        \"   <item quantity=\\\"many\\\">ignore2</item>\",\n        \"</plurals>\",\n        \"<skip />\",\n        \"<integer name=\\\"number\\\">100</integer>\",\n        \"<dimen name=\\\"dimension\\\">100sp</dimen>\",\n        \"<declare-styleable name=\\\"MyNiceView\\\">\",\n        \"   <attr name=\\\"titleText\\\" />\",\n        \"   <attr name=\\\"subtitleText\\\" format=\\\"string\\\" />\",\n        \"   <attr name=\\\"complexAttr\\\">\",\n        \"       <enum name=\\\"shouldBeIgnored\\\" value=\\\"0\\\" />\",\n        \"       <enum name=\\\"alsoIgnore\\\" value=\\\"1\\\" />\",\n        \"       <flag name=\\\"uselessFlag\\\" value=\\\"0x00\\\" />\",\n        \"   </attr>\",\n        \"   <attr name=\\\"android:layout_gravity\\\" />\",\n        \"   <item name=\\\"should_be_ignored\\\" />\",\n        \"</declare-styleable>\",\n        \"<eat-comment />\",\n        \"<item type=\\\"id\\\" name=\\\"some_id\\\" />\",\n        \"<style name=\\\"Widget.Theme\\\">\",\n        \"  <item name=\\\"ignoreMe\\\" />\",\n        \"</style>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertEquals(\n        definitions,\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"hello\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.PLURALS, \"people\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.INTEGER, \"number\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.DIMEN, \"dimension\"),\n            new FakeRDotTxtEntry(IdType.INT_ARRAY, RType.STYLEABLE, \"MyNiceView\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"MyNiceView_titleText\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"MyNiceView_subtitleText\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"MyNiceView_complexAttr\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"MyNiceView_android_layout_gravity\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"titleText\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"subtitleText\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"complexAttr\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"some_id\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Widget_Theme\")));\n\n    boolean foundElement = false;\n    for (RDotTxtEntry definition : definitions) {\n      if (definition.name.equals(\"MyNiceView\")) {\n        assertEquals(\n            \"{ 0x7f060001,0x7f060002,0x7f060003,0x7f060004 }\",\n            definition.idValue);\n        foundElement = true;\n      }\n    }\n    assertTrue(foundElement);\n  }\n\n  @Test\n  public void testParsingValuesExcludedFromResMap() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources exclude-from-buck-resource-map=\\\"true\\\">\",\n        \"<string name=\\\"hello\\\">Hello, <xliff:g id=\\\"name\\\">%s</xliff:g>!</string>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertTrue(definitions.isEmpty());\n  }\n\n  @Test\n  public void testParsingValuesNotExcludedFromResMap() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources exclude-from-buck-resource-map=\\\"false\\\">\",\n        \"<string name=\\\"hello\\\">Hello, <xliff:g id=\\\"name\\\">%s</xliff:g>!</string>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertEquals(\n        definitions,\n        ImmutableSet.<RDotTxtEntry>of(new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"hello\")));\n  }\n\n  @Test\n  public void testParsingAndroidDrawables() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<bitmap xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\">\",\n        \"  xmlns:fbui=\\\"http://schemas.android.com/apk/res-auto\\\"\",\n        \"  android:src=\\\"@drawable/other_bitmap\\\"\",\n        \"  >\",\n        \"</bitmap>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"android_drawable.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processDrawables(filesystem, Paths.get(\"android_drawable.xml\"));\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertThat(\n        definitions,\n        IsEqual.equalToObject(\n            ImmutableSet.<RDotTxtEntry>of(\n                new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"android_drawable\"))));\n  }\n\n  @Test\n  public void testParsingCustomDrawables() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<app-network xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\">\",\n        \"  xmlns:fbui=\\\"http://schemas.android.com/apk/res-auto\\\"\",\n        \"  fbui:imageUri=\\\"http://facebook.com\\\"\",\n        \"  android:width=\\\"128px\\\"\",\n        \"  android:height=\\\"128px\\\"\",\n        \"  fbui:density=\\\"160\\\"\",\n        \"  >\",\n        \"</app-network>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"custom_drawable.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processDrawables(filesystem, Paths.get(\"custom_drawable.xml\"));\n\n    Set<RDotTxtEntry> definitions = aapt.getResourceCollector().getResources();\n\n    assertThat(\n        definitions,\n        IsEqual.equalToObject(\n            ImmutableSet.<RDotTxtEntry>of(\n                new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"custom_drawable\", true))));\n  }\n\n  @Test(expected = ResourceParseException.class)\n  public void testInvalidResourceType() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<resourcetype name=\\\"number\\\">100</resourcetype>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n  }\n\n  @Test(expected = ResourceParseException.class)\n  public void testInvalidItemResource() throws IOException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<item name=\\\"number\\\">100</item>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n  }\n\n  @Test\n  public void testInvalidDefinition() throws XPathExpressionException, IOException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+string/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@id/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();\n\n    Path resource = Paths.get(\"resource.xml\");\n    filesystem.writeLinesToPath(lines, resource);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    try {\n      aapt.processXmlFile(filesystem, resource, ImmutableSet.builder());\n      fail(\"MiniAapt should throw parsing '@+string/button1'\");\n    } catch (ResourceParseException e) {\n      assertThat(e.getMessage(), containsString(\"Invalid definition of a resource\"));\n    }\n  }\n\n  @Test\n  public void testInvalidReference() throws IOException, XPathExpressionException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@someresource/button2\\\" \",\n        \"android:text=\\\"@string/text\\\" />\",\n        \"</LinearLayout>\")\n        .build();\n\n    Path resource = Paths.get(\"resource.xml\");\n    filesystem.writeLinesToPath(lines, resource);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    try {\n      aapt.processXmlFile(filesystem, resource, ImmutableSet.builder());\n      fail(\"MiniAapt should throw parsing '@someresource/button2'\");\n    } catch (ResourceParseException e) {\n      assertThat(e.getMessage(), containsString(\"Invalid reference '@someresource/button2'\"));\n    }\n  }\n\n  @Test\n  public void testMissingNameAttribute() throws IOException, ResourceParseException {\n    thrown.expect(ResourceParseException.class);\n    thrown.expectMessage(\"Error: expected a 'name' attribute in node 'string' with value 'Howdy!'\");\n\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<string notname=\\\"hello\\\">Howdy!</string>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n  }\n\n  @Test\n  public void testVerifyReferences()\n      throws IOException, XPathExpressionException, ResourceParseException {\n    filesystem.writeLinesToPath(RESOURCES, Paths.get(\"resource.xml\"));\n\n    ImmutableList<String> rDotTxt = ImmutableList.of(\n        \"int string text 0x07010001\",\n        \"int style Buck_Theme 0x07020001\",\n        \"int id button2 0x07030001\");\n\n    Path depRTxt = Paths.get(\"dep/R.txt\");\n    filesystem.writeLinesToPath(rDotTxt, depRTxt);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of(depRTxt));\n    ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();\n    aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);\n\n    Set<RDotTxtEntry> missing = aapt.verifyReferences(filesystem, references.build());\n\n    assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"some_image\")),\n        missing);\n  }\n\n  @Test\n  public void testInvalidNodeId() throws\n      IOException, XPathExpressionException, ResourceParseException {\n    thrown.expect(ResourceParseException.class);\n    thrown.expectMessage(\"Invalid definition of a resource: '@button2'\");\n\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:layout_toLeftOf=\\\"@button2\\\" />\",\n        \"</LinearLayout>\")\n        .build();\n\n    Path resource = Paths.get(\"resource.xml\");\n    filesystem.writeLinesToPath(lines, resource);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processXmlFile(filesystem, resource, ImmutableSet.builder());\n  }\n\n  @Test\n  public void testProcessFileNamesInDirectory() throws IOException, ResourceParseException {\n    filesystem.touch(Paths.get(\"res/drawable/icon.png\"));\n    filesystem.touch(Paths.get(\"res/drawable/another_icon.png.orig\"));\n    filesystem.touch(Paths.get(\"res/drawable-ldpi/nine_patch.9.png\"));\n    filesystem.touch(Paths.get(\"res/drawable-ldpi/.DS_Store\"));\n    filesystem.touch(Paths.get(\"res/transition-v19/some_transition.xml\"));\n    filesystem.writeContentsToPath(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n            \"<resources>\" +\n            \"<bool name=\\\"v\\\">false</bool>\" +\n            \"</resources>\",\n        Paths.get(\"res/values/value.xml~\"));\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n    aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable\"));\n    aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/drawable-ldpi\"));\n    aapt.processFileNamesInDirectory(filesystem, Paths.get(\"res/transition-v19\"));\n    aapt.processValues(\n        filesystem,\n        new BuckEventBus(new FakeClock(0), new BuildId(\"\")),\n        Paths.get(\"res/values\"));\n\n    assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"icon\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.DRAWABLE, \"nine_patch\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.TRANSITION, \"some_transition\")),\n        aapt.getResourceCollector().getResources());\n  }\n\n  @Test\n  public void testDotSeparatedResourceNames() throws\n      IOException, XPathExpressionException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<LinearLayout>\",\n        \"<Button android:id=\\\"@+id/button1\\\" \",\n        \"android:text=\\\"@string/com.buckbuild.taskname\\\" />\",\n        \"</LinearLayout>\")\n        .build();\n\n    Path resource = Paths.get(\"resource.xml\");\n    filesystem.writeLinesToPath(lines, resource);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of());\n\n    ImmutableSet.Builder<RDotTxtEntry> references = ImmutableSet.builder();\n    aapt.processXmlFile(filesystem, Paths.get(\"resource.xml\"), references);\n\n    assertEquals(\n        references.build(),\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"com_buckbuild_taskname\")));\n  }\n\n  @Test\n  public void testUnionResources() throws\n      IOException, XPathExpressionException, ResourceParseException {\n    ImmutableList<String> lines = ImmutableList.<String>builder().add(\n        \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n        \"<resources>\",\n        \"<string name=\\\"buck_string_1\\\">buck text 1 original</string>\",\n        \"<id name=\\\"buck_id_1\\\"/>\",\n        \"<style name=\\\"Buck.Style.1\\\">\",\n        \"  <item name=\\\"ignoreMe\\\" />\",\n        \"</style>\",\n        \"<declare-styleable name=\\\"Buck_Styleable_1\\\">\",\n        \"   <attr name=\\\"attr1_1\\\" />\",\n        \"   <attr name=\\\"attr1_2\\\" format=\\\"string\\\" />\",\n        \"   <attr name=\\\"attr1_3\\\" />\",\n        \"</declare-styleable>\",\n        \"</resources>\")\n        .build();\n\n    filesystem.writeLinesToPath(lines, Paths.get(\"values.xml\"));\n\n    ImmutableList<String> rDotTxt = ImmutableList.of(\n        \"int string buck_string_1 0x07010001\",\n        \"int string buck_string_2 0x07010002\",\n        \"int id buck_id_2 0x07020002\",\n        \"int style Buck_Style_2 0x07030002\",\n        \"int[] styleable Buck_Styleable_2 { 0x07040001,0x07040002,0x07040003 }\",\n        \"int styleable Buck_Styleable_2_attr2_1 0\",\n        \"int styleable Buck_Styleable_2_attr2_2 1\",\n        \"int styleable Buck_Styleable_2_attr2_3 2\",\n        \"int attr attr2_1 0x07050001\",\n        \"int attr attr2_2 0x07050002\",\n        \"int attr attr2_3 0x07050003\"\n        );\n\n    Path depRTxt = Paths.get(\"dep/R.txt\");\n    filesystem.writeLinesToPath(rDotTxt, depRTxt);\n\n    MiniAapt aapt = new MiniAapt(\n        resolver,\n        filesystem,\n        new FakeSourcePath(filesystem, \"res\"),\n        Paths.get(\"R.txt\"),\n        ImmutableSet.of(depRTxt),\n        true);\n    aapt.processValuesFile(filesystem, Paths.get(\"values.xml\"));\n    aapt.resourceUnion();\n\n    Set<RDotTxtEntry> resources = aapt.getResourceCollector().getResources();\n\n    assertEquals(\n        ImmutableSet.<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"buck_string_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"buck_id_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Buck_Style_1\"),\n            new FakeRDotTxtEntry(IdType.INT_ARRAY, RType.STYLEABLE, \"Buck_Styleable_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_1_attr1_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_1_attr1_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_1_attr1_3\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr1_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr1_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr1_3\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"buck_string_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ID, \"buck_id_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLE, \"Buck_Style_2\"),\n            new FakeRDotTxtEntry(IdType.INT_ARRAY, RType.STYLEABLE, \"Buck_Styleable_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_2_attr2_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_2_attr2_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.STYLEABLE, \"Buck_Styleable_2_attr2_3\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr2_1\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr2_2\"),\n            new FakeRDotTxtEntry(IdType.INT, RType.ATTR, \"attr2_3\")\n           ), resources);\n  }\n\n}\n","repository":"https://github.com/facebook/buck.git","language":"java","tokens":[{"text":"com","line":17,"char":615,"type":"package"},{"text":"facebook","line":17,"char":619,"type":"package"},{"text":"buck","line":17,"char":628,"type":"package"},{"text":"android","line":17,"char":633,"type":"package"},{"text":"aapt","line":17,"char":641,"type":"package"},{"text":"org","line":19,"char":662,"type":"import"},{"text":"hamcrest","line":19,"char":666,"type":"import"},{"text":"Matchers","line":19,"char":675,"type":"import"},{"text":"containsString","line":19,"char":684,"type":"import"},{"text":"org","line":20,"char":714,"type":"import"},{"text":"junit","line":20,"char":718,"type":"import"},{"text":"Assert","line":20,"char":724,"type":"import"},{"text":"assertEquals","line":20,"char":731,"type":"import"},{"text":"org","line":21,"char":759,"type":"import"},{"text":"junit","line":21,"char":763,"type":"import"},{"text":"Assert","line":21,"char":769,"type":"import"},{"text":"assertThat","line":21,"char":776,"type":"import"},{"text":"org","line":22,"char":802,"type":"import"},{"text":"junit","line":22,"char":806,"type":"import"},{"text":"Assert","line":22,"char":812,"type":"import"},{"text":"assertTrue","line":22,"char":819,"type":"import"},{"text":"org","line":23,"char":845,"type":"import"},{"text":"junit","line":23,"char":849,"type":"import"},{"text":"Assert","line":23,"char":855,"type":"import"},{"text":"fail","line":23,"char":862,"type":"import"},{"text":"com","line":25,"char":876,"type":"import"},{"text":"facebook","line":25,"char":880,"type":"import"},{"text":"buck","line":25,"char":889,"type":"import"},{"text":"android","line":25,"char":894,"type":"import"},{"text":"aapt","line":25,"char":902,"type":"import"},{"text":"MiniAapt","line":25,"char":907,"type":"import"},{"text":"ResourceParseException","line":25,"char":916,"type":"import"},{"text":"com","line":26,"char":947,"type":"import"},{"text":"facebook","line":26,"char":951,"type":"import"},{"text":"buck","line":26,"char":960,"type":"import"},{"text":"android","line":26,"char":965,"type":"import"},{"text":"aapt","line":26,"char":973,"type":"import"},{"text":"RDotTxtEntry","line":26,"char":978,"type":"import"},{"text":"IdType","line":26,"char":991,"type":"import"},{"text":"com","line":27,"char":1006,"type":"import"},{"text":"facebook","line":27,"char":1010,"type":"import"},{"text":"buck","line":27,"char":1019,"type":"import"},{"text":"android","line":27,"char":1024,"type":"import"},{"text":"aapt","line":27,"char":1032,"type":"import"},{"text":"RDotTxtEntry","line":27,"char":1037,"type":"import"},{"text":"RType","line":27,"char":1050,"type":"import"},{"text":"com","line":28,"char":1064,"type":"import"},{"text":"facebook","line":28,"char":1068,"type":"import"},{"text":"buck","line":28,"char":1077,"type":"import"},{"text":"rules","line":28,"char":1082,"type":"import"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":28,"char":1088,"type":"import"},{"text":"com","line":29,"char":1136,"type":"import"},{"text":"facebook","line":29,"char":1140,"type":"import"},{"text":"buck","line":29,"char":1149,"type":"import"},{"text":"event","line":29,"char":1154,"type":"import"},{"text":"BuckEventBus","line":29,"char":1160,"type":"import"},{"text":"com","line":30,"char":1181,"type":"import"},{"text":"facebook","line":30,"char":1185,"type":"import"},{"text":"buck","line":30,"char":1194,"type":"import"},{"text":"model","line":30,"char":1199,"type":"import"},{"text":"BuildId","line":30,"char":1205,"type":"import"},{"text":"com","line":31,"char":1221,"type":"import"},{"text":"facebook","line":31,"char":1225,"type":"import"},{"text":"buck","line":31,"char":1234,"type":"import"},{"text":"rules","line":31,"char":1239,"type":"import"},{"text":"BuildRuleResolver","line":31,"char":1245,"type":"import"},{"text":"com","line":32,"char":1271,"type":"import"},{"text":"facebook","line":32,"char":1275,"type":"import"},{"text":"buck","line":32,"char":1284,"type":"import"},{"text":"rules","line":32,"char":1289,"type":"import"},{"text":"FakeSourcePath","line":32,"char":1295,"type":"import"},{"text":"com","line":33,"char":1318,"type":"import"},{"text":"facebook","line":33,"char":1322,"type":"import"},{"text":"buck","line":33,"char":1331,"type":"import"},{"text":"rules","line":33,"char":1336,"type":"import"},{"text":"SourcePathResolver","line":33,"char":1342,"type":"import"},{"text":"com","line":34,"char":1369,"type":"import"},{"text":"facebook","line":34,"char":1373,"type":"import"},{"text":"buck","line":34,"char":1382,"type":"import"},{"text":"rules","line":34,"char":1387,"type":"import"},{"text":"TargetGraph","line":34,"char":1393,"type":"import"},{"text":"com","line":35,"char":1413,"type":"import"},{"text":"facebook","line":35,"char":1417,"type":"import"},{"text":"buck","line":35,"char":1426,"type":"import"},{"text":"testutil","line":35,"char":1431,"type":"import"},{"text":"FakeProjectFilesystem","line":35,"char":1440,"type":"import"},{"text":"com","line":36,"char":1470,"type":"import"},{"text":"facebook","line":36,"char":1474,"type":"import"},{"text":"buck","line":36,"char":1483,"type":"import"},{"text":"timing","line":36,"char":1488,"type":"import"},{"text":"FakeClock","line":36,"char":1495,"type":"import"},{"text":"com","line":37,"char":1513,"type":"import"},{"text":"google","line":37,"char":1517,"type":"import"},{"text":"common","line":37,"char":1524,"type":"import"},{"text":"collect","line":37,"char":1531,"type":"import"},{"text":"ImmutableList","line":37,"char":1539,"type":"import"},{"text":"com","line":38,"char":1561,"type":"import"},{"text":"google","line":38,"char":1565,"type":"import"},{"text":"common","line":38,"char":1572,"type":"import"},{"text":"collect","line":38,"char":1579,"type":"import"},{"text":"ImmutableSet","line":38,"char":1587,"type":"import"},{"text":"org","line":40,"char":1609,"type":"import"},{"text":"hamcrest","line":40,"char":1613,"type":"import"},{"text":"core","line":40,"char":1622,"type":"import"},{"text":"IsEqual","line":40,"char":1627,"type":"import"},{"text":"org","line":41,"char":1643,"type":"import"},{"text":"hamcrest","line":41,"char":1647,"type":"import"},{"text":"junit","line":41,"char":1656,"type":"import"},{"text":"ExpectedException","line":41,"char":1662,"type":"import"},{"text":"org","line":42,"char":1688,"type":"import"},{"text":"junit","line":42,"char":1692,"type":"import"},{"text":"Rule","line":42,"char":1698,"type":"import"},{"text":"org","line":43,"char":1711,"type":"import"},{"text":"junit","line":43,"char":1715,"type":"import"},{"text":"Test","line":43,"char":1721,"type":"import"},{"text":"java","line":45,"char":1735,"type":"import"},{"text":"io","line":45,"char":1740,"type":"import"},{"text":"IOException","line":45,"char":1743,"type":"import"},{"text":"java","line":46,"char":1763,"type":"import"},{"text":"nio","line":46,"char":1768,"type":"import"},{"text":"file","line":46,"char":1772,"type":"import"},{"text":"Path","line":46,"char":1777,"type":"import"},{"text":"java","line":47,"char":1790,"type":"import"},{"text":"nio","line":47,"char":1795,"type":"import"},{"text":"file","line":47,"char":1799,"type":"import"},{"text":"Paths","line":47,"char":1804,"type":"import"},{"text":"java","line":48,"char":1818,"type":"import"},{"text":"util","line":48,"char":1823,"type":"import"},{"text":"Set","line":48,"char":1828,"type":"import"},{"text":"javax","line":50,"char":1841,"type":"import"},{"text":"xml","line":50,"char":1847,"type":"import"},{"text":"xpath","line":50,"char":1851,"type":"import"},{"text":"XPathExpressionException","line":50,"char":1857,"type":"import"},{"text":"MiniAaptTest","line":52,"char":1897,"type":"class"},{"text":"RESOURCES","line":54,"char":1958,"type":"variable"},{"text":"filesystem","line":67,"char":2565,"type":"variable"},{"text":"resolver","line":68,"char":2642,"type":"variable"},{"text":"thrown","line":73,"char":2819,"type":"variable"},{"text":"aapt","line":80,"char":3069,"type":"variable"},{"text":"references","line":87,"char":3271,"type":"variable"},{"text":"definitions","line":90,"char":3407,"type":"variable"},{"text":"lines","line":110,"char":4190,"type":"variable"},{"text":"aapt","line":142,"char":5525,"type":"variable"},{"text":"definitions","line":150,"char":5775,"type":"variable"},{"text":"foundElement","line":170,"char":7019,"type":"variable"},{"text":"definition","line":171,"char":7063,"type":"variable"},{"text":"lines","line":184,"char":7468,"type":"variable"},{"text":"aapt","line":193,"char":7837,"type":"variable"},{"text":"definitions","line":201,"char":8087,"type":"variable"},{"text":"lines","line":208,"char":8324,"type":"variable"},{"text":"aapt","line":217,"char":8694,"type":"variable"},{"text":"definitions","line":225,"char":8944,"type":"variable"},{"text":"lines","line":234,"char":9267,"type":"variable"},{"text":"aapt","line":245,"char":9711,"type":"variable"},{"text":"definitions","line":253,"char":9970,"type":"variable"},{"text":"lines","line":264,"char":10356,"type":"variable"},{"text":"aapt","line":278,"char":10917,"type":"variable"},{"text":"definitions","line":286,"char":11175,"type":"variable"},{"text":"lines","line":297,"char":11604,"type":"variable"},{"text":"aapt","line":306,"char":11908,"type":"variable"},{"text":"lines","line":317,"char":12300,"type":"variable"},{"text":"aapt","line":326,"char":12588,"type":"variable"},{"text":"lines","line":337,"char":12939,"type":"variable"},{"text":"resource","line":346,"char":13267,"type":"variable"},{"text":"aapt","line":349,"char":13369,"type":"variable"},{"text":"lines","line":365,"char":13934,"type":"variable"},{"text":"resource","line":374,"char":14268,"type":"variable"},{"text":"aapt","line":377,"char":14370,"type":"variable"},{"text":"lines","line":396,"char":15102,"type":"variable"},{"text":"aapt","line":405,"char":15399,"type":"variable"},{"text":"rDotTxt","line":419,"char":15851,"type":"variable"},{"text":"depRTxt","line":424,"char":16008,"type":"variable"},{"text":"aapt","line":427,"char":16107,"type":"variable"},{"text":"references","line":433,"char":16315,"type":"variable"},{"text":"missing","line":436,"char":16451,"type":"variable"},{"text":"lines","line":450,"char":16943,"type":"variable"},{"text":"resource","line":458,"char":17222,"type":"variable"},{"text":"aapt","line":461,"char":17324,"type":"variable"},{"text":"aapt","line":484,"char":18254,"type":"variable"},{"text":"lines","line":509,"char":19300,"type":"variable"},{"text":"resource","line":517,"char":19590,"type":"variable"},{"text":"aapt","line":520,"char":19692,"type":"variable"},{"text":"references","line":527,"char":19894,"type":"variable"},{"text":"lines","line":539,"char":20332,"type":"variable"},{"text":"rDotTxt","line":557,"char":21025,"type":"variable"},{"text":"depRTxt","line":571,"char":21605,"type":"variable"},{"text":"aapt","line":574,"char":21704,"type":"variable"},{"text":"resources","line":584,"char":22001,"type":"variable"},{"text":"Rule","line":72,"char":2787,"type":"annotation"},{"text":"Test","line":75,"char":2858,"type":"annotation"},{"text":"Test","line":108,"char":4061,"type":"annotation"},{"text":"Test","line":182,"char":7340,"type":"annotation"},{"text":"Test","line":206,"char":8193,"type":"annotation"},{"text":"Test","line":232,"char":9147,"type":"annotation"},{"text":"Test","line":262,"char":10237,"type":"annotation"},{"text":"Test","line":295,"char":11447,"type":"annotation"},{"text":"Test","line":315,"char":12143,"type":"annotation"},{"text":"Test","line":335,"char":12823,"type":"annotation"},{"text":"Test","line":363,"char":13819,"type":"annotation"},{"text":"Test","line":391,"char":14834,"type":"annotation"},{"text":"Test","line":414,"char":15634,"type":"annotation"},{"text":"Test","line":444,"char":16677,"type":"annotation"},{"text":"Test","line":470,"char":17565,"type":"annotation"},{"text":"Test","line":506,"char":19146,"type":"annotation"},{"text":"Test","line":536,"char":20189,"type":"annotation"},{"text":"testFindingResourceIdsInXml","line":76,"char":2877,"type":"method"},{"text":"testParsingFilesUnderValuesDirectory","line":109,"char":4080,"type":"method"},{"text":"testParsingValuesExcludedFromResMap","line":183,"char":7359,"type":"method"},{"text":"testParsingValuesNotExcludedFromResMap","line":207,"char":8212,"type":"method"},{"text":"testParsingAndroidDrawables","line":233,"char":9166,"type":"method"},{"text":"testParsingCustomDrawables","line":263,"char":10256,"type":"method"},{"text":"testInvalidResourceType","line":296,"char":11507,"type":"method"},{"text":"testInvalidItemResource","line":316,"char":12203,"type":"method"},{"text":"testInvalidDefinition","line":336,"char":12842,"type":"method"},{"text":"testInvalidReference","line":364,"char":13838,"type":"method"},{"text":"testMissingNameAttribute","line":392,"char":14853,"type":"method"},{"text":"testVerifyReferences","line":415,"char":15653,"type":"method"},{"text":"testInvalidNodeId","line":445,"char":16696,"type":"method"},{"text":"testProcessFileNamesInDirectory","line":471,"char":17584,"type":"method"},{"text":"testDotSeparatedResourceNames","line":507,"char":19165,"type":"method"},{"text":"testUnionResources","line":537,"char":20208,"type":"method"},{"text":"ImmutableList","line":54,"char":1936,"type":"identifier"},{"text":"String","line":54,"char":1950,"type":"identifier"},{"text":"ImmutableList","line":54,"char":1970,"type":"identifier"},{"text":"String","line":54,"char":1985,"type":"identifier"},{"text":"builder","line":54,"char":1992,"type":"identifier"},{"text":"add","line":54,"char":2002,"type":"identifier"},{"text":"build","line":65,"char":2517,"type":"identifier"},{"text":"FakeProjectFilesystem","line":67,"char":2543,"type":"identifier"},{"text":"FakeProjectFilesystem","line":67,"char":2582,"type":"identifier"},{"text":"SourcePathResolver","line":68,"char":2623,"type":"identifier"},{"text":"SourcePathResolver","line":69,"char":2663,"type":"identifier"},{"text":"BuildRuleResolver","line":70,"char":2697,"type":"identifier"},{"text":"TargetGraph","line":70,"char":2715,"type":"identifier"},{"text":"EMPTY","line":70,"char":2727,"type":"identifier"},{"text":"DefaultTargetNodeToBuildRuleTransformer","line":70,"char":2738,"type":"identifier"},{"text":"ExpectedException","line":73,"char":2801,"type":"identifier"},{"text":"ExpectedException","line":73,"char":2828,"type":"identifier"},{"text":"none","line":73,"char":2846,"type":"identifier"},{"text":"IOException","line":77,"char":2920,"type":"identifier"},{"text":"XPathExpressionException","line":77,"char":2933,"type":"identifier"},{"text":"ResourceParseException","line":77,"char":2959,"type":"identifier"},{"text":"filesystem","line":78,"char":2988,"type":"identifier"},{"text":"writeLinesToPath","line":78,"char":2999,"type":"identifier"},{"text":"RESOURCES","line":78,"char":3016,"type":"identifier"},{"text":"Paths","line":78,"char":3027,"type":"identifier"},{"text":"get","line":78,"char":3033,"type":"identifier"},{"text":"MiniAapt","line":80,"char":3060,"type":"identifier"},{"text":"MiniAapt","line":80,"char":3080,"type":"identifier"},{"text":"resolver","line":81,"char":3098,"type":"identifier"},{"text":"filesystem","line":82,"char":3116,"type":"identifier"},{"text":"FakeSourcePath","line":83,"char":3140,"type":"identifier"},{"text":"filesystem","line":83,"char":3155,"type":"identifier"},{"text":"Paths","line":84,"char":3183,"type":"identifier"},{"text":"get","line":84,"char":3189,"type":"identifier"},{"text":"ImmutableSet","line":85,"char":3211,"type":"identifier"},{"text":"of","line":85,"char":3224,"type":"identifier"},{"text":"ImmutableSet","line":87,"char":3236,"type":"identifier"},{"text":"Builder","line":87,"char":3249,"type":"identifier"},{"text":"RDotTxtEntry","line":87,"char":3257,"type":"identifier"},{"text":"ImmutableSet","line":87,"char":3284,"type":"identifier"},{"text":"builder","line":87,"char":3297,"type":"identifier"},{"text":"aapt","line":88,"char":3312,"type":"identifier"},{"text":"processXmlFile","line":88,"char":3317,"type":"identifier"},{"text":"filesystem","line":88,"char":3332,"type":"identifier"},{"text":"Paths","line":88,"char":3344,"type":"identifier"},{"text":"get","line":88,"char":3350,"type":"identifier"},{"text":"references","line":88,"char":3371,"type":"identifier"},{"text":"Set","line":90,"char":3389,"type":"identifier"},{"text":"RDotTxtEntry","line":90,"char":3393,"type":"identifier"},{"text":"aapt","line":90,"char":3421,"type":"identifier"},{"text":"getResourceCollector","line":90,"char":3426,"type":"identifier"},{"text":"getResources","line":90,"char":3449,"type":"identifier"},{"text":"assertEquals","line":92,"char":3470,"type":"identifier"},{"text":"definitions","line":93,"char":3492,"type":"identifier"},{"text":"ImmutableSet","line":94,"char":3513,"type":"identifier"},{"text":"RDotTxtEntry","line":94,"char":3527,"type":"identifier"},{"text":"of","line":94,"char":3540,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":95,"char":3560,"type":"identifier"},{"text":"IdType","line":95,"char":3577,"type":"identifier"},{"text":"INT","line":95,"char":3584,"type":"identifier"},{"text":"RType","line":95,"char":3589,"type":"identifier"},{"text":"ID","line":95,"char":3595,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":96,"char":3627,"type":"identifier"},{"text":"IdType","line":96,"char":3644,"type":"identifier"},{"text":"INT","line":96,"char":3651,"type":"identifier"},{"text":"RType","line":96,"char":3656,"type":"identifier"},{"text":"ID","line":96,"char":3662,"type":"identifier"},{"text":"assertEquals","line":98,"char":3685,"type":"identifier"},{"text":"references","line":99,"char":3707,"type":"identifier"},{"text":"build","line":99,"char":3718,"type":"identifier"},{"text":"ImmutableSet","line":100,"char":3735,"type":"identifier"},{"text":"RDotTxtEntry","line":100,"char":3749,"type":"identifier"},{"text":"of","line":100,"char":3762,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":101,"char":3782,"type":"identifier"},{"text":"IdType","line":101,"char":3799,"type":"identifier"},{"text":"INT","line":101,"char":3806,"type":"identifier"},{"text":"RType","line":101,"char":3811,"type":"identifier"},{"text":"DRAWABLE","line":101,"char":3817,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":102,"char":3858,"type":"identifier"},{"text":"IdType","line":102,"char":3875,"type":"identifier"},{"text":"INT","line":102,"char":3882,"type":"identifier"},{"text":"RType","line":102,"char":3887,"type":"identifier"},{"text":"STRING","line":102,"char":3893,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":103,"char":3926,"type":"identifier"},{"text":"IdType","line":103,"char":3943,"type":"identifier"},{"text":"INT","line":103,"char":3950,"type":"identifier"},{"text":"RType","line":103,"char":3955,"type":"identifier"},{"text":"STYLE","line":103,"char":3961,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":104,"char":3999,"type":"identifier"},{"text":"IdType","line":104,"char":4016,"type":"identifier"},{"text":"INT","line":104,"char":4023,"type":"identifier"},{"text":"RType","line":104,"char":4028,"type":"identifier"},{"text":"ID","line":104,"char":4034,"type":"identifier"},{"text":"IOException","line":109,"char":4126,"type":"identifier"},{"text":"ResourceParseException","line":109,"char":4139,"type":"identifier"},{"text":"ImmutableList","line":110,"char":4168,"type":"identifier"},{"text":"String","line":110,"char":4182,"type":"identifier"},{"text":"ImmutableList","line":110,"char":4198,"type":"identifier"},{"text":"String","line":110,"char":4213,"type":"identifier"},{"text":"builder","line":110,"char":4220,"type":"identifier"},{"text":"add","line":110,"char":4230,"type":"identifier"},{"text":"build","line":138,"char":5436,"type":"identifier"},{"text":"filesystem","line":140,"char":5450,"type":"identifier"},{"text":"writeLinesToPath","line":140,"char":5461,"type":"identifier"},{"text":"lines","line":140,"char":5478,"type":"identifier"},{"text":"Paths","line":140,"char":5485,"type":"identifier"},{"text":"get","line":140,"char":5491,"type":"identifier"},{"text":"MiniAapt","line":142,"char":5516,"type":"identifier"},{"text":"MiniAapt","line":142,"char":5536,"type":"identifier"},{"text":"resolver","line":143,"char":5554,"type":"identifier"},{"text":"filesystem","line":144,"char":5572,"type":"identifier"},{"text":"FakeSourcePath","line":145,"char":5596,"type":"identifier"},{"text":"filesystem","line":145,"char":5611,"type":"identifier"},{"text":"Paths","line":146,"char":5639,"type":"identifier"},{"text":"get","line":146,"char":5645,"type":"identifier"},{"text":"ImmutableSet","line":147,"char":5667,"type":"identifier"},{"text":"of","line":147,"char":5680,"type":"identifier"},{"text":"aapt","line":148,"char":5691,"type":"identifier"},{"text":"processValuesFile","line":148,"char":5696,"type":"identifier"},{"text":"filesystem","line":148,"char":5714,"type":"identifier"},{"text":"Paths","line":148,"char":5726,"type":"identifier"},{"text":"get","line":148,"char":5732,"type":"identifier"},{"text":"Set","line":150,"char":5757,"type":"identifier"},{"text":"RDotTxtEntry","line":150,"char":5761,"type":"identifier"},{"text":"aapt","line":150,"char":5789,"type":"identifier"},{"text":"getResourceCollector","line":150,"char":5794,"type":"identifier"},{"text":"getResources","line":150,"char":5817,"type":"identifier"},{"text":"assertEquals","line":152,"char":5838,"type":"identifier"},{"text":"definitions","line":153,"char":5860,"type":"identifier"},{"text":"ImmutableSet","line":154,"char":5881,"type":"identifier"},{"text":"RDotTxtEntry","line":154,"char":5895,"type":"identifier"},{"text":"of","line":154,"char":5908,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":155,"char":5928,"type":"identifier"},{"text":"IdType","line":155,"char":5945,"type":"identifier"},{"text":"INT","line":155,"char":5952,"type":"identifier"},{"text":"RType","line":155,"char":5957,"type":"identifier"},{"text":"STRING","line":155,"char":5963,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":156,"char":5997,"type":"identifier"},{"text":"IdType","line":156,"char":6014,"type":"identifier"},{"text":"INT","line":156,"char":6021,"type":"identifier"},{"text":"RType","line":156,"char":6026,"type":"identifier"},{"text":"PLURALS","line":156,"char":6032,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":157,"char":6068,"type":"identifier"},{"text":"IdType","line":157,"char":6085,"type":"identifier"},{"text":"INT","line":157,"char":6092,"type":"identifier"},{"text":"RType","line":157,"char":6097,"type":"identifier"},{"text":"INTEGER","line":157,"char":6103,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":158,"char":6139,"type":"identifier"},{"text":"IdType","line":158,"char":6156,"type":"identifier"},{"text":"INT","line":158,"char":6163,"type":"identifier"},{"text":"RType","line":158,"char":6168,"type":"identifier"},{"text":"DIMEN","line":158,"char":6174,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":159,"char":6211,"type":"identifier"},{"text":"IdType","line":159,"char":6228,"type":"identifier"},{"text":"INT_ARRAY","line":159,"char":6235,"type":"identifier"},{"text":"RType","line":159,"char":6246,"type":"identifier"},{"text":"STYLEABLE","line":159,"char":6252,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":160,"char":6294,"type":"identifier"},{"text":"IdType","line":160,"char":6311,"type":"identifier"},{"text":"INT","line":160,"char":6318,"type":"identifier"},{"text":"RType","line":160,"char":6323,"type":"identifier"},{"text":"STYLEABLE","line":160,"char":6329,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":161,"char":6381,"type":"identifier"},{"text":"IdType","line":161,"char":6398,"type":"identifier"},{"text":"INT","line":161,"char":6405,"type":"identifier"},{"text":"RType","line":161,"char":6410,"type":"identifier"},{"text":"STYLEABLE","line":161,"char":6416,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":162,"char":6471,"type":"identifier"},{"text":"IdType","line":162,"char":6488,"type":"identifier"},{"text":"INT","line":162,"char":6495,"type":"identifier"},{"text":"RType","line":162,"char":6500,"type":"identifier"},{"text":"STYLEABLE","line":162,"char":6506,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":163,"char":6560,"type":"identifier"},{"text":"IdType","line":163,"char":6577,"type":"identifier"},{"text":"INT","line":163,"char":6584,"type":"identifier"},{"text":"RType","line":163,"char":6589,"type":"identifier"},{"text":"STYLEABLE","line":163,"char":6595,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":164,"char":6660,"type":"identifier"},{"text":"IdType","line":164,"char":6677,"type":"identifier"},{"text":"INT","line":164,"char":6684,"type":"identifier"},{"text":"RType","line":164,"char":6689,"type":"identifier"},{"text":"ATTR","line":164,"char":6695,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":165,"char":6731,"type":"identifier"},{"text":"IdType","line":165,"char":6748,"type":"identifier"},{"text":"INT","line":165,"char":6755,"type":"identifier"},{"text":"RType","line":165,"char":6760,"type":"identifier"},{"text":"ATTR","line":165,"char":6766,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":166,"char":6805,"type":"identifier"},{"text":"IdType","line":166,"char":6822,"type":"identifier"},{"text":"INT","line":166,"char":6829,"type":"identifier"},{"text":"RType","line":166,"char":6834,"type":"identifier"},{"text":"ATTR","line":166,"char":6840,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":167,"char":6878,"type":"identifier"},{"text":"IdType","line":167,"char":6895,"type":"identifier"},{"text":"INT","line":167,"char":6902,"type":"identifier"},{"text":"RType","line":167,"char":6907,"type":"identifier"},{"text":"ID","line":167,"char":6913,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":168,"char":6945,"type":"identifier"},{"text":"IdType","line":168,"char":6962,"type":"identifier"},{"text":"INT","line":168,"char":6969,"type":"identifier"},{"text":"RType","line":168,"char":6974,"type":"identifier"},{"text":"STYLE","line":168,"char":6980,"type":"identifier"},{"text":"RDotTxtEntry","line":171,"char":7050,"type":"identifier"},{"text":"definitions","line":171,"char":7076,"type":"identifier"},{"text":"definition","line":172,"char":7101,"type":"identifier"},{"text":"name","line":172,"char":7112,"type":"identifier"},{"text":"equals","line":172,"char":7117,"type":"identifier"},{"text":"assertEquals","line":173,"char":7149,"type":"identifier"},{"text":"definition","line":175,"char":7238,"type":"identifier"},{"text":"idValue","line":175,"char":7249,"type":"identifier"},{"text":"foundElement","line":176,"char":7267,"type":"identifier"},{"text":"assertTrue","line":179,"char":7306,"type":"identifier"},{"text":"foundElement","line":179,"char":7317,"type":"identifier"},{"text":"IOException","line":183,"char":7404,"type":"identifier"},{"text":"ResourceParseException","line":183,"char":7417,"type":"identifier"},{"text":"ImmutableList","line":184,"char":7446,"type":"identifier"},{"text":"String","line":184,"char":7460,"type":"identifier"},{"text":"ImmutableList","line":184,"char":7476,"type":"identifier"},{"text":"String","line":184,"char":7491,"type":"identifier"},{"text":"builder","line":184,"char":7498,"type":"identifier"},{"text":"add","line":184,"char":7508,"type":"identifier"},{"text":"build","line":189,"char":7748,"type":"identifier"},{"text":"filesystem","line":191,"char":7762,"type":"identifier"},{"text":"writeLinesToPath","line":191,"char":7773,"type":"identifier"},{"text":"lines","line":191,"char":7790,"type":"identifier"},{"text":"Paths","line":191,"char":7797,"type":"identifier"},{"text":"get","line":191,"char":7803,"type":"identifier"},{"text":"MiniAapt","line":193,"char":7828,"type":"identifier"},{"text":"MiniAapt","line":193,"char":7848,"type":"identifier"},{"text":"resolver","line":194,"char":7866,"type":"identifier"},{"text":"filesystem","line":195,"char":7884,"type":"identifier"},{"text":"FakeSourcePath","line":196,"char":7908,"type":"identifier"},{"text":"filesystem","line":196,"char":7923,"type":"identifier"},{"text":"Paths","line":197,"char":7951,"type":"identifier"},{"text":"get","line":197,"char":7957,"type":"identifier"},{"text":"ImmutableSet","line":198,"char":7979,"type":"identifier"},{"text":"of","line":198,"char":7992,"type":"identifier"},{"text":"aapt","line":199,"char":8003,"type":"identifier"},{"text":"processValuesFile","line":199,"char":8008,"type":"identifier"},{"text":"filesystem","line":199,"char":8026,"type":"identifier"},{"text":"Paths","line":199,"char":8038,"type":"identifier"},{"text":"get","line":199,"char":8044,"type":"identifier"},{"text":"Set","line":201,"char":8069,"type":"identifier"},{"text":"RDotTxtEntry","line":201,"char":8073,"type":"identifier"},{"text":"aapt","line":201,"char":8101,"type":"identifier"},{"text":"getResourceCollector","line":201,"char":8106,"type":"identifier"},{"text":"getResources","line":201,"char":8129,"type":"identifier"},{"text":"assertTrue","line":203,"char":8150,"type":"identifier"},{"text":"definitions","line":203,"char":8161,"type":"identifier"},{"text":"isEmpty","line":203,"char":8173,"type":"identifier"},{"text":"IOException","line":207,"char":8260,"type":"identifier"},{"text":"ResourceParseException","line":207,"char":8273,"type":"identifier"},{"text":"ImmutableList","line":208,"char":8302,"type":"identifier"},{"text":"String","line":208,"char":8316,"type":"identifier"},{"text":"ImmutableList","line":208,"char":8332,"type":"identifier"},{"text":"String","line":208,"char":8347,"type":"identifier"},{"text":"builder","line":208,"char":8354,"type":"identifier"},{"text":"add","line":208,"char":8364,"type":"identifier"},{"text":"build","line":213,"char":8605,"type":"identifier"},{"text":"filesystem","line":215,"char":8619,"type":"identifier"},{"text":"writeLinesToPath","line":215,"char":8630,"type":"identifier"},{"text":"lines","line":215,"char":8647,"type":"identifier"},{"text":"Paths","line":215,"char":8654,"type":"identifier"},{"text":"get","line":215,"char":8660,"type":"identifier"},{"text":"MiniAapt","line":217,"char":8685,"type":"identifier"},{"text":"MiniAapt","line":217,"char":8705,"type":"identifier"},{"text":"resolver","line":218,"char":8723,"type":"identifier"},{"text":"filesystem","line":219,"char":8741,"type":"identifier"},{"text":"FakeSourcePath","line":220,"char":8765,"type":"identifier"},{"text":"filesystem","line":220,"char":8780,"type":"identifier"},{"text":"Paths","line":221,"char":8808,"type":"identifier"},{"text":"get","line":221,"char":8814,"type":"identifier"},{"text":"ImmutableSet","line":222,"char":8836,"type":"identifier"},{"text":"of","line":222,"char":8849,"type":"identifier"},{"text":"aapt","line":223,"char":8860,"type":"identifier"},{"text":"processValuesFile","line":223,"char":8865,"type":"identifier"},{"text":"filesystem","line":223,"char":8883,"type":"identifier"},{"text":"Paths","line":223,"char":8895,"type":"identifier"},{"text":"get","line":223,"char":8901,"type":"identifier"},{"text":"Set","line":225,"char":8926,"type":"identifier"},{"text":"RDotTxtEntry","line":225,"char":8930,"type":"identifier"},{"text":"aapt","line":225,"char":8958,"type":"identifier"},{"text":"getResourceCollector","line":225,"char":8963,"type":"identifier"},{"text":"getResources","line":225,"char":8986,"type":"identifier"},{"text":"assertEquals","line":227,"char":9007,"type":"identifier"},{"text":"definitions","line":228,"char":9029,"type":"identifier"},{"text":"ImmutableSet","line":229,"char":9050,"type":"identifier"},{"text":"RDotTxtEntry","line":229,"char":9064,"type":"identifier"},{"text":"of","line":229,"char":9077,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":229,"char":9084,"type":"identifier"},{"text":"IdType","line":229,"char":9101,"type":"identifier"},{"text":"INT","line":229,"char":9108,"type":"identifier"},{"text":"RType","line":229,"char":9113,"type":"identifier"},{"text":"STRING","line":229,"char":9119,"type":"identifier"},{"text":"IOException","line":233,"char":9203,"type":"identifier"},{"text":"ResourceParseException","line":233,"char":9216,"type":"identifier"},{"text":"ImmutableList","line":234,"char":9245,"type":"identifier"},{"text":"String","line":234,"char":9259,"type":"identifier"},{"text":"ImmutableList","line":234,"char":9275,"type":"identifier"},{"text":"String","line":234,"char":9290,"type":"identifier"},{"text":"builder","line":234,"char":9297,"type":"identifier"},{"text":"add","line":234,"char":9307,"type":"identifier"},{"text":"build","line":241,"char":9612,"type":"identifier"},{"text":"filesystem","line":243,"char":9626,"type":"identifier"},{"text":"writeLinesToPath","line":243,"char":9637,"type":"identifier"},{"text":"lines","line":243,"char":9654,"type":"identifier"},{"text":"Paths","line":243,"char":9661,"type":"identifier"},{"text":"get","line":243,"char":9667,"type":"identifier"},{"text":"MiniAapt","line":245,"char":9702,"type":"identifier"},{"text":"MiniAapt","line":245,"char":9722,"type":"identifier"},{"text":"resolver","line":246,"char":9740,"type":"identifier"},{"text":"filesystem","line":247,"char":9758,"type":"identifier"},{"text":"FakeSourcePath","line":248,"char":9782,"type":"identifier"},{"text":"filesystem","line":248,"char":9797,"type":"identifier"},{"text":"Paths","line":249,"char":9825,"type":"identifier"},{"text":"get","line":249,"char":9831,"type":"identifier"},{"text":"ImmutableSet","line":250,"char":9853,"type":"identifier"},{"text":"of","line":250,"char":9866,"type":"identifier"},{"text":"aapt","line":251,"char":9877,"type":"identifier"},{"text":"processDrawables","line":251,"char":9882,"type":"identifier"},{"text":"filesystem","line":251,"char":9899,"type":"identifier"},{"text":"Paths","line":251,"char":9911,"type":"identifier"},{"text":"get","line":251,"char":9917,"type":"identifier"},{"text":"Set","line":253,"char":9952,"type":"identifier"},{"text":"RDotTxtEntry","line":253,"char":9956,"type":"identifier"},{"text":"aapt","line":253,"char":9984,"type":"identifier"},{"text":"getResourceCollector","line":253,"char":9989,"type":"identifier"},{"text":"getResources","line":253,"char":10012,"type":"identifier"},{"text":"assertThat","line":255,"char":10033,"type":"identifier"},{"text":"definitions","line":256,"char":10053,"type":"identifier"},{"text":"IsEqual","line":257,"char":10074,"type":"identifier"},{"text":"equalToObject","line":257,"char":10082,"type":"identifier"},{"text":"ImmutableSet","line":258,"char":10109,"type":"identifier"},{"text":"RDotTxtEntry","line":258,"char":10123,"type":"identifier"},{"text":"of","line":258,"char":10136,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":259,"char":10160,"type":"identifier"},{"text":"IdType","line":259,"char":10177,"type":"identifier"},{"text":"INT","line":259,"char":10184,"type":"identifier"},{"text":"RType","line":259,"char":10189,"type":"identifier"},{"text":"DRAWABLE","line":259,"char":10195,"type":"identifier"},{"text":"IOException","line":263,"char":10292,"type":"identifier"},{"text":"ResourceParseException","line":263,"char":10305,"type":"identifier"},{"text":"ImmutableList","line":264,"char":10334,"type":"identifier"},{"text":"String","line":264,"char":10348,"type":"identifier"},{"text":"ImmutableList","line":264,"char":10364,"type":"identifier"},{"text":"String","line":264,"char":10379,"type":"identifier"},{"text":"builder","line":264,"char":10386,"type":"identifier"},{"text":"add","line":264,"char":10396,"type":"identifier"},{"text":"build","line":274,"char":10819,"type":"identifier"},{"text":"filesystem","line":276,"char":10833,"type":"identifier"},{"text":"writeLinesToPath","line":276,"char":10844,"type":"identifier"},{"text":"lines","line":276,"char":10861,"type":"identifier"},{"text":"Paths","line":276,"char":10868,"type":"identifier"},{"text":"get","line":276,"char":10874,"type":"identifier"},{"text":"MiniAapt","line":278,"char":10908,"type":"identifier"},{"text":"MiniAapt","line":278,"char":10928,"type":"identifier"},{"text":"resolver","line":279,"char":10946,"type":"identifier"},{"text":"filesystem","line":280,"char":10964,"type":"identifier"},{"text":"FakeSourcePath","line":281,"char":10988,"type":"identifier"},{"text":"filesystem","line":281,"char":11003,"type":"identifier"},{"text":"Paths","line":282,"char":11031,"type":"identifier"},{"text":"get","line":282,"char":11037,"type":"identifier"},{"text":"ImmutableSet","line":283,"char":11059,"type":"identifier"},{"text":"of","line":283,"char":11072,"type":"identifier"},{"text":"aapt","line":284,"char":11083,"type":"identifier"},{"text":"processDrawables","line":284,"char":11088,"type":"identifier"},{"text":"filesystem","line":284,"char":11105,"type":"identifier"},{"text":"Paths","line":284,"char":11117,"type":"identifier"},{"text":"get","line":284,"char":11123,"type":"identifier"},{"text":"Set","line":286,"char":11157,"type":"identifier"},{"text":"RDotTxtEntry","line":286,"char":11161,"type":"identifier"},{"text":"aapt","line":286,"char":11189,"type":"identifier"},{"text":"getResourceCollector","line":286,"char":11194,"type":"identifier"},{"text":"getResources","line":286,"char":11217,"type":"identifier"},{"text":"assertThat","line":288,"char":11238,"type":"identifier"},{"text":"definitions","line":289,"char":11258,"type":"identifier"},{"text":"IsEqual","line":290,"char":11279,"type":"identifier"},{"text":"equalToObject","line":290,"char":11287,"type":"identifier"},{"text":"ImmutableSet","line":291,"char":11314,"type":"identifier"},{"text":"RDotTxtEntry","line":291,"char":11328,"type":"identifier"},{"text":"of","line":291,"char":11341,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":292,"char":11365,"type":"identifier"},{"text":"IdType","line":292,"char":11382,"type":"identifier"},{"text":"INT","line":292,"char":11389,"type":"identifier"},{"text":"RType","line":292,"char":11394,"type":"identifier"},{"text":"DRAWABLE","line":292,"char":11400,"type":"identifier"},{"text":"expected","line":295,"char":11452,"type":"identifier"},{"text":"ResourceParseException","line":295,"char":11463,"type":"identifier"},{"text":"IOException","line":296,"char":11540,"type":"identifier"},{"text":"ResourceParseException","line":296,"char":11553,"type":"identifier"},{"text":"ImmutableList","line":297,"char":11582,"type":"identifier"},{"text":"String","line":297,"char":11596,"type":"identifier"},{"text":"ImmutableList","line":297,"char":11612,"type":"identifier"},{"text":"String","line":297,"char":11627,"type":"identifier"},{"text":"builder","line":297,"char":11634,"type":"identifier"},{"text":"add","line":297,"char":11644,"type":"identifier"},{"text":"build","line":302,"char":11819,"type":"identifier"},{"text":"filesystem","line":304,"char":11833,"type":"identifier"},{"text":"writeLinesToPath","line":304,"char":11844,"type":"identifier"},{"text":"lines","line":304,"char":11861,"type":"identifier"},{"text":"Paths","line":304,"char":11868,"type":"identifier"},{"text":"get","line":304,"char":11874,"type":"identifier"},{"text":"MiniAapt","line":306,"char":11899,"type":"identifier"},{"text":"MiniAapt","line":306,"char":11919,"type":"identifier"},{"text":"resolver","line":307,"char":11937,"type":"identifier"},{"text":"filesystem","line":308,"char":11955,"type":"identifier"},{"text":"FakeSourcePath","line":309,"char":11979,"type":"identifier"},{"text":"filesystem","line":309,"char":11994,"type":"identifier"},{"text":"Paths","line":310,"char":12022,"type":"identifier"},{"text":"get","line":310,"char":12028,"type":"identifier"},{"text":"ImmutableSet","line":311,"char":12050,"type":"identifier"},{"text":"of","line":311,"char":12063,"type":"identifier"},{"text":"aapt","line":312,"char":12074,"type":"identifier"},{"text":"processValuesFile","line":312,"char":12079,"type":"identifier"},{"text":"filesystem","line":312,"char":12097,"type":"identifier"},{"text":"Paths","line":312,"char":12109,"type":"identifier"},{"text":"get","line":312,"char":12115,"type":"identifier"},{"text":"expected","line":315,"char":12148,"type":"identifier"},{"text":"ResourceParseException","line":315,"char":12159,"type":"identifier"},{"text":"IOException","line":316,"char":12236,"type":"identifier"},{"text":"ResourceParseException","line":316,"char":12249,"type":"identifier"},{"text":"ImmutableList","line":317,"char":12278,"type":"identifier"},{"text":"String","line":317,"char":12292,"type":"identifier"},{"text":"ImmutableList","line":317,"char":12308,"type":"identifier"},{"text":"String","line":317,"char":12323,"type":"identifier"},{"text":"builder","line":317,"char":12330,"type":"identifier"},{"text":"add","line":317,"char":12340,"type":"identifier"},{"text":"build","line":322,"char":12499,"type":"identifier"},{"text":"filesystem","line":324,"char":12513,"type":"identifier"},{"text":"writeLinesToPath","line":324,"char":12524,"type":"identifier"},{"text":"lines","line":324,"char":12541,"type":"identifier"},{"text":"Paths","line":324,"char":12548,"type":"identifier"},{"text":"get","line":324,"char":12554,"type":"identifier"},{"text":"MiniAapt","line":326,"char":12579,"type":"identifier"},{"text":"MiniAapt","line":326,"char":12599,"type":"identifier"},{"text":"resolver","line":327,"char":12617,"type":"identifier"},{"text":"filesystem","line":328,"char":12635,"type":"identifier"},{"text":"FakeSourcePath","line":329,"char":12659,"type":"identifier"},{"text":"filesystem","line":329,"char":12674,"type":"identifier"},{"text":"Paths","line":330,"char":12702,"type":"identifier"},{"text":"get","line":330,"char":12708,"type":"identifier"},{"text":"ImmutableSet","line":331,"char":12730,"type":"identifier"},{"text":"of","line":331,"char":12743,"type":"identifier"},{"text":"aapt","line":332,"char":12754,"type":"identifier"},{"text":"processValuesFile","line":332,"char":12759,"type":"identifier"},{"text":"filesystem","line":332,"char":12777,"type":"identifier"},{"text":"Paths","line":332,"char":12789,"type":"identifier"},{"text":"get","line":332,"char":12795,"type":"identifier"},{"text":"XPathExpressionException","line":336,"char":12873,"type":"identifier"},{"text":"IOException","line":336,"char":12899,"type":"identifier"},{"text":"ImmutableList","line":337,"char":12917,"type":"identifier"},{"text":"String","line":337,"char":12931,"type":"identifier"},{"text":"ImmutableList","line":337,"char":12947,"type":"identifier"},{"text":"String","line":337,"char":12962,"type":"identifier"},{"text":"builder","line":337,"char":12969,"type":"identifier"},{"text":"add","line":337,"char":12979,"type":"identifier"},{"text":"build","line":344,"char":13248,"type":"identifier"},{"text":"Path","line":346,"char":13262,"type":"identifier"},{"text":"Paths","line":346,"char":13278,"type":"identifier"},{"text":"get","line":346,"char":13284,"type":"identifier"},{"text":"filesystem","line":347,"char":13309,"type":"identifier"},{"text":"writeLinesToPath","line":347,"char":13320,"type":"identifier"},{"text":"lines","line":347,"char":13337,"type":"identifier"},{"text":"resource","line":347,"char":13344,"type":"identifier"},{"text":"MiniAapt","line":349,"char":13360,"type":"identifier"},{"text":"MiniAapt","line":349,"char":13380,"type":"identifier"},{"text":"resolver","line":350,"char":13398,"type":"identifier"},{"text":"filesystem","line":351,"char":13416,"type":"identifier"},{"text":"FakeSourcePath","line":352,"char":13440,"type":"identifier"},{"text":"filesystem","line":352,"char":13455,"type":"identifier"},{"text":"Paths","line":353,"char":13483,"type":"identifier"},{"text":"get","line":353,"char":13489,"type":"identifier"},{"text":"ImmutableSet","line":354,"char":13511,"type":"identifier"},{"text":"of","line":354,"char":13524,"type":"identifier"},{"text":"aapt","line":356,"char":13547,"type":"identifier"},{"text":"processXmlFile","line":356,"char":13552,"type":"identifier"},{"text":"filesystem","line":356,"char":13567,"type":"identifier"},{"text":"resource","line":356,"char":13579,"type":"identifier"},{"text":"ImmutableSet","line":356,"char":13589,"type":"identifier"},{"text":"builder","line":356,"char":13602,"type":"identifier"},{"text":"fail","line":357,"char":13620,"type":"identifier"},{"text":"ResourceParseException","line":358,"char":13691,"type":"identifier"},{"text":"e","line":358,"char":13714,"type":"identifier"},{"text":"assertThat","line":359,"char":13725,"type":"identifier"},{"text":"e","line":359,"char":13736,"type":"identifier"},{"text":"getMessage","line":359,"char":13738,"type":"identifier"},{"text":"containsString","line":359,"char":13752,"type":"identifier"},{"text":"IOException","line":364,"char":13868,"type":"identifier"},{"text":"XPathExpressionException","line":364,"char":13881,"type":"identifier"},{"text":"ImmutableList","line":365,"char":13912,"type":"identifier"},{"text":"String","line":365,"char":13926,"type":"identifier"},{"text":"ImmutableList","line":365,"char":13942,"type":"identifier"},{"text":"String","line":365,"char":13957,"type":"identifier"},{"text":"builder","line":365,"char":13964,"type":"identifier"},{"text":"add","line":365,"char":13974,"type":"identifier"},{"text":"build","line":372,"char":14249,"type":"identifier"},{"text":"Path","line":374,"char":14263,"type":"identifier"},{"text":"Paths","line":374,"char":14279,"type":"identifier"},{"text":"get","line":374,"char":14285,"type":"identifier"},{"text":"filesystem","line":375,"char":14310,"type":"identifier"},{"text":"writeLinesToPath","line":375,"char":14321,"type":"identifier"},{"text":"lines","line":375,"char":14338,"type":"identifier"},{"text":"resource","line":375,"char":14345,"type":"identifier"},{"text":"MiniAapt","line":377,"char":14361,"type":"identifier"},{"text":"MiniAapt","line":377,"char":14381,"type":"identifier"},{"text":"resolver","line":378,"char":14399,"type":"identifier"},{"text":"filesystem","line":379,"char":14417,"type":"identifier"},{"text":"FakeSourcePath","line":380,"char":14441,"type":"identifier"},{"text":"filesystem","line":380,"char":14456,"type":"identifier"},{"text":"Paths","line":381,"char":14484,"type":"identifier"},{"text":"get","line":381,"char":14490,"type":"identifier"},{"text":"ImmutableSet","line":382,"char":14512,"type":"identifier"},{"text":"of","line":382,"char":14525,"type":"identifier"},{"text":"aapt","line":384,"char":14548,"type":"identifier"},{"text":"processXmlFile","line":384,"char":14553,"type":"identifier"},{"text":"filesystem","line":384,"char":14568,"type":"identifier"},{"text":"resource","line":384,"char":14580,"type":"identifier"},{"text":"ImmutableSet","line":384,"char":14590,"type":"identifier"},{"text":"builder","line":384,"char":14603,"type":"identifier"},{"text":"fail","line":385,"char":14621,"type":"identifier"},{"text":"ResourceParseException","line":386,"char":14697,"type":"identifier"},{"text":"e","line":386,"char":14720,"type":"identifier"},{"text":"assertThat","line":387,"char":14731,"type":"identifier"},{"text":"e","line":387,"char":14742,"type":"identifier"},{"text":"getMessage","line":387,"char":14744,"type":"identifier"},{"text":"containsString","line":387,"char":14758,"type":"identifier"},{"text":"IOException","line":392,"char":14887,"type":"identifier"},{"text":"ResourceParseException","line":392,"char":14900,"type":"identifier"},{"text":"thrown","line":393,"char":14929,"type":"identifier"},{"text":"expect","line":393,"char":14936,"type":"identifier"},{"text":"ResourceParseException","line":393,"char":14943,"type":"identifier"},{"text":"thrown","line":394,"char":14978,"type":"identifier"},{"text":"expectMessage","line":394,"char":14985,"type":"identifier"},{"text":"ImmutableList","line":396,"char":15080,"type":"identifier"},{"text":"String","line":396,"char":15094,"type":"identifier"},{"text":"ImmutableList","line":396,"char":15110,"type":"identifier"},{"text":"String","line":396,"char":15125,"type":"identifier"},{"text":"builder","line":396,"char":15132,"type":"identifier"},{"text":"add","line":396,"char":15142,"type":"identifier"},{"text":"build","line":401,"char":15310,"type":"identifier"},{"text":"filesystem","line":403,"char":15324,"type":"identifier"},{"text":"writeLinesToPath","line":403,"char":15335,"type":"identifier"},{"text":"lines","line":403,"char":15352,"type":"identifier"},{"text":"Paths","line":403,"char":15359,"type":"identifier"},{"text":"get","line":403,"char":15365,"type":"identifier"},{"text":"MiniAapt","line":405,"char":15390,"type":"identifier"},{"text":"MiniAapt","line":405,"char":15410,"type":"identifier"},{"text":"resolver","line":406,"char":15428,"type":"identifier"},{"text":"filesystem","line":407,"char":15446,"type":"identifier"},{"text":"FakeSourcePath","line":408,"char":15470,"type":"identifier"},{"text":"filesystem","line":408,"char":15485,"type":"identifier"},{"text":"Paths","line":409,"char":15513,"type":"identifier"},{"text":"get","line":409,"char":15519,"type":"identifier"},{"text":"ImmutableSet","line":410,"char":15541,"type":"identifier"},{"text":"of","line":410,"char":15554,"type":"identifier"},{"text":"aapt","line":411,"char":15565,"type":"identifier"},{"text":"processValuesFile","line":411,"char":15570,"type":"identifier"},{"text":"filesystem","line":411,"char":15588,"type":"identifier"},{"text":"Paths","line":411,"char":15600,"type":"identifier"},{"text":"get","line":411,"char":15606,"type":"identifier"},{"text":"IOException","line":416,"char":15689,"type":"identifier"},{"text":"XPathExpressionException","line":416,"char":15702,"type":"identifier"},{"text":"ResourceParseException","line":416,"char":15728,"type":"identifier"},{"text":"filesystem","line":417,"char":15757,"type":"identifier"},{"text":"writeLinesToPath","line":417,"char":15768,"type":"identifier"},{"text":"RESOURCES","line":417,"char":15785,"type":"identifier"},{"text":"Paths","line":417,"char":15796,"type":"identifier"},{"text":"get","line":417,"char":15802,"type":"identifier"},{"text":"ImmutableList","line":419,"char":15829,"type":"identifier"},{"text":"String","line":419,"char":15843,"type":"identifier"},{"text":"ImmutableList","line":419,"char":15861,"type":"identifier"},{"text":"of","line":419,"char":15875,"type":"identifier"},{"text":"Path","line":424,"char":16003,"type":"identifier"},{"text":"Paths","line":424,"char":16018,"type":"identifier"},{"text":"get","line":424,"char":16024,"type":"identifier"},{"text":"filesystem","line":425,"char":16046,"type":"identifier"},{"text":"writeLinesToPath","line":425,"char":16057,"type":"identifier"},{"text":"rDotTxt","line":425,"char":16074,"type":"identifier"},{"text":"depRTxt","line":425,"char":16083,"type":"identifier"},{"text":"MiniAapt","line":427,"char":16098,"type":"identifier"},{"text":"MiniAapt","line":427,"char":16118,"type":"identifier"},{"text":"resolver","line":428,"char":16136,"type":"identifier"},{"text":"filesystem","line":429,"char":16154,"type":"identifier"},{"text":"FakeSourcePath","line":430,"char":16178,"type":"identifier"},{"text":"filesystem","line":430,"char":16193,"type":"identifier"},{"text":"Paths","line":431,"char":16221,"type":"identifier"},{"text":"get","line":431,"char":16227,"type":"identifier"},{"text":"ImmutableSet","line":432,"char":16249,"type":"identifier"},{"text":"of","line":432,"char":16262,"type":"identifier"},{"text":"depRTxt","line":432,"char":16265,"type":"identifier"},{"text":"ImmutableSet","line":433,"char":16280,"type":"identifier"},{"text":"Builder","line":433,"char":16293,"type":"identifier"},{"text":"RDotTxtEntry","line":433,"char":16301,"type":"identifier"},{"text":"ImmutableSet","line":433,"char":16328,"type":"identifier"},{"text":"builder","line":433,"char":16341,"type":"identifier"},{"text":"aapt","line":434,"char":16356,"type":"identifier"},{"text":"processXmlFile","line":434,"char":16361,"type":"identifier"},{"text":"filesystem","line":434,"char":16376,"type":"identifier"},{"text":"Paths","line":434,"char":16388,"type":"identifier"},{"text":"get","line":434,"char":16394,"type":"identifier"},{"text":"references","line":434,"char":16415,"type":"identifier"},{"text":"Set","line":436,"char":16433,"type":"identifier"},{"text":"RDotTxtEntry","line":436,"char":16437,"type":"identifier"},{"text":"aapt","line":436,"char":16461,"type":"identifier"},{"text":"verifyReferences","line":436,"char":16466,"type":"identifier"},{"text":"filesystem","line":436,"char":16483,"type":"identifier"},{"text":"references","line":436,"char":16495,"type":"identifier"},{"text":"build","line":436,"char":16506,"type":"identifier"},{"text":"assertEquals","line":438,"char":16521,"type":"identifier"},{"text":"ImmutableSet","line":439,"char":16543,"type":"identifier"},{"text":"RDotTxtEntry","line":439,"char":16557,"type":"identifier"},{"text":"of","line":439,"char":16570,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":440,"char":16590,"type":"identifier"},{"text":"IdType","line":440,"char":16607,"type":"identifier"},{"text":"INT","line":440,"char":16614,"type":"identifier"},{"text":"RType","line":440,"char":16619,"type":"identifier"},{"text":"DRAWABLE","line":440,"char":16625,"type":"identifier"},{"text":"missing","line":441,"char":16659,"type":"identifier"},{"text":"IOException","line":446,"char":16729,"type":"identifier"},{"text":"XPathExpressionException","line":446,"char":16742,"type":"identifier"},{"text":"ResourceParseException","line":446,"char":16768,"type":"identifier"},{"text":"thrown","line":447,"char":16797,"type":"identifier"},{"text":"expect","line":447,"char":16804,"type":"identifier"},{"text":"ResourceParseException","line":447,"char":16811,"type":"identifier"},{"text":"thrown","line":448,"char":16846,"type":"identifier"},{"text":"expectMessage","line":448,"char":16853,"type":"identifier"},{"text":"ImmutableList","line":450,"char":16921,"type":"identifier"},{"text":"String","line":450,"char":16935,"type":"identifier"},{"text":"ImmutableList","line":450,"char":16951,"type":"identifier"},{"text":"String","line":450,"char":16966,"type":"identifier"},{"text":"builder","line":450,"char":16973,"type":"identifier"},{"text":"add","line":450,"char":16983,"type":"identifier"},{"text":"build","line":456,"char":17203,"type":"identifier"},{"text":"Path","line":458,"char":17217,"type":"identifier"},{"text":"Paths","line":458,"char":17233,"type":"identifier"},{"text":"get","line":458,"char":17239,"type":"identifier"},{"text":"filesystem","line":459,"char":17264,"type":"identifier"},{"text":"writeLinesToPath","line":459,"char":17275,"type":"identifier"},{"text":"lines","line":459,"char":17292,"type":"identifier"},{"text":"resource","line":459,"char":17299,"type":"identifier"},{"text":"MiniAapt","line":461,"char":17315,"type":"identifier"},{"text":"MiniAapt","line":461,"char":17335,"type":"identifier"},{"text":"resolver","line":462,"char":17353,"type":"identifier"},{"text":"filesystem","line":463,"char":17371,"type":"identifier"},{"text":"FakeSourcePath","line":464,"char":17395,"type":"identifier"},{"text":"filesystem","line":464,"char":17410,"type":"identifier"},{"text":"Paths","line":465,"char":17438,"type":"identifier"},{"text":"get","line":465,"char":17444,"type":"identifier"},{"text":"ImmutableSet","line":466,"char":17466,"type":"identifier"},{"text":"of","line":466,"char":17479,"type":"identifier"},{"text":"aapt","line":467,"char":17490,"type":"identifier"},{"text":"processXmlFile","line":467,"char":17495,"type":"identifier"},{"text":"filesystem","line":467,"char":17510,"type":"identifier"},{"text":"resource","line":467,"char":17522,"type":"identifier"},{"text":"ImmutableSet","line":467,"char":17532,"type":"identifier"},{"text":"builder","line":467,"char":17545,"type":"identifier"},{"text":"IOException","line":471,"char":17625,"type":"identifier"},{"text":"ResourceParseException","line":471,"char":17638,"type":"identifier"},{"text":"filesystem","line":472,"char":17667,"type":"identifier"},{"text":"touch","line":472,"char":17678,"type":"identifier"},{"text":"Paths","line":472,"char":17684,"type":"identifier"},{"text":"get","line":472,"char":17690,"type":"identifier"},{"text":"filesystem","line":473,"char":17725,"type":"identifier"},{"text":"touch","line":473,"char":17736,"type":"identifier"},{"text":"Paths","line":473,"char":17742,"type":"identifier"},{"text":"get","line":473,"char":17748,"type":"identifier"},{"text":"filesystem","line":474,"char":17796,"type":"identifier"},{"text":"touch","line":474,"char":17807,"type":"identifier"},{"text":"Paths","line":474,"char":17813,"type":"identifier"},{"text":"get","line":474,"char":17819,"type":"identifier"},{"text":"filesystem","line":475,"char":17867,"type":"identifier"},{"text":"touch","line":475,"char":17878,"type":"identifier"},{"text":"Paths","line":475,"char":17884,"type":"identifier"},{"text":"get","line":475,"char":17890,"type":"identifier"},{"text":"filesystem","line":476,"char":17931,"type":"identifier"},{"text":"touch","line":476,"char":17942,"type":"identifier"},{"text":"Paths","line":476,"char":17948,"type":"identifier"},{"text":"get","line":476,"char":17954,"type":"identifier"},{"text":"filesystem","line":477,"char":18006,"type":"identifier"},{"text":"writeContentsToPath","line":477,"char":18017,"type":"identifier"},{"text":"Paths","line":482,"char":18203,"type":"identifier"},{"text":"get","line":482,"char":18209,"type":"identifier"},{"text":"MiniAapt","line":484,"char":18245,"type":"identifier"},{"text":"MiniAapt","line":484,"char":18265,"type":"identifier"},{"text":"resolver","line":485,"char":18283,"type":"identifier"},{"text":"filesystem","line":486,"char":18301,"type":"identifier"},{"text":"FakeSourcePath","line":487,"char":18325,"type":"identifier"},{"text":"filesystem","line":487,"char":18340,"type":"identifier"},{"text":"Paths","line":488,"char":18368,"type":"identifier"},{"text":"get","line":488,"char":18374,"type":"identifier"},{"text":"ImmutableSet","line":489,"char":18396,"type":"identifier"},{"text":"of","line":489,"char":18409,"type":"identifier"},{"text":"aapt","line":490,"char":18420,"type":"identifier"},{"text":"processFileNamesInDirectory","line":490,"char":18425,"type":"identifier"},{"text":"filesystem","line":490,"char":18453,"type":"identifier"},{"text":"Paths","line":490,"char":18465,"type":"identifier"},{"text":"get","line":490,"char":18471,"type":"identifier"},{"text":"aapt","line":491,"char":18497,"type":"identifier"},{"text":"processFileNamesInDirectory","line":491,"char":18502,"type":"identifier"},{"text":"filesystem","line":491,"char":18530,"type":"identifier"},{"text":"Paths","line":491,"char":18542,"type":"identifier"},{"text":"get","line":491,"char":18548,"type":"identifier"},{"text":"aapt","line":492,"char":18579,"type":"identifier"},{"text":"processFileNamesInDirectory","line":492,"char":18584,"type":"identifier"},{"text":"filesystem","line":492,"char":18612,"type":"identifier"},{"text":"Paths","line":492,"char":18624,"type":"identifier"},{"text":"get","line":492,"char":18630,"type":"identifier"},{"text":"aapt","line":493,"char":18662,"type":"identifier"},{"text":"processValues","line":493,"char":18667,"type":"identifier"},{"text":"filesystem","line":494,"char":18690,"type":"identifier"},{"text":"BuckEventBus","line":495,"char":18714,"type":"identifier"},{"text":"FakeClock","line":495,"char":18731,"type":"identifier"},{"text":"BuildId","line":495,"char":18749,"type":"identifier"},{"text":"Paths","line":496,"char":18771,"type":"identifier"},{"text":"get","line":496,"char":18777,"type":"identifier"},{"text":"assertEquals","line":498,"char":18802,"type":"identifier"},{"text":"ImmutableSet","line":499,"char":18824,"type":"identifier"},{"text":"RDotTxtEntry","line":499,"char":18838,"type":"identifier"},{"text":"of","line":499,"char":18851,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":500,"char":18871,"type":"identifier"},{"text":"IdType","line":500,"char":18888,"type":"identifier"},{"text":"INT","line":500,"char":18895,"type":"identifier"},{"text":"RType","line":500,"char":18900,"type":"identifier"},{"text":"DRAWABLE","line":500,"char":18906,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":501,"char":18941,"type":"identifier"},{"text":"IdType","line":501,"char":18958,"type":"identifier"},{"text":"INT","line":501,"char":18965,"type":"identifier"},{"text":"RType","line":501,"char":18970,"type":"identifier"},{"text":"DRAWABLE","line":501,"char":18976,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":502,"char":19017,"type":"identifier"},{"text":"IdType","line":502,"char":19034,"type":"identifier"},{"text":"INT","line":502,"char":19041,"type":"identifier"},{"text":"RType","line":502,"char":19046,"type":"identifier"},{"text":"TRANSITION","line":502,"char":19052,"type":"identifier"},{"text":"aapt","line":503,"char":19093,"type":"identifier"},{"text":"getResourceCollector","line":503,"char":19098,"type":"identifier"},{"text":"getResources","line":503,"char":19121,"type":"identifier"},{"text":"IOException","line":508,"char":19210,"type":"identifier"},{"text":"XPathExpressionException","line":508,"char":19223,"type":"identifier"},{"text":"ResourceParseException","line":508,"char":19249,"type":"identifier"},{"text":"ImmutableList","line":509,"char":19278,"type":"identifier"},{"text":"String","line":509,"char":19292,"type":"identifier"},{"text":"ImmutableList","line":509,"char":19308,"type":"identifier"},{"text":"String","line":509,"char":19323,"type":"identifier"},{"text":"builder","line":509,"char":19330,"type":"identifier"},{"text":"add","line":509,"char":19340,"type":"identifier"},{"text":"build","line":515,"char":19571,"type":"identifier"},{"text":"Path","line":517,"char":19585,"type":"identifier"},{"text":"Paths","line":517,"char":19601,"type":"identifier"},{"text":"get","line":517,"char":19607,"type":"identifier"},{"text":"filesystem","line":518,"char":19632,"type":"identifier"},{"text":"writeLinesToPath","line":518,"char":19643,"type":"identifier"},{"text":"lines","line":518,"char":19660,"type":"identifier"},{"text":"resource","line":518,"char":19667,"type":"identifier"},{"text":"MiniAapt","line":520,"char":19683,"type":"identifier"},{"text":"MiniAapt","line":520,"char":19703,"type":"identifier"},{"text":"resolver","line":521,"char":19721,"type":"identifier"},{"text":"filesystem","line":522,"char":19739,"type":"identifier"},{"text":"FakeSourcePath","line":523,"char":19763,"type":"identifier"},{"text":"filesystem","line":523,"char":19778,"type":"identifier"},{"text":"Paths","line":524,"char":19806,"type":"identifier"},{"text":"get","line":524,"char":19812,"type":"identifier"},{"text":"ImmutableSet","line":525,"char":19834,"type":"identifier"},{"text":"of","line":525,"char":19847,"type":"identifier"},{"text":"ImmutableSet","line":527,"char":19859,"type":"identifier"},{"text":"Builder","line":527,"char":19872,"type":"identifier"},{"text":"RDotTxtEntry","line":527,"char":19880,"type":"identifier"},{"text":"ImmutableSet","line":527,"char":19907,"type":"identifier"},{"text":"builder","line":527,"char":19920,"type":"identifier"},{"text":"aapt","line":528,"char":19935,"type":"identifier"},{"text":"processXmlFile","line":528,"char":19940,"type":"identifier"},{"text":"filesystem","line":528,"char":19955,"type":"identifier"},{"text":"Paths","line":528,"char":19967,"type":"identifier"},{"text":"get","line":528,"char":19973,"type":"identifier"},{"text":"references","line":528,"char":19994,"type":"identifier"},{"text":"assertEquals","line":530,"char":20012,"type":"identifier"},{"text":"references","line":531,"char":20034,"type":"identifier"},{"text":"build","line":531,"char":20045,"type":"identifier"},{"text":"ImmutableSet","line":532,"char":20062,"type":"identifier"},{"text":"RDotTxtEntry","line":532,"char":20076,"type":"identifier"},{"text":"of","line":532,"char":20089,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":533,"char":20109,"type":"identifier"},{"text":"IdType","line":533,"char":20126,"type":"identifier"},{"text":"INT","line":533,"char":20133,"type":"identifier"},{"text":"RType","line":533,"char":20138,"type":"identifier"},{"text":"STRING","line":533,"char":20144,"type":"identifier"},{"text":"IOException","line":538,"char":20242,"type":"identifier"},{"text":"XPathExpressionException","line":538,"char":20255,"type":"identifier"},{"text":"ResourceParseException","line":538,"char":20281,"type":"identifier"},{"text":"ImmutableList","line":539,"char":20310,"type":"identifier"},{"text":"String","line":539,"char":20324,"type":"identifier"},{"text":"ImmutableList","line":539,"char":20340,"type":"identifier"},{"text":"String","line":539,"char":20355,"type":"identifier"},{"text":"builder","line":539,"char":20362,"type":"identifier"},{"text":"add","line":539,"char":20372,"type":"identifier"},{"text":"build","line":553,"char":20923,"type":"identifier"},{"text":"filesystem","line":555,"char":20937,"type":"identifier"},{"text":"writeLinesToPath","line":555,"char":20948,"type":"identifier"},{"text":"lines","line":555,"char":20965,"type":"identifier"},{"text":"Paths","line":555,"char":20972,"type":"identifier"},{"text":"get","line":555,"char":20978,"type":"identifier"},{"text":"ImmutableList","line":557,"char":21003,"type":"identifier"},{"text":"String","line":557,"char":21017,"type":"identifier"},{"text":"ImmutableList","line":557,"char":21035,"type":"identifier"},{"text":"of","line":557,"char":21049,"type":"identifier"},{"text":"Path","line":571,"char":21600,"type":"identifier"},{"text":"Paths","line":571,"char":21615,"type":"identifier"},{"text":"get","line":571,"char":21621,"type":"identifier"},{"text":"filesystem","line":572,"char":21643,"type":"identifier"},{"text":"writeLinesToPath","line":572,"char":21654,"type":"identifier"},{"text":"rDotTxt","line":572,"char":21671,"type":"identifier"},{"text":"depRTxt","line":572,"char":21680,"type":"identifier"},{"text":"MiniAapt","line":574,"char":21695,"type":"identifier"},{"text":"MiniAapt","line":574,"char":21715,"type":"identifier"},{"text":"resolver","line":575,"char":21733,"type":"identifier"},{"text":"filesystem","line":576,"char":21751,"type":"identifier"},{"text":"FakeSourcePath","line":577,"char":21775,"type":"identifier"},{"text":"filesystem","line":577,"char":21790,"type":"identifier"},{"text":"Paths","line":578,"char":21818,"type":"identifier"},{"text":"get","line":578,"char":21824,"type":"identifier"},{"text":"ImmutableSet","line":579,"char":21846,"type":"identifier"},{"text":"of","line":579,"char":21859,"type":"identifier"},{"text":"depRTxt","line":579,"char":21862,"type":"identifier"},{"text":"aapt","line":581,"char":21891,"type":"identifier"},{"text":"processValuesFile","line":581,"char":21896,"type":"identifier"},{"text":"filesystem","line":581,"char":21914,"type":"identifier"},{"text":"Paths","line":581,"char":21926,"type":"identifier"},{"text":"get","line":581,"char":21932,"type":"identifier"},{"text":"aapt","line":582,"char":21956,"type":"identifier"},{"text":"resourceUnion","line":582,"char":21961,"type":"identifier"},{"text":"Set","line":584,"char":21983,"type":"identifier"},{"text":"RDotTxtEntry","line":584,"char":21987,"type":"identifier"},{"text":"aapt","line":584,"char":22013,"type":"identifier"},{"text":"getResourceCollector","line":584,"char":22018,"type":"identifier"},{"text":"getResources","line":584,"char":22041,"type":"identifier"},{"text":"assertEquals","line":586,"char":22062,"type":"identifier"},{"text":"ImmutableSet","line":587,"char":22084,"type":"identifier"},{"text":"RDotTxtEntry","line":587,"char":22098,"type":"identifier"},{"text":"of","line":587,"char":22111,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":588,"char":22131,"type":"identifier"},{"text":"IdType","line":588,"char":22148,"type":"identifier"},{"text":"INT","line":588,"char":22155,"type":"identifier"},{"text":"RType","line":588,"char":22160,"type":"identifier"},{"text":"STRING","line":588,"char":22166,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":589,"char":22208,"type":"identifier"},{"text":"IdType","line":589,"char":22225,"type":"identifier"},{"text":"INT","line":589,"char":22232,"type":"identifier"},{"text":"RType","line":589,"char":22237,"type":"identifier"},{"text":"ID","line":589,"char":22243,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":590,"char":22277,"type":"identifier"},{"text":"IdType","line":590,"char":22294,"type":"identifier"},{"text":"INT","line":590,"char":22301,"type":"identifier"},{"text":"RType","line":590,"char":22306,"type":"identifier"},{"text":"STYLE","line":590,"char":22312,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":591,"char":22352,"type":"identifier"},{"text":"IdType","line":591,"char":22369,"type":"identifier"},{"text":"INT_ARRAY","line":591,"char":22376,"type":"identifier"},{"text":"RType","line":591,"char":22387,"type":"identifier"},{"text":"STYLEABLE","line":591,"char":22393,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":592,"char":22441,"type":"identifier"},{"text":"IdType","line":592,"char":22458,"type":"identifier"},{"text":"INT","line":592,"char":22465,"type":"identifier"},{"text":"RType","line":592,"char":22470,"type":"identifier"},{"text":"STYLEABLE","line":592,"char":22476,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":593,"char":22532,"type":"identifier"},{"text":"IdType","line":593,"char":22549,"type":"identifier"},{"text":"INT","line":593,"char":22556,"type":"identifier"},{"text":"RType","line":593,"char":22561,"type":"identifier"},{"text":"STYLEABLE","line":593,"char":22567,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":594,"char":22623,"type":"identifier"},{"text":"IdType","line":594,"char":22640,"type":"identifier"},{"text":"INT","line":594,"char":22647,"type":"identifier"},{"text":"RType","line":594,"char":22652,"type":"identifier"},{"text":"STYLEABLE","line":594,"char":22658,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":595,"char":22714,"type":"identifier"},{"text":"IdType","line":595,"char":22731,"type":"identifier"},{"text":"INT","line":595,"char":22738,"type":"identifier"},{"text":"RType","line":595,"char":22743,"type":"identifier"},{"text":"ATTR","line":595,"char":22749,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":596,"char":22783,"type":"identifier"},{"text":"IdType","line":596,"char":22800,"type":"identifier"},{"text":"INT","line":596,"char":22807,"type":"identifier"},{"text":"RType","line":596,"char":22812,"type":"identifier"},{"text":"ATTR","line":596,"char":22818,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":597,"char":22852,"type":"identifier"},{"text":"IdType","line":597,"char":22869,"type":"identifier"},{"text":"INT","line":597,"char":22876,"type":"identifier"},{"text":"RType","line":597,"char":22881,"type":"identifier"},{"text":"ATTR","line":597,"char":22887,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":598,"char":22921,"type":"identifier"},{"text":"IdType","line":598,"char":22938,"type":"identifier"},{"text":"INT","line":598,"char":22945,"type":"identifier"},{"text":"RType","line":598,"char":22950,"type":"identifier"},{"text":"STRING","line":598,"char":22956,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":599,"char":22998,"type":"identifier"},{"text":"IdType","line":599,"char":23015,"type":"identifier"},{"text":"INT","line":599,"char":23022,"type":"identifier"},{"text":"RType","line":599,"char":23027,"type":"identifier"},{"text":"ID","line":599,"char":23033,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":600,"char":23067,"type":"identifier"},{"text":"IdType","line":600,"char":23084,"type":"identifier"},{"text":"INT","line":600,"char":23091,"type":"identifier"},{"text":"RType","line":600,"char":23096,"type":"identifier"},{"text":"STYLE","line":600,"char":23102,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":601,"char":23142,"type":"identifier"},{"text":"IdType","line":601,"char":23159,"type":"identifier"},{"text":"INT_ARRAY","line":601,"char":23166,"type":"identifier"},{"text":"RType","line":601,"char":23177,"type":"identifier"},{"text":"STYLEABLE","line":601,"char":23183,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":602,"char":23231,"type":"identifier"},{"text":"IdType","line":602,"char":23248,"type":"identifier"},{"text":"INT","line":602,"char":23255,"type":"identifier"},{"text":"RType","line":602,"char":23260,"type":"identifier"},{"text":"STYLEABLE","line":602,"char":23266,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":603,"char":23322,"type":"identifier"},{"text":"IdType","line":603,"char":23339,"type":"identifier"},{"text":"INT","line":603,"char":23346,"type":"identifier"},{"text":"RType","line":603,"char":23351,"type":"identifier"},{"text":"STYLEABLE","line":603,"char":23357,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":604,"char":23413,"type":"identifier"},{"text":"IdType","line":604,"char":23430,"type":"identifier"},{"text":"INT","line":604,"char":23437,"type":"identifier"},{"text":"RType","line":604,"char":23442,"type":"identifier"},{"text":"STYLEABLE","line":604,"char":23448,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":605,"char":23504,"type":"identifier"},{"text":"IdType","line":605,"char":23521,"type":"identifier"},{"text":"INT","line":605,"char":23528,"type":"identifier"},{"text":"RType","line":605,"char":23533,"type":"identifier"},{"text":"ATTR","line":605,"char":23539,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":606,"char":23573,"type":"identifier"},{"text":"IdType","line":606,"char":23590,"type":"identifier"},{"text":"INT","line":606,"char":23597,"type":"identifier"},{"text":"RType","line":606,"char":23602,"type":"identifier"},{"text":"ATTR","line":606,"char":23608,"type":"identifier"},{"text":"FakeRDotTxtEntry","line":607,"char":23642,"type":"identifier"},{"text":"IdType","line":607,"char":23659,"type":"identifier"},{"text":"INT","line":607,"char":23666,"type":"identifier"},{"text":"RType","line":607,"char":23671,"type":"identifier"},{"text":"ATTR","line":607,"char":23677,"type":"identifier"},{"text":"resources","line":608,"char":23708,"type":"identifier"}]},"highlight":{"content":["\\\"?>\",\n        \"<resources>\",\n        \"<string name=\\\"<em>hello</em>\\\"><em>Hello</em>, <xliff:g id=\\\"name\\\">%s</xliff:g>!</string",".<RDotTxtEntry>of(\n            new FakeRDotTxtEntry(IdType.INT, RType.STRING, \"<em>hello</em>\"),\n            new","-buck-resource-map=\\\"true\\\">\",\n        \"<string name=\\\"<em>hello</em>\\\"><em>Hello</em>, <xliff:g id=\\\"name\\\">%s","\\\">\",\n        \"<string name=\\\"<em>hello</em>\\\"><em>Hello</em>, <xliff:g id=\\\"name\\\">%s</xliff:g>!</string>\",\n        \"</resources"," FakeRDotTxtEntry(IdType.INT, RType.STRING, \"<em>hello</em>\")));\n  }\n\n  @Test\n  public void testParsingAndroidDrawables"]}}]}}