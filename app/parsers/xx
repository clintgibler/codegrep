{"took":2,"timed_out":false,"_shards":{"total":5,"successful":5,"skipped":0,"failed":0},"hits":{"total":1,"max_score":7.9242125,"hits":[{"_index":"codesearch","_type":"code","_id":"AWQ13OPyWR86b8n9jGGm","_version":1,"_score":7.9242125,"_source":{"filename":"/Users/syam/work/codesearch/src/main/java/in/syam/codesearch/Document.java","content":"package in.syam.codesearch;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport com.google.common.base.Charsets;\nimport com.google.common.collect.ImmutableListMultimap;\nimport org.antlr.v4.runtime.Token;\nimport com.google.common.io.Files;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonWriter;\nimport com.google.common.hash.Hashing;\n\npublic class Document {\n    private final String content;\n    private final String filename;\n    private final String repository;\n    private final String language;\n    private final String id;\n    private ImmutableListMultimap<String, Token> tokens;\n    private ImmutableListMultimap<String, String> features;\n\n    private static final TypeAdapter<Document> ADAPTER = new TypeAdapter<Document>() {\n        @Override\n        public void write(JsonWriter writer, Document doc) throws IOException {\n            writer.beginObject();\n            writer.name(\"filename\").value(doc.getFilename());\n            writer.name(\"content\").value(doc.getContent());\n            writer.name(\"repository\").value(doc.getRepository());\n            writer.name(\"language\").value(doc.getLanguage());\n            ImmutableListMultimap<String, Token> tokens = doc.getTokens();\n            writer.name(\"tokens\");\n            writer.beginArray();\n            for (final String type : tokens.keySet()) {\n                for (final Token t : tokens.get(type)) {\n                    writer.beginObject();\n                    writer.name(\"text\").value(t.getText());\n                    writer.name(\"line\").value(t.getLine());\n                    writer.name(\"char\").value(t.getCharPositionInLine());\n                    writer.name(\"type\").value(type);\n                    writer.endObject();\n                }\n            }\n            writer.endArray();\n            writer.endObject();\n        }\n\n        @Override\n        public Document read(JsonReader reader) throws IOException {\n            throw new UnsupportedOperationException(\"Not implemented: Document should never be loaded from JSON\");\n        }\n    };\n\n    public Document(Path path, String repo, String lang) throws IOException {\n        content = Files.toString(path.toFile(), Charsets.UTF_8);\n        filename = path.toString();\n        id = Hashing.sha1().hashString(content, Charsets.UTF_8).toString();\n        repository = repo;\n        language = lang;\n        features = ImmutableListMultimap.of();\n        tokens = ImmutableListMultimap.of();\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public String getFilename() {\n        return filename;\n    }\n\n    public String getRepository() {\n        return repository;\n    }\n\n    public String getLanguage() {\n        return language;\n    }\n\n    public ImmutableListMultimap<String, Token> getTokens() {\n        return tokens;\n    }\n\n    public ImmutableListMultimap<String, String> getFeatures() {\n        return features;\n    }\n\n    public void setTokens(ImmutableListMultimap<String, Token> tokens) {\n        this.tokens = tokens;\n    }\n\n    public void setFeatures(ImmutableListMultimap<String, String> features) {\n        this.features = features;\n    }\n\n    public String toJson() {\n        return ADAPTER.toJson(this);\n    }\n}\n","repository":"https://github.com/syamp.git","tokens":[[{"text":"codesearch","line":1,"char":16,"type":"package"}],[{"text":"id","line":19,"char":25,"type":"variable"},{"text":"content","line":15,"char":25,"type":"variable"},{"text":"features","line":21,"char":50,"type":"variable"},{"text":"ADAPTER","line":23,"char":47,"type":"variable"},{"text":"tokens","line":20,"char":49,"type":"variable"},{"text":"language","line":18,"char":25,"type":"variable"},{"text":"filename","line":16,"char":25,"type":"variable"},{"text":"repository","line":17,"char":25,"type":"variable"},{"text":"tokens","line":31,"char":49,"type":"variable"}]]}}]}}